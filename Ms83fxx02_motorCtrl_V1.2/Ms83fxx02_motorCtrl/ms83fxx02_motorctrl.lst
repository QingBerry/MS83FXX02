

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Oct 22 21:25:09 2017

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataCOMMON,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,delta=2
    15                           	psect	text1648,local,class=CODE,delta=2
    16                           	psect	text1649,local,class=CODE,delta=2
    17                           	psect	text1664,local,class=CODE,delta=2
    18                           	psect	text1666,local,class=CODE,delta=2
    19                           	psect	text1667,local,class=CODE,delta=2
    20                           	psect	text1670,local,class=CODE,delta=2
    21                           	psect	text1696,local,class=CODE,delta=2
    22                           	psect	text1697,local,class=CODE,delta=2
    23                           	psect	text1700,local,class=CODE,delta=2
    24                           	psect	text1701,local,class=CODE,delta=2
    25                           	psect	text1705,local,class=CODE,delta=2
    26                           	psect	text1706,local,class=CODE,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text1726,local,class=CODE,delta=2
    29                           	psect	pa_nodes,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  000A                     
    32                           	psect	idataBANK0
    33  0000                     __pidataBANK0:	
    34                           
    35                           	psect	idataCOMMON
    36  0000                     __pidataCOMMON:	
    37  001F                     _ADCON0	set	31
    38  001E                     _ADRESH	set	30
    39  0015                     _CCP1CON	set	21
    40  0013                     _CCPR1L	set	19
    41  0019                     _CMCON0	set	25
    42  000B                     _INTCON	set	11
    43  001B                     _MSCKCON	set	27
    44  000C                     _PIR1	set	12
    45  000D                     _PIR2	set	13
    46  0005                     _PORTA	set	5
    47  0007                     _PORTC	set	7
    48  0010                     _T1CON	set	16
    49  0012                     _T2CON	set	18
    50  000F                     _TMR1H	set	15
    51  000E                     _TMR1L	set	14
    52  0011                     _TMR2	set	17
    53  0018                     _WDTCON	set	24
    54  00F8                     _ADON	set	248
    55  005F                     _GIE	set	95
    56  00F9                     _GO_DONE	set	249
    57  005C                     _INTE	set	92
    58  0059                     _INTF	set	89
    59  005B                     _PAIE	set	91
    60  0058                     _PAIF	set	88
    61  003C                     _PC4	set	60
    62  005E                     _PEIE	set	94
    63  00DD                     _T2CKSRC	set	221
    64  0060                     _TMR1IF	set	96
    65  0080                     _TMR1ON	set	128
    66  0061                     _TMR2IF	set	97
    67  0092                     _TMR2ON	set	146
    68  009F                     _ADCON1	set	159
    69  009E                     _ADRESL	set	158
    70  0091                     _ANSEL	set	145
    71  009B                     _EEADR	set	155
    72  009C                     _EECON1	set	156
    73  009A                     _EEDAT	set	154
    74  0096                     _IOCA	set	150
    75  008F                     _OSCCON	set	143
    76  008E                     _PCON	set	142
    77  008C                     _PIE1	set	140
    78  008D                     _PIE2	set	141
    79  0092                     _PR2	set	146
    80  0085                     _TRISA	set	133
    81  0087                     _TRISC	set	135
    82  0089                     _WPD	set	137
    83  0095                     _WPUA	set	149
    84  048D                     _ANSEL5	set	1165
    85  040E                     _INTEDG	set	1038
    86  04E0                     _RD	set	1248
    87  0460                     _TMR1IE	set	1120
    88  043C                     _TRISC4	set	1084
    89  04E8                     _WR	set	1256
    90  04E2                     _WREN1	set	1250
    91  04E4                     _WREN2	set	1252
    92  04E5                     _WREN3	set	1253
    93  010E                     _PR3L	set	270
    94  0114                     _PR4L	set	276
    95  011A                     _PR5L	set	282
    96  010F                     _PWM3CR0	set	271
    97  0110                     _PWM3CR1	set	272
    98  0115                     _PWM4CR0	set	277
    99  0116                     _PWM4CR1	set	278
   100  011B                     _PWM5CR0	set	283
   101  011C                     _PWM5CR1	set	284
   102  0111                     _T3CKDIV	set	273
   103  0117                     _T4CKDIV	set	279
   104  011D                     _T5CKDIV	set	285
   105  010D                     _TMR3H	set	269
   106  010C                     _TMR3L	set	268
   107  0113                     _TMR4H	set	275
   108  0112                     _TMR4L	set	274
   109  0119                     _TMR5H	set	281
   110  0118                     _TMR5L	set	280
   111  0881                     _TMR3IE	set	2177
   112  0880                     _TMR3IF	set	2176
   113  0882                     _TMR3ON	set	2178
   114  08B1                     _TMR4IE	set	2225
   115  08B0                     _TMR4IF	set	2224
   116  08B2                     _TMR4ON	set	2226
   117  08E1                     _TMR5IE	set	2273
   118  08E0                     _TMR5IF	set	2272
   119  08E2                     _TMR5ON	set	2274
   120                           
   121                           	psect	cinit
   122  0724                     start_initialization:	
   123  0724  3020               	movlw	low __pbssBANK0
   124                           
   125                           ; Clear objects allocated to COMMON
   126  0725  01F9               	clrf	__pbssCOMMON& (0+127)
   127  0726  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   128  0727  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   129                           
   130                           ; Clear objects allocated to BANK0
   131  0728  1383               	bcf	3,7	;select IRP bank0
   132  0729  0084               	movwf	4
   133  072A  3036               	movlw	low (__pbssBANK0+22)
   134  072B  118A  2750         	fcall	clear_ram
   135                           
   136                           ;initializer for _motor_timing_running_flag
   137  072D  3001               	movlw	1
   138  072E  00C8               	movwf	__pdataBANK0& (0+127)
   139                           
   140                           ;initializer for _key_status
   141  072F  00FC               	movwf	__pdataCOMMON& (0+127)
   142                           
   143                           ;initializer for _motor_status
   144  0730  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   145  0731                     end_of_initialization:	
   146                           ;End of C runtime variable initialization code
   147                           
   148  0731  0183               	clrf	3
   149  0732  118A  2DAB         	ljmp	_main	;jump to C main() function
   150                           
   151                           	psect	bssCOMMON
   152  0079                     __pbssCOMMON:	
   153  0079                     _key_press:	
   154  0079                     	ds	1
   155  007A                     _key_release:	
   156  007A                     	ds	1
   157  007B                     _motor_intr_count:	
   158  007B                     	ds	1
   159                           
   160                           	psect	dataCOMMON
   161  007C                     __pdataCOMMON:	
   162  007C                     _key_status:	
   163  007C                     	ds	1
   164  007D                     _motor_status:	
   165  007D                     	ds	1
   166                           
   167                           	psect	bssBANK0
   168  0020                     __pbssBANK0:	
   169  0020                     _battery_value:	
   170  0020                     	ds	10
   171  002A                     _charge_time_out:	
   172  002A                     	ds	2
   173  002C                     _motor_oper_record:	
   174  002C                     	ds	2
   175  002E                     _battery_sample_count:	
   176  002E                     	ds	1
   177  002F                     _charge_detect_count:	
   178  002F                     	ds	1
   179  0030                     _device_mode:	
   180  0030                     	ds	1
   181  0031                     _key_press_flag:	
   182  0031                     	ds	1
   183  0032                     _key_press_time_count:	
   184  0032                     	ds	1
   185  0033                     _led_timer_int_status:	
   186  0033                     	ds	1
   187  0034                     _run_limit_int_status:	
   188  0034                     	ds	1
   189  0035                     _switch_mode_time_out:	
   190  0035                     	ds	1
   191                           
   192                           	psect	dataBANK0
   193  0048                     __pdataBANK0:	
   194  0048                     _motor_timing_running_flag:	
   195  0048                     	ds	1
   196                           
   197                           	psect	clrtext
   198  0750                     clear_ram:	
   199                           ;	Called with FSR containing the base address, and
   200                           ;	W with the last address+1
   201                           
   202  0750  0064               	clrwdt	;clear the watchdog before getting into this loop
   203  0751                     clrloop:	
   204  0751  0180               	clrf	0	;clear RAM location pointed to by FSR
   205  0752  0A84               	incf	4,f	;increment pointer
   206  0753  0604               	xorwf	4,w	;XOR with final address
   207  0754  1903               	btfsc	3,2	;have we reached the end yet?
   208  0755  3400               	retlw	0	;all done for this memory range, return
   209  0756  0604               	xorwf	4,w	;XOR again to restore value
   210  0757  2F51               	goto	clrloop	;do the next byte
   211                           
   212                           	psect	cstackCOMMON
   213  0070                     __pcstackCOMMON:	
   214  0070                     ?_LED_Init:	
   215  0070                     ?_KEY_Init:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_Charge_Init:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_ADC_Init:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_EEPROM_Init:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_Battery_Detect:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_LED_VoltageChargeOutput:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_EEPROM_RestoreDeviceModeData:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_EEPROM_RestoreMotorData:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_Motor_HandleStatusChangeEvt:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ?_ChargeTimer_ResetCount:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_SetDeviceMode:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_KEY_DeInit:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ?_Motor_Stop:	
   252                           ; 0 bytes @ 0x0
   253                           
   254  0070                     ?_Motor_SetStatus:	
   255                           ; 0 bytes @ 0x0
   256                           
   257  0070                     ?_MotorOperationTimer_Stop:	
   258                           ; 0 bytes @ 0x0
   259                           
   260  0070                     ?_ChargeCtrl_Output:	
   261                           ; 0 bytes @ 0x0
   262                           
   263  0070                     ?_ChargeTimer_Cmd:	
   264                           ; 0 bytes @ 0x0
   265                           
   266  0070                     ?_ChargeTimer_INTConfig:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_KEY_IntrHandler:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0070                     ??_KEY_IntrHandler:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_DebounceTimer_IntrHandler:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_SwitchModeTimer_IntrHandler:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ??_SwitchModeTimer_IntrHandler:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_ChargeTimer_IntrHandler:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ??_ChargeTimer_IntrHandler:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_MotorOperTimer_IntrHandler:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_LEDTimer_IntrHandler:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ??_LEDTimer_IntrHandler:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_ChargeDetect_IntrHandler:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_SwitchModeTimer_Cmd:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0070                     ?_SwitchModeTimer_INTConfig:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  0070                     ?_Board_Init:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  0070                     ?_Driver_Init:	
   312                           ; 0 bytes @ 0x0
   313                           
   314  0070                     ?_charge_control:	
   315                           ; 0 bytes @ 0x0
   316                           
   317  0070                     ?_main:	
   318                           ; 0 bytes @ 0x0
   319                           
   320  0070                     ?_ISR:	
   321                           ; 0 bytes @ 0x0
   322                           
   323  0070                     ?_ChargeDetect_Init:	
   324                           ; 0 bytes @ 0x0
   325                           
   326  0070                     ?_ChargeCtrl_Init:	
   327                           ; 0 bytes @ 0x0
   328                           
   329  0070                     ?_TIM1_Init:	
   330                           ; 0 bytes @ 0x0
   331                           
   332  0070                     ??_TIM1_Init:	
   333                           ; 0 bytes @ 0x0
   334                           
   335  0070                     ?_LED_DisplayRunLimit:	
   336                           ; 0 bytes @ 0x0
   337                           
   338  0070                     ?_LED_CloseMotorStatus:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0070                     ?_LED_UnderVoltageOutput:	
   342                           ; 0 bytes @ 0x0
   343                           
   344  0070                     ?_LEDTimer_Cmd:	
   345                           ; 0 bytes @ 0x0
   346                           
   347  0070                     ?_LEDTimer_INTConfig:	
   348                           ; 0 bytes @ 0x0
   349                           
   350  0070                     ?_Motor_Init:	
   351                           ; 0 bytes @ 0x0
   352                           
   353  0070                     ?_Motor_Start:	
   354                           ; 0 bytes @ 0x0
   355                           
   356  0070                     ?_MotorOperationTimer_Init:	
   357                           ; 0 bytes @ 0x0
   358                           
   359  0070                     ?_EEPROM_StoreMotorData:	
   360                           ; 0 bytes @ 0x0
   361                           
   362  0070                     ?_EEPROM_SetFlag:	
   363                           ; 0 bytes @ 0x0
   364                           
   365  0070                     ?_EEPROM_StoreModeData:	
   366                           ; 0 bytes @ 0x0
   367                           
   368  0070                     ?i1_GPIO_WriteBit:	
   369                           ; 0 bytes @ 0x0
   370                           
   371  0070                     ?i1_LED_CloseMotorStatus:	
   372                           ; 0 bytes @ 0x0
   373                           
   374  0070                     ?i1_Motor_Init:	
   375                           ; 0 bytes @ 0x0
   376                           
   377  0070                     ??i1_Motor_Init:	
   378                           ; 0 bytes @ 0x0
   379                           
   380  0070                     ?i1_Motor_SetStatus:	
   381                           ; 0 bytes @ 0x0
   382                           
   383  0070                     ??i1_Motor_SetStatus:	
   384                           ; 0 bytes @ 0x0
   385                           
   386  0070                     ?i1_Motor_Stop:	
   387                           ; 0 bytes @ 0x0
   388                           
   389  0070                     ??i1_Motor_CheckRunLimit:	
   390                           ; 0 bytes @ 0x0
   391                           
   392  0070                     ?i1_MotorOperationTimer_Init:	
   393                           ; 0 bytes @ 0x0
   394                           
   395  0070                     ??i1_MotorOperationTimer_Init:	
   396                           ; 0 bytes @ 0x0
   397                           
   398  0070                     ?i1_MotorOperationTimer_Stop:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ??i1_MotorOperationTimer_Stop:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ??i1_GetDeviceMode:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_EEPROM_GetFlag:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_Motor_GetStatus:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_ChargeDetect_GetStatus:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_GetDeviceMode:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_SwitchModeTimer_GetINTStatus:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_EEPROM_Read:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_KEY_GetReleaseStatus:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_KEY_GetPressStatus:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_LEDTimer_GetOperationStatus:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_LEDTimer_GetINTStatus:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_LEDTimer_GetRunLimitINTStatus:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_Motor_CheckRunLimit:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?___lbmod:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?i1_GPIO_ReadInputDataBit:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?i1_Motor_CheckRunLimit:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?i1_GetDeviceMode:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ___lbmod@divisor:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     i1GPIO_WriteBit@GPIO_Pin:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     i1GPIO_ReadInputDataBit@GPIO_Pin:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     i1Motor_Init@status:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     i1Motor_SetStatus@status:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     i1MotorOperationTimer_Init@time:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 1 bytes @ 0x0
   475  0070                     	ds	1
   476  0071                     ??___lbmod:	
   477  0071                     ??i1_GPIO_ReadInputDataBit:	
   478                           ; 0 bytes @ 0x1
   479                           
   480  0071                     i1GPIO_WriteBit@BitVal:	
   481                           ; 0 bytes @ 0x1
   482                           
   483  0071                     i1GPIO_ReadInputDataBit@bitstatus:	
   484                           ; 1 bytes @ 0x1
   485                           
   486                           
   487                           ; 1 bytes @ 0x1
   488  0071                     	ds	1
   489  0072                     ??i1_GPIO_WriteBit:	
   490  0072                     ___lbmod@dividend:	
   491                           ; 0 bytes @ 0x2
   492                           
   493  0072                     i1GPIO_WriteBit@GPIOx:	
   494                           ; 1 bytes @ 0x2
   495                           
   496  0072                     i1GPIO_ReadInputDataBit@GPIOx:	
   497                           ; 1 bytes @ 0x2
   498                           
   499                           
   500                           ; 1 bytes @ 0x2
   501  0072                     	ds	1
   502  0073                     ??_DebounceTimer_IntrHandler:	
   503  0073                     ??_ChargeDetect_IntrHandler:	
   504                           ; 0 bytes @ 0x3
   505                           
   506  0073                     ??i1_LED_CloseMotorStatus:	
   507                           ; 0 bytes @ 0x3
   508                           
   509  0073                     ??i1_Motor_Stop:	
   510                           ; 0 bytes @ 0x3
   511                           
   512  0073                     ___lbmod@counter:	
   513                           ; 0 bytes @ 0x3
   514                           
   515                           
   516                           ; 1 bytes @ 0x3
   517  0073                     	ds	1
   518  0074                     ___lbmod@rem:	
   519                           
   520                           ; 1 bytes @ 0x4
   521  0074                     	ds	1
   522  0075                     ??_MotorOperTimer_IntrHandler:	
   523  0075                     ??_ISR:	
   524                           ; 0 bytes @ 0x5
   525                           
   526                           
   527                           ; 0 bytes @ 0x5
   528  0075                     	ds	4
   529                           
   530                           	psect	cstackBANK0
   531  0036                     __pcstackBANK0:	
   532  0036                     ??_ADC_Init:	
   533  0036                     ??_Motor_GetStatus:	
   534                           ; 0 bytes @ 0x0
   535                           
   536  0036                     ??_ChargeTimer_ResetCount:	
   537                           ; 0 bytes @ 0x0
   538                           
   539  0036                     ??_SetDeviceMode:	
   540                           ; 0 bytes @ 0x0
   541                           
   542  0036                     ??_Motor_SetStatus:	
   543                           ; 0 bytes @ 0x0
   544                           
   545  0036                     ??_MotorOperationTimer_Stop:	
   546                           ; 0 bytes @ 0x0
   547                           
   548  0036                     ??_ChargeTimer_Cmd:	
   549                           ; 0 bytes @ 0x0
   550                           
   551  0036                     ??_ChargeTimer_INTConfig:	
   552                           ; 0 bytes @ 0x0
   553                           
   554  0036                     ??_GetDeviceMode:	
   555                           ; 0 bytes @ 0x0
   556                           
   557  0036                     ?_GPIO_Init:	
   558                           ; 0 bytes @ 0x0
   559                           
   560  0036                     ?_GPIO_INTConfig:	
   561                           ; 0 bytes @ 0x0
   562                           
   563  0036                     ?_EEPROM_Write:	
   564                           ; 0 bytes @ 0x0
   565                           
   566  0036                     ??_SwitchModeTimer_Cmd:	
   567                           ; 0 bytes @ 0x0
   568                           
   569  0036                     ??_SwitchModeTimer_INTConfig:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0036                     ??_SwitchModeTimer_GetINTStatus:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0036                     ??_Board_Init:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0036                     ??_EEPROM_Read:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0036                     ??_KEY_GetReleaseStatus:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0036                     ??_KEY_GetPressStatus:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0036                     ??_LEDTimer_Cmd:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0036                     ??_LEDTimer_INTConfig:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0036                     ??_LEDTimer_GetOperationStatus:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0036                     ??_LEDTimer_GetINTStatus:	
   597                           ; 0 bytes @ 0x0
   598                           
   599  0036                     ??_LEDTimer_GetRunLimitINTStatus:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0036                     ??_Motor_Init:	
   603                           ; 0 bytes @ 0x0
   604                           
   605  0036                     ??_Motor_CheckRunLimit:	
   606                           ; 0 bytes @ 0x0
   607                           
   608  0036                     ??_MotorOperationTimer_Init:	
   609                           ; 0 bytes @ 0x0
   610                           
   611  0036                     ?_delay_us:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0036                     ?_GPIO_ReadInputDataBit:	
   615                           ; 0 bytes @ 0x0
   616                           
   617  0036                     ?_ChargeTimer_GetCount:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0036                     ?___lwdiv:	
   621                           ; 2 bytes @ 0x0
   622                           
   623  0036                     EEPROM_Read@addr:	
   624                           ; 2 bytes @ 0x0
   625                           
   626  0036                     EEPROM_Write@data:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0036                     GPIO_Init@GPIO_InitStruct:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0036                     GPIO_ReadInputDataBit@GPIO_Pin:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0036                     GPIO_INTConfig@GPIO_Pin:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0036                     LEDTimer_Cmd@NewState:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0036                     LEDTimer_INTConfig@NewState:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0036                     Motor_Init@status:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0036                     Motor_SetStatus@status:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0036                     MotorOperationTimer_Init@time:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0036                     SetDeviceMode@mode:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0036                     SwitchModeTimer_Cmd@NewState:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0036                     SwitchModeTimer_INTConfig@NewState:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0036                     ChargeTimer_Cmd@NewState:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0036                     ChargeTimer_INTConfig@NewState:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0036                     delay_us@delay_us:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0036                     ___lwdiv@divisor:	
   672                           ; 2 bytes @ 0x0
   673                           
   674                           
   675                           ; 2 bytes @ 0x0
   676  0036                     	ds	1
   677  0037                     ??_GPIO_Init:	
   678  0037                     ??_GPIO_ReadInputDataBit:	
   679                           ; 0 bytes @ 0x1
   680                           
   681  0037                     ??_EEPROM_Write:	
   682                           ; 0 bytes @ 0x1
   683                           
   684  0037                     EEPROM_Read@data:	
   685                           ; 0 bytes @ 0x1
   686                           
   687  0037                     EEPROM_Write@addr:	
   688                           ; 1 bytes @ 0x1
   689                           
   690  0037                     GPIO_Init@GPIOx:	
   691                           ; 1 bytes @ 0x1
   692                           
   693  0037                     GPIO_ReadInputDataBit@bitstatus:	
   694                           ; 1 bytes @ 0x1
   695                           
   696  0037                     GPIO_INTConfig@NewState:	
   697                           ; 1 bytes @ 0x1
   698                           
   699  0037                     ADC_Init@channel:	
   700                           ; 1 bytes @ 0x1
   701                           
   702                           
   703                           ; 1 bytes @ 0x1
   704  0037                     	ds	1
   705  0038                     ??_EEPROM_Init:	
   706  0038                     ??_ChargeTimer_GetCount:	
   707                           ; 0 bytes @ 0x2
   708                           
   709  0038                     ??_EEPROM_GetFlag:	
   710                           ; 0 bytes @ 0x2
   711                           
   712  0038                     ??_EEPROM_RestoreDeviceModeData:	
   713                           ; 0 bytes @ 0x2
   714                           
   715  0038                     ??_EEPROM_RestoreMotorData:	
   716                           ; 0 bytes @ 0x2
   717                           
   718  0038                     ??_KEY_DeInit:	
   719                           ; 0 bytes @ 0x2
   720                           
   721  0038                     ??_GPIO_INTConfig:	
   722                           ; 0 bytes @ 0x2
   723                           
   724  0038                     ??_EEPROM_StoreMotorData:	
   725                           ; 0 bytes @ 0x2
   726                           
   727  0038                     ??_delay_us:	
   728                           ; 0 bytes @ 0x2
   729                           
   730  0038                     ??_EEPROM_SetFlag:	
   731                           ; 0 bytes @ 0x2
   732                           
   733  0038                     ??_EEPROM_StoreModeData:	
   734                           ; 0 bytes @ 0x2
   735                           
   736  0038                     GPIO_ReadInputDataBit@GPIOx:	
   737                           ; 0 bytes @ 0x2
   738                           
   739  0038                     GPIO_INTConfig@GPIOx:	
   740                           ; 1 bytes @ 0x2
   741                           
   742  0038                     KEY_DeInit@GPIO_InitStruct:	
   743                           ; 1 bytes @ 0x2
   744                           
   745  0038                     delay_us@i:	
   746                           ; 2 bytes @ 0x2
   747                           
   748  0038                     ___lwdiv@dividend:	
   749                           ; 2 bytes @ 0x2
   750                           
   751                           
   752                           ; 2 bytes @ 0x2
   753  0038                     	ds	1
   754  0039                     ??_KEY_Init:	
   755  0039                     ?_GPIO_WriteBit:	
   756                           ; 0 bytes @ 0x3
   757                           
   758  0039                     ??_ChargeDetect_GetStatus:	
   759                           ; 0 bytes @ 0x3
   760                           
   761  0039                     ??_ChargeDetect_Init:	
   762                           ; 0 bytes @ 0x3
   763                           
   764  0039                     GPIO_WriteBit@GPIO_Pin:	
   765                           ; 0 bytes @ 0x3
   766                           
   767  0039                     ChargeDetect_Init@GPIO_InitStruct:	
   768                           ; 1 bytes @ 0x3
   769                           
   770  0039                     ChargeDetect_GetStatus@i:	
   771                           ; 2 bytes @ 0x3
   772                           
   773  0039                     KEY_Init@GPIO_InitStruct:	
   774                           ; 2 bytes @ 0x3
   775                           
   776                           
   777                           ; 2 bytes @ 0x3
   778  0039                     	ds	1
   779  003A                     ??___lwdiv:	
   780  003A                     ?_ADC_ReadData:	
   781                           ; 0 bytes @ 0x4
   782                           
   783  003A                     GPIO_WriteBit@BitVal:	
   784                           ; 2 bytes @ 0x4
   785                           
   786  003A                     ___lwdiv@quotient:	
   787                           ; 1 bytes @ 0x4
   788                           
   789                           
   790                           ; 2 bytes @ 0x4
   791  003A                     	ds	1
   792  003B                     ??_GPIO_WriteBit:	
   793  003B                     GPIO_WriteBit@GPIOx:	
   794                           ; 0 bytes @ 0x5
   795                           
   796                           
   797                           ; 1 bytes @ 0x5
   798  003B                     	ds	1
   799  003C                     ??_LED_Init:	
   800  003C                     ??_LED_VoltageChargeOutput:	
   801                           ; 0 bytes @ 0x6
   802                           
   803  003C                     ??_Motor_Stop:	
   804                           ; 0 bytes @ 0x6
   805                           
   806  003C                     ??_ChargeCtrl_Output:	
   807                           ; 0 bytes @ 0x6
   808                           
   809  003C                     ??_ChargeCtrl_Init:	
   810                           ; 0 bytes @ 0x6
   811                           
   812  003C                     ?_LED_DisplayMotorStatus:	
   813                           ; 0 bytes @ 0x6
   814                           
   815  003C                     ??_LED_DisplayRunLimit:	
   816                           ; 0 bytes @ 0x6
   817                           
   818  003C                     ??_LED_CloseMotorStatus:	
   819                           ; 0 bytes @ 0x6
   820                           
   821  003C                     ??_LED_UnderVoltageOutput:	
   822                           ; 0 bytes @ 0x6
   823                           
   824  003C                     ??_ADC_ReadData:	
   825                           ; 0 bytes @ 0x6
   826                           
   827  003C                     ChargeCtrl_Output@BitVal:	
   828                           ; 0 bytes @ 0x6
   829                           
   830  003C                     LED_DisplayMotorStatus@GPIO_Pin:	
   831                           ; 1 bytes @ 0x6
   832                           
   833  003C                     LED_VoltageChargeOutput@BitVal:	
   834                           ; 1 bytes @ 0x6
   835                           
   836  003C                     LED_UnderVoltageOutput@BitVal:	
   837                           ; 1 bytes @ 0x6
   838                           
   839  003C                     ___lwdiv@counter:	
   840                           ; 1 bytes @ 0x6
   841                           
   842  003C                     ChargeCtrl_Init@GPIO_InitStruct:	
   843                           ; 1 bytes @ 0x6
   844                           
   845  003C                     LED_Init@GPIO_InitStruct:	
   846                           ; 2 bytes @ 0x6
   847                           
   848                           
   849                           ; 2 bytes @ 0x6
   850  003C                     	ds	1
   851  003D                     ??_LED_DisplayMotorStatus:	
   852  003D                     LED_DisplayMotorStatus@GPIOx:	
   853                           ; 0 bytes @ 0x7
   854                           
   855  003D                     ADC_ReadData@channel:	
   856                           ; 1 bytes @ 0x7
   857                           
   858                           
   859                           ; 1 bytes @ 0x7
   860  003D                     	ds	1
   861  003E                     ??_Charge_Init:	
   862  003E                     ??_Driver_Init:	
   863                           ; 0 bytes @ 0x8
   864                           
   865  003E                     ??_Motor_Start:	
   866                           ; 0 bytes @ 0x8
   867                           
   868  003E                     Motor_Start@status:	
   869                           ; 0 bytes @ 0x8
   870                           
   871  003E                     ADC_ReadData@battery_value:	
   872                           ; 1 bytes @ 0x8
   873                           
   874                           
   875                           ; 2 bytes @ 0x8
   876  003E                     	ds	1
   877  003F                     ??_Motor_HandleStatusChangeEvt:	
   878  003F                     Motor_HandleStatusChangeEvt@status:	
   879                           ; 0 bytes @ 0x9
   880                           
   881                           
   882                           ; 1 bytes @ 0x9
   883  003F                     	ds	1
   884  0040                     ??_Battery_Detect:	
   885                           
   886                           ; 0 bytes @ 0xA
   887  0040                     	ds	2
   888  0042                     Battery_Detect@mode:	
   889                           
   890                           ; 1 bytes @ 0xC
   891  0042                     	ds	1
   892  0043                     Battery_Detect@i:	
   893                           
   894                           ; 1 bytes @ 0xD
   895  0043                     	ds	1
   896  0044                     Battery_Detect@adc_data:	
   897                           
   898                           ; 2 bytes @ 0xE
   899  0044                     	ds	2
   900  0046                     ??_charge_control:	
   901  0046                     charge_control@charge_count:	
   902                           ; 0 bytes @ 0x10
   903                           
   904                           
   905                           ; 2 bytes @ 0x10
   906  0046                     	ds	2
   907  0048                     ??_main:	
   908                           
   909                           	psect	maintext
   910  05AB                     __pmaintext:	
   911                           ; 0 bytes @ 0x12
   912 ;;Data sizes: Strings 0, constant 0, data 3, bss 25, persistent 0 stack 0
   913 ;;Auto spaces:   Size  Autos    Used
   914 ;; COMMON          14      9      14
   915 ;; BANK0           80     18      41
   916 ;; BANK1           80      0       0
   917 ;; BANK2           80      0       0
   918 ;;
   919 ;; Pointer list with targets:
   920 ;; ?_ChargeTimer_GetCount	unsigned int  size(1) Largest target is 0
   921 ;;
   922 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   923 ;;
   924 ;; ?_ADC_ReadData	unsigned short  size(1) Largest target is 0
   925 ;;
   926 ;; GPIO_Init@GPIO_InitStruct	PTR struct . size(1) Largest target is 2
   927 ;;		 -> LED_Init@GPIO_InitStruct(BANK0[2]), KEY_Init@GPIO_InitStruct(BANK0[2]), KEY_DeInit@GPIO_InitStruct(BANK0[2]), Ch
      +argeCtrl_Init@GPIO_InitStruct(BANK0[2]), 
   928 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(BANK0[2]), 
   929 ;;
   930 ;;
   931 ;; Critical Paths under _main in COMMON
   932 ;;
   933 ;;   None.
   934 ;;
   935 ;; Critical Paths under _ISR in COMMON
   936 ;;
   937 ;;   _MotorOperTimer_IntrHandler->___lbmod
   938 ;;   i1_LED_CloseMotorStatus->i1_GPIO_WriteBit
   939 ;;   _ChargeDetect_IntrHandler->i1_GPIO_ReadInputDataBit
   940 ;;   _DebounceTimer_IntrHandler->i1_GPIO_ReadInputDataBit
   941 ;;
   942 ;; Critical Paths under _main in BANK0
   943 ;;
   944 ;;   _main->_charge_control
   945 ;;   _Motor_HandleStatusChangeEvt->_Motor_Start
   946 ;;   _charge_control->_Battery_Detect
   947 ;;   _Driver_Init->_LED_Init
   948 ;;   _Motor_Start->_LED_DisplayMotorStatus
   949 ;;   _Battery_Detect->_ADC_ReadData
   950 ;;   _Charge_Init->_ChargeCtrl_Init
   951 ;;   _EEPROM_StoreModeData->_EEPROM_Write
   952 ;;   _EEPROM_SetFlag->_EEPROM_Write
   953 ;;   _ADC_ReadData->_delay_us
   954 ;;   _EEPROM_StoreMotorData->_EEPROM_Write
   955 ;;   _LED_UnderVoltageOutput->_GPIO_WriteBit
   956 ;;   _LED_CloseMotorStatus->_GPIO_WriteBit
   957 ;;   _LED_DisplayRunLimit->_GPIO_WriteBit
   958 ;;   _LED_DisplayMotorStatus->_GPIO_WriteBit
   959 ;;   _ChargeCtrl_Init->_GPIO_WriteBit
   960 ;;   _ChargeDetect_Init->_GPIO_ReadInputDataBit
   961 ;;   _ChargeDetect_Init->_GPIO_INTConfig
   962 ;;   _ChargeCtrl_Output->_GPIO_WriteBit
   963 ;;   _KEY_DeInit->_GPIO_Init
   964 ;;   _ChargeDetect_GetStatus->_GPIO_ReadInputDataBit
   965 ;;   _EEPROM_RestoreMotorData->_EEPROM_Read
   966 ;;   _EEPROM_RestoreDeviceModeData->_EEPROM_Read
   967 ;;   _EEPROM_GetFlag->_EEPROM_Read
   968 ;;   _LED_VoltageChargeOutput->_GPIO_WriteBit
   969 ;;   _EEPROM_Init->_EEPROM_Write
   970 ;;   _KEY_Init->_GPIO_INTConfig
   971 ;;   _LED_Init->_GPIO_WriteBit
   972 ;;   _GPIO_WriteBit->_GPIO_ReadInputDataBit
   973 ;;
   974 ;; Critical Paths under _ISR in BANK0
   975 ;;
   976 ;;   None.
   977 ;;
   978 ;; Critical Paths under _main in BANK1
   979 ;;
   980 ;;   None.
   981 ;;
   982 ;; Critical Paths under _ISR in BANK1
   983 ;;
   984 ;;   None.
   985 ;;
   986 ;; Critical Paths under _main in BANK2
   987 ;;
   988 ;;   None.
   989 ;;
   990 ;; Critical Paths under _ISR in BANK2
   991 ;;
   992 ;;   None.
   993 ;;
   994 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   995 ;;
   996 ;;
   997 ;;Call Graph Tables:
   998 ;;
   999 ;; ---------------------------------------------------------------------------------
  1000 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1001 ;; ---------------------------------------------------------------------------------
  1002 ;; (0) _main                                                 0     0      0    7179
  1003 ;;                        _EEPROM_Init
  1004 ;;                     _EEPROM_GetFlag
  1005 ;;       _EEPROM_RestoreDeviceModeData
  1006 ;;            _EEPROM_RestoreMotorData
  1007 ;;                         _Board_Init
  1008 ;;                        _Driver_Init
  1009 ;;                    _Motor_GetStatus
  1010 ;;        _Motor_HandleStatusChangeEvt
  1011 ;;             _ChargeDetect_GetStatus
  1012 ;;             _ChargeTimer_ResetCount
  1013 ;;                      _SetDeviceMode
  1014 ;;                     _Battery_Detect
  1015 ;;                           _LED_Init
  1016 ;;                         _KEY_DeInit
  1017 ;;                         _Motor_Stop
  1018 ;;                    _Motor_SetStatus
  1019 ;;           _MotorOperationTimer_Stop
  1020 ;;                  _ChargeCtrl_Output
  1021 ;;            _LED_VoltageChargeOutput
  1022 ;;                           _ADC_Init
  1023 ;;                    _ChargeTimer_Cmd
  1024 ;;              _ChargeTimer_INTConfig
  1025 ;;                     _charge_control
  1026 ;;                      _GetDeviceMode
  1027 ;; ---------------------------------------------------------------------------------
  1028 ;; (1) _Motor_HandleStatusChangeEvt                          1     1      0    1125
  1029 ;;                                              9 BANK0      1     1      0
  1030 ;;                _Motor_CheckRunLimit
  1031 ;;               _KEY_GetReleaseStatus
  1032 ;;                    _Motor_SetStatus
  1033 ;;                        _Motor_Start
  1034 ;;           _MotorOperationTimer_Stop
  1035 ;;           _MotorOperationTimer_Init
  1036 ;;       _SwitchModeTimer_GetINTStatus
  1037 ;;                         _Motor_Stop
  1038 ;;                _SwitchModeTimer_Cmd
  1039 ;;          _SwitchModeTimer_INTConfig
  1040 ;;        _LEDTimer_GetOperationStatus
  1041 ;;                       _LEDTimer_Cmd
  1042 ;;                 _LEDTimer_INTConfig
  1043 ;;      _LEDTimer_GetRunLimitINTStatus
  1044 ;;                _LED_DisplayRunLimit
  1045 ;;                 _KEY_GetPressStatus
  1046 ;;               _LED_CloseMotorStatus
  1047 ;; ---------------------------------------------------------------------------------
  1048 ;; (1) _charge_control                                       2     2      0    1522
  1049 ;;                                             16 BANK0      2     2      0
  1050 ;;               _ChargeTimer_GetCount
  1051 ;;                     _Battery_Detect
  1052 ;;            _LED_VoltageChargeOutput
  1053 ;;                      _GPIO_WriteBit
  1054 ;; ---------------------------------------------------------------------------------
  1055 ;; (1) _Driver_Init                                          0     0      0    1764
  1056 ;;                           _LED_Init
  1057 ;;                           _KEY_Init
  1058 ;;                        _Charge_Init
  1059 ;;                           _ADC_Init
  1060 ;;                        _EEPROM_Init
  1061 ;; ---------------------------------------------------------------------------------
  1062 ;; (2) _Motor_Start                                          1     1      0     374
  1063 ;;                                              8 BANK0      1     1      0
  1064 ;;             _LED_DisplayMotorStatus
  1065 ;;                         _Motor_Init
  1066 ;;                _SwitchModeTimer_Cmd
  1067 ;;          _SwitchModeTimer_INTConfig
  1068 ;; ---------------------------------------------------------------------------------
  1069 ;; (1) _Motor_Stop                                           0     0      0     154
  1070 ;;               _LED_CloseMotorStatus
  1071 ;; ---------------------------------------------------------------------------------
  1072 ;; (2) _Battery_Detect                                       6     6      0    1125
  1073 ;;                                             10 BANK0      6     6      0
  1074 ;;                       _ADC_ReadData
  1075 ;;                            ___lwdiv
  1076 ;;                      _GetDeviceMode
  1077 ;;                     _EEPROM_SetFlag
  1078 ;;               _EEPROM_StoreModeData
  1079 ;;              _EEPROM_StoreMotorData
  1080 ;;             _LED_UnderVoltageOutput
  1081 ;;        _LEDTimer_GetOperationStatus
  1082 ;;                       _LEDTimer_Cmd
  1083 ;;                 _LEDTimer_INTConfig
  1084 ;;              _LEDTimer_GetINTStatus
  1085 ;;              _GPIO_ReadInputDataBit
  1086 ;;                      _SetDeviceMode
  1087 ;;                      _GPIO_WriteBit
  1088 ;; ---------------------------------------------------------------------------------
  1089 ;; (2) _Charge_Init                                          0     0      0     835
  1090 ;;                  _ChargeDetect_Init
  1091 ;;                    _ChargeCtrl_Init
  1092 ;; ---------------------------------------------------------------------------------
  1093 ;; (3) _EEPROM_StoreModeData                                 0     0      0      44
  1094 ;;                       _EEPROM_Write
  1095 ;; ---------------------------------------------------------------------------------
  1096 ;; (3) _EEPROM_SetFlag                                       0     0      0      44
  1097 ;;                       _EEPROM_Write
  1098 ;; ---------------------------------------------------------------------------------
  1099 ;; (3) _ADC_ReadData                                         6     4      2     116
  1100 ;;                                              4 BANK0      6     4      2
  1101 ;;                           _delay_us
  1102 ;; ---------------------------------------------------------------------------------
  1103 ;; (3) _EEPROM_StoreMotorData                                0     0      0      44
  1104 ;;                       _EEPROM_Write
  1105 ;; ---------------------------------------------------------------------------------
  1106 ;; (3) _LED_UnderVoltageOutput                               1     1      0     176
  1107 ;;                                              6 BANK0      1     1      0
  1108 ;;                      _GPIO_WriteBit
  1109 ;; ---------------------------------------------------------------------------------
  1110 ;; (2) _LED_CloseMotorStatus                                 0     0      0     154
  1111 ;;                      _GPIO_WriteBit
  1112 ;; ---------------------------------------------------------------------------------
  1113 ;; (2) _LED_DisplayRunLimit                                  0     0      0     267
  1114 ;;              _GPIO_ReadInputDataBit
  1115 ;;                      _GPIO_WriteBit
  1116 ;; ---------------------------------------------------------------------------------
  1117 ;; (3) _LED_DisplayMotorStatus                               2     1      1     198
  1118 ;;                                              6 BANK0      2     1      1
  1119 ;;                      _GPIO_WriteBit
  1120 ;; ---------------------------------------------------------------------------------
  1121 ;; (3) _ChargeCtrl_Init                                      2     2      0     361
  1122 ;;                                              6 BANK0      2     2      0
  1123 ;;                          _GPIO_Init
  1124 ;;                      _GPIO_WriteBit
  1125 ;; ---------------------------------------------------------------------------------
  1126 ;; (3) _ChargeDetect_Init                                    2     2      0     474
  1127 ;;                                              3 BANK0      2     2      0
  1128 ;;                          _GPIO_Init
  1129 ;;              _GPIO_ReadInputDataBit
  1130 ;;                     _GPIO_INTConfig
  1131 ;; ---------------------------------------------------------------------------------
  1132 ;; (1) _ChargeCtrl_Output                                    1     1      0     176
  1133 ;;                                              6 BANK0      1     1      0
  1134 ;;                      _GPIO_WriteBit
  1135 ;; ---------------------------------------------------------------------------------
  1136 ;; (1) _MotorOperationTimer_Stop                             0     0      0       0
  1137 ;;                _Motor_CheckRunLimit
  1138 ;; ---------------------------------------------------------------------------------
  1139 ;; (1) _KEY_DeInit                                           2     2      0     207
  1140 ;;                                              2 BANK0      2     2      0
  1141 ;;                          _GPIO_Init
  1142 ;; ---------------------------------------------------------------------------------
  1143 ;; (1) _ChargeDetect_GetStatus                               2     2      0     136
  1144 ;;                                              3 BANK0      2     2      0
  1145 ;;              _GPIO_ReadInputDataBit
  1146 ;; ---------------------------------------------------------------------------------
  1147 ;; (1) _EEPROM_RestoreMotorData                              0     0      0      46
  1148 ;;                        _EEPROM_Read
  1149 ;; ---------------------------------------------------------------------------------
  1150 ;; (1) _EEPROM_RestoreDeviceModeData                         0     0      0      46
  1151 ;;                        _EEPROM_Read
  1152 ;; ---------------------------------------------------------------------------------
  1153 ;; (1) _EEPROM_GetFlag                                       0     0      0      46
  1154 ;;                        _EEPROM_Read
  1155 ;; ---------------------------------------------------------------------------------
  1156 ;; (2) _LED_VoltageChargeOutput                              1     1      0     176
  1157 ;;                                              6 BANK0      1     1      0
  1158 ;;                      _GPIO_WriteBit
  1159 ;; ---------------------------------------------------------------------------------
  1160 ;; (2) _EEPROM_Init                                          0     0      0      44
  1161 ;;                       _EEPROM_Write
  1162 ;; ---------------------------------------------------------------------------------
  1163 ;; (2) _KEY_Init                                             2     2      0     361
  1164 ;;                                              3 BANK0      2     2      0
  1165 ;;                          _GPIO_Init
  1166 ;;                     _GPIO_INTConfig
  1167 ;; ---------------------------------------------------------------------------------
  1168 ;; (1) _LED_Init                                             2     2      0     502
  1169 ;;                                              6 BANK0      2     2      0
  1170 ;;                          _GPIO_Init
  1171 ;;                      _GPIO_WriteBit
  1172 ;; ---------------------------------------------------------------------------------
  1173 ;; (3) ___lwdiv                                              7     3      4     162
  1174 ;;                                              0 BANK0      7     3      4
  1175 ;; ---------------------------------------------------------------------------------
  1176 ;; (4) _delay_us                                             4     2      2      47
  1177 ;;                                              0 BANK0      4     2      2
  1178 ;; ---------------------------------------------------------------------------------
  1179 ;; (2) _SwitchModeTimer_GetINTStatus                         0     0      0       0
  1180 ;; ---------------------------------------------------------------------------------
  1181 ;; (2) _MotorOperationTimer_Init                             1     1      0      44
  1182 ;;                                              0 BANK0      1     1      0
  1183 ;; ---------------------------------------------------------------------------------
  1184 ;; (2) _Motor_CheckRunLimit                                  0     0      0       0
  1185 ;; ---------------------------------------------------------------------------------
  1186 ;; (2) _SwitchModeTimer_INTConfig                            1     1      0      22
  1187 ;;                                              0 BANK0      1     1      0
  1188 ;; ---------------------------------------------------------------------------------
  1189 ;; (2) _SwitchModeTimer_Cmd                                  1     1      0      22
  1190 ;;                                              0 BANK0      1     1      0
  1191 ;; ---------------------------------------------------------------------------------
  1192 ;; (3) _Motor_Init                                           1     1      0      88
  1193 ;;                                              0 BANK0      1     1      0
  1194 ;; ---------------------------------------------------------------------------------
  1195 ;; (2) _LEDTimer_GetRunLimitINTStatus                        0     0      0       0
  1196 ;; ---------------------------------------------------------------------------------
  1197 ;; (3) _LEDTimer_GetINTStatus                                0     0      0       0
  1198 ;; ---------------------------------------------------------------------------------
  1199 ;; (3) _LEDTimer_GetOperationStatus                          0     0      0       0
  1200 ;; ---------------------------------------------------------------------------------
  1201 ;; (3) _LEDTimer_INTConfig                                   1     1      0      22
  1202 ;;                                              0 BANK0      1     1      0
  1203 ;; ---------------------------------------------------------------------------------
  1204 ;; (3) _LEDTimer_Cmd                                         1     1      0      22
  1205 ;;                                              0 BANK0      1     1      0
  1206 ;; ---------------------------------------------------------------------------------
  1207 ;; (2) _KEY_GetPressStatus                                   0     0      0       0
  1208 ;; ---------------------------------------------------------------------------------
  1209 ;; (2) _KEY_GetReleaseStatus                                 0     0      0       0
  1210 ;; ---------------------------------------------------------------------------------
  1211 ;; (2) _EEPROM_Read                                          2     2      0      46
  1212 ;;                                              0 BANK0      2     2      0
  1213 ;; ---------------------------------------------------------------------------------
  1214 ;; (4) _EEPROM_Write                                         2     1      1      44
  1215 ;;                                              0 BANK0      2     1      1
  1216 ;; ---------------------------------------------------------------------------------
  1217 ;; (4) _GPIO_INTConfig                                       3     1      2     154
  1218 ;;                                              0 BANK0      3     1      2
  1219 ;; ---------------------------------------------------------------------------------
  1220 ;; (3) _GPIO_ReadInputDataBit                                3     2      1     113
  1221 ;;                                              0 BANK0      3     2      1
  1222 ;; ---------------------------------------------------------------------------------
  1223 ;; (2) _GPIO_Init                                            2     1      1     154
  1224 ;;                                              0 BANK0      2     1      1
  1225 ;; ---------------------------------------------------------------------------------
  1226 ;; (1) _GetDeviceMode                                        0     0      0       0
  1227 ;; ---------------------------------------------------------------------------------
  1228 ;; (1) _ChargeTimer_INTConfig                                1     1      0      22
  1229 ;;                                              0 BANK0      1     1      0
  1230 ;; ---------------------------------------------------------------------------------
  1231 ;; (1) _ChargeTimer_Cmd                                      1     1      0      22
  1232 ;;                                              0 BANK0      1     1      0
  1233 ;; ---------------------------------------------------------------------------------
  1234 ;; (1) _Motor_SetStatus                                      1     1      0      22
  1235 ;;                                              0 BANK0      1     1      0
  1236 ;; ---------------------------------------------------------------------------------
  1237 ;; (3) _SetDeviceMode                                        1     1      0      22
  1238 ;;                                              0 BANK0      1     1      0
  1239 ;; ---------------------------------------------------------------------------------
  1240 ;; (1) _ChargeTimer_ResetCount                               0     0      0       0
  1241 ;; ---------------------------------------------------------------------------------
  1242 ;; (1) _Motor_GetStatus                                      0     0      0       0
  1243 ;; ---------------------------------------------------------------------------------
  1244 ;; (2) _GPIO_WriteBit                                        3     1      2     154
  1245 ;;                                              3 BANK0      3     1      2
  1246 ;;              _GPIO_ReadInputDataBit (ARG)
  1247 ;; ---------------------------------------------------------------------------------
  1248 ;; (2) _ChargeTimer_GetCount                                 2     0      2       0
  1249 ;;                                              0 BANK0      2     0      2
  1250 ;; ---------------------------------------------------------------------------------
  1251 ;; (1) _ADC_Init                                             2     2      0      22
  1252 ;;                                              0 BANK0      2     2      0
  1253 ;; ---------------------------------------------------------------------------------
  1254 ;; (1) _Board_Init                                           0     0      0       0
  1255 ;; ---------------------------------------------------------------------------------
  1256 ;; Estimated maximum stack depth 4
  1257 ;; ---------------------------------------------------------------------------------
  1258 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1259 ;; ---------------------------------------------------------------------------------
  1260 ;; (5) _ISR                                                  4     4      0    1923
  1261 ;;                                              5 COMMON     4     4      0
  1262 ;;                    _KEY_IntrHandler
  1263 ;;          _DebounceTimer_IntrHandler
  1264 ;;                    i1_GetDeviceMode
  1265 ;;        _SwitchModeTimer_IntrHandler
  1266 ;;            _ChargeTimer_IntrHandler
  1267 ;;         _MotorOperTimer_IntrHandler
  1268 ;;               _LEDTimer_IntrHandler
  1269 ;;           _ChargeDetect_IntrHandler
  1270 ;; ---------------------------------------------------------------------------------
  1271 ;; (6) _MotorOperTimer_IntrHandler                           0     0      0    1181
  1272 ;;              i1_Motor_CheckRunLimit
  1273 ;;                            ___lbmod
  1274 ;;         i1_MotorOperationTimer_Init
  1275 ;;                       i1_Motor_Stop
  1276 ;;         i1_MotorOperationTimer_Stop
  1277 ;;                  i1_Motor_SetStatus
  1278 ;;                       i1_Motor_Init
  1279 ;; ---------------------------------------------------------------------------------
  1280 ;; (7) i1_Motor_Stop                                         0     0      0     511
  1281 ;;             i1_LED_CloseMotorStatus
  1282 ;; ---------------------------------------------------------------------------------
  1283 ;; (7) i1_MotorOperationTimer_Stop                           0     0      0       0
  1284 ;;              i1_Motor_CheckRunLimit
  1285 ;; ---------------------------------------------------------------------------------
  1286 ;; (8) i1_LED_CloseMotorStatus                               0     0      0     511
  1287 ;;                    i1_GPIO_WriteBit
  1288 ;; ---------------------------------------------------------------------------------
  1289 ;; (6) _ChargeDetect_IntrHandler                             0     0      0     371
  1290 ;;            i1_GPIO_ReadInputDataBit
  1291 ;; ---------------------------------------------------------------------------------
  1292 ;; (6) _DebounceTimer_IntrHandler                            0     0      0     371
  1293 ;;            i1_GPIO_ReadInputDataBit
  1294 ;; ---------------------------------------------------------------------------------
  1295 ;; (6) _KEY_IntrHandler                                      0     0      0       0
  1296 ;;                          _TIM1_Init
  1297 ;; ---------------------------------------------------------------------------------
  1298 ;; (6) i1_GetDeviceMode                                      0     0      0       0
  1299 ;; ---------------------------------------------------------------------------------
  1300 ;; (7) i1_MotorOperationTimer_Init                           1     1      0     146
  1301 ;;                                              0 COMMON     1     1      0
  1302 ;; ---------------------------------------------------------------------------------
  1303 ;; (8) i1_Motor_CheckRunLimit                                0     0      0       0
  1304 ;; ---------------------------------------------------------------------------------
  1305 ;; (7) i1_Motor_SetStatus                                    1     1      0      73
  1306 ;;                                              0 COMMON     1     1      0
  1307 ;; ---------------------------------------------------------------------------------
  1308 ;; (7) i1_Motor_Init                                         1     1      0     292
  1309 ;;                                              0 COMMON     1     1      0
  1310 ;; ---------------------------------------------------------------------------------
  1311 ;; (7) i1_GPIO_ReadInputDataBit                              3     2      1     371
  1312 ;;                                              0 COMMON     3     2      1
  1313 ;; ---------------------------------------------------------------------------------
  1314 ;; (9) i1_GPIO_WriteBit                                      3     1      2     511
  1315 ;;                                              0 COMMON     3     1      2
  1316 ;; ---------------------------------------------------------------------------------
  1317 ;; (7) ___lbmod                                              5     4      1     159
  1318 ;;                                              0 COMMON     5     4      1
  1319 ;; ---------------------------------------------------------------------------------
  1320 ;; (7) _TIM1_Init                                            0     0      0       0
  1321 ;; ---------------------------------------------------------------------------------
  1322 ;; (6) _LEDTimer_IntrHandler                                 0     0      0       0
  1323 ;; ---------------------------------------------------------------------------------
  1324 ;; (6) _ChargeTimer_IntrHandler                              0     0      0       0
  1325 ;; ---------------------------------------------------------------------------------
  1326 ;; (6) _SwitchModeTimer_IntrHandler                          0     0      0       0
  1327 ;; ---------------------------------------------------------------------------------
  1328 ;; Estimated maximum stack depth 9
  1329 ;; ---------------------------------------------------------------------------------
  1330 ;; Call Graph Graphs:
  1331 ;; _main (ROOT)
  1332 ;;   _EEPROM_Init
  1333 ;;     _EEPROM_Write
  1334 ;;   _EEPROM_GetFlag
  1335 ;;     _EEPROM_Read
  1336 ;;   _EEPROM_RestoreDeviceModeData
  1337 ;;     _EEPROM_Read
  1338 ;;   _EEPROM_RestoreMotorData
  1339 ;;     _EEPROM_Read
  1340 ;;   _Board_Init
  1341 ;;   _Driver_Init
  1342 ;;     _LED_Init
  1343 ;;       _GPIO_Init
  1344 ;;       _GPIO_WriteBit
  1345 ;;         _GPIO_ReadInputDataBit (ARG)
  1346 ;;     _KEY_Init
  1347 ;;       _GPIO_Init
  1348 ;;       _GPIO_INTConfig
  1349 ;;     _Charge_Init
  1350 ;;       _ChargeDetect_Init
  1351 ;;         _GPIO_Init
  1352 ;;         _GPIO_ReadInputDataBit
  1353 ;;         _GPIO_INTConfig
  1354 ;;       _ChargeCtrl_Init
  1355 ;;         _GPIO_Init
  1356 ;;         _GPIO_WriteBit
  1357 ;;           _GPIO_ReadInputDataBit (ARG)
  1358 ;;     _ADC_Init
  1359 ;;     _EEPROM_Init
  1360 ;;       _EEPROM_Write
  1361 ;;   _Motor_GetStatus
  1362 ;;   _Motor_HandleStatusChangeEvt
  1363 ;;     _Motor_CheckRunLimit
  1364 ;;     _KEY_GetReleaseStatus
  1365 ;;     _Motor_SetStatus
  1366 ;;     _Motor_Start
  1367 ;;       _LED_DisplayMotorStatus
  1368 ;;         _GPIO_WriteBit
  1369 ;;           _GPIO_ReadInputDataBit (ARG)
  1370 ;;       _Motor_Init
  1371 ;;       _SwitchModeTimer_Cmd
  1372 ;;       _SwitchModeTimer_INTConfig
  1373 ;;     _MotorOperationTimer_Stop
  1374 ;;       _Motor_CheckRunLimit
  1375 ;;     _MotorOperationTimer_Init
  1376 ;;     _SwitchModeTimer_GetINTStatus
  1377 ;;     _Motor_Stop
  1378 ;;       _LED_CloseMotorStatus
  1379 ;;         _GPIO_WriteBit
  1380 ;;           _GPIO_ReadInputDataBit (ARG)
  1381 ;;     _SwitchModeTimer_Cmd
  1382 ;;     _SwitchModeTimer_INTConfig
  1383 ;;     _LEDTimer_GetOperationStatus
  1384 ;;     _LEDTimer_Cmd
  1385 ;;     _LEDTimer_INTConfig
  1386 ;;     _LEDTimer_GetRunLimitINTStatus
  1387 ;;     _LED_DisplayRunLimit
  1388 ;;       _GPIO_ReadInputDataBit
  1389 ;;       _GPIO_WriteBit
  1390 ;;         _GPIO_ReadInputDataBit (ARG)
  1391 ;;     _KEY_GetPressStatus
  1392 ;;     _LED_CloseMotorStatus
  1393 ;;       _GPIO_WriteBit
  1394 ;;         _GPIO_ReadInputDataBit (ARG)
  1395 ;;   _ChargeDetect_GetStatus
  1396 ;;     _GPIO_ReadInputDataBit
  1397 ;;   _ChargeTimer_ResetCount
  1398 ;;   _SetDeviceMode
  1399 ;;   _Battery_Detect
  1400 ;;     _ADC_ReadData
  1401 ;;       _delay_us
  1402 ;;     ___lwdiv
  1403 ;;     _GetDeviceMode
  1404 ;;     _EEPROM_SetFlag
  1405 ;;       _EEPROM_Write
  1406 ;;     _EEPROM_StoreModeData
  1407 ;;       _EEPROM_Write
  1408 ;;     _EEPROM_StoreMotorData
  1409 ;;       _EEPROM_Write
  1410 ;;     _LED_UnderVoltageOutput
  1411 ;;       _GPIO_WriteBit
  1412 ;;         _GPIO_ReadInputDataBit (ARG)
  1413 ;;     _LEDTimer_GetOperationStatus
  1414 ;;     _LEDTimer_Cmd
  1415 ;;     _LEDTimer_INTConfig
  1416 ;;     _LEDTimer_GetINTStatus
  1417 ;;     _GPIO_ReadInputDataBit
  1418 ;;     _SetDeviceMode
  1419 ;;     _GPIO_WriteBit
  1420 ;;       _GPIO_ReadInputDataBit (ARG)
  1421 ;;   _LED_Init
  1422 ;;     _GPIO_Init
  1423 ;;     _GPIO_WriteBit
  1424 ;;       _GPIO_ReadInputDataBit (ARG)
  1425 ;;   _KEY_DeInit
  1426 ;;     _GPIO_Init
  1427 ;;   _Motor_Stop
  1428 ;;     _LED_CloseMotorStatus
  1429 ;;       _GPIO_WriteBit
  1430 ;;         _GPIO_ReadInputDataBit (ARG)
  1431 ;;   _Motor_SetStatus
  1432 ;;   _MotorOperationTimer_Stop
  1433 ;;     _Motor_CheckRunLimit
  1434 ;;   _ChargeCtrl_Output
  1435 ;;     _GPIO_WriteBit
  1436 ;;       _GPIO_ReadInputDataBit (ARG)
  1437 ;;   _LED_VoltageChargeOutput
  1438 ;;     _GPIO_WriteBit
  1439 ;;       _GPIO_ReadInputDataBit (ARG)
  1440 ;;   _ADC_Init
  1441 ;;   _ChargeTimer_Cmd
  1442 ;;   _ChargeTimer_INTConfig
  1443 ;;   _charge_control
  1444 ;;     _ChargeTimer_GetCount
  1445 ;;     _Battery_Detect
  1446 ;;       _ADC_ReadData
  1447 ;;         _delay_us
  1448 ;;       ___lwdiv
  1449 ;;       _GetDeviceMode
  1450 ;;       _EEPROM_SetFlag
  1451 ;;         _EEPROM_Write
  1452 ;;       _EEPROM_StoreModeData
  1453 ;;         _EEPROM_Write
  1454 ;;       _EEPROM_StoreMotorData
  1455 ;;         _EEPROM_Write
  1456 ;;       _LED_UnderVoltageOutput
  1457 ;;         _GPIO_WriteBit
  1458 ;;           _GPIO_ReadInputDataBit (ARG)
  1459 ;;       _LEDTimer_GetOperationStatus
  1460 ;;       _LEDTimer_Cmd
  1461 ;;       _LEDTimer_INTConfig
  1462 ;;       _LEDTimer_GetINTStatus
  1463 ;;       _GPIO_ReadInputDataBit
  1464 ;;       _SetDeviceMode
  1465 ;;       _GPIO_WriteBit
  1466 ;;         _GPIO_ReadInputDataBit (ARG)
  1467 ;;     _LED_VoltageChargeOutput
  1468 ;;       _GPIO_WriteBit
  1469 ;;         _GPIO_ReadInputDataBit (ARG)
  1470 ;;     _GPIO_WriteBit
  1471 ;;       _GPIO_ReadInputDataBit (ARG)
  1472 ;;   _GetDeviceMode
  1473 ;;
  1474 ;; _ISR (ROOT)
  1475 ;;   _KEY_IntrHandler
  1476 ;;     _TIM1_Init
  1477 ;;   _DebounceTimer_IntrHandler
  1478 ;;     i1_GPIO_ReadInputDataBit
  1479 ;;   i1_GetDeviceMode
  1480 ;;   _SwitchModeTimer_IntrHandler
  1481 ;;   _ChargeTimer_IntrHandler
  1482 ;;   _MotorOperTimer_IntrHandler
  1483 ;;     i1_Motor_CheckRunLimit
  1484 ;;     ___lbmod
  1485 ;;     i1_MotorOperationTimer_Init
  1486 ;;     i1_Motor_Stop
  1487 ;;       i1_LED_CloseMotorStatus
  1488 ;;         i1_GPIO_WriteBit
  1489 ;;     i1_MotorOperationTimer_Stop
  1490 ;;       i1_Motor_CheckRunLimit
  1491 ;;     i1_Motor_SetStatus
  1492 ;;     i1_Motor_Init
  1493 ;;   _LEDTimer_IntrHandler
  1494 ;;   _ChargeDetect_IntrHandler
  1495 ;;     i1_GPIO_ReadInputDataBit
  1496 ;;
  1497 ;; Address spaces:
  1498 ;;Name               Size   Autos  Total    Cost      Usage
  1499 ;;SFR3                 0      0       0       4        0.0%
  1500 ;;BITSFR3              0      0       0       4        0.0%
  1501 ;;BANK2               50      0       0       7        0.0%
  1502 ;;BITBANK2            50      0       0       6        0.0%
  1503 ;;SFR2                 0      0       0       5        0.0%
  1504 ;;BITSFR2              0      0       0       5        0.0%
  1505 ;;SFR1                 0      0       0       2        0.0%
  1506 ;;BITSFR1              0      0       0       2        0.0%
  1507 ;;BANK1               50      0       0       5        0.0%
  1508 ;;BITBANK1            50      0       0       4        0.0%
  1509 ;;CODE                 0      0       0       0        0.0%
  1510 ;;DATA                 0      0      45      10        0.0%
  1511 ;;ABS                  0      0      37       8        0.0%
  1512 ;;NULL                 0      0       0       0        0.0%
  1513 ;;STACK                0      0       E       2        0.0%
  1514 ;;BANK0               50     12      29       3       51.3%
  1515 ;;BITBANK0            50      0       0       9        0.0%
  1516 ;;SFR0                 0      0       0       1        0.0%
  1517 ;;BITSFR0              0      0       0       1        0.0%
  1518 ;;COMMON               E      9       E       1      100.0%
  1519 ;;BITCOMMON            E      0       0       0        0.0%
  1520 ;;EEDATA             100      0       0       0        0.0%
  1521                           
  1522                           
  1523 ;; *************** function _main *****************
  1524 ;; Defined at:
  1525 ;;		line 105 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;		None               void
  1532 ;; Registers used:
  1533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1534 ;; Tracked objects:
  1535 ;;		On entry : 17F/0
  1536 ;;		On exit  : 60/0
  1537 ;;		Unchanged: FFE00/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1539 ;;      Params:         0       0       0       0
  1540 ;;      Locals:         0       0       0       0
  1541 ;;      Temps:          0       0       0       0
  1542 ;;      Totals:         0       0       0       0
  1543 ;;Total ram usage:        0 bytes
  1544 ;; Hardware stack levels required when called:    9
  1545 ;; This function calls:
  1546 ;;		_EEPROM_Init
  1547 ;;		_EEPROM_GetFlag
  1548 ;;		_EEPROM_RestoreDeviceModeData
  1549 ;;		_EEPROM_RestoreMotorData
  1550 ;;		_Board_Init
  1551 ;;		_Driver_Init
  1552 ;;		_Motor_GetStatus
  1553 ;;		_Motor_HandleStatusChangeEvt
  1554 ;;		_ChargeDetect_GetStatus
  1555 ;;		_ChargeTimer_ResetCount
  1556 ;;		_SetDeviceMode
  1557 ;;		_Battery_Detect
  1558 ;;		_LED_Init
  1559 ;;		_KEY_DeInit
  1560 ;;		_Motor_Stop
  1561 ;;		_Motor_SetStatus
  1562 ;;		_MotorOperationTimer_Stop
  1563 ;;		_ChargeCtrl_Output
  1564 ;;		_LED_VoltageChargeOutput
  1565 ;;		_ADC_Init
  1566 ;;		_ChargeTimer_Cmd
  1567 ;;		_ChargeTimer_INTConfig
  1568 ;;		_charge_control
  1569 ;;		_GetDeviceMode
  1570 ;; This function is called by:
  1571 ;;		Startup code after reset
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574  05AB                     _main:	
  1575                           
  1576                           ;main.c: 107: EEPROM_Init();
  1577                           
  1578 ;; hardware stack exceeded
  1579                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1580  05AB  118A  2680  118A   	fcall	_EEPROM_Init
  1581                           
  1582                           ;main.c: 110: if(EEPROM_GetFlag() == 0x01)
  1583  05AE  118A  26D1  118A   	fcall	_EEPROM_GetFlag
  1584  05B1  3A01               	xorlw	1
  1585  05B2  1D03               	skipz
  1586  05B3  2E17               	goto	l15403
  1587                           
  1588                           ;main.c: 111: {
  1589                           ;main.c: 112: EEPROM_RestoreDeviceModeData();
  1590  05B4  118A  26D3  118A   	fcall	_EEPROM_RestoreDeviceModeData
  1591                           
  1592                           ;main.c: 113: EEPROM_RestoreMotorData();
  1593  05B7  118A  26D7  118A   	fcall	_EEPROM_RestoreMotorData
  1594  05BA  2E17               	goto	l15403
  1595  05BB                     l15363:	
  1596                           
  1597                           ;main.c: 122: {
  1598                           ;main.c: 123: Board_Init();
  1599  05BB  118A  26F5  118A   	fcall	_Board_Init
  1600                           
  1601                           ;main.c: 124: Driver_Init();
  1602  05BE  118A  2626  118A   	fcall	_Driver_Init
  1603  05C1                     l15367:	
  1604                           
  1605                           ;main.c: 127: {
  1606                           ;main.c: 128: Motor_HandleStatusChangeEvt(Motor_GetStatus());
  1607  05C1  118A  2763  118A   	fcall	_Motor_GetStatus
  1608  05C4  118A  2172  118A   	fcall	_Motor_HandleStatusChangeEvt
  1609                           
  1610                           ;main.c: 131: if(ChargeDetect_GetStatus())
  1611  05C7  118A  2013  118A   	fcall	_ChargeDetect_GetStatus
  1612  05CA  3A00               	xorlw	0
  1613  05CB  1903               	skipnz
  1614  05CC  2DD5               	goto	l15373
  1615                           
  1616                           ;main.c: 132: {
  1617                           ;main.c: 134: ChargeTimer_ResetCount();
  1618  05CD  118A  2760  118A   	fcall	_ChargeTimer_ResetCount
  1619                           
  1620                           ;main.c: 135: SetDeviceMode(CHARGE_MODE);
  1621  05D0  3001               	movlw	1
  1622  05D1  118A  2402  118A   	fcall	_SetDeviceMode
  1623                           
  1624                           ;main.c: 136: break;
  1625  05D4  2E17               	goto	l15403
  1626  05D5                     l15373:	
  1627                           
  1628                           ;main.c: 137: }
  1629                           ;main.c: 140: Battery_Detect();
  1630  05D5  118A  2058  118A   	fcall	_Battery_Detect
  1631  05D8  2DC1               	goto	l15367
  1632  05D9                     l15375:	
  1633                           
  1634                           ;main.c: 145: {
  1635                           ;main.c: 147: LED_Init();
  1636  05D9  118A  2114  118A   	fcall	_LED_Init
  1637                           
  1638                           ;main.c: 148: KEY_DeInit();
  1639  05DC  118A  2734  118A   	fcall	_KEY_DeInit
  1640                           
  1641                           ;main.c: 149: Motor_Stop();
  1642  05DF  118A  223A  118A   	fcall	_Motor_Stop
  1643                           
  1644                           ;main.c: 150: Motor_SetStatus(MOTOR_MODE_STOP);
  1645  05E2  3001               	movlw	1
  1646  05E3  118A  2222  118A   	fcall	_Motor_SetStatus
  1647                           
  1648                           ;main.c: 151: MotorOperationTimer_Stop();
  1649  05E6  118A  222E  118A   	fcall	_MotorOperationTimer_Stop
  1650                           
  1651                           ;main.c: 153: ChargeCtrl_Output(Bit_SET);
  1652  05E9  3001               	movlw	1
  1653  05EA  118A  2758  118A   	fcall	_ChargeCtrl_Output
  1654                           
  1655                           ;main.c: 154: LED_VoltageChargeOutput(Bit_SET);
  1656  05ED  3001               	movlw	1
  1657  05EE  118A  26C9  118A   	fcall	_LED_VoltageChargeOutput
  1658                           
  1659                           ;main.c: 157: ADC_Init((0x06));
  1660  05F1  3006               	movlw	6
  1661  05F2  118A  2642  118A   	fcall	_ADC_Init
  1662                           
  1663                           ;main.c: 160: ChargeTimer_Cmd(ENABLE);
  1664  05F5  3001               	movlw	1
  1665  05F6  118A  270D  118A   	fcall	_ChargeTimer_Cmd
  1666                           
  1667                           ;main.c: 161: ChargeTimer_INTConfig(ENABLE);
  1668  05F9  3001               	movlw	1
  1669  05FA  118A  2744  118A   	fcall	_ChargeTimer_INTConfig
  1670  05FD                     l1151:	
  1671                           ;main.c: 163: while(1)
  1672                           
  1673                           
  1674                           ;main.c: 164: {
  1675                           ;main.c: 165: charge_control();
  1676  05FD  118A  269D  118A   	fcall	_charge_control
  1677                           
  1678                           ;main.c: 168: if(!ChargeDetect_GetStatus())
  1679  0600  118A  2013  118A   	fcall	_ChargeDetect_GetStatus
  1680  0603  3800               	iorlw	0
  1681  0604  1D03               	skipz
  1682  0605  2DFD               	goto	l1151
  1683                           
  1684                           ;main.c: 169: {
  1685                           ;main.c: 171: ChargeTimer_Cmd(DISABLE);
  1686  0606  3000               	movlw	0
  1687  0607  118A  270D  118A   	fcall	_ChargeTimer_Cmd
  1688                           
  1689                           ;main.c: 172: ChargeTimer_INTConfig(DISABLE);
  1690  060A  3000               	movlw	0
  1691  060B  118A  2744  118A   	fcall	_ChargeTimer_INTConfig
  1692                           
  1693                           ;main.c: 174: SetDeviceMode(RUN_MODE);
  1694  060E  3000               	movlw	0
  1695  060F  118A  2402  118A   	fcall	_SetDeviceMode
  1696                           
  1697                           ;main.c: 175: break;
  1698  0612  2E17               	goto	l15403
  1699  0613                     l15397:	
  1700                           
  1701                           ;main.c: 182: {
  1702                           ;main.c: 184: LED_Init();
  1703  0613  118A  2114  118A   	fcall	_LED_Init
  1704  0616  0063               	sleep	;#
  1705  0617                     l15403:	
  1706                           ;main.c: 189: break;
  1707                           
  1708  0617  118A  2321  118A   	fcall	_GetDeviceMode
  1709                           
  1710                           ; Switch size 1, requested type "space"
  1711                           ; Number of cases is 3, Range of values is 0 to 2
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte           10     6 (average)
  1715                           ; direct_byte           13     7 (fixed)
  1716                           ; jumptable            260     6 (fixed)
  1717                           ; rangetable             7     6 (fixed)
  1718                           ; spacedrange           12     9 (fixed)
  1719                           ; locatedrange           3     3 (fixed)
  1720                           ;	Chosen strategy is simple_byte
  1721  061A  3A00               	xorlw	0	; case 0
  1722  061B  1903               	skipnz
  1723  061C  2DBB               	goto	l15363
  1724  061D  3A01               	xorlw	1	; case 1
  1725  061E  1903               	skipnz
  1726  061F  2DD9               	goto	l15375
  1727  0620  3A03               	xorlw	3	; case 2
  1728  0621  1903               	skipnz
  1729  0622  2E13               	goto	l15397
  1730  0623  2E17               	goto	l15403
  1731  0624  118A  2811         	ljmp	start
  1732  0626                     __end_of_main:	
  1733                           
  1734                           	psect	text1648
  1735  069D                     __ptext1648:	
  1736 ;; =============== function _Motor_HandleStatusChangeEvt ends ============
  1737                           
  1738                           
  1739 ;; *************** function _charge_control *****************
  1740 ;; Defined at:
  1741 ;;		line 80 in file "main.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  charge_count    2   16[BANK0 ] unsigned int 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;		None               void
  1748 ;; Registers used:
  1749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 20/40
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: FFE00/0
  1754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1755 ;;      Params:         0       0       0       0
  1756 ;;      Locals:         0       2       0       0
  1757 ;;      Temps:          0       0       0       0
  1758 ;;      Totals:         0       2       0       0
  1759 ;;Total ram usage:        2 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    8
  1762 ;; This function calls:
  1763 ;;		_ChargeTimer_GetCount
  1764 ;;		_Battery_Detect
  1765 ;;		_LED_VoltageChargeOutput
  1766 ;;		_GPIO_WriteBit
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771  069D                     _charge_control:	
  1772                           
  1773                           ;main.c: 81: uint32_t charge_count = ChargeTimer_GetCount();
  1774                           
  1775 ;; hardware stack exceeded
  1776                           ; Regs used in _charge_control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1777  069D  26C3  118A         	fcall	_ChargeTimer_GetCount
  1778  069F  0837               	movf	?_ChargeTimer_GetCount+1,w
  1779  06A0  00C7               	movwf	charge_control@charge_count+1
  1780  06A1  0836               	movf	?_ChargeTimer_GetCount,w
  1781  06A2  00C6               	movwf	charge_control@charge_count
  1782                           
  1783                           ;main.c: 84: if((charge_count >= 5) && (charge_count < 4500))
  1784  06A3  3000               	movlw	0
  1785  06A4  0247               	subwf	charge_control@charge_count+1,w
  1786  06A5  3005               	movlw	5
  1787  06A6  1903               	skipnz
  1788  06A7  0246               	subwf	charge_control@charge_count,w
  1789  06A8  3011               	movlw	17
  1790  06A9  1C03               	skipc
  1791  06AA  2EB4               	goto	L1
  1792  06AB  0247               	subwf	charge_control@charge_count+1,w
  1793  06AC  3094               	movlw	148
  1794  06AD  1903               	skipnz
  1795  06AE  0246               	subwf	charge_control@charge_count,w
  1796  06AF  1803               	skipnc
  1797  06B0  2EB3               	goto	l15271
  1798                           
  1799                           ;main.c: 85: {
  1800                           ;main.c: 86: Battery_Detect();
  1801  06B1  118A  2858         	ljmp	l15189
  1802  06B3                     l15271:	
  1803                           ;main.c: 87: }
  1804                           
  1805                           
  1806                           ;main.c: 88: else
  1807                           ;main.c: 89: {
  1808                           ;main.c: 90: if(charge_count >= 4500)
  1809  06B3  3011               	movlw	17
  1810  06B4                     L1:	
  1811  06B4  0247               	subwf	charge_control@charge_count+1,w
  1812  06B5  3094               	movlw	148
  1813  06B6  1903               	skipnz
  1814  06B7  0246               	subwf	charge_control@charge_count,w
  1815  06B8  1C03               	skipc
  1816  06B9  0008               	return
  1817                           
  1818                           ;main.c: 91: {
  1819                           ;main.c: 92: LED_VoltageChargeOutput(Bit_RESET);
  1820  06BA  3000               	movlw	0
  1821  06BB  26C9               	fcall	_LED_VoltageChargeOutput
  1822  06BC  3001               	movlw	1
  1823                           
  1824                           ;main.c: 94: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), SET);
  1825  06BD  01B9               	clrf	?_GPIO_WriteBit
  1826  06BE  0AB9               	incf	?_GPIO_WriteBit,f
  1827  06BF  01BA               	clrf	?_GPIO_WriteBit+1
  1828  06C0  0ABA               	incf	?_GPIO_WriteBit+1,f
  1829  06C1  118A  2A80         	ljmp	_GPIO_WriteBit
  1830  06C3                     __end_of_charge_control:	
  1831  06C3                     __ptext1703:	
  1832 ;; =============== function _GPIO_WriteBit ends ============
  1833                           
  1834                           
  1835 ;; *************** function _ChargeTimer_GetCount *****************
  1836 ;; Defined at:
  1837 ;;		line 112 in file "ms83fxx02_charge_timer.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  2    0[BANK0 ] unsigned int 
  1844 ;; Registers used:
  1845 ;;		wreg
  1846 ;; Tracked objects:
  1847 ;;		On entry : 20/40
  1848 ;;		On exit  : 60/0
  1849 ;;		Unchanged: FFF9F/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1851 ;;      Params:         0       2       0       0
  1852 ;;      Locals:         0       0       0       0
  1853 ;;      Temps:          0       0       0       0
  1854 ;;      Totals:         0       2       0       0
  1855 ;;Total ram usage:        2 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    5
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_charge_control
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864  06C3                     _ChargeTimer_GetCount:	
  1865                           
  1866                           ;ms83fxx02_charge_timer.c: 113: return charge_time_out;
  1867                           
  1868                           ; Regs used in _ChargeTimer_GetCount: [wreg]
  1869  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1870  06C4  082B               	movf	_charge_time_out+1,w	;volatile
  1871  06C5  00B7               	movwf	?_ChargeTimer_GetCount+1
  1872  06C6  082A               	movf	_charge_time_out,w	;volatile
  1873  06C7  00B6               	movwf	?_ChargeTimer_GetCount
  1874  06C8  0008               	return
  1875  06C9                     __end_of_ChargeTimer_GetCount:	
  1876  06C9                     __ptext1671:	
  1877 ;; =============== function _EEPROM_GetFlag ends ============
  1878                           
  1879                           
  1880 ;; *************** function _LED_VoltageChargeOutput *****************
  1881 ;; Defined at:
  1882 ;;		line 78 in file "ms83fxx02_led.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  BitVal          1    wreg     enum E1499
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  BitVal          1    6[BANK0 ] enum E1499
  1887 ;; Return value:  Size  Location     Type
  1888 ;;		None               void
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, pclath, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 60/0
  1893 ;;		On exit  : 60/0
  1894 ;;		Unchanged: FFF9F/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1896 ;;      Params:         0       0       0       0
  1897 ;;      Locals:         0       1       0       0
  1898 ;;      Temps:          0       0       0       0
  1899 ;;      Totals:         0       1       0       0
  1900 ;;Total ram usage:        1 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    6
  1903 ;; This function calls:
  1904 ;;		_GPIO_WriteBit
  1905 ;; This function is called by:
  1906 ;;		_charge_control
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910  06C9                     _LED_VoltageChargeOutput:	
  1911                           
  1912                           ; Regs used in _LED_VoltageChargeOutput: [wreg+status,2+status,0+pclath+cstack]
  1913                           ;LED_VoltageChargeOutput@BitVal stored from wreg
  1914  06C9  00BC               	movwf	LED_VoltageChargeOutput@BitVal
  1915                           
  1916                           ;ms83fxx02_led.c: 79: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), BitVal);
  1917  06CA  3008               	movlw	8
  1918  06CB  00B9               	movwf	?_GPIO_WriteBit
  1919  06CC  083C               	movf	LED_VoltageChargeOutput@BitVal,w
  1920  06CD  00BA               	movwf	?_GPIO_WriteBit+1
  1921  06CE  3001               	movlw	1
  1922  06CF  118A  2A80         	ljmp	_GPIO_WriteBit
  1923  06D1                     __end_of_LED_VoltageChargeOutput:	
  1924                           
  1925                           	psect	text1649
  1926  0626                     __ptext1649:	
  1927 ;; =============== function _charge_control ends ============
  1928                           
  1929                           
  1930 ;; *************** function _Driver_Init *****************
  1931 ;; Defined at:
  1932 ;;		line 57 in file "main.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;		None               void
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 60/20
  1943 ;;		On exit  : 60/20
  1944 ;;		Unchanged: FFE00/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       0       0       0
  1947 ;;      Locals:         0       0       0       0
  1948 ;;      Temps:          0       0       0       0
  1949 ;;      Totals:         0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    8
  1953 ;; This function calls:
  1954 ;;		_LED_Init
  1955 ;;		_KEY_Init
  1956 ;;		_Charge_Init
  1957 ;;		_ADC_Init
  1958 ;;		_EEPROM_Init
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963  0626                     _Driver_Init:	
  1964                           
  1965                           ;main.c: 59: LED_Init();
  1966                           
  1967 ;; hardware stack exceeded
  1968                           ; Regs used in _Driver_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1969  0626  118A  2114  118A   	fcall	_LED_Init
  1970                           
  1971                           ;main.c: 62: KEY_Init();
  1972  0629  2631  118A         	fcall	_KEY_Init
  1973                           
  1974                           ;main.c: 65: Charge_Init();
  1975  062B  2657  118A         	fcall	_Charge_Init
  1976                           
  1977                           ;main.c: 68: ADC_Init((0x06));
  1978  062D  3006               	movlw	6
  1979  062E  2642  118A         	fcall	_ADC_Init
  1980                           
  1981                           ;main.c: 71: EEPROM_Init();
  1982  0630  2E80               	ljmp	l15079
  1983  0631                     __end_of_Driver_Init:	
  1984  0631                     __ptext1673:	
  1985 ;; =============== function _EEPROM_Init ends ============
  1986                           
  1987                           
  1988 ;; *************** function _KEY_Init *****************
  1989 ;; Defined at:
  1990 ;;		line 73 in file "MS83FXX02_KEY.C"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 160/0
  2001 ;;		On exit  : 160/0
  2002 ;;		Unchanged: FFE9F/0
  2003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2004 ;;      Params:         0       0       0       0
  2005 ;;      Locals:         0       2       0       0
  2006 ;;      Temps:          0       0       0       0
  2007 ;;      Totals:         0       2       0       0
  2008 ;;Total ram usage:        2 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    6
  2011 ;; This function calls:
  2012 ;;		_GPIO_Init
  2013 ;;		_GPIO_INTConfig
  2014 ;; This function is called by:
  2015 ;;		_Driver_Init
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018  0631                     _KEY_Init:	
  2019  0631  3002               	movlw	2
  2020                           
  2021                           ;MS83FXX02_KEY.C: 74: GPIO_InitTypeDef GPIO_InitStruct;
  2022                           ;MS83FXX02_KEY.C: 75: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  2023                           
  2024                           ; Regs used in _KEY_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2025  0632  01BA               	clrf	KEY_Init@GPIO_InitStruct+1
  2026                           
  2027                           ;MS83FXX02_KEY.C: 76: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  2028  0633  00B9               	movwf	KEY_Init@GPIO_InitStruct
  2029                           
  2030                           ;MS83FXX02_KEY.C: 77: GPIO_Init(GPIOC, &GPIO_InitStruct);
  2031  0634  3039               	movlw	KEY_Init@GPIO_InitStruct& (0+255)
  2032  0635  00B6               	movwf	?_GPIO_Init
  2033  0636  3001               	movlw	1
  2034  0637  118A  214A  118A   	fcall	_GPIO_Init
  2035  063A  3002               	movlw	2
  2036                           
  2037                           ;MS83FXX02_KEY.C: 80: INTEDG = 0;
  2038  063B  1301               	bcf	1,6
  2039                           
  2040                           ;MS83FXX02_KEY.C: 81: GPIO_INTConfig(GPIOC, ((uint8_t)0x00000002), ENABLE);
  2041  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2042  063D  00B6               	movwf	?_GPIO_INTConfig
  2043  063E  3001               	movlw	1
  2044  063F  01B7               	clrf	?_GPIO_INTConfig+1
  2045  0640  0AB7               	incf	?_GPIO_INTConfig+1,f
  2046  0641  2E5B               	ljmp	_GPIO_INTConfig
  2047  0642                     __end_of_KEY_Init:	
  2048  0642                     __ptext1704:	
  2049 ;; =============== function _ChargeTimer_GetCount ends ============
  2050                           
  2051                           
  2052 ;; *************** function _ADC_Init *****************
  2053 ;; Defined at:
  2054 ;;		line 72 in file "ms83fxx02_pwr.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  channel         1    wreg     unsigned char 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  channel         1    1[BANK0 ] unsigned char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;		None               void
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0
  2063 ;; Tracked objects:
  2064 ;;		On entry : 160/0
  2065 ;;		On exit  : 160/20
  2066 ;;		Unchanged: FFE9F/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2068 ;;      Params:         0       0       0       0
  2069 ;;      Locals:         0       1       0       0
  2070 ;;      Temps:          0       1       0       0
  2071 ;;      Totals:         0       2       0       0
  2072 ;;Total ram usage:        2 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    5
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_Driver_Init
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082  0642                     _ADC_Init:	
  2083                           
  2084                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  2085                           ;ADC_Init@channel stored from wreg
  2086  0642  00B7               	movwf	ADC_Init@channel
  2087                           
  2088                           ;ms83fxx02_pwr.c: 74: ANSEL |= (0x01 << channel);
  2089  0643  3001               	movlw	1
  2090  0644  00B6               	movwf	??_ADC_Init
  2091  0645  0A37               	incf	ADC_Init@channel,w
  2092  0646  2E49               	goto	u1324
  2093  0647                     u1325:	
  2094  0647  1003               	clrc
  2095  0648  0DB6               	rlf	??_ADC_Init,f
  2096  0649                     u1324:	
  2097  0649  3EFF               	addlw	-1
  2098  064A  1D03               	skipz
  2099  064B  2E47               	goto	u1325
  2100  064C  0836               	movf	??_ADC_Init,w
  2101  064D  1683               	bsf	3,5	;RP0=1, select bank1
  2102  064E  0491               	iorwf	17,f	;volatile
  2103                           
  2104                           ;ms83fxx02_pwr.c: 76: TRISC |= 0b00000100;
  2105  064F  1507               	bsf	7,2	;volatile
  2106                           
  2107                           ;ms83fxx02_pwr.c: 79: ADCON0 = 0b10100000;
  2108  0650  30A0               	movlw	160
  2109  0651  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0652  009F               	movwf	31	;volatile
  2111                           
  2112                           ;ms83fxx02_pwr.c: 82: ADCON1 = 0b01010000;
  2113  0653  3050               	movlw	80
  2114  0654  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0655  009F               	movwf	31	;volatile
  2116  0656  0008               	return
  2117  0657                     __end_of_ADC_Init:	
  2118  0657                     __ptext1653:	
  2119 ;; =============== function _Battery_Detect ends ============
  2120                           
  2121                           
  2122 ;; *************** function _Charge_Init *****************
  2123 ;; Defined at:
  2124 ;;		line 49 in file "ms83fxx02_charge.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;		None               void
  2131 ;; Registers used:
  2132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 160/0
  2135 ;;		On exit  : 160/0
  2136 ;;		Unchanged: FFE9F/0
  2137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2138 ;;      Params:         0       0       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          0       0       0       0
  2141 ;;      Totals:         0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    7
  2145 ;; This function calls:
  2146 ;;		_ChargeDetect_Init
  2147 ;;		_ChargeCtrl_Init
  2148 ;; This function is called by:
  2149 ;;		_Driver_Init
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152  0657                     _Charge_Init:	
  2153                           
  2154                           ;ms83fxx02_charge.c: 50: ChargeDetect_Init();
  2155                           
  2156 ;; hardware stack exceeded
  2157                           ; Regs used in _Charge_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2158  0657  118A  2033  118A   	fcall	_ChargeDetect_Init
  2159                           
  2160                           ;ms83fxx02_charge.c: 51: ChargeCtrl_Init();
  2161  065A  2E8D               	ljmp	l15147
  2162  065B                     __end_of_Charge_Init:	
  2163  065B                     __ptext1692:	
  2164 ;; =============== function _EEPROM_Write ends ============
  2165                           
  2166                           
  2167 ;; *************** function _GPIO_INTConfig *****************
  2168 ;; Defined at:
  2169 ;;		line 134 in file "ms83fxx02_gpio.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  GPIOx           1    wreg     enum E1491
  2172 ;;  GPIO_Pin        1    0[BANK0 ] unsigned char 
  2173 ;;  NewState        1    1[BANK0 ] enum E1482
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  GPIOx           1    2[BANK0 ] enum E1491
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 160/0
  2182 ;;		On exit  : 160/0
  2183 ;;		Unchanged: FFE9F/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2185 ;;      Params:         0       2       0       0
  2186 ;;      Locals:         0       1       0       0
  2187 ;;      Temps:          0       0       0       0
  2188 ;;      Totals:         0       3       0       0
  2189 ;;Total ram usage:        3 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    5
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_ChargeDetect_Init
  2196 ;;		_KEY_Init
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199  065B                     _GPIO_INTConfig:	
  2200                           
  2201 ;; hardware stack exceeded
  2202                           ; Regs used in _GPIO_INTConfig: [wreg+status,2+status,0]
  2203                           ;GPIO_INTConfig@GPIOx stored from wreg
  2204  065B  00B8               	movwf	GPIO_INTConfig@GPIOx
  2205                           
  2206                           ;ms83fxx02_gpio.c: 135: if(GPIOx == GPIOA)
  2207  065C  08B8               	movf	GPIO_INTConfig@GPIOx,f
  2208  065D  1D03               	skipz
  2209  065E  2E6B               	goto	l14627
  2210                           
  2211                           ;ms83fxx02_gpio.c: 136: {
  2212                           ;ms83fxx02_gpio.c: 137: if (NewState != DISABLE)
  2213  065F  0837               	movf	GPIO_INTConfig@NewState,w
  2214  0660  1903               	btfsc	3,2
  2215  0661  2E68               	goto	l14625
  2216                           
  2217                           ;ms83fxx02_gpio.c: 138: {
  2218                           ;ms83fxx02_gpio.c: 140: PAIE = 1;
  2219  0662  158B               	bsf	11,3
  2220                           
  2221                           ;ms83fxx02_gpio.c: 141: GIE = 1;
  2222  0663  178B               	bsf	11,7
  2223                           
  2224                           ;ms83fxx02_gpio.c: 142: IOCA |= GPIO_Pin;
  2225  0664  0836               	movf	GPIO_INTConfig@GPIO_Pin,w
  2226  0665  1683               	bsf	3,5	;RP0=1, select bank1
  2227  0666  0496               	iorwf	22,f	;volatile
  2228                           
  2229                           ;ms83fxx02_gpio.c: 143: }
  2230  0667  2E6B               	goto	l14627
  2231  0668                     l14625:	
  2232                           
  2233                           ;ms83fxx02_gpio.c: 144: else
  2234                           ;ms83fxx02_gpio.c: 145: {
  2235                           ;ms83fxx02_gpio.c: 147: IOCA &= ~GPIO_Pin;
  2236  0668  0936               	comf	GPIO_INTConfig@GPIO_Pin,w
  2237  0669  1683               	bsf	3,5	;RP0=1, select bank1
  2238  066A  0596               	andwf	22,f	;volatile
  2239  066B                     l14627:	
  2240                           
  2241                           ;ms83fxx02_gpio.c: 148: }
  2242                           ;ms83fxx02_gpio.c: 149: }
  2243                           ;ms83fxx02_gpio.c: 151: if((GPIOx == GPIOC) && (GPIO_Pin == ((uint8_t)0x00000002)))
  2244  066B  1283               	bcf	3,5	;RP0=0, select bank0
  2245  066C  0B38               	decfsz	GPIO_INTConfig@GPIOx,w
  2246  066D  0008               	return
  2247  066E  0836               	movf	GPIO_INTConfig@GPIO_Pin,w
  2248  066F  3A02               	xorlw	2
  2249  0670  1D03               	skipz
  2250  0671  0008               	return
  2251                           
  2252                           ;ms83fxx02_gpio.c: 152: {
  2253                           ;ms83fxx02_gpio.c: 154: if (NewState != DISABLE)
  2254  0672  0837               	movf	GPIO_INTConfig@NewState,w
  2255  0673  1903               	btfsc	3,2
  2256  0674  2E7E               	goto	l4431
  2257                           
  2258                           ;ms83fxx02_gpio.c: 155: {
  2259                           ;ms83fxx02_gpio.c: 157: ANSEL5 = 0;
  2260  0675  1683               	bsf	3,5	;RP0=1, select bank1
  2261  0676  3007               	movlw	7
  2262  0677  1291               	bcf	17,5
  2263                           
  2264                           ;ms83fxx02_gpio.c: 158: CMCON0 |= 0x07;
  2265  0678  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0679  0499               	iorwf	25,f	;volatile
  2267                           
  2268                           ;ms83fxx02_gpio.c: 160: GIE = 1;
  2269  067A  178B               	bsf	11,7
  2270                           
  2271                           ;ms83fxx02_gpio.c: 161: INTF = 0;
  2272  067B  108B               	bcf	11,1
  2273                           
  2274                           ;ms83fxx02_gpio.c: 162: INTE = 1;
  2275  067C  160B               	bsf	11,4
  2276                           
  2277                           ;ms83fxx02_gpio.c: 163: }
  2278  067D  0008               	return
  2279  067E                     l4431:	
  2280                           
  2281                           ;ms83fxx02_gpio.c: 164: else
  2282                           ;ms83fxx02_gpio.c: 165: {
  2283                           ;ms83fxx02_gpio.c: 167: INTE = 0;
  2284  067E  120B               	bcf	11,4
  2285  067F  0008               	return
  2286  0680                     __end_of_GPIO_INTConfig:	
  2287  0680                     __ptext1672:	
  2288 ;; =============== function _LED_VoltageChargeOutput ends ============
  2289                           
  2290                           
  2291 ;; *************** function _EEPROM_Init *****************
  2292 ;; Defined at:
  2293 ;;		line 23 in file "ms83fxx02_eeprom.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0, pclath, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 140/0
  2304 ;;		On exit  : 60/20
  2305 ;;		Unchanged: FFE00/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2307 ;;      Params:         0       0       0       0
  2308 ;;      Locals:         0       0       0       0
  2309 ;;      Temps:          0       0       0       0
  2310 ;;      Totals:         0       0       0       0
  2311 ;;Total ram usage:        0 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    6
  2314 ;; This function calls:
  2315 ;;		_EEPROM_Write
  2316 ;; This function is called by:
  2317 ;;		_Driver_Init
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321  0680                     _EEPROM_Init:	
  2322  0680                     l15079:	
  2323                           ; Regs used in _EEPROM_Init: [wreg+status,2+status,0+pclath+cstack]
  2324                           
  2325                           
  2326                           ;ms83fxx02_eeprom.c: 24: EEPROM_Write(0x55, 0xAA);
  2327  0680  30AA               	movlw	170
  2328  0681  1283               	bcf	3,5	;RP0=0, select bank0
  2329  0682  00B6               	movwf	?_EEPROM_Write
  2330  0683  3055               	movlw	85
  2331  0684  118A  23A8  118A   	fcall	_EEPROM_Write
  2332                           
  2333                           ;ms83fxx02_eeprom.c: 25: EEPROM_Write(0x55, 0xAA);
  2334  0687  30AA               	movlw	170
  2335  0688  1283               	bcf	3,5	;RP0=0, select bank0
  2336  0689  00B6               	movwf	?_EEPROM_Write
  2337  068A  3055               	movlw	85
  2338  068B  118A  2BA8         	ljmp	_EEPROM_Write
  2339  068D                     __end_of_EEPROM_Init:	
  2340  068D                     __ptext1662:	
  2341 ;; =============== function _LED_DisplayMotorStatus ends ============
  2342                           
  2343                           
  2344 ;; *************** function _ChargeCtrl_Init *****************
  2345 ;; Defined at:
  2346 ;;		line 39 in file "ms83fxx02_charge.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  GPIO_InitStr    2    6[BANK0 ] struct .
  2351 ;; Return value:  Size  Location     Type
  2352 ;;		None               void
  2353 ;; Registers used:
  2354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 160/0
  2357 ;;		On exit  : 160/0
  2358 ;;		Unchanged: FFE9F/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2360 ;;      Params:         0       0       0       0
  2361 ;;      Locals:         0       2       0       0
  2362 ;;      Temps:          0       0       0       0
  2363 ;;      Totals:         0       2       0       0
  2364 ;;Total ram usage:        2 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    6
  2367 ;; This function calls:
  2368 ;;		_GPIO_Init
  2369 ;;		_GPIO_WriteBit
  2370 ;; This function is called by:
  2371 ;;		_Charge_Init
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374  068D                     _ChargeCtrl_Init:	
  2375  068D                     l15147:	
  2376 ;; hardware stack exceeded
  2377                           ; Regs used in _ChargeCtrl_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2378                           
  2379  068D  3080               	movlw	128
  2380                           
  2381                           ;ms83fxx02_charge.c: 40: GPIO_InitTypeDef GPIO_InitStruct;
  2382                           ;ms83fxx02_charge.c: 42: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  2383  068E  01BD               	clrf	ChargeCtrl_Init@GPIO_InitStruct+1
  2384  068F  0ABD               	incf	ChargeCtrl_Init@GPIO_InitStruct+1,f
  2385                           
  2386                           ;ms83fxx02_charge.c: 43: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000080);
  2387  0690  00BC               	movwf	ChargeCtrl_Init@GPIO_InitStruct
  2388                           
  2389                           ;ms83fxx02_charge.c: 44: GPIO_Init(GPIOA, &GPIO_InitStruct);
  2390  0691  303C               	movlw	ChargeCtrl_Init@GPIO_InitStruct& (0+255)
  2391  0692  00B6               	movwf	?_GPIO_Init
  2392  0693  3000               	movlw	0
  2393  0694  118A  214A         	fcall	_GPIO_Init
  2394                           
  2395                           ;ms83fxx02_charge.c: 45: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), Bit_RESET);
  2396  0696  3080               	movlw	128
  2397  0697  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0698  00B9               	movwf	?_GPIO_WriteBit
  2399  0699  3000               	movlw	0
  2400  069A  01BA               	clrf	?_GPIO_WriteBit+1
  2401  069B  118A  2A80         	ljmp	_GPIO_WriteBit
  2402  069D                     __end_of_ChargeCtrl_Init:	
  2403                           
  2404                           	psect	text1664
  2405  0758                     __ptext1664:	
  2406 ;; =============== function _ChargeDetect_Init ends ============
  2407                           
  2408                           
  2409 ;; *************** function _ChargeCtrl_Output *****************
  2410 ;; Defined at:
  2411 ;;		line 55 in file "ms83fxx02_charge.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  BitVal          1    wreg     enum E1499
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  BitVal          1    6[BANK0 ] enum E1499
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0, pclath, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 160/0
  2422 ;;		On exit  : 160/0
  2423 ;;		Unchanged: FFE9F/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2425 ;;      Params:         0       0       0       0
  2426 ;;      Locals:         0       1       0       0
  2427 ;;      Temps:          0       0       0       0
  2428 ;;      Totals:         0       1       0       0
  2429 ;;Total ram usage:        1 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    6
  2432 ;; This function calls:
  2433 ;;		_GPIO_WriteBit
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438  0758                     _ChargeCtrl_Output:	
  2439                           
  2440                           ; Regs used in _ChargeCtrl_Output: [wreg+status,2+status,0+pclath+cstack]
  2441                           ;ChargeCtrl_Output@BitVal stored from wreg
  2442  0758  00BC               	movwf	ChargeCtrl_Output@BitVal
  2443                           
  2444                           ;ms83fxx02_charge.c: 56: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), BitVal);
  2445  0759  3080               	movlw	128
  2446  075A  00B9               	movwf	?_GPIO_WriteBit
  2447  075B  083C               	movf	ChargeCtrl_Output@BitVal,w
  2448  075C  00BA               	movwf	?_GPIO_WriteBit+1
  2449  075D  3000               	movlw	0
  2450  075E  118A  2A80         	ljmp	_GPIO_WriteBit
  2451  0760                     __end_of_ChargeCtrl_Output:	
  2452                           
  2453                           	psect	text1666
  2454  0734                     __ptext1666:	
  2455 ;; =============== function _MotorOperationTimer_Stop ends ============
  2456                           
  2457                           
  2458 ;; *************** function _KEY_DeInit *****************
  2459 ;; Defined at:
  2460 ;;		line 59 in file "MS83FXX02_KEY.C"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  GPIO_InitStr    2    2[BANK0 ] struct .
  2465 ;; Return value:  Size  Location     Type
  2466 ;;		None               void
  2467 ;; Registers used:
  2468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 160/0
  2471 ;;		On exit  : 160/0
  2472 ;;		Unchanged: FFE9F/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2474 ;;      Params:         0       0       0       0
  2475 ;;      Locals:         0       2       0       0
  2476 ;;      Temps:          0       0       0       0
  2477 ;;      Totals:         0       2       0       0
  2478 ;;Total ram usage:        2 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    6
  2481 ;; This function calls:
  2482 ;;		_GPIO_Init
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487  0734                     _KEY_DeInit:	
  2488  0734  3002               	movlw	2
  2489                           
  2490                           ;MS83FXX02_KEY.C: 60: GPIO_InitTypeDef GPIO_InitStruct;
  2491                           ;MS83FXX02_KEY.C: 61: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  2492                           
  2493                           ; Regs used in _KEY_DeInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2494  0735  01B9               	clrf	KEY_DeInit@GPIO_InitStruct+1
  2495                           
  2496                           ;MS83FXX02_KEY.C: 62: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  2497  0736  00B8               	movwf	KEY_DeInit@GPIO_InitStruct
  2498                           
  2499                           ;MS83FXX02_KEY.C: 63: GPIO_Init(GPIOC, &GPIO_InitStruct);
  2500  0737  3038               	movlw	KEY_DeInit@GPIO_InitStruct& (0+255)
  2501  0738  00B6               	movwf	?_GPIO_Init
  2502  0739  3001               	movlw	1
  2503  073A  118A  214A         	fcall	_GPIO_Init
  2504                           
  2505                           ;MS83FXX02_KEY.C: 65: INTE = 0;
  2506  073C  120B               	bcf	11,4
  2507                           
  2508                           ;MS83FXX02_KEY.C: 66: key_status = 1;
  2509  073D  01FC               	clrf	_key_status	;volatile
  2510  073E  0AFC               	incf	_key_status,f	;volatile
  2511                           
  2512                           ;MS83FXX02_KEY.C: 67: key_press = 0;
  2513  073F  01F9               	clrf	_key_press	;volatile
  2514                           
  2515                           ;MS83FXX02_KEY.C: 68: key_release = 0;
  2516  0740  01FA               	clrf	_key_release	;volatile
  2517                           
  2518                           ;MS83FXX02_KEY.C: 69: key_press_flag = 0;
  2519  0741  1283               	bcf	3,5	;RP0=0, select bank0
  2520  0742  01B1               	clrf	_key_press_flag	;volatile
  2521  0743  0008               	return
  2522  0744                     __end_of_KEY_DeInit:	
  2523                           
  2524                           	psect	text1667
  2525  0013                     __ptext1667:	
  2526 ;; =============== function _KEY_DeInit ends ============
  2527                           
  2528                           
  2529 ;; *************** function _ChargeDetect_GetStatus *****************
  2530 ;; Defined at:
  2531 ;;		line 60 in file "ms83fxx02_charge.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  i               2    3[BANK0 ] unsigned int 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      unsigned char 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, pclath, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/20
  2542 ;;		On exit  : 60/0
  2543 ;;		Unchanged: FFF9F/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2545 ;;      Params:         0       0       0       0
  2546 ;;      Locals:         0       2       0       0
  2547 ;;      Temps:          0       0       0       0
  2548 ;;      Totals:         0       2       0       0
  2549 ;;Total ram usage:        2 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    6
  2552 ;; This function calls:
  2553 ;;		_GPIO_ReadInputDataBit
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558  0013                     _ChargeDetect_GetStatus:	
  2559                           
  2560                           ;ms83fxx02_charge.c: 61: uint32_t i = 50;
  2561                           
  2562                           ; Regs used in _ChargeDetect_GetStatus: [wreg+status,2+status,0+pclath+cstack]
  2563  0013  3032               	movlw	50
  2564  0014  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0015  1303               	bcf	3,6	;RP1=0, select bank0
  2566  0016  00B9               	movwf	ChargeDetect_GetStatus@i
  2567  0017  01BA               	clrf	ChargeDetect_GetStatus@i+1
  2568  0018                     l15105:	
  2569                           ;ms83fxx02_charge.c: 63: while(i--)
  2570                           
  2571  0018  3001               	movlw	1
  2572  0019                     L3:	
  2573  0019  02B9               	subwf	ChargeDetect_GetStatus@i,f
  2574  001A  3000               	movlw	0
  2575  001B  1C03               	skipc
  2576  001C  03BA               	decf	ChargeDetect_GetStatus@i+1,f
  2577  001D  02BA               	subwf	ChargeDetect_GetStatus@i+1,f
  2578  001E  0A39               	incf	ChargeDetect_GetStatus@i,w
  2579  001F  1903               	skipnz
  2580  0020  0A3A               	incf	ChargeDetect_GetStatus@i+1,w
  2581  0021  1903               	btfsc	3,2
  2582  0022  3400               	retlw	0
  2583                           
  2584                           ;ms83fxx02_charge.c: 64: {
  2585                           ;ms83fxx02_charge.c: 65: if(1 == GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010)))
  2586  0023  3010               	movlw	16
  2587  0024  00B6               	movwf	?_GPIO_ReadInputDataBit
  2588  0025  3000               	movlw	0
  2589  0026  2100  118A         	fcall	_GPIO_ReadInputDataBit
  2590  0028  3A01               	xorlw	1
  2591  0029  1D03               	skipz
  2592  002A  2818               	goto	l15105
  2593  002B  301E               	movlw	30
  2594                           
  2595                           ;ms83fxx02_charge.c: 66: {
  2596                           ;ms83fxx02_charge.c: 67: charge_detect_count++;
  2597  002C  0AAF               	incf	_charge_detect_count,f
  2598                           
  2599                           ;ms83fxx02_charge.c: 68: if(charge_detect_count >= 30)
  2600  002D  022F               	subwf	_charge_detect_count,w
  2601  002E  3001               	movlw	1
  2602  002F  1C03               	skipc
  2603  0030  2819               	goto	L3
  2604                           
  2605                           ;ms83fxx02_charge.c: 69: {
  2606                           ;ms83fxx02_charge.c: 70: charge_detect_count = 0;
  2607  0031  01AF               	clrf	_charge_detect_count
  2608                           
  2609                           ;ms83fxx02_charge.c: 71: return 1;
  2610  0032  0008               	return
  2611  0033                     __end_of_ChargeDetect_GetStatus:	
  2612                           ;ms83fxx02_charge.c: 72: }
  2613                           ;ms83fxx02_charge.c: 73: }
  2614                           ;ms83fxx02_charge.c: 74: }
  2615                           ;ms83fxx02_charge.c: 76: return 0;
  2616                           
  2617  0033                     __ptext1663:	
  2618 ;; =============== function _ChargeCtrl_Init ends ============
  2619                           
  2620                           
  2621 ;; *************** function _ChargeDetect_Init *****************
  2622 ;; Defined at:
  2623 ;;		line 27 in file "ms83fxx02_charge.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  2628 ;; Return value:  Size  Location     Type
  2629 ;;		None               void
  2630 ;; Registers used:
  2631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 160/0
  2634 ;;		On exit  : 160/0
  2635 ;;		Unchanged: FFE9F/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2637 ;;      Params:         0       0       0       0
  2638 ;;      Locals:         0       2       0       0
  2639 ;;      Temps:          0       0       0       0
  2640 ;;      Totals:         0       2       0       0
  2641 ;;Total ram usage:        2 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    6
  2644 ;; This function calls:
  2645 ;;		_GPIO_Init
  2646 ;;		_GPIO_ReadInputDataBit
  2647 ;;		_GPIO_INTConfig
  2648 ;; This function is called by:
  2649 ;;		_Charge_Init
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652  0033                     _ChargeDetect_Init:	
  2653  0033  3010               	movlw	16
  2654                           
  2655                           ;ms83fxx02_charge.c: 28: GPIO_InitTypeDef GPIO_InitStruct;
  2656                           ;ms83fxx02_charge.c: 30: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  2657                           
  2658 ;; hardware stack exceeded
  2659                           ; Regs used in _ChargeDetect_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2660  0034  01BA               	clrf	ChargeDetect_Init@GPIO_InitStruct+1
  2661                           
  2662                           ;ms83fxx02_charge.c: 31: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000010);
  2663  0035  00B9               	movwf	ChargeDetect_Init@GPIO_InitStruct
  2664                           
  2665                           ;ms83fxx02_charge.c: 32: GPIO_Init(GPIOA, &GPIO_InitStruct);
  2666  0036  3039               	movlw	ChargeDetect_Init@GPIO_InitStruct& (0+255)
  2667  0037  00B6               	movwf	?_GPIO_Init
  2668  0038  3000               	movlw	0
  2669  0039  214A  118A         	fcall	_GPIO_Init
  2670                           
  2671                           ;ms83fxx02_charge.c: 34: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
  2672  003B  3010               	movlw	16
  2673  003C  1283               	bcf	3,5	;RP0=0, select bank0
  2674  003D  00B6               	movwf	?_GPIO_ReadInputDataBit
  2675  003E  3000               	movlw	0
  2676  003F  2100               	fcall	_GPIO_ReadInputDataBit
  2677                           
  2678                           ;ms83fxx02_charge.c: 35: GPIO_INTConfig(GPIOA, ((uint8_t)0x00000010), ENABLE);
  2679  0040  3010               	movlw	16
  2680  0041  00B6               	movwf	?_GPIO_INTConfig
  2681  0042  3000               	movlw	0
  2682  0043  01B7               	clrf	?_GPIO_INTConfig+1
  2683  0044  0AB7               	incf	?_GPIO_INTConfig+1,f
  2684  0045  118A  2E5B         	ljmp	_GPIO_INTConfig
  2685  0047                     __end_of_ChargeDetect_Init:	
  2686  0047                     __ptext1659:	
  2687 ;; =============== function _LED_UnderVoltageOutput ends ============
  2688                           
  2689                           
  2690 ;; *************** function _LED_CloseMotorStatus *****************
  2691 ;; Defined at:
  2692 ;;		line 71 in file "ms83fxx02_led.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;		None               void
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0, pclath, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 60/0
  2703 ;;		On exit  : 60/0
  2704 ;;		Unchanged: FFF9F/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2706 ;;      Params:         0       0       0       0
  2707 ;;      Locals:         0       0       0       0
  2708 ;;      Temps:          0       0       0       0
  2709 ;;      Totals:         0       0       0       0
  2710 ;;Total ram usage:        0 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    6
  2713 ;; This function calls:
  2714 ;;		_GPIO_WriteBit
  2715 ;; This function is called by:
  2716 ;;		_Motor_Stop
  2717 ;;		_Motor_HandleStatusChangeEvt
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720  0047                     _LED_CloseMotorStatus:	
  2721  0047                     l15159:	
  2722                           ; Regs used in _LED_CloseMotorStatus: [wreg+status,2+status,0+pclath+cstack]
  2723                           
  2724                           
  2725                           ;ms83fxx02_led.c: 72: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  2726  0047  3004               	movlw	4
  2727  0048  00B9               	movwf	?_GPIO_WriteBit
  2728  0049  3000               	movlw	0
  2729  004A  01BA               	clrf	?_GPIO_WriteBit+1
  2730  004B  2280  118A         	fcall	_GPIO_WriteBit
  2731                           
  2732                           ;ms83fxx02_led.c: 73: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  2733  004D  3008               	movlw	8
  2734  004E  00B9               	movwf	?_GPIO_WriteBit
  2735  004F  3000               	movlw	0
  2736  0050  01BA               	clrf	?_GPIO_WriteBit+1
  2737  0051  2280  118A         	fcall	_GPIO_WriteBit
  2738  0053  3001               	movlw	1
  2739                           
  2740                           ;ms83fxx02_led.c: 74: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  2741  0054  01B9               	clrf	?_GPIO_WriteBit
  2742  0055  0AB9               	incf	?_GPIO_WriteBit,f
  2743  0056  01BA               	clrf	?_GPIO_WriteBit+1
  2744  0057  2A80               	ljmp	_GPIO_WriteBit
  2745  0058                     __end_of_LED_CloseMotorStatus:	
  2746  0058                     __ptext1652:	
  2747 ;; =============== function _Motor_Stop ends ============
  2748                           
  2749                           
  2750 ;; *************** function _Battery_Detect *****************
  2751 ;; Defined at:
  2752 ;;		line 130 in file "ms83fxx02_pwr.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  adc_data        2   14[BANK0 ] unsigned int 
  2757 ;;  i               1   13[BANK0 ] unsigned char 
  2758 ;;  mode            1   12[BANK0 ] enum E1521
  2759 ;; Return value:  Size  Location     Type
  2760 ;;		None               void
  2761 ;; Registers used:
  2762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 60/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: FFE00/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2768 ;;      Params:         0       0       0       0
  2769 ;;      Locals:         0       4       0       0
  2770 ;;      Temps:          0       2       0       0
  2771 ;;      Totals:         0       6       0       0
  2772 ;;Total ram usage:        6 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    7
  2775 ;; This function calls:
  2776 ;;		_ADC_ReadData
  2777 ;;		___lwdiv
  2778 ;;		_GetDeviceMode
  2779 ;;		_EEPROM_SetFlag
  2780 ;;		_EEPROM_StoreModeData
  2781 ;;		_EEPROM_StoreMotorData
  2782 ;;		_LED_UnderVoltageOutput
  2783 ;;		_LEDTimer_GetOperationStatus
  2784 ;;		_LEDTimer_Cmd
  2785 ;;		_LEDTimer_INTConfig
  2786 ;;		_LEDTimer_GetINTStatus
  2787 ;;		_GPIO_ReadInputDataBit
  2788 ;;		_SetDeviceMode
  2789 ;;		_GPIO_WriteBit
  2790 ;; This function is called by:
  2791 ;;		_charge_control
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795  0058                     _Battery_Detect:	
  2796  0058                     l15189:	
  2797 ;; hardware stack exceeded
  2798                           ; Regs used in _Battery_Detect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2799                           
  2800  0058  3006               	movlw	6
  2801                           
  2802                           ;ms83fxx02_pwr.c: 132: DEVICE_MODE_Type mode = RUN_MODE;
  2803  0059  01C2               	clrf	Battery_Detect@mode
  2804                           
  2805                           ;ms83fxx02_pwr.c: 133: uint32_t adc_data = 0;
  2806  005A  01C4               	clrf	Battery_Detect@adc_data
  2807  005B  01C5               	clrf	Battery_Detect@adc_data+1
  2808                           
  2809                           ;ms83fxx02_pwr.c: 135: battery_value[battery_sample_count++] = ADC_ReadData((0x06));
  2810  005C  23BF  118A         	fcall	_ADC_ReadData
  2811  005E  1003               	clrc
  2812  005F  0D2E               	rlf	_battery_sample_count,w	;volatile
  2813  0060  3E20               	addlw	_battery_value& (0+255)
  2814  0061  0084               	movwf	4
  2815  0062  083A               	movf	?_ADC_ReadData,w
  2816  0063  1383               	bcf	3,7	;select IRP bank0
  2817  0064  0080               	movwf	0
  2818  0065  0A84               	incf	4,f
  2819  0066  083B               	movf	?_ADC_ReadData+1,w
  2820  0067  0080               	movwf	0
  2821  0068  0AAE               	incf	_battery_sample_count,f	;volatile
  2822                           
  2823                           ;ms83fxx02_pwr.c: 137: if(battery_sample_count < 5)
  2824  0069  3005               	movlw	5
  2825  006A  022E               	subwf	_battery_sample_count,w	;volatile
  2826  006B  1C03               	btfss	3,0
  2827  006C  0008               	return
  2828                           
  2829                           ;ms83fxx02_pwr.c: 140: }
  2830                           ;ms83fxx02_pwr.c: 142: battery_sample_count = 0;
  2831                           
  2832                           ;ms83fxx02_pwr.c: 138: {
  2833                           ;ms83fxx02_pwr.c: 139: return ;
  2834  006D  01AE               	clrf	_battery_sample_count	;volatile
  2835                           
  2836                           ;ms83fxx02_pwr.c: 143: for(i=0; i<5; i++)
  2837  006E  01C3               	clrf	Battery_Detect@i
  2838                           
  2839                           ;ms83fxx02_pwr.c: 144: {
  2840                           ;ms83fxx02_pwr.c: 145: adc_data += battery_value[i];
  2841  006F  1003               	clrc
  2842  0070                     L2:	
  2843  0070  0D43               	rlf	Battery_Detect@i,w
  2844  0071  3E20               	addlw	_battery_value& (0+255)
  2845  0072  0084               	movwf	4
  2846  0073  0800               	movf	0,w
  2847  0074  00C0               	movwf	??_Battery_Detect
  2848  0075  0A84               	incf	4,f
  2849  0076  0800               	movf	0,w
  2850  0077  00C1               	movwf	??_Battery_Detect+1
  2851  0078  0840               	movf	??_Battery_Detect,w
  2852  0079  07C4               	addwf	Battery_Detect@adc_data,f
  2853  007A  1803               	skipnc
  2854  007B  0AC5               	incf	Battery_Detect@adc_data+1,f
  2855  007C  0841               	movf	??_Battery_Detect+1,w
  2856  007D  07C5               	addwf	Battery_Detect@adc_data+1,f
  2857  007E  3005               	movlw	5
  2858  007F  0AC3               	incf	Battery_Detect@i,f
  2859  0080  0243               	subwf	Battery_Detect@i,w
  2860  0081  1C03               	skipc
  2861  0082  2870               	goto	L2
  2862                           
  2863                           ;ms83fxx02_pwr.c: 146: }
  2864                           ;ms83fxx02_pwr.c: 147: adc_data = adc_data / 5;
  2865  0083  3005               	movlw	5
  2866  0084  00B6               	movwf	?___lwdiv
  2867  0085  01B7               	clrf	?___lwdiv+1
  2868  0086  0845               	movf	Battery_Detect@adc_data+1,w
  2869  0087  00B9               	movwf	?___lwdiv+3
  2870  0088  0844               	movf	Battery_Detect@adc_data,w
  2871  0089  00B8               	movwf	?___lwdiv+2
  2872  008A  2367  118A         	fcall	___lwdiv
  2873  008C  0837               	movf	?___lwdiv+1,w
  2874  008D  00C5               	movwf	Battery_Detect@adc_data+1
  2875  008E  0836               	movf	?___lwdiv,w
  2876  008F  00C4               	movwf	Battery_Detect@adc_data
  2877                           
  2878                           ;ms83fxx02_pwr.c: 149: mode = GetDeviceMode();
  2879  0090  2321  118A         	fcall	_GetDeviceMode
  2880  0092  00C2               	movwf	Battery_Detect@mode
  2881                           
  2882                           ;ms83fxx02_pwr.c: 151: if(mode == RUN_MODE)
  2883  0093  08C2               	movf	Battery_Detect@mode,f
  2884  0094  1D03               	skipz
  2885  0095  28D0               	goto	l15233
  2886                           
  2887                           ;ms83fxx02_pwr.c: 152: {
  2888                           ;ms83fxx02_pwr.c: 153: if(adc_data < 460)
  2889  0096  3001               	movlw	1
  2890  0097  0245               	subwf	Battery_Detect@adc_data+1,w
  2891  0098  30CC               	movlw	204
  2892  0099  1903               	skipnz
  2893  009A  0244               	subwf	Battery_Detect@adc_data,w
  2894  009B  1803               	skipnc
  2895  009C  28A7               	goto	l15221
  2896                           
  2897                           ;ms83fxx02_pwr.c: 154: {
  2898                           ;ms83fxx02_pwr.c: 157: EEPROM_SetFlag();
  2899  009D  23F9  118A         	fcall	_EEPROM_SetFlag
  2900                           
  2901                           ;ms83fxx02_pwr.c: 158: EEPROM_StoreModeData();
  2902  009F  23FD  118A         	fcall	_EEPROM_StoreModeData
  2903                           
  2904                           ;ms83fxx02_pwr.c: 159: EEPROM_StoreMotorData();
  2905  00A1  2391  118A         	fcall	_EEPROM_StoreMotorData
  2906                           
  2907                           ;ms83fxx02_pwr.c: 160: LED_UnderVoltageOutput(Bit_RESET);
  2908  00A3  3000               	movlw	0
  2909  00A4  2319               	fcall	_LED_UnderVoltageOutput
  2910  00A5  0063               	sleep	;#
  2911                           
  2912                           ;ms83fxx02_pwr.c: 164: }
  2913  00A6  0008               	return
  2914  00A7                     l15221:	
  2915                           
  2916                           ;ms83fxx02_pwr.c: 165: else if(adc_data < 512)
  2917  00A7  3002               	movlw	2
  2918  00A8  0245               	subwf	Battery_Detect@adc_data+1,w
  2919  00A9  3000               	movlw	0
  2920  00AA  1903               	skipnz
  2921  00AB  0244               	subwf	Battery_Detect@adc_data,w
  2922  00AC  1803               	skipnc
  2923  00AD  28C5               	goto	l15231
  2924                           
  2925                           ;ms83fxx02_pwr.c: 166: {
  2926                           ;ms83fxx02_pwr.c: 169: if(LEDTimer_GetOperationStatus() == 0)
  2927  00AE  2305  118A         	fcall	_LEDTimer_GetOperationStatus
  2928  00B0  3800               	iorlw	0
  2929  00B1  1D03               	skipz
  2930  00B2  28B9               	goto	l15227
  2931                           
  2932                           ;ms83fxx02_pwr.c: 170: {
  2933                           ;ms83fxx02_pwr.c: 172: LEDTimer_Cmd(ENABLE);
  2934  00B3  3001               	movlw	1
  2935  00B4  22E2  118A         	fcall	_LEDTimer_Cmd
  2936                           
  2937                           ;ms83fxx02_pwr.c: 173: LEDTimer_INTConfig(ENABLE);
  2938  00B6  3001               	movlw	1
  2939  00B7  22F9  118A         	fcall	_LEDTimer_INTConfig
  2940  00B9                     l15227:	
  2941                           
  2942                           ;ms83fxx02_pwr.c: 174: }
  2943                           ;ms83fxx02_pwr.c: 176: if(LEDTimer_GetINTStatus())
  2944  00B9  232A  118A         	fcall	_LEDTimer_GetINTStatus
  2945  00BB  3A00               	xorlw	0
  2946  00BC  1903               	skipnz
  2947  00BD  0008               	return
  2948                           
  2949                           ;ms83fxx02_pwr.c: 177: {
  2950                           ;ms83fxx02_pwr.c: 178: LED_UnderVoltageOutput((BitAction)(1 - GPIO_ReadInputDataBit(GPIO
      +                          C, ((uint8_t)0x00000008))));
  2951  00BE  3008               	movlw	8
  2952  00BF  00B6               	movwf	?_GPIO_ReadInputDataBit
  2953  00C0  3001               	movlw	1
  2954  00C1  2100  118A         	fcall	_GPIO_ReadInputDataBit
  2955  00C3  3C01               	sublw	1
  2956  00C4  2B19               	ljmp	_LED_UnderVoltageOutput
  2957  00C5                     l15231:	
  2958                           
  2959                           ;ms83fxx02_pwr.c: 181: else
  2960                           ;ms83fxx02_pwr.c: 182: {
  2961                           ;ms83fxx02_pwr.c: 183: LED_UnderVoltageOutput(Bit_RESET);
  2962  00C5  3000               	movlw	0
  2963  00C6  2319  118A         	fcall	_LED_UnderVoltageOutput
  2964                           
  2965                           ;ms83fxx02_pwr.c: 185: LEDTimer_Cmd(DISABLE);
  2966  00C8  3000               	movlw	0
  2967  00C9  22E2  118A         	fcall	_LEDTimer_Cmd
  2968                           
  2969                           ;ms83fxx02_pwr.c: 186: LEDTimer_INTConfig(DISABLE);
  2970  00CB  3000               	movlw	0
  2971  00CC  22F9  118A         	fcall	_LEDTimer_INTConfig
  2972                           
  2973                           ;ms83fxx02_pwr.c: 187: SetDeviceMode(RUN_MODE);
  2974  00CE  3000               	movlw	0
  2975  00CF  2C02               	ljmp	_SetDeviceMode
  2976  00D0                     l15233:	
  2977                           
  2978                           ;ms83fxx02_pwr.c: 190: else
  2979                           ;ms83fxx02_pwr.c: 191: {
  2980                           ;ms83fxx02_pwr.c: 192: if(mode == CHARGE_MODE)
  2981  00D0  0B42               	decfsz	Battery_Detect@mode,w
  2982  00D1  0008               	return
  2983                           
  2984                           ;ms83fxx02_pwr.c: 193: {
  2985                           ;ms83fxx02_pwr.c: 195: if(adc_data > 686)
  2986  00D2  3002               	movlw	2
  2987  00D3  0245               	subwf	Battery_Detect@adc_data+1,w
  2988  00D4  30AF               	movlw	175
  2989  00D5  1903               	skipnz
  2990  00D6  0244               	subwf	Battery_Detect@adc_data,w
  2991  00D7  1C03               	skipc
  2992  00D8  0008               	return
  2993  00D9  3001               	movlw	1
  2994                           
  2995                           ;ms83fxx02_pwr.c: 196: {
  2996                           ;ms83fxx02_pwr.c: 198: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_SET);
  2997  00DA  01B9               	clrf	?_GPIO_WriteBit
  2998  00DB  0AB9               	incf	?_GPIO_WriteBit,f
  2999  00DC  01BA               	clrf	?_GPIO_WriteBit+1
  3000  00DD  0ABA               	incf	?_GPIO_WriteBit+1,f
  3001  00DE  2A80               	ljmp	_GPIO_WriteBit
  3002  00DF                     __end_of_Battery_Detect:	
  3003  00DF                     __ptext1660:	
  3004 ;; =============== function _LED_CloseMotorStatus ends ============
  3005                           
  3006                           
  3007 ;; *************** function _LED_DisplayRunLimit *****************
  3008 ;; Defined at:
  3009 ;;		line 64 in file "ms83fxx02_led.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 60/0
  3020 ;;		On exit  : 60/0
  3021 ;;		Unchanged: FFF9F/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3023 ;;      Params:         0       0       0       0
  3024 ;;      Locals:         0       0       0       0
  3025 ;;      Temps:          0       0       0       0
  3026 ;;      Totals:         0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    6
  3030 ;; This function calls:
  3031 ;;		_GPIO_ReadInputDataBit
  3032 ;;		_GPIO_WriteBit
  3033 ;; This function is called by:
  3034 ;;		_Motor_HandleStatusChangeEvt
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037  00DF                     _LED_DisplayRunLimit:	
  3038                           
  3039                           ;ms83fxx02_led.c: 65: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOA, ((uint8_t)0x00000004))));
  3040                           
  3041                           ; Regs used in _LED_DisplayRunLimit: [wreg+status,2+status,0+pclath+cstack]
  3042  00DF  3004               	movlw	4
  3043  00E0  00B9               	movwf	?_GPIO_WriteBit
  3044  00E1  00B6               	movwf	?_GPIO_ReadInputDataBit
  3045  00E2  3000               	movlw	0
  3046  00E3  2100  118A         	fcall	_GPIO_ReadInputDataBit
  3047  00E5  3C01               	sublw	1
  3048  00E6  00BA               	movwf	?_GPIO_WriteBit+1
  3049  00E7  3000               	movlw	0
  3050  00E8  2280  118A         	fcall	_GPIO_WriteBit
  3051                           
  3052                           ;ms83fxx02_led.c: 66: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOA, ((uint8_t)0x00000008))));
  3053  00EA  3008               	movlw	8
  3054  00EB  00B9               	movwf	?_GPIO_WriteBit
  3055  00EC  00B6               	movwf	?_GPIO_ReadInputDataBit
  3056  00ED  3000               	movlw	0
  3057  00EE  2100  118A         	fcall	_GPIO_ReadInputDataBit
  3058  00F0  3C01               	sublw	1
  3059  00F1  00BA               	movwf	?_GPIO_WriteBit+1
  3060  00F2  3000               	movlw	0
  3061  00F3  2280  118A         	fcall	_GPIO_WriteBit
  3062  00F5  3001               	movlw	1
  3063                           
  3064                           ;ms83fxx02_led.c: 67: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOC, ((uint8_t)0x00000001))));
  3065  00F6  01B9               	clrf	?_GPIO_WriteBit
  3066  00F7  0AB9               	incf	?_GPIO_WriteBit,f
  3067  00F8  01B6               	clrf	?_GPIO_ReadInputDataBit
  3068  00F9  0AB6               	incf	?_GPIO_ReadInputDataBit,f
  3069  00FA  2100  118A         	fcall	_GPIO_ReadInputDataBit
  3070  00FC  3C01               	sublw	1
  3071  00FD  00BA               	movwf	?_GPIO_WriteBit+1
  3072  00FE  3001               	movlw	1
  3073  00FF  2A80               	ljmp	_GPIO_WriteBit
  3074  0100                     __end_of_LED_DisplayRunLimit:	
  3075  0100                     __ptext1693:	
  3076 ;; =============== function _GPIO_INTConfig ends ============
  3077                           
  3078                           
  3079 ;; *************** function _GPIO_ReadInputDataBit *****************
  3080 ;; Defined at:
  3081 ;;		line 101 in file "ms83fxx02_gpio.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  GPIOx           1    wreg     enum E1491
  3084 ;;  GPIO_Pin        1    0[BANK0 ] unsigned char 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  GPIOx           1    2[BANK0 ] enum E1491
  3087 ;;  bitstatus       1    1[BANK0 ] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      unsigned char 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 60/0
  3094 ;;		On exit  : 60/0
  3095 ;;		Unchanged: FFF9F/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3097 ;;      Params:         0       1       0       0
  3098 ;;      Locals:         0       2       0       0
  3099 ;;      Temps:          0       0       0       0
  3100 ;;      Totals:         0       3       0       0
  3101 ;;Total ram usage:        3 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    5
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_ChargeDetect_Init
  3108 ;;		_ChargeDetect_GetStatus
  3109 ;;		_LED_DisplayRunLimit
  3110 ;;		_Battery_Detect
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113  0100                     _GPIO_ReadInputDataBit:	
  3114                           
  3115                           ; Regs used in _GPIO_ReadInputDataBit: [wreg+status,2+status,0]
  3116                           ;GPIO_ReadInputDataBit@GPIOx stored from wreg
  3117  0100  00B8               	movwf	GPIO_ReadInputDataBit@GPIOx
  3118                           
  3119                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
  3120  0101  01B7               	clrf	GPIO_ReadInputDataBit@bitstatus
  3121                           
  3122                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
  3123  0102  08B8               	movf	GPIO_ReadInputDataBit@GPIOx,f
  3124  0103  1D03               	skipz
  3125  0104  290C               	goto	l14607
  3126                           
  3127                           ;ms83fxx02_gpio.c: 105: {
  3128                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
  3129  0105  0805               	movf	5,w	;volatile
  3130  0106  0536               	andwf	GPIO_ReadInputDataBit@GPIO_Pin,w
  3131  0107  1903               	btfsc	3,2
  3132  0108  2912               	goto	l14613
  3133  0109                     l14605:	
  3134                           
  3135                           ;ms83fxx02_gpio.c: 107: {
  3136                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
  3137  0109  01B7               	clrf	GPIO_ReadInputDataBit@bitstatus
  3138  010A  0AB7               	incf	GPIO_ReadInputDataBit@bitstatus,f
  3139  010B  2912               	goto	l14613
  3140  010C                     l14607:	
  3141                           
  3142                           ;ms83fxx02_gpio.c: 111: else
  3143                           ;ms83fxx02_gpio.c: 112: {
  3144                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
  3145  010C  0B38               	decfsz	GPIO_ReadInputDataBit@GPIOx,w
  3146  010D  2912               	goto	l14613
  3147                           
  3148                           ;ms83fxx02_gpio.c: 114: {
  3149                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
  3150  010E  0807               	movf	7,w	;volatile
  3151  010F  0536               	andwf	GPIO_ReadInputDataBit@GPIO_Pin,w
  3152  0110  1D03               	btfss	3,2
  3153  0111  2909               	goto	l14605
  3154  0112                     l14613:	
  3155                           
  3156                           ;ms83fxx02_gpio.c: 118: }
  3157                           ;ms83fxx02_gpio.c: 119: }
  3158                           ;ms83fxx02_gpio.c: 120: }
  3159                           ;ms83fxx02_gpio.c: 122: return bitstatus;
  3160  0112  0837               	movf	GPIO_ReadInputDataBit@bitstatus,w
  3161  0113  0008               	return
  3162  0114                     __end_of_GPIO_ReadInputDataBit:	
  3163  0114                     __ptext1674:	
  3164 ;; =============== function _KEY_Init ends ============
  3165                           
  3166                           
  3167 ;; *************** function _LED_Init *****************
  3168 ;; Defined at:
  3169 ;;		line 24 in file "ms83fxx02_led.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  GPIO_InitStr    2    6[BANK0 ] struct .
  3174 ;; Return value:  Size  Location     Type
  3175 ;;		None               void
  3176 ;; Registers used:
  3177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 40/0
  3180 ;;		On exit  : 160/0
  3181 ;;		Unchanged: FFE9F/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3183 ;;      Params:         0       0       0       0
  3184 ;;      Locals:         0       2       0       0
  3185 ;;      Temps:          0       0       0       0
  3186 ;;      Totals:         0       2       0       0
  3187 ;;Total ram usage:        2 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    6
  3190 ;; This function calls:
  3191 ;;		_GPIO_Init
  3192 ;;		_GPIO_WriteBit
  3193 ;; This function is called by:
  3194 ;;		_Driver_Init
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198  0114                     _LED_Init:	
  3199                           
  3200                           ;ms83fxx02_led.c: 25: GPIO_InitTypeDef GPIO_InitStruct;
  3201                           ;ms83fxx02_led.c: 27: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  3202                           
  3203                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3204  0114  1283               	bcf	3,5	;RP0=0, select bank0
  3205  0115  3004               	movlw	4
  3206  0116  01BD               	clrf	LED_Init@GPIO_InitStruct+1
  3207  0117  0ABD               	incf	LED_Init@GPIO_InitStruct+1,f
  3208                           
  3209                           ;ms83fxx02_led.c: 28: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000004);
  3210  0118  00BC               	movwf	LED_Init@GPIO_InitStruct
  3211                           
  3212                           ;ms83fxx02_led.c: 29: GPIO_Init(GPIOA, &GPIO_InitStruct);
  3213  0119  303C               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  3214  011A  00B6               	movwf	?_GPIO_Init
  3215  011B  3000               	movlw	0
  3216  011C  214A  118A         	fcall	_GPIO_Init
  3217                           
  3218                           ;ms83fxx02_led.c: 31: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  3219                           
  3220                           ;ms83fxx02_led.c: 32: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000008);
  3221                           
  3222                           ;ms83fxx02_led.c: 33: GPIO_Init(GPIOA, &GPIO_InitStruct);
  3223  011E  2406  118A         	fcall	PL2	;call to abstracted procedure
  3224  0120  3000               	movlw	0
  3225  0121  214A  118A         	fcall	_GPIO_Init
  3226                           
  3227                           ;ms83fxx02_led.c: 35: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  3228  0123  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0124  303C               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  3230  0125  01BD               	clrf	LED_Init@GPIO_InitStruct+1
  3231  0126  0ABD               	incf	LED_Init@GPIO_InitStruct+1,f
  3232  0127  01BC               	clrf	LED_Init@GPIO_InitStruct
  3233  0128  0ABC               	incf	LED_Init@GPIO_InitStruct,f
  3234                           
  3235                           ;ms83fxx02_led.c: 37: GPIO_Init(GPIOC, &GPIO_InitStruct);
  3236  0129  00B6               	movwf	?_GPIO_Init
  3237  012A  3001               	movlw	1
  3238  012B  214A  118A         	fcall	_GPIO_Init
  3239                           
  3240                           ;ms83fxx02_led.c: 43: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  3241                           
  3242                           ;ms83fxx02_led.c: 44: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000008);
  3243                           
  3244                           ;ms83fxx02_led.c: 45: GPIO_Init(GPIOC, &GPIO_InitStruct);
  3245  012D  2406  118A         	fcall	PL2	;call to abstracted procedure
  3246  012F  3001               	movlw	1
  3247  0130  214A  118A         	fcall	_GPIO_Init
  3248                           
  3249                           ;ms83fxx02_led.c: 47: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  3250  0132  3004               	movlw	4
  3251  0133  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0134  00B9               	movwf	?_GPIO_WriteBit
  3253  0135  3000               	movlw	0
  3254  0136  01BA               	clrf	?_GPIO_WriteBit+1
  3255  0137  2280  118A         	fcall	_GPIO_WriteBit
  3256                           
  3257                           ;ms83fxx02_led.c: 48: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  3258  0139  3008               	movlw	8
  3259  013A  00B9               	movwf	?_GPIO_WriteBit
  3260  013B  3000               	movlw	0
  3261  013C  01BA               	clrf	?_GPIO_WriteBit+1
  3262  013D  2280  118A         	fcall	_GPIO_WriteBit
  3263  013F  3001               	movlw	1
  3264                           
  3265                           ;ms83fxx02_led.c: 49: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  3266  0140  01B9               	clrf	?_GPIO_WriteBit
  3267  0141  0AB9               	incf	?_GPIO_WriteBit,f
  3268  0142  01BA               	clrf	?_GPIO_WriteBit+1
  3269  0143  2280  118A         	fcall	_GPIO_WriteBit
  3270                           
  3271                           ;ms83fxx02_led.c: 52: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), Bit_RESET);
  3272  0145  3008               	movlw	8
  3273  0146  00B9               	movwf	?_GPIO_WriteBit
  3274  0147  3001               	movlw	1
  3275  0148  01BA               	clrf	?_GPIO_WriteBit+1
  3276  0149  2A80               	ljmp	_GPIO_WriteBit
  3277  014A                     __end_of_LED_Init:	
  3278  014A                     __ptext1694:	
  3279 ;; =============== function _GPIO_ReadInputDataBit ends ============
  3280                           
  3281                           
  3282 ;; *************** function _GPIO_Init *****************
  3283 ;; Defined at:
  3284 ;;		line 27 in file "ms83fxx02_gpio.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  GPIOx           1    wreg     enum E1491
  3287 ;;  GPIO_InitStr    1    0[BANK0 ] PTR struct .
  3288 ;;		 -> LED_Init@GPIO_InitStruct(2), KEY_Init@GPIO_InitStruct(2), KEY_DeInit@GPIO_InitStruct(2), ChargeCtrl_Init@GPIO_In
      +itStruct(2), 
  3289 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(2), 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  GPIOx           1    1[BANK0 ] enum E1491
  3292 ;; Return value:  Size  Location     Type
  3293 ;;		None               void
  3294 ;; Registers used:
  3295 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3296 ;; Tracked objects:
  3297 ;;		On entry : 60/0
  3298 ;;		On exit  : 160/20
  3299 ;;		Unchanged: FFE9F/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3301 ;;      Params:         0       1       0       0
  3302 ;;      Locals:         0       1       0       0
  3303 ;;      Temps:          0       0       0       0
  3304 ;;      Totals:         0       2       0       0
  3305 ;;Total ram usage:        2 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    5
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_ChargeDetect_Init
  3312 ;;		_ChargeCtrl_Init
  3313 ;;		_KEY_DeInit
  3314 ;;		_KEY_Init
  3315 ;;		_LED_Init
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318  014A                     _GPIO_Init:	
  3319                           
  3320                           ; Regs used in _GPIO_Init: [wreg-fsr0h+status,2+status,0]
  3321                           ;GPIO_Init@GPIOx stored from wreg
  3322  014A  00B7               	movwf	GPIO_Init@GPIOx
  3323                           
  3324                           ;ms83fxx02_gpio.c: 28: if(GPIOx == GPIOA)
  3325  014B  08B7               	movf	GPIO_Init@GPIOx,f
  3326  014C  1D03               	skipz
  3327  014D  2960               	goto	l14593
  3328                           
  3329                           ;ms83fxx02_gpio.c: 29: {
  3330                           ;ms83fxx02_gpio.c: 30: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  3331  014E  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3332  014F  3E01               	addlw	1
  3333  0150  0084               	movwf	4
  3334  0151  1383               	bcf	3,7	;select IRP bank0
  3335  0152  0B00               	decfsz	0,w
  3336  0153  295A               	goto	l14591
  3337                           
  3338                           ;ms83fxx02_gpio.c: 31: {
  3339                           ;ms83fxx02_gpio.c: 33: TRISA &= ~(GPIO_InitStruct->GPIO_Pin);
  3340  0154  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3341  0155  0084               	movwf	4
  3342  0156  0900               	comf	0,w
  3343  0157  1683               	bsf	3,5	;RP0=1, select bank1
  3344  0158  0585               	andwf	5,f	;volatile
  3345                           
  3346                           ;ms83fxx02_gpio.c: 34: }
  3347  0159  0008               	return
  3348  015A                     l14591:	
  3349                           
  3350                           ;ms83fxx02_gpio.c: 35: else
  3351                           ;ms83fxx02_gpio.c: 36: {
  3352                           ;ms83fxx02_gpio.c: 38: TRISA |= GPIO_InitStruct->GPIO_Pin;
  3353  015A  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3354  015B  0084               	movwf	4
  3355  015C  0800               	movf	0,w
  3356  015D  1683               	bsf	3,5	;RP0=1, select bank1
  3357  015E  0485               	iorwf	5,f	;volatile
  3358  015F  0008               	return
  3359  0160                     l14593:	
  3360                           
  3361                           ;ms83fxx02_gpio.c: 41: else
  3362                           ;ms83fxx02_gpio.c: 42: {
  3363                           ;ms83fxx02_gpio.c: 43: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  3364  0160  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3365  0161  3E01               	addlw	1
  3366  0162  0084               	movwf	4
  3367  0163  1383               	bcf	3,7	;select IRP bank0
  3368  0164  0B00               	decfsz	0,w
  3369  0165  296C               	goto	l14597
  3370                           
  3371                           ;ms83fxx02_gpio.c: 44: {
  3372                           ;ms83fxx02_gpio.c: 46: TRISC &= ~(GPIO_InitStruct->GPIO_Pin);
  3373  0166  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3374  0167  0084               	movwf	4
  3375  0168  0900               	comf	0,w
  3376  0169  1683               	bsf	3,5	;RP0=1, select bank1
  3377  016A  0587               	andwf	7,f	;volatile
  3378                           
  3379                           ;ms83fxx02_gpio.c: 47: }
  3380  016B  0008               	return
  3381  016C                     l14597:	
  3382                           
  3383                           ;ms83fxx02_gpio.c: 48: else
  3384                           ;ms83fxx02_gpio.c: 49: {
  3385                           ;ms83fxx02_gpio.c: 51: TRISC |= GPIO_InitStruct->GPIO_Pin;
  3386  016C  0836               	movf	GPIO_Init@GPIO_InitStruct,w
  3387  016D  0084               	movwf	4
  3388  016E  0800               	movf	0,w
  3389  016F  1683               	bsf	3,5	;RP0=1, select bank1
  3390  0170  0487               	iorwf	7,f	;volatile
  3391  0171  0008               	return
  3392  0172                     __end_of_GPIO_Init:	
  3393  0172                     __ptext1647:	
  3394 ;; =============== function _main ends ============
  3395                           
  3396                           
  3397 ;; *************** function _Motor_HandleStatusChangeEvt *****************
  3398 ;; Defined at:
  3399 ;;		line 368 in file "ms83fxx02_motor.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  status          1    wreg     enum E1554
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  status          1    9[BANK0 ] enum E1554
  3404 ;; Return value:  Size  Location     Type
  3405 ;;		None               void
  3406 ;; Registers used:
  3407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/20
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: FFE00/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3413 ;;      Params:         0       0       0       0
  3414 ;;      Locals:         0       1       0       0
  3415 ;;      Temps:          0       0       0       0
  3416 ;;      Totals:         0       1       0       0
  3417 ;;Total ram usage:        1 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    8
  3420 ;; This function calls:
  3421 ;;		_Motor_CheckRunLimit
  3422 ;;		_KEY_GetReleaseStatus
  3423 ;;		_Motor_SetStatus
  3424 ;;		_Motor_Start
  3425 ;;		_MotorOperationTimer_Stop
  3426 ;;		_MotorOperationTimer_Init
  3427 ;;		_SwitchModeTimer_GetINTStatus
  3428 ;;		_Motor_Stop
  3429 ;;		_SwitchModeTimer_Cmd
  3430 ;;		_SwitchModeTimer_INTConfig
  3431 ;;		_LEDTimer_GetOperationStatus
  3432 ;;		_LEDTimer_Cmd
  3433 ;;		_LEDTimer_INTConfig
  3434 ;;		_LEDTimer_GetRunLimitINTStatus
  3435 ;;		_LED_DisplayRunLimit
  3436 ;;		_KEY_GetPressStatus
  3437 ;;		_LED_CloseMotorStatus
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442  0172                     _Motor_HandleStatusChangeEvt:	
  3443                           
  3444 ;; hardware stack exceeded
  3445                           ; Regs used in _Motor_HandleStatusChangeEvt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3446                           ;Motor_HandleStatusChangeEvt@status stored from wreg
  3447  0172  1283               	bcf	3,5	;RP0=0, select bank0
  3448  0173  1303               	bcf	3,6	;RP1=0, select bank0
  3449  0174  00BF               	movwf	Motor_HandleStatusChangeEvt@status
  3450                           
  3451                           ;ms83fxx02_motor.c: 369: if(!Motor_CheckRunLimit())
  3452  0175  230A  118A         	fcall	_Motor_CheckRunLimit
  3453  0177  3800               	iorlw	0
  3454  0178  1903               	btfsc	3,2
  3455  0179  29DA               	goto	l15327
  3456  017A  29E9               	goto	l15329
  3457  017B                     l15279:	
  3458                           
  3459                           ;ms83fxx02_motor.c: 374: {
  3460                           ;ms83fxx02_motor.c: 375: if(KEY_GetReleaseStatus())
  3461  017B  2226  118A         	fcall	_KEY_GetReleaseStatus
  3462  017D  3A00               	xorlw	0
  3463  017E  1903               	skipnz
  3464  017F  298A               	goto	l15289
  3465                           
  3466                           ;ms83fxx02_motor.c: 376: {
  3467                           ;ms83fxx02_motor.c: 377: Motor_SetStatus(MOTOR_MODE_DUTY_100);
  3468  0180  3002               	movlw	2
  3469  0181  2222  118A         	fcall	_Motor_SetStatus
  3470                           
  3471                           ;ms83fxx02_motor.c: 378: Motor_Start(MOTOR_MODE_DUTY_100);
  3472  0183  3002               	movlw	2
  3473  0184  2240  118A         	fcall	_Motor_Start
  3474                           
  3475                           ;ms83fxx02_motor.c: 381: MotorOperationTimer_Stop();
  3476  0186  222E  118A         	fcall	_MotorOperationTimer_Stop
  3477                           
  3478                           ;ms83fxx02_motor.c: 382: MotorOperationTimer_Init(MotorOperationTimer_30s);
  3479  0188  3001               	movlw	1
  3480  0189  2AB8               	ljmp	_MotorOperationTimer_Init
  3481  018A                     l15289:	
  3482                           ;ms83fxx02_motor.c: 383: }
  3483                           
  3484                           
  3485                           ;ms83fxx02_motor.c: 384: else
  3486                           ;ms83fxx02_motor.c: 385: {
  3487                           ;ms83fxx02_motor.c: 386: if(!key_press_flag)
  3488  018A  1303               	bcf	3,6	;RP1=0, select bank0
  3489  018B  08B1               	movf	_key_press_flag,f
  3490  018C  1903               	btfsc	3,2
  3491  018D  0063               	sleep	;#
  3492  018E  0008               	return
  3493  018F                     l15293:	
  3494                           
  3495                           ;ms83fxx02_motor.c: 395: {
  3496                           ;ms83fxx02_motor.c: 396: if(KEY_GetReleaseStatus())
  3497  018F  2226  118A         	fcall	_KEY_GetReleaseStatus
  3498  0191  3A00               	xorlw	0
  3499  0192  1903               	skipnz
  3500  0193  0008               	return
  3501                           
  3502                           ;ms83fxx02_motor.c: 397: {
  3503                           ;ms83fxx02_motor.c: 399: if(SwitchModeTimer_GetINTStatus())
  3504  0194  2313  118A         	fcall	_SwitchModeTimer_GetINTStatus
  3505  0196  3A00               	xorlw	0
  3506  0197  1903               	skipnz
  3507  0198  299F               	goto	l15299
  3508                           
  3509                           ;ms83fxx02_motor.c: 400: {
  3510                           ;ms83fxx02_motor.c: 401: Motor_Stop();
  3511  0199  223A  118A         	fcall	_Motor_Stop
  3512                           
  3513                           ;ms83fxx02_motor.c: 402: Motor_SetStatus(MOTOR_MODE_STOP);
  3514  019B  3001               	movlw	1
  3515  019C  2222  118A         	fcall	_Motor_SetStatus
  3516                           
  3517                           ;ms83fxx02_motor.c: 403: MotorOperationTimer_Stop();
  3518  019E  2A2E               	ljmp	l15127
  3519  019F                     l15299:	
  3520                           ;ms83fxx02_motor.c: 404: }
  3521                           
  3522                           
  3523                           ;ms83fxx02_motor.c: 405: else
  3524                           ;ms83fxx02_motor.c: 406: {
  3525                           ;ms83fxx02_motor.c: 408: SwitchModeTimer_Cmd(DISABLE);
  3526  019F  3000               	movlw	0
  3527  01A0  2296  118A         	fcall	_SwitchModeTimer_Cmd
  3528                           
  3529                           ;ms83fxx02_motor.c: 409: SwitchModeTimer_INTConfig(DISABLE);
  3530  01A2  3000               	movlw	0
  3531  01A3  22AC  118A         	fcall	_SwitchModeTimer_INTConfig
  3532                           
  3533                           ;ms83fxx02_motor.c: 411: Motor_SetStatus(MOTOR_MODE_DUTY_90);
  3534  01A5  3003               	movlw	3
  3535  01A6  2222  118A         	fcall	_Motor_SetStatus
  3536                           
  3537                           ;ms83fxx02_motor.c: 412: Motor_Start(MOTOR_MODE_DUTY_90);
  3538  01A8  3003               	movlw	3
  3539  01A9  2240  118A         	fcall	_Motor_Start
  3540                           
  3541                           ;ms83fxx02_motor.c: 415: MotorOperationTimer_Stop();
  3542  01AB  222E  118A         	fcall	_MotorOperationTimer_Stop
  3543                           
  3544                           ;ms83fxx02_motor.c: 416: MotorOperationTimer_Init(MotorOperationTimer_30s);
  3545  01AD  3001               	movlw	1
  3546  01AE  2AB8               	ljmp	_MotorOperationTimer_Init
  3547  01AF                     l15307:	
  3548                           
  3549                           ;ms83fxx02_motor.c: 422: {
  3550                           ;ms83fxx02_motor.c: 423: if(KEY_GetReleaseStatus())
  3551  01AF  2226  118A         	fcall	_KEY_GetReleaseStatus
  3552  01B1  3A00               	xorlw	0
  3553  01B2  1903               	skipnz
  3554  01B3  0008               	return
  3555                           
  3556                           ;ms83fxx02_motor.c: 424: {
  3557                           ;ms83fxx02_motor.c: 426: if(SwitchModeTimer_GetINTStatus())
  3558  01B4  2313  118A         	fcall	_SwitchModeTimer_GetINTStatus
  3559  01B6  3A00               	xorlw	0
  3560  01B7  1903               	skipnz
  3561  01B8  29BF               	goto	l15313
  3562                           
  3563                           ;ms83fxx02_motor.c: 427: {
  3564                           ;ms83fxx02_motor.c: 428: Motor_Stop();
  3565  01B9  223A  118A         	fcall	_Motor_Stop
  3566                           
  3567                           ;ms83fxx02_motor.c: 429: Motor_SetStatus(MOTOR_MODE_STOP);
  3568  01BB  3001               	movlw	1
  3569  01BC  2222  118A         	fcall	_Motor_SetStatus
  3570                           
  3571                           ;ms83fxx02_motor.c: 430: MotorOperationTimer_Stop();
  3572  01BE  2A2E               	ljmp	l15127
  3573  01BF                     l15313:	
  3574                           ;ms83fxx02_motor.c: 431: }
  3575                           
  3576                           
  3577                           ;ms83fxx02_motor.c: 432: else
  3578                           ;ms83fxx02_motor.c: 433: {
  3579                           ;ms83fxx02_motor.c: 435: SwitchModeTimer_Cmd(DISABLE);
  3580  01BF  3000               	movlw	0
  3581  01C0  2296  118A         	fcall	_SwitchModeTimer_Cmd
  3582                           
  3583                           ;ms83fxx02_motor.c: 436: SwitchModeTimer_INTConfig(DISABLE);
  3584  01C2  3000               	movlw	0
  3585  01C3  22AC  118A         	fcall	_SwitchModeTimer_INTConfig
  3586                           
  3587                           ;ms83fxx02_motor.c: 438: Motor_SetStatus(MOTOR_MODE_DUTY_80);
  3588  01C5  3004               	movlw	4
  3589  01C6  2222  118A         	fcall	_Motor_SetStatus
  3590                           
  3591                           ;ms83fxx02_motor.c: 439: Motor_Start(MOTOR_MODE_DUTY_80);
  3592  01C8  3004               	movlw	4
  3593  01C9  2240  118A         	fcall	_Motor_Start
  3594                           
  3595                           ;ms83fxx02_motor.c: 442: MotorOperationTimer_Stop();
  3596  01CB  222E  118A         	fcall	_MotorOperationTimer_Stop
  3597                           
  3598                           ;ms83fxx02_motor.c: 443: MotorOperationTimer_Init(MotorOperationTimer_30s);
  3599  01CD  3001               	movlw	1
  3600  01CE  2AB8               	ljmp	_MotorOperationTimer_Init
  3601  01CF                     l15321:	
  3602                           
  3603                           ;ms83fxx02_motor.c: 449: {
  3604                           ;ms83fxx02_motor.c: 450: if(KEY_GetReleaseStatus())
  3605  01CF  2226  118A         	fcall	_KEY_GetReleaseStatus
  3606  01D1  3A00               	xorlw	0
  3607  01D2  1903               	skipnz
  3608  01D3  0008               	return
  3609                           
  3610                           ;ms83fxx02_motor.c: 451: {
  3611                           ;ms83fxx02_motor.c: 452: Motor_Stop();
  3612  01D4  223A  118A         	fcall	_Motor_Stop
  3613                           
  3614                           ;ms83fxx02_motor.c: 453: Motor_SetStatus(MOTOR_MODE_STOP);
  3615  01D6  3001               	movlw	1
  3616  01D7  2222  118A         	fcall	_Motor_SetStatus
  3617                           
  3618                           ;ms83fxx02_motor.c: 454: MotorOperationTimer_Stop();
  3619  01D9  2A2E               	ljmp	l15127
  3620  01DA                     l15327:	
  3621  01DA  083F               	movf	Motor_HandleStatusChangeEvt@status,w
  3622                           
  3623                           ; Switch size 1, requested type "space"
  3624                           ; Number of cases is 4, Range of values is 1 to 4
  3625                           ; switch strategies available:
  3626                           ; Name         Instructions Cycles
  3627                           ; simple_byte           13     7 (average)
  3628                           ; direct_byte           18    10 (fixed)
  3629                           ; jumptable            263     9 (fixed)
  3630                           ;	Chosen strategy is simple_byte
  3631  01DB  3A01               	xorlw	1	; case 1
  3632  01DC  1903               	skipnz
  3633  01DD  297B               	goto	l15279
  3634  01DE  3A03               	xorlw	3	; case 2
  3635  01DF  1903               	skipnz
  3636  01E0  298F               	goto	l15293
  3637  01E1  3A01               	xorlw	1	; case 3
  3638  01E2  1903               	skipnz
  3639  01E3  29AF               	goto	l15307
  3640  01E4  3A07               	xorlw	7	; case 4
  3641  01E5  1903               	skipnz
  3642  01E6  29CF               	goto	l15321
  3643  01E7  2A21               	goto	l8910
  3644                           
  3645                           ;ms83fxx02_motor.c: 463: }
  3646  01E8  0008               	return
  3647  01E9                     l15329:	
  3648                           
  3649                           ;ms83fxx02_motor.c: 464: else
  3650                           ;ms83fxx02_motor.c: 465: {
  3651                           ;ms83fxx02_motor.c: 467: if(LEDTimer_GetOperationStatus() == 0)
  3652  01E9  2305  118A         	fcall	_LEDTimer_GetOperationStatus
  3653  01EB  3800               	iorlw	0
  3654  01EC  1D03               	skipz
  3655  01ED  29F4               	goto	l15333
  3656                           
  3657                           ;ms83fxx02_motor.c: 468: {
  3658                           ;ms83fxx02_motor.c: 470: LEDTimer_Cmd(ENABLE);
  3659  01EE  3001               	movlw	1
  3660  01EF  22E2  118A         	fcall	_LEDTimer_Cmd
  3661                           
  3662                           ;ms83fxx02_motor.c: 471: LEDTimer_INTConfig(ENABLE);
  3663  01F1  3001               	movlw	1
  3664  01F2  22F9  118A         	fcall	_LEDTimer_INTConfig
  3665  01F4                     l15333:	
  3666                           
  3667                           ;ms83fxx02_motor.c: 472: }
  3668                           ;ms83fxx02_motor.c: 474: if(LEDTimer_GetRunLimitINTStatus())
  3669  01F4  2330  118A         	fcall	_LEDTimer_GetRunLimitINTStatus
  3670  01F6  3A00               	xorlw	0
  3671  01F7  1903               	skipnz
  3672  01F8  29FE               	goto	l15339
  3673                           
  3674                           ;ms83fxx02_motor.c: 475: {
  3675                           ;ms83fxx02_motor.c: 476: if(!key_press_time_count)
  3676  01F9  08B2               	movf	_key_press_time_count,f
  3677  01FA  1D03               	skipz
  3678  01FB  29FE               	goto	l15339
  3679                           
  3680                           ;ms83fxx02_motor.c: 477: {
  3681                           ;ms83fxx02_motor.c: 478: LED_DisplayRunLimit();
  3682  01FC  20DF  118A         	fcall	_LED_DisplayRunLimit
  3683  01FE                     l15339:	
  3684                           
  3685                           ;ms83fxx02_motor.c: 479: }
  3686                           ;ms83fxx02_motor.c: 480: }
  3687                           ;ms83fxx02_motor.c: 483: if(KEY_GetPressStatus())
  3688  01FE  2325  118A         	fcall	_KEY_GetPressStatus
  3689  0200  3A00               	xorlw	0
  3690  0201  1903               	skipnz
  3691  0202  2A07               	goto	l15345
  3692                           
  3693                           ;ms83fxx02_motor.c: 484: {
  3694                           ;ms83fxx02_motor.c: 485: key_press_time_count = 0;
  3695  0203  01B2               	clrf	_key_press_time_count	;volatile
  3696                           
  3697                           ;ms83fxx02_motor.c: 487: MotorOperationTimer_Init(MotorOperationTimer_8s);
  3698  0204  3003               	movlw	3
  3699  0205  22B8  118A         	fcall	_MotorOperationTimer_Init
  3700  0207                     l15345:	
  3701                           
  3702                           ;ms83fxx02_motor.c: 488: }
  3703                           ;ms83fxx02_motor.c: 490: if(key_press_time_count)
  3704  0207  1303               	bcf	3,6	;RP1=0, select bank0
  3705  0208  0832               	movf	_key_press_time_count,w	;volatile
  3706  0209  1903               	btfsc	3,2
  3707  020A  2A13               	goto	l15349
  3708                           
  3709                           ;ms83fxx02_motor.c: 491: {
  3710                           ;ms83fxx02_motor.c: 492: LED_CloseMotorStatus();
  3711  020B  2047  118A         	fcall	_LED_CloseMotorStatus
  3712                           
  3713                           ;ms83fxx02_motor.c: 495: LEDTimer_Cmd(DISABLE);
  3714  020D  3000               	movlw	0
  3715  020E  22E2  118A         	fcall	_LEDTimer_Cmd
  3716                           
  3717                           ;ms83fxx02_motor.c: 496: LEDTimer_INTConfig(DISABLE);
  3718  0210  3000               	movlw	0
  3719  0211  22F9  118A         	fcall	_LEDTimer_INTConfig
  3720  0213                     l15349:	
  3721                           
  3722                           ;ms83fxx02_motor.c: 497: }
  3723                           ;ms83fxx02_motor.c: 499: if(KEY_GetReleaseStatus())
  3724  0213  2226  118A         	fcall	_KEY_GetReleaseStatus
  3725  0215  3A00               	xorlw	0
  3726  0216  1903               	skipnz
  3727  0217  0008               	return
  3728                           
  3729                           ;ms83fxx02_motor.c: 500: {
  3730                           ;ms83fxx02_motor.c: 501: if(key_press_time_count)
  3731  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3732  0219  0832               	movf	_key_press_time_count,w	;volatile
  3733  021A  1903               	btfsc	3,2
  3734  021B  2A20               	goto	l15355
  3735                           
  3736                           ;ms83fxx02_motor.c: 502: {
  3737                           ;ms83fxx02_motor.c: 504: motor_oper_record = 0;
  3738  021C  01AC               	clrf	_motor_oper_record	;volatile
  3739  021D  01AD               	clrf	_motor_oper_record+1	;volatile
  3740                           
  3741                           ;ms83fxx02_motor.c: 505: key_press_time_count = 0;
  3742  021E  01B2               	clrf	_key_press_time_count	;volatile
  3743                           
  3744                           ;ms83fxx02_motor.c: 506: }
  3745  021F  0008               	return
  3746  0220                     l15355:	
  3747                           
  3748                           ;ms83fxx02_motor.c: 507: else
  3749                           ;ms83fxx02_motor.c: 508: {
  3750                           ;ms83fxx02_motor.c: 509: MotorOperationTimer_Stop();
  3751  0220  222E               	fcall	_MotorOperationTimer_Stop
  3752  0221                     l8910:	
  3753  0221  0008               	return
  3754  0222                     __end_of_Motor_HandleStatusChangeEvt:	
  3755  0222                     __ptext1698:	
  3756 ;; =============== function _ChargeTimer_Cmd ends ============
  3757                           
  3758                           
  3759 ;; *************** function _Motor_SetStatus *****************
  3760 ;; Defined at:
  3761 ;;		line 122 in file "ms83fxx02_motor.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  status          1    wreg     enum E1554
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  status          1    0[BANK0 ] enum E1554
  3766 ;; Return value:  Size  Location     Type
  3767 ;;		None               void
  3768 ;; Registers used:
  3769 ;;		wreg
  3770 ;; Tracked objects:
  3771 ;;		On entry : 20/0
  3772 ;;		On exit  : 60/0
  3773 ;;		Unchanged: FFF9F/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3775 ;;      Params:         0       0       0       0
  3776 ;;      Locals:         0       1       0       0
  3777 ;;      Temps:          0       0       0       0
  3778 ;;      Totals:         0       1       0       0
  3779 ;;Total ram usage:        1 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    5
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_main
  3786 ;;		_Motor_HandleStatusChangeEvt
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789  0222                     _Motor_SetStatus:	
  3790                           
  3791                           ; Regs used in _Motor_SetStatus: [wreg]
  3792                           ;Motor_SetStatus@status stored from wreg
  3793  0222  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0223  00B6               	movwf	Motor_SetStatus@status
  3795                           
  3796                           ;ms83fxx02_motor.c: 123: motor_status = status;
  3797  0224  00FD               	movwf	_motor_status	;volatile
  3798  0225  0008               	return
  3799  0226                     __end_of_Motor_SetStatus:	
  3800  0226                     __ptext1689:	
  3801 ;; =============== function _KEY_GetPressStatus ends ============
  3802                           
  3803                           
  3804 ;; *************** function _KEY_GetReleaseStatus *****************
  3805 ;; Defined at:
  3806 ;;		line 85 in file "MS83FXX02_KEY.C"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      enum E1477
  3813 ;; Registers used:
  3814 ;;		wreg, status,2
  3815 ;; Tracked objects:
  3816 ;;		On entry : 20/0
  3817 ;;		On exit  : 20/0
  3818 ;;		Unchanged: FFF9F/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3820 ;;      Params:         0       0       0       0
  3821 ;;      Locals:         0       0       0       0
  3822 ;;      Temps:          0       0       0       0
  3823 ;;      Totals:         0       0       0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    5
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_Motor_HandleStatusChangeEvt
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833  0226                     _KEY_GetReleaseStatus:	
  3834                           
  3835                           ;MS83FXX02_KEY.C: 86: if(key_release)
  3836                           
  3837                           ; Regs used in _KEY_GetReleaseStatus: [wreg+status,2]
  3838  0226  087A               	movf	_key_release,w	;volatile
  3839  0227  1903               	btfsc	3,2
  3840  0228  3400               	retlw	0
  3841                           
  3842                           ;MS83FXX02_KEY.C: 87: {
  3843                           ;MS83FXX02_KEY.C: 88: key_press = 0;
  3844  0229  01F9               	clrf	_key_press	;volatile
  3845                           
  3846                           ;MS83FXX02_KEY.C: 89: key_release = 0;
  3847  022A  01FA               	clrf	_key_release	;volatile
  3848                           
  3849                           ;MS83FXX02_KEY.C: 90: key_press_flag = 0;
  3850  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3851  022C  01B1               	clrf	_key_press_flag	;volatile
  3852                           
  3853                           ;MS83FXX02_KEY.C: 91: return SET;
  3854  022D  3401               	retlw	1
  3855  022E                     __end_of_KEY_GetReleaseStatus:	
  3856                           ;MS83FXX02_KEY.C: 92: }
  3857                           ;MS83FXX02_KEY.C: 94: return RESET;
  3858                           
  3859  022E                     __ptext1665:	
  3860 ;; =============== function _ChargeCtrl_Output ends ============
  3861                           
  3862                           
  3863 ;; *************** function _MotorOperationTimer_Stop *****************
  3864 ;; Defined at:
  3865 ;;		line 277 in file "ms83fxx02_motor.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;		None               void
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, pclath, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 20/0
  3876 ;;		On exit  : 60/0
  3877 ;;		Unchanged: FFF9F/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3879 ;;      Params:         0       0       0       0
  3880 ;;      Locals:         0       0       0       0
  3881 ;;      Temps:          0       0       0       0
  3882 ;;      Totals:         0       0       0       0
  3883 ;;Total ram usage:        0 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    6
  3886 ;; This function calls:
  3887 ;;		_Motor_CheckRunLimit
  3888 ;; This function is called by:
  3889 ;;		_main
  3890 ;;		_Motor_HandleStatusChangeEvt
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893  022E                     _MotorOperationTimer_Stop:	
  3894  022E                     l15127:	
  3895                           ; Regs used in _MotorOperationTimer_Stop: [wreg+status,2+pclath+cstack]
  3896                           
  3897                           
  3898                           ;ms83fxx02_motor.c: 279: TMR4ON = 0;
  3899  022E  1703               	bsf	3,6	;RP1=1, select bank2
  3900  022F  1116               	bcf	22,2
  3901                           
  3902                           ;ms83fxx02_motor.c: 281: TMR4IE = 0;
  3903  0230  1096               	bcf	22,1
  3904                           
  3905                           ;ms83fxx02_motor.c: 283: if(!Motor_CheckRunLimit())
  3906  0231  230A  118A         	fcall	_Motor_CheckRunLimit
  3907  0233  3800               	iorlw	0
  3908  0234  1D03               	skipz
  3909  0235  0008               	return
  3910                           
  3911                           ;ms83fxx02_motor.c: 284: {
  3912                           ;ms83fxx02_motor.c: 286: motor_timing_running_flag = 1;
  3913  0236  01C8               	clrf	_motor_timing_running_flag
  3914  0237  0AC8               	incf	_motor_timing_running_flag,f
  3915                           
  3916                           ;ms83fxx02_motor.c: 287: motor_intr_count = 0;
  3917  0238  01FB               	clrf	_motor_intr_count	;volatile
  3918  0239  0008               	return
  3919  023A                     __end_of_MotorOperationTimer_Stop:	
  3920  023A                     __ptext1651:	
  3921 ;; =============== function _Motor_Start ends ============
  3922                           
  3923                           
  3924 ;; *************** function _Motor_Stop *****************
  3925 ;; Defined at:
  3926 ;;		line 184 in file "ms83fxx02_motor.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;		None               void
  3933 ;; Registers used:
  3934 ;;		wreg, status,2, status,0, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 20/0
  3937 ;;		On exit  : 60/0
  3938 ;;		Unchanged: FFF9F/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3940 ;;      Params:         0       0       0       0
  3941 ;;      Locals:         0       0       0       0
  3942 ;;      Temps:          0       0       0       0
  3943 ;;      Totals:         0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    7
  3947 ;; This function calls:
  3948 ;;		_LED_CloseMotorStatus
  3949 ;; This function is called by:
  3950 ;;		_main
  3951 ;;		_Motor_HandleStatusChangeEvt
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954  023A                     _Motor_Stop:	
  3955                           
  3956                           ;ms83fxx02_motor.c: 188: TRISC4 = 1;
  3957                           
  3958                           ; Regs used in _Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  3959  023A  1683               	bsf	3,5	;RP0=1, select bank1
  3960  023B  1303               	bcf	3,6	;RP1=0, select bank1
  3961  023C  1607               	bsf	7,4
  3962                           
  3963                           ;ms83fxx02_motor.c: 190: TMR2ON = 0;
  3964  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3965  023E  1112               	bcf	18,2
  3966                           
  3967                           ;ms83fxx02_motor.c: 192: LED_CloseMotorStatus();
  3968  023F  2847               	ljmp	l15159
  3969  0240                     __end_of_Motor_Stop:	
  3970  0240                     __ptext1650:	
  3971 ;; =============== function _Driver_Init ends ============
  3972                           
  3973                           
  3974 ;; *************** function _Motor_Start *****************
  3975 ;; Defined at:
  3976 ;;		line 142 in file "ms83fxx02_motor.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  status          1    wreg     enum E1554
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  status          1    8[BANK0 ] enum E1554
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 60/0
  3987 ;;		On exit  : 60/40
  3988 ;;		Unchanged: FFF9F/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3990 ;;      Params:         0       0       0       0
  3991 ;;      Locals:         0       1       0       0
  3992 ;;      Temps:          0       0       0       0
  3993 ;;      Totals:         0       1       0       0
  3994 ;;Total ram usage:        1 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    7
  3997 ;; This function calls:
  3998 ;;		_LED_DisplayMotorStatus
  3999 ;;		_Motor_Init
  4000 ;;		_SwitchModeTimer_Cmd
  4001 ;;		_SwitchModeTimer_INTConfig
  4002 ;; This function is called by:
  4003 ;;		_Motor_HandleStatusChangeEvt
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006  0240                     _Motor_Start:	
  4007                           
  4008 ;; hardware stack exceeded
  4009                           ; Regs used in _Motor_Start: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4010                           ;Motor_Start@status stored from wreg
  4011  0240  00BE               	movwf	Motor_Start@status
  4012                           
  4013                           ;ms83fxx02_motor.c: 144: switch(status)
  4014  0241  2A54               	goto	l15253
  4015  0242                     l15245:	
  4016                           
  4017                           ;ms83fxx02_motor.c: 147: {
  4018                           ;ms83fxx02_motor.c: 148: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000004));
  4019  0242  3004               	movlw	4
  4020  0243  00BC               	movwf	?_LED_DisplayMotorStatus
  4021  0244  3000               	movlw	0
  4022  0245  2267  118A         	fcall	_LED_DisplayMotorStatus
  4023                           
  4024                           ;ms83fxx02_motor.c: 149: break;
  4025  0247  2A5F               	goto	l15255
  4026  0248                     l15247:	
  4027                           
  4028                           ;ms83fxx02_motor.c: 152: {
  4029                           ;ms83fxx02_motor.c: 153: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000008));
  4030  0248  3008               	movlw	8
  4031  0249  00BC               	movwf	?_LED_DisplayMotorStatus
  4032  024A  3000               	movlw	0
  4033  024B  2267  118A         	fcall	_LED_DisplayMotorStatus
  4034                           
  4035                           ;ms83fxx02_motor.c: 154: break;
  4036  024D  2A5F               	goto	l15255
  4037  024E                     l15249:	
  4038  024E  3001               	movlw	1
  4039                           
  4040                           ;ms83fxx02_motor.c: 157: {
  4041                           ;ms83fxx02_motor.c: 158: LED_DisplayMotorStatus(GPIOC, ((uint8_t)0x00000001));
  4042  024F  01BC               	clrf	?_LED_DisplayMotorStatus
  4043  0250  0ABC               	incf	?_LED_DisplayMotorStatus,f
  4044  0251  2267  118A         	fcall	_LED_DisplayMotorStatus
  4045                           
  4046                           ;ms83fxx02_motor.c: 159: break;
  4047  0253  2A5F               	goto	l15255
  4048  0254                     l15253:	
  4049  0254  083E               	movf	Motor_Start@status,w
  4050                           
  4051                           ; Switch size 1, requested type "space"
  4052                           ; Number of cases is 3, Range of values is 2 to 4
  4053                           ; switch strategies available:
  4054                           ; Name         Instructions Cycles
  4055                           ; simple_byte           10     6 (average)
  4056                           ; direct_byte           16    10 (fixed)
  4057                           ; jumptable            263     9 (fixed)
  4058                           ;	Chosen strategy is simple_byte
  4059  0255  3A02               	xorlw	2	; case 2
  4060  0256  1903               	skipnz
  4061  0257  2A42               	goto	l15245
  4062  0258  3A01               	xorlw	1	; case 3
  4063  0259  1903               	skipnz
  4064  025A  2A48               	goto	l15247
  4065  025B  3A07               	xorlw	7	; case 4
  4066  025C  1903               	skipnz
  4067  025D  2A4E               	goto	l15249
  4068  025E  2A5F               	goto	l15255
  4069  025F                     l15255:	
  4070                           
  4071                           ;ms83fxx02_motor.c: 167: Motor_Init(status);
  4072  025F  083E               	movf	Motor_Start@status,w
  4073  0260  2336  118A         	fcall	_Motor_Init
  4074                           
  4075                           ;ms83fxx02_motor.c: 170: SwitchModeTimer_Cmd(ENABLE);
  4076  0262  3001               	movlw	1
  4077  0263  2296  118A         	fcall	_SwitchModeTimer_Cmd
  4078                           
  4079                           ;ms83fxx02_motor.c: 171: SwitchModeTimer_INTConfig(ENABLE);
  4080  0265  3001               	movlw	1
  4081  0266  2AAC               	ljmp	_SwitchModeTimer_INTConfig
  4082  0267                     __end_of_Motor_Start:	
  4083  0267                     __ptext1661:	
  4084 ;; =============== function _LED_DisplayRunLimit ends ============
  4085                           
  4086                           
  4087 ;; *************** function _LED_DisplayMotorStatus *****************
  4088 ;; Defined at:
  4089 ;;		line 56 in file "ms83fxx02_led.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  GPIOx           1    wreg     enum E1491
  4092 ;;  GPIO_Pin        1    6[BANK0 ] unsigned char 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  GPIOx           1    7[BANK0 ] enum E1491
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0, pclath, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 60/0
  4101 ;;		On exit  : 60/0
  4102 ;;		Unchanged: FFF9F/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4104 ;;      Params:         0       1       0       0
  4105 ;;      Locals:         0       1       0       0
  4106 ;;      Temps:          0       0       0       0
  4107 ;;      Totals:         0       2       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    6
  4111 ;; This function calls:
  4112 ;;		_GPIO_WriteBit
  4113 ;; This function is called by:
  4114 ;;		_Motor_Start
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117  0267                     _LED_DisplayMotorStatus:	
  4118                           
  4119 ;; hardware stack exceeded
  4120                           ; Regs used in _LED_DisplayMotorStatus: [wreg+status,2+status,0+pclath+cstack]
  4121                           ;LED_DisplayMotorStatus@GPIOx stored from wreg
  4122  0267  00BD               	movwf	LED_DisplayMotorStatus@GPIOx
  4123                           
  4124                           ;ms83fxx02_led.c: 57: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  4125  0268  3004               	movlw	4
  4126  0269  00B9               	movwf	?_GPIO_WriteBit
  4127  026A  3000               	movlw	0
  4128  026B  01BA               	clrf	?_GPIO_WriteBit+1
  4129  026C  2280  118A         	fcall	_GPIO_WriteBit
  4130                           
  4131                           ;ms83fxx02_led.c: 58: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  4132  026E  3008               	movlw	8
  4133  026F  00B9               	movwf	?_GPIO_WriteBit
  4134  0270  3000               	movlw	0
  4135  0271  01BA               	clrf	?_GPIO_WriteBit+1
  4136  0272  2280  118A         	fcall	_GPIO_WriteBit
  4137  0274  3001               	movlw	1
  4138                           
  4139                           ;ms83fxx02_led.c: 59: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  4140  0275  01B9               	clrf	?_GPIO_WriteBit
  4141  0276  0AB9               	incf	?_GPIO_WriteBit,f
  4142  0277  01BA               	clrf	?_GPIO_WriteBit+1
  4143  0278  2280  118A         	fcall	_GPIO_WriteBit
  4144                           
  4145                           ;ms83fxx02_led.c: 60: GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);
  4146  027A  083C               	movf	LED_DisplayMotorStatus@GPIO_Pin,w
  4147  027B  00B9               	movwf	?_GPIO_WriteBit
  4148  027C  01BA               	clrf	?_GPIO_WriteBit+1
  4149  027D  0ABA               	incf	?_GPIO_WriteBit+1,f
  4150  027E  083D               	movf	LED_DisplayMotorStatus@GPIOx,w
  4151  027F  2A80               	ljmp	_GPIO_WriteBit
  4152  0280                     __end_of_LED_DisplayMotorStatus:	
  4153  0280                     __ptext1702:	
  4154 ;; =============== function _Motor_GetStatus ends ============
  4155                           
  4156                           
  4157 ;; *************** function _GPIO_WriteBit *****************
  4158 ;; Defined at:
  4159 ;;		line 68 in file "ms83fxx02_gpio.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  GPIOx           1    wreg     enum E1491
  4162 ;;  GPIO_Pin        1    3[BANK0 ] unsigned char 
  4163 ;;  BitVal          1    4[BANK0 ] enum E1499
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  GPIOx           1    5[BANK0 ] enum E1491
  4166 ;; Return value:  Size  Location     Type
  4167 ;;		None               void
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 60/0
  4172 ;;		On exit  : 60/0
  4173 ;;		Unchanged: FFF9F/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4175 ;;      Params:         0       2       0       0
  4176 ;;      Locals:         0       1       0       0
  4177 ;;      Temps:          0       0       0       0
  4178 ;;      Totals:         0       3       0       0
  4179 ;;Total ram usage:        3 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    5
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_charge_control
  4186 ;;		_ChargeCtrl_Init
  4187 ;;		_ChargeCtrl_Output
  4188 ;;		_LED_Init
  4189 ;;		_LED_DisplayMotorStatus
  4190 ;;		_LED_DisplayRunLimit
  4191 ;;		_LED_CloseMotorStatus
  4192 ;;		_LED_VoltageChargeOutput
  4193 ;;		_LED_UnderVoltageOutput
  4194 ;;		_Battery_Detect
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197  0280                     _GPIO_WriteBit:	
  4198                           
  4199                           ; Regs used in _GPIO_WriteBit: [wreg+status,2+status,0]
  4200                           ;GPIO_WriteBit@GPIOx stored from wreg
  4201  0280  00BB               	movwf	GPIO_WriteBit@GPIOx
  4202                           
  4203                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
  4204  0281  08BB               	movf	GPIO_WriteBit@GPIOx,f
  4205  0282  1D03               	skipz
  4206  0283  2A8D               	goto	l14441
  4207                           
  4208                           ;ms83fxx02_gpio.c: 70: {
  4209                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
  4210  0284  083A               	movf	GPIO_WriteBit@BitVal,w
  4211  0285  1903               	btfsc	3,2
  4212  0286  2A8A               	goto	l14439
  4213                           
  4214                           ;ms83fxx02_gpio.c: 72: {
  4215                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
  4216  0287  0839               	movf	GPIO_WriteBit@GPIO_Pin,w
  4217  0288  0485               	iorwf	5,f	;volatile
  4218                           
  4219                           ;ms83fxx02_gpio.c: 74: }
  4220  0289  0008               	return
  4221  028A                     l14439:	
  4222                           
  4223                           ;ms83fxx02_gpio.c: 75: else
  4224                           ;ms83fxx02_gpio.c: 76: {
  4225                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
  4226  028A  0939               	comf	GPIO_WriteBit@GPIO_Pin,w
  4227  028B  0585               	andwf	5,f	;volatile
  4228  028C  0008               	return
  4229  028D                     l14441:	
  4230                           
  4231                           ;ms83fxx02_gpio.c: 80: else
  4232                           ;ms83fxx02_gpio.c: 81: {
  4233                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
  4234  028D  083A               	movf	GPIO_WriteBit@BitVal,w
  4235  028E  1903               	btfsc	3,2
  4236  028F  2A93               	goto	l14445
  4237                           
  4238                           ;ms83fxx02_gpio.c: 83: {
  4239                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
  4240  0290  0839               	movf	GPIO_WriteBit@GPIO_Pin,w
  4241  0291  0487               	iorwf	7,f	;volatile
  4242                           
  4243                           ;ms83fxx02_gpio.c: 85: }
  4244  0292  0008               	return
  4245  0293                     l14445:	
  4246                           
  4247                           ;ms83fxx02_gpio.c: 86: else
  4248                           ;ms83fxx02_gpio.c: 87: {
  4249                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
  4250  0293  0939               	comf	GPIO_WriteBit@GPIO_Pin,w
  4251  0294  0587               	andwf	7,f	;volatile
  4252  0295  0008               	return
  4253  0296                     __end_of_GPIO_WriteBit:	
  4254  0296                     __ptext1681:	
  4255 ;; =============== function _SwitchModeTimer_INTConfig ends ============
  4256                           
  4257                           
  4258 ;; *************** function _SwitchModeTimer_Cmd *****************
  4259 ;; Defined at:
  4260 ;;		line 39 in file "ms83fxx02_tim.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  NewState        1    wreg     enum E1482
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  NewState        1    0[BANK0 ] enum E1482
  4265 ;; Return value:  Size  Location     Type
  4266 ;;		None               void
  4267 ;; Registers used:
  4268 ;;		wreg, status,2
  4269 ;; Tracked objects:
  4270 ;;		On entry : 40/0
  4271 ;;		On exit  : 60/40
  4272 ;;		Unchanged: FFF9F/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4274 ;;      Params:         0       0       0       0
  4275 ;;      Locals:         0       1       0       0
  4276 ;;      Temps:          0       0       0       0
  4277 ;;      Totals:         0       1       0       0
  4278 ;;Total ram usage:        1 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    5
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_Motor_Start
  4285 ;;		_Motor_HandleStatusChangeEvt
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288  0296                     _SwitchModeTimer_Cmd:	
  4289                           
  4290                           ; Regs used in _SwitchModeTimer_Cmd: [wreg+status,2]
  4291                           ;SwitchModeTimer_Cmd@NewState stored from wreg
  4292  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0297  00B6               	movwf	SwitchModeTimer_Cmd@NewState
  4294                           
  4295                           ;ms83fxx02_tim.c: 40: switch_mode_time_out = 0;
  4296  0298  01B5               	clrf	_switch_mode_time_out	;volatile
  4297                           
  4298                           ;ms83fxx02_tim.c: 42: if(NewState != DISABLE)
  4299  0299  0836               	movf	SwitchModeTimer_Cmd@NewState,w
  4300                           
  4301                           ;ms83fxx02_tim.c: 43: {
  4302                           ;ms83fxx02_tim.c: 45: TMR5ON = 0;
  4303  029A  1703               	bsf	3,6	;RP1=1, select bank2
  4304  029B  111C               	bcf	28,2
  4305  029C  1903               	btfsc	3,2
  4306  029D  0008               	return
  4307                           
  4308                           ;ms83fxx02_tim.c: 47: PWM5CR0 = 0b01110010;
  4309  029E  3072               	movlw	114
  4310  029F  009B               	movwf	27	;volatile
  4311                           
  4312                           ;ms83fxx02_tim.c: 50: PWM5CR1 = 0b00111000;
  4313  02A0  3038               	movlw	56
  4314  02A1  009C               	movwf	28	;volatile
  4315                           
  4316                           ;ms83fxx02_tim.c: 53: T5CKDIV = 59;
  4317  02A2  303B               	movlw	59
  4318  02A3  009D               	movwf	29	;volatile
  4319                           
  4320                           ;ms83fxx02_tim.c: 55: TMR5H = 0x0F;
  4321  02A4  300F               	movlw	15
  4322  02A5  0099               	movwf	25	;volatile
  4323                           
  4324                           ;ms83fxx02_tim.c: 56: TMR5L = 0;
  4325  02A6  0198               	clrf	24	;volatile
  4326                           
  4327                           ;ms83fxx02_tim.c: 57: PR5L = 0xFF;
  4328  02A7  30FF               	movlw	255
  4329  02A8  009A               	movwf	26	;volatile
  4330                           
  4331                           ;ms83fxx02_tim.c: 60: TMR5IF = 0;
  4332  02A9  101C               	bcf	28,0
  4333                           
  4334                           ;ms83fxx02_tim.c: 63: TMR5ON = 1;
  4335  02AA  151C               	bsf	28,2
  4336                           
  4337                           ;ms83fxx02_tim.c: 64: }
  4338  02AB  0008               	return
  4339  02AC                     __end_of_SwitchModeTimer_Cmd:	
  4340                           ;ms83fxx02_tim.c: 65: else
  4341                           ;ms83fxx02_tim.c: 66: {
  4342                           ;ms83fxx02_tim.c: 68: TMR5ON = 0;
  4343                           
  4344  02AC                     __ptext1680:	
  4345 ;; =============== function _Motor_CheckRunLimit ends ============
  4346                           
  4347                           
  4348 ;; *************** function _SwitchModeTimer_INTConfig *****************
  4349 ;; Defined at:
  4350 ;;		line 79 in file "ms83fxx02_tim.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  NewState        1    wreg     enum E1482
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  NewState        1    0[BANK0 ] enum E1482
  4355 ;; Return value:  Size  Location     Type
  4356 ;;		None               void
  4357 ;; Registers used:
  4358 ;;		wreg
  4359 ;; Tracked objects:
  4360 ;;		On entry : 60/40
  4361 ;;		On exit  : 60/40
  4362 ;;		Unchanged: FFF9F/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4364 ;;      Params:         0       0       0       0
  4365 ;;      Locals:         0       1       0       0
  4366 ;;      Temps:          0       0       0       0
  4367 ;;      Totals:         0       1       0       0
  4368 ;;Total ram usage:        1 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    5
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_Motor_Start
  4375 ;;		_Motor_HandleStatusChangeEvt
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378  02AC                     _SwitchModeTimer_INTConfig:	
  4379                           
  4380                           ; Regs used in _SwitchModeTimer_INTConfig: [wreg]
  4381                           ;SwitchModeTimer_INTConfig@NewState stored from wreg
  4382  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  4383  02AD  00B6               	movwf	SwitchModeTimer_INTConfig@NewState
  4384                           
  4385                           ;ms83fxx02_tim.c: 80: if(NewState != DISABLE)
  4386  02AE  0836               	movf	SwitchModeTimer_INTConfig@NewState,w
  4387                           
  4388                           ;ms83fxx02_tim.c: 81: {
  4389                           ;ms83fxx02_tim.c: 83: TMR5IE = 1;
  4390  02AF  1703               	bsf	3,6	;RP1=1, select bank2
  4391  02B0  1903               	btfsc	3,2
  4392  02B1  2AB6               	goto	L7
  4393  02B2  149C               	bsf	28,1
  4394                           
  4395                           ;ms83fxx02_tim.c: 84: PEIE = 1;
  4396  02B3  170B               	bsf	11,6
  4397                           
  4398                           ;ms83fxx02_tim.c: 85: GIE = 1;
  4399  02B4  178B               	bsf	11,7
  4400                           
  4401                           ;ms83fxx02_tim.c: 86: }
  4402  02B5  0008               	return
  4403  02B6                     L7:	
  4404                           ;ms83fxx02_tim.c: 87: else
  4405                           ;ms83fxx02_tim.c: 88: {
  4406                           ;ms83fxx02_tim.c: 90: TMR5IE = 0;
  4407                           
  4408  02B6  109C               	bcf	28,1
  4409  02B7  0008               	return
  4410  02B8                     __end_of_SwitchModeTimer_INTConfig:	
  4411  02B8                     __ptext1678:	
  4412 ;; =============== function _SwitchModeTimer_GetINTStatus ends ============
  4413                           
  4414                           
  4415 ;; *************** function _MotorOperationTimer_Init *****************
  4416 ;; Defined at:
  4417 ;;		line 215 in file "ms83fxx02_motor.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  time            1    wreg     enum E1560
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  time            1    0[BANK0 ] enum E1560
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2
  4426 ;; Tracked objects:
  4427 ;;		On entry : 60/0
  4428 ;;		On exit  : 60/40
  4429 ;;		Unchanged: FFF9F/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4431 ;;      Params:         0       0       0       0
  4432 ;;      Locals:         0       1       0       0
  4433 ;;      Temps:          0       0       0       0
  4434 ;;      Totals:         0       1       0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    5
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_Motor_HandleStatusChangeEvt
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444  02B8                     _MotorOperationTimer_Init:	
  4445                           
  4446                           ; Regs used in _MotorOperationTimer_Init: [wreg+status,2]
  4447                           ;MotorOperationTimer_Init@time stored from wreg
  4448  02B8  00B6               	movwf	MotorOperationTimer_Init@time
  4449                           
  4450                           ;ms83fxx02_motor.c: 217: TMR4ON = 0;
  4451  02B9  1703               	bsf	3,6	;RP1=1, select bank2
  4452  02BA  1116               	bcf	22,2
  4453                           
  4454                           ;ms83fxx02_motor.c: 219: if(time == MotorOperationTimer_30s)
  4455  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  4456  02BC  0B36               	decfsz	MotorOperationTimer_Init@time,w
  4457  02BD  2AC5               	goto	l14833
  4458                           
  4459                           ;ms83fxx02_motor.c: 220: {
  4460                           ;ms83fxx02_motor.c: 222: PWM4CR0 = 0b01110010;
  4461  02BE  3072               	movlw	114
  4462  02BF  1703               	bsf	3,6	;RP1=1, select bank2
  4463  02C0  0095               	movwf	21	;volatile
  4464                           
  4465                           ;ms83fxx02_motor.c: 225: PWM4CR1 = 0b00111000;
  4466  02C1  3038               	movlw	56
  4467  02C2  0096               	movwf	22	;volatile
  4468                           
  4469                           ;ms83fxx02_motor.c: 230: T4CKDIV = 182;
  4470  02C3  30B6               	movlw	182
  4471  02C4  2AD6               	goto	L6
  4472  02C5                     l14833:	
  4473                           ;ms83fxx02_motor.c: 231: }
  4474                           
  4475                           
  4476                           ;ms83fxx02_motor.c: 232: else if(time == MotorOperationTimer_0_3s)
  4477  02C5  0836               	movf	MotorOperationTimer_Init@time,w
  4478  02C6  3A02               	xorlw	2
  4479  02C7  1D03               	skipz
  4480  02C8  2AD0               	goto	l14837
  4481                           
  4482                           ;ms83fxx02_motor.c: 233: {
  4483                           ;ms83fxx02_motor.c: 235: PWM4CR0 = 0b01100010;
  4484  02C9  3062               	movlw	98
  4485  02CA  1703               	bsf	3,6	;RP1=1, select bank2
  4486  02CB  0095               	movwf	21	;volatile
  4487                           
  4488                           ;ms83fxx02_motor.c: 237: PWM4CR1 = 0b00111000;
  4489  02CC  3038               	movlw	56
  4490  02CD  0096               	movwf	22	;volatile
  4491                           
  4492                           ;ms83fxx02_motor.c: 241: T4CKDIV = 8;
  4493  02CE  3008               	movlw	8
  4494  02CF  2AD6               	goto	L6
  4495  02D0                     l14837:	
  4496                           ;ms83fxx02_motor.c: 242: }
  4497                           
  4498                           
  4499                           ;ms83fxx02_motor.c: 243: else
  4500                           ;ms83fxx02_motor.c: 244: {
  4501                           ;ms83fxx02_motor.c: 246: PWM4CR0 = 0b01110010;
  4502  02D0  3072               	movlw	114
  4503  02D1  1703               	bsf	3,6	;RP1=1, select bank2
  4504  02D2  0095               	movwf	21	;volatile
  4505                           
  4506                           ;ms83fxx02_motor.c: 249: PWM4CR1 = 0b00111000;
  4507  02D3  3038               	movlw	56
  4508  02D4  0096               	movwf	22	;volatile
  4509                           
  4510                           ;ms83fxx02_motor.c: 252: T4CKDIV = 243;
  4511  02D5  30F3               	movlw	243
  4512  02D6                     L6:	
  4513  02D6  0097               	movwf	23	;volatile
  4514                           
  4515                           ;ms83fxx02_motor.c: 253: }
  4516                           ;ms83fxx02_motor.c: 255: TMR4H = 0x0F;
  4517  02D7  300F               	movlw	15
  4518  02D8  0093               	movwf	19	;volatile
  4519                           
  4520                           ;ms83fxx02_motor.c: 256: TMR4L = 0;
  4521  02D9  0192               	clrf	18	;volatile
  4522                           
  4523                           ;ms83fxx02_motor.c: 257: PR4L = 0xFF;
  4524  02DA  30FF               	movlw	255
  4525  02DB  0094               	movwf	20	;volatile
  4526                           
  4527                           ;ms83fxx02_motor.c: 260: TMR4IF = 0;
  4528  02DC  1016               	bcf	22,0
  4529                           
  4530                           ;ms83fxx02_motor.c: 263: TMR4ON = 1;
  4531  02DD  1516               	bsf	22,2
  4532                           
  4533                           ;ms83fxx02_motor.c: 266: TMR4IE = 1;
  4534  02DE  1496               	bsf	22,1
  4535                           
  4536                           ;ms83fxx02_motor.c: 267: PEIE = 1;
  4537  02DF  170B               	bsf	11,6
  4538                           
  4539                           ;ms83fxx02_motor.c: 268: GIE = 1;
  4540  02E0  178B               	bsf	11,7
  4541  02E1  0008               	return
  4542  02E2                     __end_of_MotorOperationTimer_Init:	
  4543  02E2                     __ptext1687:	
  4544 ;; =============== function _LEDTimer_INTConfig ends ============
  4545                           
  4546                           
  4547 ;; *************** function _LEDTimer_Cmd *****************
  4548 ;; Defined at:
  4549 ;;		line 42 in file "ms83fxx02_led_timer.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  NewState        1    wreg     enum E1482
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  NewState        1    0[BANK0 ] enum E1482
  4554 ;; Return value:  Size  Location     Type
  4555 ;;		None               void
  4556 ;; Registers used:
  4557 ;;		wreg, status,2
  4558 ;; Tracked objects:
  4559 ;;		On entry : 20/40
  4560 ;;		On exit  : 60/40
  4561 ;;		Unchanged: FFF9F/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4563 ;;      Params:         0       0       0       0
  4564 ;;      Locals:         0       1       0       0
  4565 ;;      Temps:          0       0       0       0
  4566 ;;      Totals:         0       1       0       0
  4567 ;;Total ram usage:        1 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    5
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_Motor_HandleStatusChangeEvt
  4574 ;;		_Battery_Detect
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577  02E2                     _LEDTimer_Cmd:	
  4578                           
  4579                           ; Regs used in _LEDTimer_Cmd: [wreg+status,2]
  4580                           ;LEDTimer_Cmd@NewState stored from wreg
  4581  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  4582  02E3  00B6               	movwf	LEDTimer_Cmd@NewState
  4583                           
  4584                           ;ms83fxx02_led_timer.c: 43: led_timer_int_status = 0;
  4585  02E4  01B3               	clrf	_led_timer_int_status	;volatile
  4586                           
  4587                           ;ms83fxx02_led_timer.c: 44: run_limit_int_status = 0;
  4588  02E5  01B4               	clrf	_run_limit_int_status	;volatile
  4589                           
  4590                           ;ms83fxx02_led_timer.c: 46: if(NewState != DISABLE)
  4591  02E6  0836               	movf	LEDTimer_Cmd@NewState,w
  4592                           
  4593                           ;ms83fxx02_led_timer.c: 47: {
  4594                           ;ms83fxx02_led_timer.c: 49: TMR3ON = 0;
  4595  02E7  1703               	bsf	3,6	;RP1=1, select bank2
  4596  02E8  1110               	bcf	16,2
  4597  02E9  1903               	btfsc	3,2
  4598  02EA  0008               	return
  4599                           
  4600                           ;ms83fxx02_led_timer.c: 52: PWM3CR0 = 0b01100010;
  4601  02EB  3062               	movlw	98
  4602  02EC  008F               	movwf	15	;volatile
  4603                           
  4604                           ;ms83fxx02_led_timer.c: 55: PWM3CR1 = 0b00111000;
  4605  02ED  3038               	movlw	56
  4606  02EE  0090               	movwf	16	;volatile
  4607                           
  4608                           ;ms83fxx02_led_timer.c: 58: T3CKDIV = 19;
  4609  02EF  3013               	movlw	19
  4610  02F0  0091               	movwf	17	;volatile
  4611                           
  4612                           ;ms83fxx02_led_timer.c: 60: TMR3H = 0x0F;
  4613  02F1  300F               	movlw	15
  4614  02F2  008D               	movwf	13	;volatile
  4615                           
  4616                           ;ms83fxx02_led_timer.c: 61: TMR3L = 0;
  4617  02F3  018C               	clrf	12	;volatile
  4618                           
  4619                           ;ms83fxx02_led_timer.c: 62: PR3L = 0xFF;
  4620  02F4  30FF               	movlw	255
  4621  02F5  008E               	movwf	14	;volatile
  4622                           
  4623                           ;ms83fxx02_led_timer.c: 65: TMR3IF = 0;
  4624  02F6  1010               	bcf	16,0
  4625                           
  4626                           ;ms83fxx02_led_timer.c: 68: TMR3ON = 1;
  4627  02F7  1510               	bsf	16,2
  4628                           
  4629                           ;ms83fxx02_led_timer.c: 69: }
  4630  02F8  0008               	return
  4631  02F9                     __end_of_LEDTimer_Cmd:	
  4632                           ;ms83fxx02_led_timer.c: 70: else
  4633                           ;ms83fxx02_led_timer.c: 71: {
  4634                           ;ms83fxx02_led_timer.c: 73: TMR3ON = 0;
  4635                           
  4636  02F9                     __ptext1686:	
  4637 ;; =============== function _LEDTimer_GetOperationStatus ends ============
  4638                           
  4639                           
  4640 ;; *************** function _LEDTimer_INTConfig *****************
  4641 ;; Defined at:
  4642 ;;		line 84 in file "ms83fxx02_led_timer.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  NewState        1    wreg     enum E1482
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  NewState        1    0[BANK0 ] enum E1482
  4647 ;; Return value:  Size  Location     Type
  4648 ;;		None               void
  4649 ;; Registers used:
  4650 ;;		wreg
  4651 ;; Tracked objects:
  4652 ;;		On entry : 60/40
  4653 ;;		On exit  : 60/40
  4654 ;;		Unchanged: FFF9F/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4656 ;;      Params:         0       0       0       0
  4657 ;;      Locals:         0       1       0       0
  4658 ;;      Temps:          0       0       0       0
  4659 ;;      Totals:         0       1       0       0
  4660 ;;Total ram usage:        1 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    5
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_Motor_HandleStatusChangeEvt
  4667 ;;		_Battery_Detect
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670  02F9                     _LEDTimer_INTConfig:	
  4671                           
  4672                           ; Regs used in _LEDTimer_INTConfig: [wreg]
  4673                           ;LEDTimer_INTConfig@NewState stored from wreg
  4674  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  4675  02FA  00B6               	movwf	LEDTimer_INTConfig@NewState
  4676                           
  4677                           ;ms83fxx02_led_timer.c: 85: if(NewState != DISABLE)
  4678  02FB  0836               	movf	LEDTimer_INTConfig@NewState,w
  4679                           
  4680                           ;ms83fxx02_led_timer.c: 86: {
  4681                           ;ms83fxx02_led_timer.c: 88: TMR3IE = 1;
  4682  02FC  1703               	bsf	3,6	;RP1=1, select bank2
  4683  02FD  1903               	btfsc	3,2
  4684  02FE  2B03               	goto	L10
  4685  02FF  1490               	bsf	16,1
  4686                           
  4687                           ;ms83fxx02_led_timer.c: 89: PEIE = 1;
  4688  0300  170B               	bsf	11,6
  4689                           
  4690                           ;ms83fxx02_led_timer.c: 90: GIE = 1;
  4691  0301  178B               	bsf	11,7
  4692                           
  4693                           ;ms83fxx02_led_timer.c: 91: }
  4694  0302  0008               	return
  4695  0303                     L10:	
  4696                           ;ms83fxx02_led_timer.c: 92: else
  4697                           ;ms83fxx02_led_timer.c: 93: {
  4698                           ;ms83fxx02_led_timer.c: 95: TMR3IE = 0;
  4699                           
  4700  0303  1090               	bcf	16,1
  4701  0304  0008               	return
  4702  0305                     __end_of_LEDTimer_INTConfig:	
  4703  0305                     __ptext1685:	
  4704 ;; =============== function _LEDTimer_GetINTStatus ends ============
  4705                           
  4706                           
  4707 ;; *************** function _LEDTimer_GetOperationStatus *****************
  4708 ;; Defined at:
  4709 ;;		line 105 in file "ms83fxx02_led_timer.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      unsigned char 
  4716 ;; Registers used:
  4717 ;;		wreg
  4718 ;; Tracked objects:
  4719 ;;		On entry : 60/0
  4720 ;;		On exit  : 60/40
  4721 ;;		Unchanged: FFF9F/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4723 ;;      Params:         0       0       0       0
  4724 ;;      Locals:         0       0       0       0
  4725 ;;      Temps:          0       0       0       0
  4726 ;;      Totals:         0       0       0       0
  4727 ;;Total ram usage:        0 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    5
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_Motor_HandleStatusChangeEvt
  4734 ;;		_Battery_Detect
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737  0305                     _LEDTimer_GetOperationStatus:	
  4738                           
  4739                           ;ms83fxx02_led_timer.c: 106: return TMR3ON;
  4740                           
  4741                           ; Regs used in _LEDTimer_GetOperationStatus: [wreg]
  4742  0305  3000               	movlw	0
  4743  0306  1703               	bsf	3,6	;RP1=1, select bank2
  4744  0307  1910               	btfsc	16,2
  4745  0308  3001               	movlw	1
  4746  0309  0008               	return
  4747  030A                     __end_of_LEDTimer_GetOperationStatus:	
  4748  030A                     __ptext1679:	
  4749 ;; =============== function _MotorOperationTimer_Init ends ============
  4750                           
  4751                           
  4752 ;; *************** function _Motor_CheckRunLimit *****************
  4753 ;; Defined at:
  4754 ;;		line 196 in file "ms83fxx02_motor.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      unsigned char 
  4761 ;; Registers used:
  4762 ;;		wreg
  4763 ;; Tracked objects:
  4764 ;;		On entry : 20/0
  4765 ;;		On exit  : 60/0
  4766 ;;		Unchanged: FFF9F/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4768 ;;      Params:         0       0       0       0
  4769 ;;      Locals:         0       0       0       0
  4770 ;;      Temps:          0       0       0       0
  4771 ;;      Totals:         0       0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    5
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_MotorOperationTimer_Stop
  4779 ;;		_Motor_HandleStatusChangeEvt
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782  030A                     _Motor_CheckRunLimit:	
  4783                           
  4784                           ;ms83fxx02_motor.c: 200: if(motor_oper_record >= 120)
  4785                           
  4786                           ; Regs used in _Motor_CheckRunLimit: [wreg]
  4787  030A  3000               	movlw	0
  4788  030B  1303               	bcf	3,6	;RP1=0, select bank0
  4789  030C  022D               	subwf	_motor_oper_record+1,w	;volatile
  4790  030D  3078               	movlw	120
  4791  030E  1903               	skipnz
  4792  030F  022C               	subwf	_motor_oper_record,w	;volatile
  4793  0310  1803               	btfsc	3,0
  4794                           
  4795                           ;ms83fxx02_motor.c: 201: {
  4796                           ;ms83fxx02_motor.c: 202: return 1;
  4797  0311  3401               	retlw	1
  4798                           
  4799                           ;ms83fxx02_motor.c: 203: }
  4800                           ;ms83fxx02_motor.c: 204: return 0;
  4801  0312  3400               	retlw	0
  4802  0313                     __end_of_Motor_CheckRunLimit:	
  4803  0313                     __ptext1677:	
  4804 ;; =============== function _delay_us ends ============
  4805                           
  4806                           
  4807 ;; *************** function _SwitchModeTimer_GetINTStatus *****************
  4808 ;; Defined at:
  4809 ;;		line 100 in file "ms83fxx02_tim.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      enum E1477
  4816 ;; Registers used:
  4817 ;;		wreg, status,2
  4818 ;; Tracked objects:
  4819 ;;		On entry : 20/0
  4820 ;;		On exit  : 60/0
  4821 ;;		Unchanged: FFF9F/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4823 ;;      Params:         0       0       0       0
  4824 ;;      Locals:         0       0       0       0
  4825 ;;      Temps:          0       0       0       0
  4826 ;;      Totals:         0       0       0       0
  4827 ;;Total ram usage:        0 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    5
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_Motor_HandleStatusChangeEvt
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836  0313                     _SwitchModeTimer_GetINTStatus:	
  4837                           
  4838                           ;ms83fxx02_tim.c: 101: if(switch_mode_time_out)
  4839                           
  4840                           ; Regs used in _SwitchModeTimer_GetINTStatus: [wreg+status,2]
  4841  0313  1303               	bcf	3,6	;RP1=0, select bank0
  4842  0314  0835               	movf	_switch_mode_time_out,w	;volatile
  4843  0315  1903               	btfsc	3,2
  4844  0316  3400               	retlw	0
  4845                           
  4846                           ;ms83fxx02_tim.c: 102: {
  4847                           ;ms83fxx02_tim.c: 103: switch_mode_time_out = 0;
  4848  0317  01B5               	clrf	_switch_mode_time_out	;volatile
  4849                           
  4850                           ;ms83fxx02_tim.c: 105: return SET;
  4851  0318  3401               	retlw	1
  4852  0319                     __end_of_SwitchModeTimer_GetINTStatus:	
  4853                           ;ms83fxx02_tim.c: 107: else
  4854                           ;ms83fxx02_tim.c: 108: {
  4855                           ;ms83fxx02_tim.c: 109: return RESET;
  4856                           
  4857  0319                     __ptext1658:	
  4858 ;; =============== function _EEPROM_StoreMotorData ends ============
  4859                           
  4860                           
  4861 ;; *************** function _LED_UnderVoltageOutput *****************
  4862 ;; Defined at:
  4863 ;;		line 83 in file "ms83fxx02_led.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  BitVal          1    wreg     enum E1499
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  BitVal          1    6[BANK0 ] enum E1499
  4868 ;; Return value:  Size  Location     Type
  4869 ;;		None               void
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 40/20
  4874 ;;		On exit  : 60/0
  4875 ;;		Unchanged: FFF9F/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       0       0       0
  4878 ;;      Locals:         0       1       0       0
  4879 ;;      Temps:          0       0       0       0
  4880 ;;      Totals:         0       1       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    6
  4884 ;; This function calls:
  4885 ;;		_GPIO_WriteBit
  4886 ;; This function is called by:
  4887 ;;		_Battery_Detect
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890  0319                     _LED_UnderVoltageOutput:	
  4891                           
  4892 ;; hardware stack exceeded
  4893                           ; Regs used in _LED_UnderVoltageOutput: [wreg+status,2+status,0+pclath+cstack]
  4894                           ;LED_UnderVoltageOutput@BitVal stored from wreg
  4895  0319  1283               	bcf	3,5	;RP0=0, select bank0
  4896  031A  00BC               	movwf	LED_UnderVoltageOutput@BitVal
  4897                           
  4898                           ;ms83fxx02_led.c: 84: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), BitVal);
  4899  031B  3008               	movlw	8
  4900  031C  00B9               	movwf	?_GPIO_WriteBit
  4901  031D  083C               	movf	LED_UnderVoltageOutput@BitVal,w
  4902  031E  00BA               	movwf	?_GPIO_WriteBit+1
  4903  031F  3001               	movlw	1
  4904  0320  2A80               	ljmp	_GPIO_WriteBit
  4905  0321                     __end_of_LED_UnderVoltageOutput:	
  4906  0321                     __ptext1695:	
  4907 ;; =============== function _GPIO_Init ends ============
  4908                           
  4909                           
  4910 ;; *************** function _GetDeviceMode *****************
  4911 ;; Defined at:
  4912 ;;		line 40 in file "ms83fxx02_pwr.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      enum E1586
  4919 ;; Registers used:
  4920 ;;		wreg
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 60/0
  4924 ;;		Unchanged: FFF9F/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4926 ;;      Params:         0       0       0       0
  4927 ;;      Locals:         0       0       0       0
  4928 ;;      Temps:          0       0       0       0
  4929 ;;      Totals:         0       0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    5
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_main
  4937 ;;		_Battery_Detect
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940  0321                     _GetDeviceMode:	
  4941                           
  4942                           ;ms83fxx02_pwr.c: 41: return device_mode;
  4943                           
  4944                           ; Regs used in _GetDeviceMode: [wreg]
  4945  0321  1283               	bcf	3,5	;RP0=0, select bank0
  4946  0322  1303               	bcf	3,6	;RP1=0, select bank0
  4947  0323  0830               	movf	_device_mode,w	;volatile
  4948  0324  0008               	return
  4949  0325                     __end_of_GetDeviceMode:	
  4950  0325                     __ptext1688:	
  4951 ;; =============== function _LEDTimer_Cmd ends ============
  4952                           
  4953                           
  4954 ;; *************** function _KEY_GetPressStatus *****************
  4955 ;; Defined at:
  4956 ;;		line 98 in file "MS83FXX02_KEY.C"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      enum E1477
  4963 ;; Registers used:
  4964 ;;		wreg, status,2
  4965 ;; Tracked objects:
  4966 ;;		On entry : 60/0
  4967 ;;		On exit  : 60/0
  4968 ;;		Unchanged: FFF9F/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4970 ;;      Params:         0       0       0       0
  4971 ;;      Locals:         0       0       0       0
  4972 ;;      Temps:          0       0       0       0
  4973 ;;      Totals:         0       0       0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    5
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_Motor_HandleStatusChangeEvt
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983  0325                     _KEY_GetPressStatus:	
  4984                           
  4985                           ;MS83FXX02_KEY.C: 99: if(key_press)
  4986                           
  4987                           ; Regs used in _KEY_GetPressStatus: [wreg+status,2]
  4988  0325  0879               	movf	_key_press,w	;volatile
  4989  0326  1903               	btfsc	3,2
  4990  0327  3400               	retlw	0
  4991                           
  4992                           ;MS83FXX02_KEY.C: 100: {
  4993                           ;MS83FXX02_KEY.C: 101: key_press = 0;
  4994  0328  01F9               	clrf	_key_press	;volatile
  4995                           
  4996                           ;MS83FXX02_KEY.C: 102: return SET;
  4997  0329  3401               	retlw	1
  4998  032A                     __end_of_KEY_GetPressStatus:	
  4999                           ;MS83FXX02_KEY.C: 103: }
  5000                           ;MS83FXX02_KEY.C: 105: return RESET;
  5001                           
  5002  032A                     __ptext1684:	
  5003 ;; =============== function _LEDTimer_GetRunLimitINTStatus ends ============
  5004                           
  5005                           
  5006 ;; *************** function _LEDTimer_GetINTStatus *****************
  5007 ;; Defined at:
  5008 ;;		line 115 in file "ms83fxx02_led_timer.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      enum E1477
  5015 ;; Registers used:
  5016 ;;		wreg, status,2
  5017 ;; Tracked objects:
  5018 ;;		On entry : 160/40
  5019 ;;		On exit  : 160/0
  5020 ;;		Unchanged: FFE9F/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5022 ;;      Params:         0       0       0       0
  5023 ;;      Locals:         0       0       0       0
  5024 ;;      Temps:          0       0       0       0
  5025 ;;      Totals:         0       0       0       0
  5026 ;;Total ram usage:        0 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    5
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_Battery_Detect
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035  032A                     _LEDTimer_GetINTStatus:	
  5036                           
  5037                           ;ms83fxx02_led_timer.c: 116: if(led_timer_int_status)
  5038                           
  5039                           ; Regs used in _LEDTimer_GetINTStatus: [wreg+status,2]
  5040  032A  1303               	bcf	3,6	;RP1=0, select bank0
  5041  032B  0833               	movf	_led_timer_int_status,w	;volatile
  5042  032C  1903               	btfsc	3,2
  5043  032D  3400               	retlw	0
  5044                           
  5045                           ;ms83fxx02_led_timer.c: 117: {
  5046                           ;ms83fxx02_led_timer.c: 118: led_timer_int_status = 0;
  5047  032E  01B3               	clrf	_led_timer_int_status	;volatile
  5048                           
  5049                           ;ms83fxx02_led_timer.c: 120: return SET;
  5050  032F  3401               	retlw	1
  5051  0330                     __end_of_LEDTimer_GetINTStatus:	
  5052                           ;ms83fxx02_led_timer.c: 122: else
  5053                           ;ms83fxx02_led_timer.c: 123: {
  5054                           ;ms83fxx02_led_timer.c: 124: return RESET;
  5055                           
  5056  0330                     __ptext1683:	
  5057 ;; =============== function _Motor_Init ends ============
  5058                           
  5059                           
  5060 ;; *************** function _LEDTimer_GetRunLimitINTStatus *****************
  5061 ;; Defined at:
  5062 ;;		line 134 in file "ms83fxx02_led_timer.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      enum E1477
  5069 ;; Registers used:
  5070 ;;		wreg, status,2
  5071 ;; Tracked objects:
  5072 ;;		On entry : 60/40
  5073 ;;		On exit  : 60/0
  5074 ;;		Unchanged: FFF9F/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5076 ;;      Params:         0       0       0       0
  5077 ;;      Locals:         0       0       0       0
  5078 ;;      Temps:          0       0       0       0
  5079 ;;      Totals:         0       0       0       0
  5080 ;;Total ram usage:        0 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    5
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_Motor_HandleStatusChangeEvt
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089  0330                     _LEDTimer_GetRunLimitINTStatus:	
  5090                           
  5091                           ;ms83fxx02_led_timer.c: 135: if(run_limit_int_status)
  5092                           
  5093                           ; Regs used in _LEDTimer_GetRunLimitINTStatus: [wreg+status,2]
  5094  0330  1303               	bcf	3,6	;RP1=0, select bank0
  5095  0331  0834               	movf	_run_limit_int_status,w	;volatile
  5096  0332  1903               	btfsc	3,2
  5097  0333  3400               	retlw	0
  5098                           
  5099                           ;ms83fxx02_led_timer.c: 136: {
  5100                           ;ms83fxx02_led_timer.c: 137: run_limit_int_status = 0;
  5101  0334  01B4               	clrf	_run_limit_int_status	;volatile
  5102                           
  5103                           ;ms83fxx02_led_timer.c: 139: return SET;
  5104  0335  3401               	retlw	1
  5105  0336                     __end_of_LEDTimer_GetRunLimitINTStatus:	
  5106                           ;ms83fxx02_led_timer.c: 141: else
  5107                           ;ms83fxx02_led_timer.c: 142: {
  5108                           ;ms83fxx02_led_timer.c: 143: return RESET;
  5109                           
  5110  0336                     __ptext1682:	
  5111 ;; =============== function _SwitchModeTimer_Cmd ends ============
  5112                           
  5113                           
  5114 ;; *************** function _Motor_Init *****************
  5115 ;; Defined at:
  5116 ;;		line 65 in file "ms83fxx02_motor.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  status          1    wreg     enum E1554
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  status          1    0[BANK0 ] enum E1554
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 60/0
  5127 ;;		On exit  : 40/0
  5128 ;;		Unchanged: FFF9F/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5130 ;;      Params:         0       0       0       0
  5131 ;;      Locals:         0       1       0       0
  5132 ;;      Temps:          0       0       0       0
  5133 ;;      Totals:         0       1       0       0
  5134 ;;Total ram usage:        1 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    5
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_Motor_Start
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143  0336                     _Motor_Init:	
  5144                           
  5145                           ; Regs used in _Motor_Init: [wreg+status,2+status,0]
  5146                           ;Motor_Init@status stored from wreg
  5147  0336  00B6               	movwf	Motor_Init@status
  5148                           
  5149                           ;ms83fxx02_motor.c: 67: TRISC4 = 1;
  5150  0337  1683               	bsf	3,5	;RP0=1, select bank1
  5151  0338  3007               	movlw	7
  5152  0339  1607               	bsf	7,4
  5153                           
  5154                           ;ms83fxx02_motor.c: 70: CMCON0 |= 0x07;
  5155  033A  1283               	bcf	3,5	;RP0=0, select bank0
  5156  033B  0499               	iorwf	25,f	;volatile
  5157                           
  5158                           ;ms83fxx02_motor.c: 71: T2CKSRC = 0;
  5159  033C  129B               	bcf	27,5
  5160                           
  5161                           ;ms83fxx02_motor.c: 74: TMR2 = 0;
  5162  033D  0191               	clrf	17	;volatile
  5163                           
  5164                           ;ms83fxx02_motor.c: 76: T2CON = 0x03;
  5165  033E  3003               	movlw	3
  5166  033F  0092               	movwf	18	;volatile
  5167                           
  5168                           ;ms83fxx02_motor.c: 78: PR2 = 0x9C;
  5169  0340  309C               	movlw	156
  5170  0341  1683               	bsf	3,5	;RP0=1, select bank1
  5171  0342  0092               	movwf	18	;volatile
  5172                           
  5173                           ;ms83fxx02_motor.c: 79: if(status == MOTOR_MODE_STOP)
  5174  0343  1283               	bcf	3,5	;RP0=0, select bank0
  5175  0344  0B36               	decfsz	Motor_Init@status,w
  5176  0345  2B47               	goto	l14779
  5177  0346  0008               	return
  5178  0347                     l14779:	
  5179                           
  5180                           ;ms83fxx02_motor.c: 83: else if(status == MOTOR_MODE_DUTY_80)
  5181  0347  0836               	movf	Motor_Init@status,w
  5182  0348  3A04               	xorlw	4
  5183  0349  1D03               	skipz
  5184  034A  2B4D               	goto	l14783
  5185                           
  5186                           ;ms83fxx02_motor.c: 84: {
  5187                           ;ms83fxx02_motor.c: 86: CCPR1L = 0x7D;
  5188  034B  307D               	movlw	125
  5189  034C  2B52               	goto	L9
  5190  034D                     l14783:	
  5191                           ;ms83fxx02_motor.c: 88: }
  5192                           
  5193                           ;ms83fxx02_motor.c: 87: CCP1CON = 0x8D | (0x00 << 4);
  5194                           
  5195                           
  5196                           ;ms83fxx02_motor.c: 89: else if(status == MOTOR_MODE_DUTY_90)
  5197  034D  0836               	movf	Motor_Init@status,w
  5198  034E  3A03               	xorlw	3
  5199  034F  1D03               	skipz
  5200  0350  2B56               	goto	l14787
  5201                           
  5202                           ;ms83fxx02_motor.c: 90: {
  5203                           ;ms83fxx02_motor.c: 92: CCPR1L = 0x8C;
  5204  0351  308C               	movlw	140
  5205  0352                     L9:	
  5206  0352  0093               	movwf	19	;volatile
  5207                           
  5208                           ;ms83fxx02_motor.c: 93: CCP1CON = 0x8D | (0x00 << 4);
  5209  0353  308D               	movlw	141
  5210  0354  0095               	movwf	21	;volatile
  5211                           
  5212                           ;ms83fxx02_motor.c: 94: }
  5213  0355  2B60               	goto	l8823
  5214  0356                     l14787:	
  5215                           
  5216                           ;ms83fxx02_motor.c: 95: else
  5217                           ;ms83fxx02_motor.c: 96: {
  5218                           ;ms83fxx02_motor.c: 97: if(status == MOTOR_MODE_DUTY_100)
  5219  0356  0836               	movf	Motor_Init@status,w
  5220  0357  3A02               	xorlw	2
  5221  0358  1D03               	skipz
  5222  0359  2B60               	goto	l8823
  5223                           
  5224                           ;ms83fxx02_motor.c: 98: {
  5225                           ;ms83fxx02_motor.c: 99: CCP1CON = 0;
  5226  035A  0195               	clrf	21	;volatile
  5227                           
  5228                           ;ms83fxx02_motor.c: 100: TRISC4 = 0;
  5229  035B  1683               	bsf	3,5	;RP0=1, select bank1
  5230  035C  1207               	bcf	7,4
  5231                           
  5232                           ;ms83fxx02_motor.c: 102: PC4 = 1;
  5233  035D  1283               	bcf	3,5	;RP0=0, select bank0
  5234  035E  1607               	bsf	7,4
  5235  035F  0008               	return
  5236  0360                     l8823:	
  5237                           
  5238                           ;ms83fxx02_motor.c: 105: }
  5239                           ;ms83fxx02_motor.c: 106: }
  5240                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
  5241  0360  108C               	bcf	12,1
  5242                           
  5243                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
  5244  0361  1512               	bsf	18,2
  5245  0362                     l8829:	
  5246                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
  5247                           
  5248  0362  1C8C               	btfss	12,1
  5249  0363  2B62               	goto	l8829
  5250                           
  5251                           ;ms83fxx02_motor.c: 113: TRISC4 = 0;
  5252  0364  1683               	bsf	3,5	;RP0=1, select bank1
  5253  0365  1207               	bcf	7,4
  5254  0366  0008               	return
  5255  0367                     __end_of_Motor_Init:	
  5256  0367                     __ptext1675:	
  5257 ;; =============== function _LED_Init ends ============
  5258                           
  5259                           
  5260 ;; *************** function ___lwdiv *****************
  5261 ;; Defined at:
  5262 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  divisor         2    0[BANK0 ] unsigned int 
  5265 ;;  dividend        2    2[BANK0 ] unsigned int 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;  quotient        2    4[BANK0 ] unsigned int 
  5268 ;;  counter         1    6[BANK0 ] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  2    0[BANK0 ] unsigned int 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 160/0
  5275 ;;		On exit  : 160/0
  5276 ;;		Unchanged: FFE9F/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5278 ;;      Params:         0       4       0       0
  5279 ;;      Locals:         0       3       0       0
  5280 ;;      Temps:          0       0       0       0
  5281 ;;      Totals:         0       7       0       0
  5282 ;;Total ram usage:        7 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    5
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_Battery_Detect
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291  0367                     ___lwdiv:	
  5292                           
  5293                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5294  0367  01BA               	clrf	___lwdiv@quotient
  5295  0368  01BB               	clrf	___lwdiv@quotient+1
  5296  0369  0837               	movf	___lwdiv@divisor+1,w
  5297  036A  0436               	iorwf	___lwdiv@divisor,w
  5298  036B  1903               	skipnz
  5299  036C  2B8C               	goto	l14895
  5300  036D  01BC               	clrf	___lwdiv@counter
  5301  036E                     L4:	
  5302  036E  0ABC               	incf	___lwdiv@counter,f
  5303  036F  1BB7               	btfsc	___lwdiv@divisor+1,7
  5304  0370  2B75               	goto	l14883
  5305  0371  1003               	clrc
  5306  0372  0DB6               	rlf	___lwdiv@divisor,f
  5307  0373  0DB7               	rlf	___lwdiv@divisor+1,f
  5308  0374  2B6E               	goto	L4
  5309  0375                     l14883:	
  5310  0375  1003               	clrc
  5311  0376  0DBA               	rlf	___lwdiv@quotient,f
  5312  0377  0DBB               	rlf	___lwdiv@quotient+1,f
  5313  0378  0837               	movf	___lwdiv@divisor+1,w
  5314  0379  0239               	subwf	___lwdiv@dividend+1,w
  5315  037A  1D03               	skipz
  5316  037B  2B7E               	goto	u1915
  5317  037C  0836               	movf	___lwdiv@divisor,w
  5318  037D  0238               	subwf	___lwdiv@dividend,w
  5319  037E                     u1915:	
  5320  037E  1C03               	skipc
  5321  037F  2B88               	goto	L5
  5322  0380  0836               	movf	___lwdiv@divisor,w
  5323  0381  02B8               	subwf	___lwdiv@dividend,f
  5324  0382  0837               	movf	___lwdiv@divisor+1,w
  5325  0383  1C03               	skipc
  5326  0384  03B9               	decf	___lwdiv@dividend+1,f
  5327  0385  02B9               	subwf	___lwdiv@dividend+1,f
  5328  0386  143A               	bsf	___lwdiv@quotient,0
  5329  0387  1003               	clrc
  5330  0388                     L5:	
  5331  0388  0CB7               	rrf	___lwdiv@divisor+1,f
  5332  0389  0CB6               	rrf	___lwdiv@divisor,f
  5333  038A  0BBC               	decfsz	___lwdiv@counter,f
  5334  038B  2B75               	goto	l14883
  5335  038C                     l14895:	
  5336  038C  083B               	movf	___lwdiv@quotient+1,w
  5337  038D  00B7               	movwf	?___lwdiv+1
  5338  038E  083A               	movf	___lwdiv@quotient,w
  5339  038F  00B6               	movwf	?___lwdiv
  5340  0390  0008               	return
  5341  0391                     __end_of___lwdiv:	
  5342  0391                     __ptext1657:	
  5343 ;; =============== function _ADC_ReadData ends ============
  5344                           
  5345                           
  5346 ;; *************** function _EEPROM_StoreMotorData *****************
  5347 ;; Defined at:
  5348 ;;		line 516 in file "ms83fxx02_motor.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 60/20
  5359 ;;		On exit  : 60/20
  5360 ;;		Unchanged: FFE00/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5362 ;;      Params:         0       0       0       0
  5363 ;;      Locals:         0       0       0       0
  5364 ;;      Temps:          0       0       0       0
  5365 ;;      Totals:         0       0       0       0
  5366 ;;Total ram usage:        0 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    6
  5369 ;; This function calls:
  5370 ;;		_EEPROM_Write
  5371 ;; This function is called by:
  5372 ;;		_Battery_Detect
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375  0391                     _EEPROM_StoreMotorData:	
  5376                           
  5377                           ;ms83fxx02_motor.c: 517: EEPROM_Write(0x12, motor_status);
  5378                           
  5379 ;; hardware stack exceeded
  5380                           ; Regs used in _EEPROM_StoreMotorData: [wreg+status,2+status,0+pclath+cstack]
  5381  0391  087D               	movf	_motor_status,w	;volatile
  5382  0392  1283               	bcf	3,5	;RP0=0, select bank0
  5383  0393  00B6               	movwf	?_EEPROM_Write
  5384  0394  3012               	movlw	18
  5385  0395  23A8  118A         	fcall	_EEPROM_Write
  5386                           
  5387                           ;ms83fxx02_motor.c: 518: EEPROM_Write(0x13, motor_intr_count);
  5388  0397  087B               	movf	_motor_intr_count,w	;volatile
  5389  0398  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0399  00B6               	movwf	?_EEPROM_Write
  5391  039A  3013               	movlw	19
  5392  039B  23A8  118A         	fcall	_EEPROM_Write
  5393                           
  5394                           ;ms83fxx02_motor.c: 519: EEPROM_Write(0x14, motor_oper_record);
  5395  039D  1283               	bcf	3,5	;RP0=0, select bank0
  5396  039E  082C               	movf	_motor_oper_record,w	;volatile
  5397  039F  00B6               	movwf	?_EEPROM_Write
  5398  03A0  3014               	movlw	20
  5399  03A1  23A8  118A         	fcall	_EEPROM_Write
  5400                           
  5401                           ;ms83fxx02_motor.c: 520: EEPROM_Write(0x15, motor_timing_running_flag);
  5402  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  5403  03A4  0848               	movf	_motor_timing_running_flag,w
  5404  03A5  00B6               	movwf	?_EEPROM_Write
  5405  03A6  3015               	movlw	21
  5406  03A7  2BA8               	ljmp	_EEPROM_Write
  5407  03A8                     __end_of_EEPROM_StoreMotorData:	
  5408  03A8                     __ptext1691:	
  5409 ;; =============== function _EEPROM_Read ends ============
  5410                           
  5411                           
  5412 ;; *************** function _EEPROM_Write *****************
  5413 ;; Defined at:
  5414 ;;		line 39 in file "ms83fxx02_eeprom.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  addr            1    wreg     unsigned char 
  5417 ;;  data            1    0[BANK0 ] unsigned char 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  addr            1    1[BANK0 ] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;		None               void
  5422 ;; Registers used:
  5423 ;;		wreg
  5424 ;; Tracked objects:
  5425 ;;		On entry : 60/0
  5426 ;;		On exit  : 60/20
  5427 ;;		Unchanged: FFE00/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5429 ;;      Params:         0       1       0       0
  5430 ;;      Locals:         0       1       0       0
  5431 ;;      Temps:          0       0       0       0
  5432 ;;      Totals:         0       2       0       0
  5433 ;;Total ram usage:        2 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    5
  5436 ;; This function calls:
  5437 ;;		Nothing
  5438 ;; This function is called by:
  5439 ;;		_EEPROM_Init
  5440 ;;		_EEPROM_StoreMotorData
  5441 ;;		_EEPROM_SetFlag
  5442 ;;		_EEPROM_StoreModeData
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445  03A8                     _EEPROM_Write:	
  5446                           
  5447 ;; hardware stack exceeded
  5448                           ; Regs used in _EEPROM_Write: [wreg]
  5449                           ;EEPROM_Write@addr stored from wreg
  5450  03A8  00B7               	movwf	EEPROM_Write@addr
  5451                           
  5452                           ;ms83fxx02_eeprom.c: 40: EEADR = addr;
  5453  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  5454  03AA  009B               	movwf	27	;volatile
  5455  03AB  0000               	nop	;#
  5456                           
  5457                           ;ms83fxx02_eeprom.c: 42: EEDAT = data;
  5458  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  5459  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  5460  03AE  0836               	movf	EEPROM_Write@data,w
  5461  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  5462  03B0  009A               	movwf	26	;volatile
  5463                           
  5464                           ;ms83fxx02_eeprom.c: 43: EECON1 = 0x34;
  5465  03B1  3034               	movlw	52
  5466  03B2  009C               	movwf	28	;volatile
  5467                           
  5468                           ;ms83fxx02_eeprom.c: 44: WR = 1;
  5469  03B3  141D               	bsf	29,0
  5470  03B4  0000               	nop	;#
  5471  03B5  0000               	nop	;#
  5472  03B6  0000               	nop	;#
  5473  03B7                     l3333:	
  5474                           ;ms83fxx02_eeprom.c: 49: while(WR == 1);
  5475                           
  5476  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  5477  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  5478  03B9  181D               	btfsc	29,0
  5479  03BA  2BB7               	goto	l3333
  5480                           
  5481                           ;ms83fxx02_eeprom.c: 50: WREN1 = 0;
  5482  03BB  111C               	bcf	28,2
  5483                           
  5484                           ;ms83fxx02_eeprom.c: 51: WREN2 = 0;
  5485  03BC  121C               	bcf	28,4
  5486                           
  5487                           ;ms83fxx02_eeprom.c: 52: WREN3 = 0;
  5488  03BD  129C               	bcf	28,5
  5489  03BE  0008               	return
  5490  03BF                     __end_of_EEPROM_Write:	
  5491  03BF                     __ptext1656:	
  5492 ;; =============== function _EEPROM_SetFlag ends ============
  5493                           
  5494                           
  5495 ;; *************** function _ADC_ReadData *****************
  5496 ;; Defined at:
  5497 ;;		line 86 in file "ms83fxx02_pwr.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  channel         1    wreg     unsigned char 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  channel         1    7[BANK0 ] unsigned char 
  5502 ;;  battery_valu    2    8[BANK0 ] unsigned short 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  2    4[BANK0 ] unsigned short 
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 60/0
  5509 ;;		On exit  : 60/0
  5510 ;;		Unchanged: FFE00/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5512 ;;      Params:         0       2       0       0
  5513 ;;      Locals:         0       3       0       0
  5514 ;;      Temps:          0       1       0       0
  5515 ;;      Totals:         0       6       0       0
  5516 ;;Total ram usage:        6 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    6
  5519 ;; This function calls:
  5520 ;;		_delay_us
  5521 ;; This function is called by:
  5522 ;;		_Battery_Detect
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525  03BF                     _ADC_ReadData:	
  5526                           
  5527 ;; hardware stack exceeded
  5528                           ; Regs used in _ADC_ReadData: [wreg+status,2+status,0+pclath+cstack]
  5529                           ;ADC_ReadData@channel stored from wreg
  5530  03BF  00BD               	movwf	ADC_ReadData@channel
  5531                           
  5532                           ;ms83fxx02_pwr.c: 89: ADCON0 |= (channel << 2);
  5533  03C0  00BC               	movwf	??_ADC_ReadData
  5534  03C1  1003               	clrc
  5535  03C2  0DBC               	rlf	??_ADC_ReadData,f
  5536  03C3  1003               	clrc
  5537  03C4  0D3C               	rlf	??_ADC_ReadData,w
  5538  03C5  049F               	iorwf	31,f	;volatile
  5539                           
  5540                           ;ms83fxx02_pwr.c: 92: ADCON0 |= 0b10000001;
  5541  03C6  3081               	movlw	129
  5542  03C7  049F               	iorwf	31,f	;volatile
  5543                           
  5544                           ;ms83fxx02_pwr.c: 93: delay_us(10);
  5545  03C8  300A               	movlw	10
  5546  03C9  00B6               	movwf	?_delay_us
  5547  03CA  01B7               	clrf	?_delay_us+1
  5548  03CB  23E3  118A         	fcall	_delay_us
  5549                           
  5550                           ;ms83fxx02_pwr.c: 95: GO_DONE = 1;
  5551  03CD  149F               	bsf	31,1
  5552  03CE                     l10022:	
  5553                           ;ms83fxx02_pwr.c: 96: while(GO_DONE == 1){;}
  5554                           
  5555  03CE  189F               	btfsc	31,1
  5556  03CF  2BCE               	goto	l10022
  5557                           
  5558                           ;ms83fxx02_pwr.c: 98: battery_value = ADRESH;
  5559  03D0  081E               	movf	30,w	;volatile
  5560  03D1  00BE               	movwf	ADC_ReadData@battery_value
  5561  03D2  01BF               	clrf	ADC_ReadData@battery_value+1
  5562                           
  5563                           ;ms83fxx02_pwr.c: 99: battery_value = (battery_value << 8) | ADRESL;
  5564  03D3  00BC               	movwf	??_ADC_ReadData
  5565  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  5566  03D5  081E               	movf	30,w	;volatile
  5567  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  5568  03D7  00BE               	movwf	ADC_ReadData@battery_value
  5569  03D8  083C               	movf	??_ADC_ReadData,w
  5570  03D9  00BF               	movwf	ADC_ReadData@battery_value+1
  5571  03DA  0000               	nop	;#
  5572                           
  5573                           ;ms83fxx02_pwr.c: 104: ADON = 0;
  5574  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  5575  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  5576  03DD  101F               	bcf	31,0
  5577                           
  5578                           ;ms83fxx02_pwr.c: 106: return battery_value;
  5579  03DE  083F               	movf	ADC_ReadData@battery_value+1,w
  5580  03DF  00BB               	movwf	?_ADC_ReadData+1
  5581  03E0  083E               	movf	ADC_ReadData@battery_value,w
  5582  03E1  00BA               	movwf	?_ADC_ReadData
  5583  03E2  0008               	return
  5584  03E3                     __end_of_ADC_ReadData:	
  5585  03E3                     __ptext1676:	
  5586 ;; =============== function ___lwdiv ends ============
  5587                           
  5588                           
  5589 ;; *************** function _delay_us *****************
  5590 ;; Defined at:
  5591 ;;		line 60 in file "ms83fxx02_pwr.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  delay_us        2    0[BANK0 ] unsigned int 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  i               2    2[BANK0 ] unsigned int 
  5596 ;; Return value:  Size  Location     Type
  5597 ;;		None               void
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0
  5600 ;; Tracked objects:
  5601 ;;		On entry : 60/0
  5602 ;;		On exit  : 60/0
  5603 ;;		Unchanged: FFE00/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5605 ;;      Params:         0       2       0       0
  5606 ;;      Locals:         0       2       0       0
  5607 ;;      Temps:          0       0       0       0
  5608 ;;      Totals:         0       4       0       0
  5609 ;;Total ram usage:        4 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    5
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_ADC_ReadData
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618  03E3                     _delay_us:	
  5619                           
  5620                           ;ms83fxx02_pwr.c: 61: uint32_t i = 0;
  5621                           
  5622 ;; hardware stack exceeded
  5623                           ; Regs used in _delay_us: [wreg+status,2+status,0]
  5624  03E3  01B8               	clrf	delay_us@i
  5625  03E4  01B9               	clrf	delay_us@i+1
  5626                           
  5627                           ;ms83fxx02_pwr.c: 62: for(i= 0; i<delay_us; i++)
  5628  03E5  01B8               	clrf	delay_us@i
  5629  03E6  01B9               	clrf	delay_us@i+1
  5630  03E7                     l14871:	
  5631  03E7  0837               	movf	delay_us@delay_us+1,w
  5632  03E8  0239               	subwf	delay_us@i+1,w
  5633  03E9  1D03               	skipz
  5634  03EA  2BED               	goto	u1885
  5635  03EB  0836               	movf	delay_us@delay_us,w
  5636  03EC  0238               	subwf	delay_us@i,w
  5637  03ED                     u1885:	
  5638  03ED  1803               	btfsc	3,0
  5639  03EE  0008               	return
  5640  03EF  0000               	nop	;#
  5641  03F0  0000               	nop	;#
  5642  03F1  0000               	nop	;#
  5643  03F2  0000               	nop	;#
  5644  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  5645  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  5646  03F5  0AB8               	incf	delay_us@i,f
  5647  03F6  1903               	skipnz
  5648  03F7  0AB9               	incf	delay_us@i+1,f
  5649  03F8  2BE7               	goto	l14871
  5650  03F9                     __end_of_delay_us:	
  5651  03F9                     __ptext1655:	
  5652 ;; =============== function _EEPROM_StoreModeData ends ============
  5653                           
  5654                           
  5655 ;; *************** function _EEPROM_SetFlag *****************
  5656 ;; Defined at:
  5657 ;;		line 110 in file "ms83fxx02_pwr.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 160/0
  5668 ;;		On exit  : 60/20
  5669 ;;		Unchanged: FFE00/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5671 ;;      Params:         0       0       0       0
  5672 ;;      Locals:         0       0       0       0
  5673 ;;      Temps:          0       0       0       0
  5674 ;;      Totals:         0       0       0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		_EEPROM_Write
  5680 ;; This function is called by:
  5681 ;;		_Battery_Detect
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684  03F9                     _EEPROM_SetFlag:	
  5685                           
  5686 ;; hardware stack exceeded
  5687                           ; Regs used in _EEPROM_SetFlag: [wreg+status,2+status,0+pclath+cstack]
  5688  03F9  3016               	movlw	22
  5689                           
  5690                           ;ms83fxx02_pwr.c: 111: EEPROM_Write(0x16, 0x01);
  5691  03FA  01B6               	clrf	?_EEPROM_Write
  5692  03FB  0AB6               	incf	?_EEPROM_Write,f
  5693  03FC  2BA8               	ljmp	_EEPROM_Write
  5694  03FD                     __end_of_EEPROM_SetFlag:	
  5695  03FD                     __ptext1654:	
  5696 ;; =============== function _Charge_Init ends ============
  5697                           
  5698                           
  5699 ;; *************** function _EEPROM_StoreModeData *****************
  5700 ;; Defined at:
  5701 ;;		line 120 in file "ms83fxx02_pwr.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;		None               void
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0, pclath, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 60/20
  5712 ;;		On exit  : 60/20
  5713 ;;		Unchanged: FFE00/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5715 ;;      Params:         0       0       0       0
  5716 ;;      Locals:         0       0       0       0
  5717 ;;      Temps:          0       0       0       0
  5718 ;;      Totals:         0       0       0       0
  5719 ;;Total ram usage:        0 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    6
  5722 ;; This function calls:
  5723 ;;		_EEPROM_Write
  5724 ;; This function is called by:
  5725 ;;		_Battery_Detect
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728  03FD                     _EEPROM_StoreModeData:	
  5729                           
  5730                           ;ms83fxx02_pwr.c: 121: EEPROM_Write(0x11, device_mode);
  5731                           
  5732 ;; hardware stack exceeded
  5733                           ; Regs used in _EEPROM_StoreModeData: [wreg+status,2+status,0+pclath+cstack]
  5734  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  5735  03FE  0830               	movf	_device_mode,w	;volatile
  5736  03FF  00B6               	movwf	?_EEPROM_Write
  5737  0400  3011               	movlw	17
  5738  0401  2BA8               	ljmp	_EEPROM_Write
  5739  0402                     __end_of_EEPROM_StoreModeData:	
  5740  0402                     __ptext1699:	
  5741 ;; =============== function _Motor_SetStatus ends ============
  5742                           
  5743                           
  5744 ;; *************** function _SetDeviceMode *****************
  5745 ;; Defined at:
  5746 ;;		line 50 in file "ms83fxx02_pwr.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  mode            1    wreg     enum E1521
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  mode            1    0[BANK0 ] enum E1521
  5751 ;; Return value:  Size  Location     Type
  5752 ;;		None               void
  5753 ;; Registers used:
  5754 ;;		wreg
  5755 ;; Tracked objects:
  5756 ;;		On entry : 20/0
  5757 ;;		On exit  : 60/0
  5758 ;;		Unchanged: FFF9F/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5760 ;;      Params:         0       0       0       0
  5761 ;;      Locals:         0       1       0       0
  5762 ;;      Temps:          0       0       0       0
  5763 ;;      Totals:         0       1       0       0
  5764 ;;Total ram usage:        1 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    5
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_main
  5771 ;;		_Battery_Detect
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774  0402                     _SetDeviceMode:	
  5775                           
  5776                           ; Regs used in _SetDeviceMode: [wreg]
  5777                           ;SetDeviceMode@mode stored from wreg
  5778  0402  1303               	bcf	3,6	;RP1=0, select bank0
  5779  0403  00B6               	movwf	SetDeviceMode@mode
  5780                           
  5781                           ;ms83fxx02_pwr.c: 51: device_mode = mode;
  5782  0404  00B0               	movwf	_device_mode	;volatile
  5783  0405  0008               	return
  5784  0406                     __end_of_SetDeviceMode:	
  5785  0406                     PL2:	
  5786  0406  1283               	bcf	3,5	;RP0=0, select bank0
  5787  0407  3008               	movlw	8
  5788  0408  01BD               	clrf	LED_Init@GPIO_InitStruct+1
  5789  0409  0ABD               	incf	LED_Init@GPIO_InitStruct+1,f
  5790  040A  00BC               	movwf	LED_Init@GPIO_InitStruct
  5791  040B  303C               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  5792  040C  00B6               	movwf	?_GPIO_Init
  5793  040D  0008               	return
  5794                           
  5795                           	psect	text1670
  5796  06D1                     __ptext1670:	
  5797 ;; =============== function _EEPROM_RestoreDeviceModeData ends ============
  5798                           
  5799                           
  5800 ;; *************** function _EEPROM_GetFlag *****************
  5801 ;; Defined at:
  5802 ;;		line 115 in file "ms83fxx02_pwr.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      unsigned char 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, pclath, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 60/20
  5813 ;;		On exit  : 60/0
  5814 ;;		Unchanged: FFF9F/0
  5815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5816 ;;      Params:         0       0       0       0
  5817 ;;      Locals:         0       0       0       0
  5818 ;;      Temps:          0       0       0       0
  5819 ;;      Totals:         0       0       0       0
  5820 ;;Total ram usage:        0 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    6
  5823 ;; This function calls:
  5824 ;;		_EEPROM_Read
  5825 ;; This function is called by:
  5826 ;;		_main
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829  06D1                     _EEPROM_GetFlag:	
  5830                           
  5831                           ;ms83fxx02_pwr.c: 116: return EEPROM_Read(0x16);
  5832                           
  5833                           ; Regs used in _EEPROM_GetFlag: [wreg+status,2+pclath+cstack]
  5834  06D1  3016               	movlw	22
  5835  06D2  2EE8               	ljmp	_EEPROM_Read
  5836  06D3                     __end_of_EEPROM_GetFlag:	
  5837  06D3                     __ptext1669:	
  5838 ;; =============== function _EEPROM_RestoreMotorData ends ============
  5839                           
  5840                           
  5841 ;; *************** function _EEPROM_RestoreDeviceModeData *****************
  5842 ;; Defined at:
  5843 ;;		line 125 in file "ms83fxx02_pwr.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;		None               void
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, pclath, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 60/0
  5854 ;;		On exit  : 60/0
  5855 ;;		Unchanged: FFF9F/0
  5856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5857 ;;      Params:         0       0       0       0
  5858 ;;      Locals:         0       0       0       0
  5859 ;;      Temps:          0       0       0       0
  5860 ;;      Totals:         0       0       0       0
  5861 ;;Total ram usage:        0 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    6
  5864 ;; This function calls:
  5865 ;;		_EEPROM_Read
  5866 ;; This function is called by:
  5867 ;;		_main
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870  06D3                     _EEPROM_RestoreDeviceModeData:	
  5871                           
  5872                           ;ms83fxx02_pwr.c: 126: device_mode = EEPROM_Read(0x11);
  5873                           
  5874                           ; Regs used in _EEPROM_RestoreDeviceModeData: [wreg+status,2+pclath+cstack]
  5875  06D3  3011               	movlw	17
  5876  06D4  26E8               	fcall	_EEPROM_Read
  5877  06D5  00B0               	movwf	_device_mode
  5878  06D6  0008               	return
  5879  06D7                     __end_of_EEPROM_RestoreDeviceModeData:	
  5880  06D7                     __ptext1668:	
  5881 ;; =============== function _ChargeDetect_GetStatus ends ============
  5882                           
  5883                           
  5884 ;; *************** function _EEPROM_RestoreMotorData *****************
  5885 ;; Defined at:
  5886 ;;		line 524 in file "ms83fxx02_motor.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;		None               void
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, pclath, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 60/0
  5897 ;;		On exit  : 60/0
  5898 ;;		Unchanged: FFF9F/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5900 ;;      Params:         0       0       0       0
  5901 ;;      Locals:         0       0       0       0
  5902 ;;      Temps:          0       0       0       0
  5903 ;;      Totals:         0       0       0       0
  5904 ;;Total ram usage:        0 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    6
  5907 ;; This function calls:
  5908 ;;		_EEPROM_Read
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913  06D7                     _EEPROM_RestoreMotorData:	
  5914                           
  5915                           ;ms83fxx02_motor.c: 525: motor_status = EEPROM_Read(0x12);
  5916                           
  5917                           ; Regs used in _EEPROM_RestoreMotorData: [wreg+status,2+pclath+cstack]
  5918  06D7  3012               	movlw	18
  5919  06D8  26E8  118A         	fcall	_EEPROM_Read
  5920  06DA  00FD               	movwf	_motor_status
  5921                           
  5922                           ;ms83fxx02_motor.c: 526: motor_intr_count = EEPROM_Read(0x13);
  5923  06DB  3013               	movlw	19
  5924  06DC  26E8  118A         	fcall	_EEPROM_Read
  5925  06DE  00FB               	movwf	_motor_intr_count	;volatile
  5926                           
  5927                           ;ms83fxx02_motor.c: 527: motor_oper_record = EEPROM_Read(0x14);
  5928  06DF  3014               	movlw	20
  5929  06E0  26E8  118A         	fcall	_EEPROM_Read
  5930  06E2  00AC               	movwf	_motor_oper_record	;volatile
  5931  06E3  01AD               	clrf	_motor_oper_record+1	;volatile
  5932                           
  5933                           ;ms83fxx02_motor.c: 528: motor_timing_running_flag = EEPROM_Read(0x15);
  5934  06E4  3015               	movlw	21
  5935  06E5  26E8               	fcall	_EEPROM_Read
  5936  06E6  00C8               	movwf	_motor_timing_running_flag
  5937  06E7  0008               	return
  5938  06E8                     __end_of_EEPROM_RestoreMotorData:	
  5939  06E8                     __ptext1690:	
  5940 ;; =============== function _KEY_GetReleaseStatus ends ============
  5941                           
  5942                           
  5943 ;; *************** function _EEPROM_Read *****************
  5944 ;; Defined at:
  5945 ;;		line 28 in file "ms83fxx02_eeprom.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  addr            1    wreg     unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  addr            1    0[BANK0 ] unsigned char 
  5950 ;;  data            1    1[BANK0 ] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      unsigned char 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2
  5955 ;; Tracked objects:
  5956 ;;		On entry : 40/0
  5957 ;;		On exit  : 60/0
  5958 ;;		Unchanged: FFF9F/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5960 ;;      Params:         0       0       0       0
  5961 ;;      Locals:         0       2       0       0
  5962 ;;      Temps:          0       0       0       0
  5963 ;;      Totals:         0       2       0       0
  5964 ;;Total ram usage:        2 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    5
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_EEPROM_RestoreMotorData
  5971 ;;		_EEPROM_GetFlag
  5972 ;;		_EEPROM_RestoreDeviceModeData
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975  06E8                     _EEPROM_Read:	
  5976                           
  5977                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  5978                           ;EEPROM_Read@addr stored from wreg
  5979  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  5980  06E9  00B6               	movwf	EEPROM_Read@addr
  5981                           
  5982                           ;ms83fxx02_eeprom.c: 31: EEADR = addr;
  5983  06EA  1683               	bsf	3,5	;RP0=1, select bank1
  5984  06EB  009B               	movwf	27	;volatile
  5985                           
  5986                           ;ms83fxx02_eeprom.c: 32: RD = 1;
  5987  06EC  141C               	bsf	28,0
  5988                           
  5989                           ;ms83fxx02_eeprom.c: 33: data = EEDAT;
  5990  06ED  081A               	movf	26,w	;volatile
  5991  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  5992  06EF  00B7               	movwf	EEPROM_Read@data
  5993                           
  5994                           ;ms83fxx02_eeprom.c: 34: RD = 0;
  5995  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  5996  06F1  101C               	bcf	28,0
  5997                           
  5998                           ;ms83fxx02_eeprom.c: 35: return data;
  5999  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  6000  06F3  0837               	movf	EEPROM_Read@data,w
  6001  06F4  0008               	return
  6002  06F5                     __end_of_EEPROM_Read:	
  6003                           
  6004                           	psect	text1696
  6005  0744                     __ptext1696:	
  6006 ;; =============== function _GetDeviceMode ends ============
  6007                           
  6008                           
  6009 ;; *************** function _ChargeTimer_INTConfig *****************
  6010 ;; Defined at:
  6011 ;;		line 81 in file "ms83fxx02_charge_timer.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  NewState        1    wreg     enum E1482
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  NewState        1    0[BANK0 ] enum E1482
  6016 ;; Return value:  Size  Location     Type
  6017 ;;		None               void
  6018 ;; Registers used:
  6019 ;;		wreg
  6020 ;; Tracked objects:
  6021 ;;		On entry : 60/40
  6022 ;;		On exit  : 60/40
  6023 ;;		Unchanged: FFF9F/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6025 ;;      Params:         0       0       0       0
  6026 ;;      Locals:         0       1       0       0
  6027 ;;      Temps:          0       0       0       0
  6028 ;;      Totals:         0       1       0       0
  6029 ;;Total ram usage:        1 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    5
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_main
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038  0744                     _ChargeTimer_INTConfig:	
  6039                           
  6040                           ; Regs used in _ChargeTimer_INTConfig: [wreg]
  6041                           ;ChargeTimer_INTConfig@NewState stored from wreg
  6042  0744  1303               	bcf	3,6	;RP1=0, select bank0
  6043  0745  00B6               	movwf	ChargeTimer_INTConfig@NewState
  6044                           
  6045                           ;ms83fxx02_charge_timer.c: 82: if(NewState != DISABLE)
  6046  0746  0836               	movf	ChargeTimer_INTConfig@NewState,w
  6047                           
  6048                           ;ms83fxx02_charge_timer.c: 83: {
  6049                           ;ms83fxx02_charge_timer.c: 85: TMR5IE = 1;
  6050  0747  1703               	bsf	3,6	;RP1=1, select bank2
  6051  0748  1903               	btfsc	3,2
  6052  0749  2F4E               	goto	L12
  6053  074A  149C               	bsf	28,1
  6054                           
  6055                           ;ms83fxx02_charge_timer.c: 86: PEIE = 1;
  6056  074B  170B               	bsf	11,6
  6057                           
  6058                           ;ms83fxx02_charge_timer.c: 87: GIE = 1;
  6059  074C  178B               	bsf	11,7
  6060                           
  6061                           ;ms83fxx02_charge_timer.c: 88: }
  6062  074D  0008               	return
  6063  074E                     L12:	
  6064                           ;ms83fxx02_charge_timer.c: 89: else
  6065                           ;ms83fxx02_charge_timer.c: 90: {
  6066                           ;ms83fxx02_charge_timer.c: 92: TMR5IE = 0;
  6067                           
  6068  074E  109C               	bcf	28,1
  6069  074F  0008               	return
  6070  0750                     __end_of_ChargeTimer_INTConfig:	
  6071                           
  6072                           	psect	text1697
  6073  070D                     __ptext1697:	
  6074 ;; =============== function _ChargeTimer_INTConfig ends ============
  6075                           
  6076                           
  6077 ;; *************** function _ChargeTimer_Cmd *****************
  6078 ;; Defined at:
  6079 ;;		line 41 in file "ms83fxx02_charge_timer.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  NewState        1    wreg     enum E1482
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  NewState        1    0[BANK0 ] enum E1482
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, status,2
  6088 ;; Tracked objects:
  6089 ;;		On entry : 40/20
  6090 ;;		On exit  : 60/40
  6091 ;;		Unchanged: FFF9F/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6093 ;;      Params:         0       0       0       0
  6094 ;;      Locals:         0       1       0       0
  6095 ;;      Temps:          0       0       0       0
  6096 ;;      Totals:         0       1       0       0
  6097 ;;Total ram usage:        1 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    5
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106  070D                     _ChargeTimer_Cmd:	
  6107                           
  6108                           ; Regs used in _ChargeTimer_Cmd: [wreg+status,2]
  6109                           ;ChargeTimer_Cmd@NewState stored from wreg
  6110  070D  1283               	bcf	3,5	;RP0=0, select bank0
  6111  070E  00B6               	movwf	ChargeTimer_Cmd@NewState
  6112                           
  6113                           ;ms83fxx02_charge_timer.c: 42: charge_time_out = 0;
  6114  070F  01AA               	clrf	_charge_time_out	;volatile
  6115  0710  01AB               	clrf	_charge_time_out+1	;volatile
  6116                           
  6117                           ;ms83fxx02_charge_timer.c: 44: if(NewState != DISABLE)
  6118  0711  0836               	movf	ChargeTimer_Cmd@NewState,w
  6119                           
  6120                           ;ms83fxx02_charge_timer.c: 45: {
  6121                           ;ms83fxx02_charge_timer.c: 47: TMR5ON = 0;
  6122  0712  1703               	bsf	3,6	;RP1=1, select bank2
  6123  0713  111C               	bcf	28,2
  6124  0714  1903               	btfsc	3,2
  6125  0715  0008               	return
  6126                           
  6127                           ;ms83fxx02_charge_timer.c: 49: PWM5CR0 = 0b01110010;
  6128  0716  3072               	movlw	114
  6129  0717  009B               	movwf	27	;volatile
  6130                           
  6131                           ;ms83fxx02_charge_timer.c: 52: PWM5CR1 = 0b00111000;
  6132  0718  3038               	movlw	56
  6133  0719  009C               	movwf	28	;volatile
  6134                           
  6135                           ;ms83fxx02_charge_timer.c: 55: T5CKDIV = 119;
  6136  071A  3077               	movlw	119
  6137  071B  009D               	movwf	29	;volatile
  6138                           
  6139                           ;ms83fxx02_charge_timer.c: 57: TMR5H = 0x0F;
  6140  071C  300F               	movlw	15
  6141  071D  0099               	movwf	25	;volatile
  6142                           
  6143                           ;ms83fxx02_charge_timer.c: 58: TMR5L = 0;
  6144  071E  0198               	clrf	24	;volatile
  6145                           
  6146                           ;ms83fxx02_charge_timer.c: 59: PR5L = 0xFF;
  6147  071F  30FF               	movlw	255
  6148  0720  009A               	movwf	26	;volatile
  6149                           
  6150                           ;ms83fxx02_charge_timer.c: 62: TMR5IF = 0;
  6151  0721  101C               	bcf	28,0
  6152                           
  6153                           ;ms83fxx02_charge_timer.c: 65: TMR5ON = 1;
  6154  0722  151C               	bsf	28,2
  6155                           
  6156                           ;ms83fxx02_charge_timer.c: 66: }
  6157  0723  0008               	return
  6158  0724                     __end_of_ChargeTimer_Cmd:	
  6159                           ;ms83fxx02_charge_timer.c: 67: else
  6160                           ;ms83fxx02_charge_timer.c: 68: {
  6161                           ;ms83fxx02_charge_timer.c: 70: TMR5ON = 0;
  6162                           
  6163                           
  6164                           	psect	text1700
  6165  0760                     __ptext1700:	
  6166 ;; =============== function _SetDeviceMode ends ============
  6167                           
  6168                           
  6169 ;; *************** function _ChargeTimer_ResetCount *****************
  6170 ;; Defined at:
  6171 ;;		line 102 in file "ms83fxx02_charge_timer.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;		None               void
  6178 ;; Registers used:
  6179 ;;		status,2
  6180 ;; Tracked objects:
  6181 ;;		On entry : 60/0
  6182 ;;		On exit  : 60/0
  6183 ;;		Unchanged: FFF9F/0
  6184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6185 ;;      Params:         0       0       0       0
  6186 ;;      Locals:         0       0       0       0
  6187 ;;      Temps:          0       0       0       0
  6188 ;;      Totals:         0       0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    5
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		_main
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198  0760                     _ChargeTimer_ResetCount:	
  6199                           
  6200                           ;ms83fxx02_charge_timer.c: 103: charge_time_out = 0;
  6201                           
  6202                           ; Regs used in _ChargeTimer_ResetCount: [status,2]
  6203  0760  01AA               	clrf	_charge_time_out	;volatile
  6204  0761  01AB               	clrf	_charge_time_out+1	;volatile
  6205  0762  0008               	return
  6206  0763                     __end_of_ChargeTimer_ResetCount:	
  6207                           
  6208                           	psect	text1701
  6209  0763                     __ptext1701:	
  6210 ;; =============== function _ChargeTimer_ResetCount ends ============
  6211                           
  6212                           
  6213 ;; *************** function _Motor_GetStatus *****************
  6214 ;; Defined at:
  6215 ;;		line 132 in file "ms83fxx02_motor.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      enum E1554
  6222 ;; Registers used:
  6223 ;;		wreg
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/20
  6226 ;;		On exit  : 0/20
  6227 ;;		Unchanged: FFFFF/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6229 ;;      Params:         0       0       0       0
  6230 ;;      Locals:         0       0       0       0
  6231 ;;      Temps:          0       0       0       0
  6232 ;;      Totals:         0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    5
  6236 ;; This function calls:
  6237 ;;		Nothing
  6238 ;; This function is called by:
  6239 ;;		_main
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242  0763                     _Motor_GetStatus:	
  6243                           
  6244                           ;ms83fxx02_motor.c: 133: return motor_status;
  6245                           
  6246                           ; Regs used in _Motor_GetStatus: [wreg]
  6247  0763  087D               	movf	_motor_status,w	;volatile
  6248  0764  0008               	return
  6249  0765                     __end_of_Motor_GetStatus:	
  6250                           
  6251                           	psect	text1705
  6252  06F5                     __ptext1705:	
  6253 ;; =============== function _ADC_Init ends ============
  6254                           
  6255                           
  6256 ;; *************** function _Board_Init *****************
  6257 ;; Defined at:
  6258 ;;		line 33 in file "main.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;		None
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, status,2
  6267 ;; Tracked objects:
  6268 ;;		On entry : 60/0
  6269 ;;		On exit  : 60/20
  6270 ;;		Unchanged: FFF9F/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6272 ;;      Params:         0       0       0       0
  6273 ;;      Locals:         0       0       0       0
  6274 ;;      Temps:          0       0       0       0
  6275 ;;      Totals:         0       0       0       0
  6276 ;;Total ram usage:        0 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    5
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285  06F5                     _Board_Init:	
  6286                           
  6287                           ;main.c: 34: PCON = 0b00000011;
  6288                           
  6289                           ; Regs used in _Board_Init: [wreg+status,2]
  6290  06F5  3003               	movlw	3
  6291  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  6292  06F7  008E               	movwf	14	;volatile
  6293                           
  6294                           ;main.c: 35: MSCKCON = 0b00010000;
  6295  06F8  3010               	movlw	16
  6296  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  6297  06FA  009B               	movwf	27	;volatile
  6298                           
  6299                           ;main.c: 37: WDTCON = 0b00001110;
  6300  06FB  300E               	movlw	14
  6301  06FC  0098               	movwf	24	;volatile
  6302                           
  6303                           ;main.c: 39: OSCCON = 0b01010000;
  6304  06FD  3050               	movlw	80
  6305  06FE  1683               	bsf	3,5	;RP0=1, select bank1
  6306  06FF  008F               	movwf	15	;volatile
  6307                           
  6308                           ;main.c: 40: INTCON = 0b00000000;
  6309  0700  018B               	clrf	11	;volatile
  6310                           
  6311                           ;main.c: 41: PIE1 = 0b00000000;
  6312  0701  018C               	clrf	12	;volatile
  6313                           
  6314                           ;main.c: 42: PIE2 = 0b00000000;
  6315  0702  018D               	clrf	13	;volatile
  6316                           
  6317                           ;main.c: 43: PIR1 = 0b00000000;
  6318  0703  1283               	bcf	3,5	;RP0=0, select bank0
  6319  0704  018C               	clrf	12	;volatile
  6320                           
  6321                           ;main.c: 44: PIR2 = 0b00000000;
  6322  0705  018D               	clrf	13	;volatile
  6323                           
  6324                           ;main.c: 45: WPD = 0b00000000;
  6325  0706  1683               	bsf	3,5	;RP0=1, select bank1
  6326  0707  0189               	clrf	9	;volatile
  6327                           
  6328                           ;main.c: 46: ANSEL = 0b01000000;
  6329  0708  3040               	movlw	64
  6330  0709  0091               	movwf	17	;volatile
  6331                           
  6332                           ;main.c: 47: TRISA = 0b00000000;
  6333  070A  0185               	clrf	5	;volatile
  6334                           
  6335                           ;main.c: 48: WPUA = 0b00000000;
  6336  070B  0195               	clrf	21	;volatile
  6337  070C  0008               	return
  6338  070D                     __end_of_Board_Init:	
  6339                           
  6340                           	psect	text1706
  6341  040E                     __ptext1706:	
  6342 ;; =============== function _Board_Init ends ============
  6343                           
  6344                           
  6345 ;; *************** function _ISR *****************
  6346 ;; Defined at:
  6347 ;;		line 205 in file "main.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 60/0
  6359 ;;		Unchanged: FFF9F/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6361 ;;      Params:         0       0       0       0
  6362 ;;      Locals:         0       0       0       0
  6363 ;;      Temps:          4       0       0       0
  6364 ;;      Totals:         4       0       0       0
  6365 ;;Total ram usage:        4 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    4
  6368 ;; This function calls:
  6369 ;;		_KEY_IntrHandler
  6370 ;;		_DebounceTimer_IntrHandler
  6371 ;;		i1_GetDeviceMode
  6372 ;;		_SwitchModeTimer_IntrHandler
  6373 ;;		_ChargeTimer_IntrHandler
  6374 ;;		_MotorOperTimer_IntrHandler
  6375 ;;		_LEDTimer_IntrHandler
  6376 ;;		_ChargeDetect_IntrHandler
  6377 ;; This function is called by:
  6378 ;;		Interrupt level 1
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381  040E                     _ISR:	
  6382                           
  6383                           ;main.c: 206: KEY_IntrHandler();
  6384  040E  2452  118A         	fcall	_KEY_IntrHandler
  6385                           
  6386                           ;main.c: 207: DebounceTimer_IntrHandler();
  6387  0410  2460  118A         	fcall	_DebounceTimer_IntrHandler
  6388                           
  6389                           ;main.c: 209: if(RUN_MODE == GetDeviceMode())
  6390  0412  244E  118A         	fcall	i1_GetDeviceMode
  6391  0414  3800               	iorlw	0
  6392  0415  1D03               	skipz
  6393  0416  2C1A               	goto	i1l14489
  6394                           
  6395                           ;main.c: 210: {
  6396                           ;main.c: 211: SwitchModeTimer_IntrHandler();
  6397  0417  242D  118A         	fcall	_SwitchModeTimer_IntrHandler
  6398                           
  6399                           ;main.c: 212: }
  6400  0419  2C1C               	goto	i1l14491
  6401  041A                     i1l14489:	
  6402                           
  6403                           ;main.c: 213: else
  6404                           ;main.c: 214: {
  6405                           ;main.c: 215: ChargeTimer_IntrHandler();
  6406  041A  2439  118A         	fcall	_ChargeTimer_IntrHandler
  6407  041C                     i1l14491:	
  6408                           
  6409                           ;main.c: 216: }
  6410                           ;main.c: 218: MotorOperTimer_IntrHandler();
  6411  041C  24A9  118A         	fcall	_MotorOperTimer_IntrHandler
  6412                           
  6413                           ;main.c: 220: LEDTimer_IntrHandler();
  6414  041E  2444  118A         	fcall	_LEDTimer_IntrHandler
  6415                           
  6416                           ;main.c: 221: ChargeDetect_IntrHandler();
  6417  0420  249B               	fcall	_ChargeDetect_IntrHandler
  6418  0421  0878               	movf	??_ISR+3,w
  6419  0422  1303               	bcf	3,6	;RP1=0, select bank0
  6420  0423  00FF               	movwf	127
  6421  0424  0877               	movf	??_ISR+2,w
  6422  0425  008A               	movwf	10
  6423  0426  0876               	movf	??_ISR+1,w
  6424  0427  0084               	movwf	4
  6425  0428  0E75               	swapf	??_ISR^(0+-128),w
  6426  0429  0083               	movwf	3
  6427  042A  0EFE               	swapf	126,f
  6428  042B  0E7E               	swapf	126,w
  6429  042C  0009               	retfie
  6430  042D                     __end_of_ISR:	
  6431  042D                     __ptext1725:	
  6432 ;; =============== function _ChargeTimer_IntrHandler ends ============
  6433                           
  6434                           
  6435 ;; *************** function _SwitchModeTimer_IntrHandler *****************
  6436 ;; Defined at:
  6437 ;;		line 119 in file "ms83fxx02_tim.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		None
  6446 ;; Tracked objects:
  6447 ;;		On entry : 60/0
  6448 ;;		On exit  : 60/40
  6449 ;;		Unchanged: FFF9F/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6451 ;;      Params:         0       0       0       0
  6452 ;;      Locals:         0       0       0       0
  6453 ;;      Temps:          0       0       0       0
  6454 ;;      Totals:         0       0       0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_ISR
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463  042D                     _SwitchModeTimer_IntrHandler:	
  6464                           
  6465                           ;ms83fxx02_tim.c: 120: if(TMR5IE && TMR5IF)
  6466                           
  6467                           ; Regs used in _SwitchModeTimer_IntrHandler: []
  6468  042D  1703               	bsf	3,6	;RP1=1, select bank2
  6469  042E  189C               	btfsc	28,1
  6470  042F  1C1C               	btfss	28,0
  6471  0430  0008               	return
  6472                           
  6473                           ;ms83fxx02_tim.c: 121: {
  6474                           ;ms83fxx02_tim.c: 123: switch_mode_time_out = 1;
  6475  0431  1303               	bcf	3,6	;RP1=0, select bank0
  6476  0432  01B5               	clrf	_switch_mode_time_out	;volatile
  6477  0433  0AB5               	incf	_switch_mode_time_out,f	;volatile
  6478                           
  6479                           ;ms83fxx02_tim.c: 124: TMR5IF = 0;
  6480  0434  1703               	bsf	3,6	;RP1=1, select bank2
  6481  0435  101C               	bcf	28,0
  6482                           
  6483                           ;ms83fxx02_tim.c: 127: TMR5ON = 0;
  6484  0436  111C               	bcf	28,2
  6485                           
  6486                           ;ms83fxx02_tim.c: 129: TMR5IE = 0;
  6487  0437  109C               	bcf	28,1
  6488  0438  0008               	return
  6489  0439                     __end_of_SwitchModeTimer_IntrHandler:	
  6490  0439                     __ptext1724:	
  6491 ;; =============== function _LEDTimer_IntrHandler ends ============
  6492                           
  6493                           
  6494 ;; *************** function _ChargeTimer_IntrHandler *****************
  6495 ;; Defined at:
  6496 ;;		line 122 in file "ms83fxx02_charge_timer.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		status,2, status,0
  6505 ;; Tracked objects:
  6506 ;;		On entry : 60/0
  6507 ;;		On exit  : 60/40
  6508 ;;		Unchanged: FFF9F/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6510 ;;      Params:         0       0       0       0
  6511 ;;      Locals:         0       0       0       0
  6512 ;;      Temps:          0       0       0       0
  6513 ;;      Totals:         0       0       0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_ISR
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522  0439                     _ChargeTimer_IntrHandler:	
  6523                           
  6524                           ;ms83fxx02_charge_timer.c: 123: if(TMR5IE && TMR5IF)
  6525                           
  6526                           ; Regs used in _ChargeTimer_IntrHandler: [status]
  6527  0439  1703               	bsf	3,6	;RP1=1, select bank2
  6528  043A  189C               	btfsc	28,1
  6529  043B  1C1C               	btfss	28,0
  6530  043C  0008               	return
  6531                           
  6532                           ;ms83fxx02_charge_timer.c: 124: {
  6533                           ;ms83fxx02_charge_timer.c: 126: charge_time_out++;
  6534  043D  1303               	bcf	3,6	;RP1=0, select bank0
  6535  043E  0AAA               	incf	_charge_time_out,f	;volatile
  6536  043F  1903               	skipnz
  6537  0440  0AAB               	incf	_charge_time_out+1,f	;volatile
  6538                           
  6539                           ;ms83fxx02_charge_timer.c: 127: TMR5IF = 0;
  6540  0441  1703               	bsf	3,6	;RP1=1, select bank2
  6541  0442  101C               	bcf	28,0
  6542  0443  0008               	return
  6543  0444                     __end_of_ChargeTimer_IntrHandler:	
  6544  0444                     __ptext1723:	
  6545 ;; =============== function _TIM1_Init ends ============
  6546                           
  6547                           
  6548 ;; *************** function _LEDTimer_IntrHandler *****************
  6549 ;; Defined at:
  6550 ;;		line 154 in file "ms83fxx02_led_timer.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;		None
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		None
  6559 ;; Tracked objects:
  6560 ;;		On entry : 60/40
  6561 ;;		On exit  : 20/0
  6562 ;;		Unchanged: FFF9F/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6564 ;;      Params:         0       0       0       0
  6565 ;;      Locals:         0       0       0       0
  6566 ;;      Temps:          0       0       0       0
  6567 ;;      Totals:         0       0       0       0
  6568 ;;Total ram usage:        0 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_ISR
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576  0444                     _LEDTimer_IntrHandler:	
  6577                           
  6578                           ;ms83fxx02_led_timer.c: 155: if(TMR3IE && TMR3IF)
  6579                           
  6580                           ; Regs used in _LEDTimer_IntrHandler: []
  6581  0444  1890               	btfsc	16,1
  6582  0445  1C10               	btfss	16,0
  6583  0446  0008               	return
  6584                           
  6585                           ;ms83fxx02_led_timer.c: 156: {
  6586                           ;ms83fxx02_led_timer.c: 157: TMR3IF = 0;
  6587  0447  1010               	bcf	16,0
  6588                           
  6589                           ;ms83fxx02_led_timer.c: 158: led_timer_int_status = 1;
  6590  0448  1303               	bcf	3,6	;RP1=0, select bank0
  6591  0449  01B3               	clrf	_led_timer_int_status	;volatile
  6592  044A  0AB3               	incf	_led_timer_int_status,f	;volatile
  6593                           
  6594                           ;ms83fxx02_led_timer.c: 159: run_limit_int_status = 1;
  6595  044B  01B4               	clrf	_run_limit_int_status	;volatile
  6596  044C  0AB4               	incf	_run_limit_int_status,f	;volatile
  6597  044D  0008               	return
  6598  044E                     __end_of_LEDTimer_IntrHandler:	
  6599  044E                     __ptext1714:	
  6600 ;; =============== function _KEY_IntrHandler ends ============
  6601                           
  6602                           
  6603 ;; *************** function i1_GetDeviceMode *****************
  6604 ;; Defined at:
  6605 ;;		line 40 in file "ms83fxx02_pwr.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      enum E1586
  6612 ;; Registers used:
  6613 ;;		wreg
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 60/0
  6617 ;;		Unchanged: FFF9F/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6619 ;;      Params:         0       0       0       0
  6620 ;;      Locals:         0       0       0       0
  6621 ;;      Temps:          0       0       0       0
  6622 ;;      Totals:         0       0       0       0
  6623 ;;Total ram usage:        0 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		_ISR
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631  044E                     i1_GetDeviceMode:	
  6632                           
  6633                           ;ms83fxx02_pwr.c: 41: return device_mode;
  6634                           
  6635                           ; Regs used in i1_GetDeviceMode: [wreg]
  6636  044E  1283               	bcf	3,5	;RP0=0, select bank0
  6637  044F  1303               	bcf	3,6	;RP1=0, select bank0
  6638  0450  0830               	movf	_device_mode,w	;volatile
  6639  0451  0008               	return
  6640  0452                     __end_ofi1_GetDeviceMode:	
  6641  0452                     __ptext1713:	
  6642 ;; =============== function _DebounceTimer_IntrHandler ends ============
  6643                           
  6644                           
  6645 ;; *************** function _KEY_IntrHandler *****************
  6646 ;; Defined at:
  6647 ;;		line 114 in file "MS83FXX02_KEY.C"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 60/0
  6658 ;;		On exit  : 40/0
  6659 ;;		Unchanged: FFF9F/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6661 ;;      Params:         0       0       0       0
  6662 ;;      Locals:         0       0       0       0
  6663 ;;      Temps:          0       0       0       0
  6664 ;;      Totals:         0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    1
  6668 ;; This function calls:
  6669 ;;		_TIM1_Init
  6670 ;; This function is called by:
  6671 ;;		_ISR
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674  0452                     _KEY_IntrHandler:	
  6675                           
  6676                           ;MS83FXX02_KEY.C: 115: if(INTE && INTF)
  6677                           
  6678                           ; Regs used in _KEY_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  6679  0452  1A0B               	btfsc	11,4
  6680  0453  1C8B               	btfss	11,1
  6681  0454  0008               	return
  6682  0455  3000               	movlw	0
  6683                           
  6684                           ;MS83FXX02_KEY.C: 116: {
  6685                           ;MS83FXX02_KEY.C: 118: INTF = 0;
  6686  0456  108B               	bcf	11,1
  6687                           
  6688                           ;MS83FXX02_KEY.C: 119: INTE = 0;
  6689  0457  120B               	bcf	11,4
  6690                           
  6691                           ;MS83FXX02_KEY.C: 120: key_status = INTEDG;
  6692  0458  1683               	bsf	3,5	;RP0=1, select bank1
  6693  0459  1B01               	btfsc	1,6
  6694  045A  3001               	movlw	1
  6695  045B  00FC               	movwf	_key_status	;volatile
  6696                           
  6697                           ;MS83FXX02_KEY.C: 121: key_press_flag= 1;
  6698  045C  1283               	bcf	3,5	;RP0=0, select bank0
  6699  045D  01B1               	clrf	_key_press_flag	;volatile
  6700  045E  0AB1               	incf	_key_press_flag,f	;volatile
  6701                           
  6702                           ;MS83FXX02_KEY.C: 122: TIM1_Init();
  6703  045F  2D76               	ljmp	i1l14669
  6704  0460                     __end_of_KEY_IntrHandler:	
  6705  0460                     __ptext1712:	
  6706 ;; =============== function _ChargeDetect_IntrHandler ends ============
  6707                           
  6708                           
  6709 ;; *************** function _DebounceTimer_IntrHandler *****************
  6710 ;; Defined at:
  6711 ;;		line 132 in file "MS83FXX02_KEY.C"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;		None               void
  6718 ;; Registers used:
  6719 ;;		wreg, status,2, status,0, pclath, cstack
  6720 ;; Tracked objects:
  6721 ;;		On entry : 40/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: FFF9F/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6725 ;;      Params:         0       0       0       0
  6726 ;;      Locals:         0       0       0       0
  6727 ;;      Temps:          0       0       0       0
  6728 ;;      Totals:         0       0       0       0
  6729 ;;Total ram usage:        0 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    1
  6732 ;; This function calls:
  6733 ;;		i1_GPIO_ReadInputDataBit
  6734 ;; This function is called by:
  6735 ;;		_ISR
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738  0460                     _DebounceTimer_IntrHandler:	
  6739                           
  6740                           ;MS83FXX02_KEY.C: 133: if(TMR1IE && TMR1IF)
  6741                           
  6742                           ; Regs used in _DebounceTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  6743  0460  1683               	bsf	3,5	;RP0=1, select bank1
  6744  0461  1C0C               	btfss	12,0
  6745  0462  0008               	return
  6746  0463  1283               	bcf	3,5	;RP0=0, select bank0
  6747  0464  1C0C               	btfss	12,0
  6748  0465  0008               	return
  6749                           
  6750                           ;MS83FXX02_KEY.C: 134: {
  6751                           ;MS83FXX02_KEY.C: 135: TMR1IF = 0;
  6752  0466  100C               	bcf	12,0
  6753                           
  6754                           ;MS83FXX02_KEY.C: 136: TMR1IE = 0;
  6755  0467  1683               	bsf	3,5	;RP0=1, select bank1
  6756  0468  100C               	bcf	12,0
  6757                           
  6758                           ;MS83FXX02_KEY.C: 137: TMR1ON = 0;
  6759  0469  1283               	bcf	3,5	;RP0=0, select bank0
  6760  046A  3002               	movlw	2
  6761  046B  1010               	bcf	16,0
  6762                           
  6763                           ;MS83FXX02_KEY.C: 139: if(key_status != GPIO_ReadInputDataBit(GPIOC, ((uint8_t)0x0000000
      +                          2)))
  6764  046C  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  6765  046D  3001               	movlw	1
  6766  046E  2485  118A         	fcall	i1_GPIO_ReadInputDataBit
  6767  0470  067C               	xorwf	_key_status,w	;volatile
  6768  0471  1D03               	btfss	3,2
  6769  0472  2C79               	goto	i1l14517
  6770  0473  2C7C               	goto	i1l14519
  6771  0474                     i1l14521:	
  6772                           
  6773                           ;MS83FXX02_KEY.C: 148: {
  6774                           ;MS83FXX02_KEY.C: 150: key_press = 1;
  6775  0474  01F9               	clrf	_key_press	;volatile
  6776  0475  0AF9               	incf	_key_press,f	;volatile
  6777                           
  6778                           ;MS83FXX02_KEY.C: 153: INTEDG = 1;
  6779  0476  1683               	bsf	3,5	;RP0=1, select bank1
  6780  0477  1303               	bcf	3,6	;RP1=0, select bank1
  6781  0478  1701               	bsf	1,6
  6782  0479                     i1l14517:	
  6783                           ;MS83FXX02_KEY.C: 154: }
  6784                           
  6785                           
  6786                           ;MS83FXX02_KEY.C: 140: {
  6787                           ;MS83FXX02_KEY.C: 142: INTF = 0;
  6788  0479  108B               	bcf	11,1
  6789                           
  6790                           ;MS83FXX02_KEY.C: 143: INTE = 1;
  6791  047A  160B               	bsf	11,4
  6792                           
  6793                           ;MS83FXX02_KEY.C: 144: return ;
  6794  047B  0008               	return
  6795  047C                     i1l14519:	
  6796                           
  6797                           ;MS83FXX02_KEY.C: 145: }
  6798                           ;MS83FXX02_KEY.C: 147: if(!key_status)
  6799  047C  08FC               	movf	_key_status,f
  6800  047D  1903               	btfsc	3,2
  6801  047E  2C74               	goto	i1l14521
  6802                           
  6803                           ;MS83FXX02_KEY.C: 155: else
  6804                           ;MS83FXX02_KEY.C: 156: {
  6805                           ;MS83FXX02_KEY.C: 158: key_release = 1;
  6806  047F  01FA               	clrf	_key_release	;volatile
  6807  0480  0AFA               	incf	_key_release,f	;volatile
  6808                           
  6809                           ;MS83FXX02_KEY.C: 161: INTEDG = 0;
  6810  0481  1683               	bsf	3,5	;RP0=1, select bank1
  6811  0482  1303               	bcf	3,6	;RP1=0, select bank1
  6812  0483  1301               	bcf	1,6
  6813  0484  2C79               	goto	i1l14517
  6814  0485                     __end_of_DebounceTimer_IntrHandler:	
  6815  0485                     __ptext1719:	
  6816 ;; =============== function i1_Motor_Init ends ============
  6817                           
  6818                           
  6819 ;; *************** function i1_GPIO_ReadInputDataBit *****************
  6820 ;; Defined at:
  6821 ;;		line 101 in file "ms83fxx02_gpio.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  GPIO_ReadInp    1    wreg     enum E1491
  6824 ;;  GPIO_ReadInp    1    0[COMMON] unsigned char 
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  GPIO_ReadInp    1    2[COMMON] enum E1491
  6827 ;;  GPIO_ReadInp    1    1[COMMON] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 20/40
  6834 ;;		On exit  : 20/0
  6835 ;;		Unchanged: FFF9F/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6837 ;;      Params:         1       0       0       0
  6838 ;;      Locals:         2       0       0       0
  6839 ;;      Temps:          0       0       0       0
  6840 ;;      Totals:         3       0       0       0
  6841 ;;Total ram usage:        3 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_ChargeDetect_IntrHandler
  6847 ;;		_DebounceTimer_IntrHandler
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850  0485                     i1_GPIO_ReadInputDataBit:	
  6851                           
  6852                           ; Regs used in i1_GPIO_ReadInputDataBit: [wreg+status,2+status,0]
  6853                           ;i1GPIO_ReadInputDataBit@GPIOx stored from wreg
  6854  0485  00F2               	movwf	i1GPIO_ReadInputDataBit@GPIOx
  6855                           
  6856                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
  6857  0486  01F1               	clrf	i1GPIO_ReadInputDataBit@bitstatus
  6858                           
  6859                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
  6860  0487  08F2               	movf	i1GPIO_ReadInputDataBit@GPIOx,f
  6861  0488  1D03               	skipz
  6862  0489  2C92               	goto	i1l14939
  6863                           
  6864                           ;ms83fxx02_gpio.c: 105: {
  6865                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
  6866  048A  1303               	bcf	3,6	;RP1=0, select bank0
  6867  048B  0805               	movf	5,w	;volatile
  6868  048C  0570               	andwf	i1GPIO_ReadInputDataBit@GPIO_Pin,w
  6869  048D  1903               	btfsc	3,2
  6870  048E  2C99               	goto	i1l14945
  6871  048F                     i1l14937:	
  6872                           
  6873                           ;ms83fxx02_gpio.c: 107: {
  6874                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
  6875  048F  01F1               	clrf	i1GPIO_ReadInputDataBit@bitstatus
  6876  0490  0AF1               	incf	i1GPIO_ReadInputDataBit@bitstatus,f
  6877  0491  2C99               	goto	i1l14945
  6878  0492                     i1l14939:	
  6879                           
  6880                           ;ms83fxx02_gpio.c: 111: else
  6881                           ;ms83fxx02_gpio.c: 112: {
  6882                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
  6883  0492  0B72               	decfsz	i1GPIO_ReadInputDataBit@GPIOx,w
  6884  0493  2C99               	goto	i1l14945
  6885                           
  6886                           ;ms83fxx02_gpio.c: 114: {
  6887                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
  6888  0494  1303               	bcf	3,6	;RP1=0, select bank0
  6889  0495  0807               	movf	7,w	;volatile
  6890  0496  0570               	andwf	i1GPIO_ReadInputDataBit@GPIO_Pin,w
  6891  0497  1D03               	btfss	3,2
  6892  0498  2C8F               	goto	i1l14937
  6893  0499                     i1l14945:	
  6894                           
  6895                           ;ms83fxx02_gpio.c: 118: }
  6896                           ;ms83fxx02_gpio.c: 119: }
  6897                           ;ms83fxx02_gpio.c: 120: }
  6898                           ;ms83fxx02_gpio.c: 122: return bitstatus;
  6899  0499  0871               	movf	i1GPIO_ReadInputDataBit@bitstatus,w
  6900  049A  0008               	return
  6901  049B                     __end_ofi1_GPIO_ReadInputDataBit:	
  6902  049B                     __ptext1711:	
  6903 ;; =============== function i1_LED_CloseMotorStatus ends ============
  6904                           
  6905                           
  6906 ;; *************** function _ChargeDetect_IntrHandler *****************
  6907 ;; Defined at:
  6908 ;;		line 80 in file "ms83fxx02_charge.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;		None               void
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0, pclath, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 20/40
  6919 ;;		On exit  : 20/0
  6920 ;;		Unchanged: FFF9F/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6922 ;;      Params:         0       0       0       0
  6923 ;;      Locals:         0       0       0       0
  6924 ;;      Temps:          0       0       0       0
  6925 ;;      Totals:         0       0       0       0
  6926 ;;Total ram usage:        0 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    1
  6929 ;; This function calls:
  6930 ;;		i1_GPIO_ReadInputDataBit
  6931 ;; This function is called by:
  6932 ;;		_ISR
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935  049B                     _ChargeDetect_IntrHandler:	
  6936                           
  6937                           ;ms83fxx02_charge.c: 81: if(PAIE & PAIF)
  6938                           
  6939                           ; Regs used in _ChargeDetect_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  6940  049B  3001               	movlw	1
  6941  049C  1D8B               	btfss	11,3
  6942  049D  3900               	andlw	0
  6943  049E  1C0B               	btfss	11,0
  6944  049F  3900               	andlw	0
  6945  04A0  3800               	iorlw	0
  6946  04A1  1903               	skipnz
  6947  04A2  0008               	return
  6948                           
  6949                           ;ms83fxx02_charge.c: 82: {
  6950                           ;ms83fxx02_charge.c: 83: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
  6951  04A3  3010               	movlw	16
  6952  04A4  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  6953  04A5  3000               	movlw	0
  6954  04A6  2485               	fcall	i1_GPIO_ReadInputDataBit
  6955                           
  6956                           ;ms83fxx02_charge.c: 85: PAIF = 0;
  6957  04A7  100B               	bcf	11,0
  6958  04A8  0008               	return
  6959  04A9                     __end_of_ChargeDetect_IntrHandler:	
  6960  04A9                     __ptext1707:	
  6961 ;; =============== function _ISR ends ============
  6962                           
  6963                           
  6964 ;; *************** function _MotorOperTimer_IntrHandler *****************
  6965 ;; Defined at:
  6966 ;;		line 319 in file "ms83fxx02_motor.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;		None               void
  6973 ;; Registers used:
  6974 ;;		wreg, status,2, status,0, pclath, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 60/40
  6977 ;;		On exit  : 60/40
  6978 ;;		Unchanged: FFF9F/0
  6979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6980 ;;      Params:         0       0       0       0
  6981 ;;      Locals:         0       0       0       0
  6982 ;;      Temps:          0       0       0       0
  6983 ;;      Totals:         0       0       0       0
  6984 ;;Total ram usage:        0 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    3
  6987 ;; This function calls:
  6988 ;;		i1_Motor_CheckRunLimit
  6989 ;;		___lbmod
  6990 ;;		i1_MotorOperationTimer_Init
  6991 ;;		i1_Motor_Stop
  6992 ;;		i1_MotorOperationTimer_Stop
  6993 ;;		i1_Motor_SetStatus
  6994 ;;		i1_Motor_Init
  6995 ;; This function is called by:
  6996 ;;		_ISR
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999  04A9                     _MotorOperTimer_IntrHandler:	
  7000                           
  7001                           ;ms83fxx02_motor.c: 320: if(TMR4IE && TMR4IF)
  7002                           
  7003 ;; hardware stack exceeded
  7004                           ; Regs used in _MotorOperTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  7005  04A9  1896               	btfsc	22,1
  7006  04AA  1C16               	btfss	22,0
  7007  04AB  0008               	return
  7008                           
  7009                           ;ms83fxx02_motor.c: 321: {
  7010                           ;ms83fxx02_motor.c: 322: if(!Motor_CheckRunLimit())
  7011  04AC  2515  118A         	fcall	i1_Motor_CheckRunLimit
  7012  04AE  3800               	iorlw	0
  7013  04AF  1D03               	skipz
  7014  04B0  2CDC               	goto	i1l8873
  7015                           
  7016                           ;ms83fxx02_motor.c: 323: {
  7017                           ;ms83fxx02_motor.c: 325: if(motor_timing_running_flag)
  7018  04B1  0848               	movf	_motor_timing_running_flag,w
  7019  04B2  1903               	btfsc	3,2
  7020  04B3  2CC2               	goto	i1l14553
  7021                           
  7022                           ;ms83fxx02_motor.c: 326: {
  7023                           ;ms83fxx02_motor.c: 327: motor_intr_count++;
  7024  04B4  0AFB               	incf	_motor_intr_count,f	;volatile
  7025                           
  7026                           ;ms83fxx02_motor.c: 328: if((motor_intr_count % 5) == 0)
  7027  04B5  3005               	movlw	5
  7028  04B6  00F0               	movwf	?___lbmod
  7029  04B7  087B               	movf	_motor_intr_count,w	;volatile
  7030  04B8  251E  118A         	fcall	___lbmod
  7031  04BA  3800               	iorlw	0
  7032  04BB  1D03               	skipz
  7033  04BC  2CDF               	goto	i1l14571
  7034  04BD  3002               	movlw	2
  7035                           
  7036                           ;ms83fxx02_motor.c: 329: {
  7037                           ;ms83fxx02_motor.c: 330: motor_timing_running_flag = 0;
  7038  04BE  01C8               	clrf	_motor_timing_running_flag
  7039                           
  7040                           ;ms83fxx02_motor.c: 331: MotorOperationTimer_Init(MotorOperationTimer_0_3s);
  7041  04BF  24E2  118A         	fcall	i1_MotorOperationTimer_Init
  7042  04C1  2CDF               	goto	i1l14571
  7043  04C2                     i1l14553:	
  7044                           
  7045                           ;ms83fxx02_motor.c: 334: else
  7046                           ;ms83fxx02_motor.c: 335: {
  7047                           ;ms83fxx02_motor.c: 336: if(motor_intr_count >= 20)
  7048  04C2  3014               	movlw	20
  7049  04C3  027B               	subwf	_motor_intr_count,w	;volatile
  7050  04C4  1C03               	skipc
  7051  04C5  2CD2               	goto	i1l14565
  7052                           
  7053                           ;ms83fxx02_motor.c: 337: {
  7054                           ;ms83fxx02_motor.c: 338: motor_intr_count = 0;
  7055  04C6  01FB               	clrf	_motor_intr_count	;volatile
  7056                           
  7057                           ;ms83fxx02_motor.c: 339: motor_oper_record++;
  7058  04C7  0AAC               	incf	_motor_oper_record,f	;volatile
  7059  04C8  1903               	skipnz
  7060  04C9  0AAD               	incf	_motor_oper_record+1,f	;volatile
  7061                           
  7062                           ;ms83fxx02_motor.c: 340: Motor_Stop();
  7063  04CA  2570  118A         	fcall	i1_Motor_Stop
  7064                           
  7065                           ;ms83fxx02_motor.c: 341: MotorOperationTimer_Stop();
  7066  04CC  2509  118A         	fcall	i1_MotorOperationTimer_Stop
  7067                           
  7068                           ;ms83fxx02_motor.c: 342: Motor_SetStatus(MOTOR_MODE_STOP);
  7069  04CE  3001               	movlw	1
  7070  04CF  256D  118A         	fcall	i1_Motor_SetStatus
  7071                           
  7072                           ;ms83fxx02_motor.c: 343: }
  7073  04D1  2CD8               	goto	i1l14567
  7074  04D2                     i1l14565:	
  7075                           
  7076                           ;ms83fxx02_motor.c: 344: else
  7077                           ;ms83fxx02_motor.c: 345: {
  7078                           ;ms83fxx02_motor.c: 346: Motor_Init(motor_status);
  7079  04D2  087D               	movf	_motor_status,w	;volatile
  7080  04D3  253A  118A         	fcall	i1_Motor_Init
  7081                           
  7082                           ;ms83fxx02_motor.c: 347: MotorOperationTimer_Init(MotorOperationTimer_30s);
  7083  04D5  3001               	movlw	1
  7084  04D6  24E2  118A         	fcall	i1_MotorOperationTimer_Init
  7085  04D8                     i1l14567:	
  7086                           
  7087                           ;ms83fxx02_motor.c: 348: }
  7088                           ;ms83fxx02_motor.c: 350: motor_timing_running_flag = 1;
  7089  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  7090  04D9  01C8               	clrf	_motor_timing_running_flag
  7091  04DA  0AC8               	incf	_motor_timing_running_flag,f
  7092  04DB  2CDF               	goto	i1l14571
  7093  04DC                     i1l8873:	
  7094                           
  7095                           ;ms83fxx02_motor.c: 353: else
  7096                           ;ms83fxx02_motor.c: 354: {
  7097                           ;ms83fxx02_motor.c: 355: key_press_time_count = 1;
  7098  04DC  01B2               	clrf	_key_press_time_count	;volatile
  7099  04DD  0AB2               	incf	_key_press_time_count,f	;volatile
  7100                           
  7101                           ;ms83fxx02_motor.c: 356: MotorOperationTimer_Stop();
  7102  04DE  2509               	fcall	i1_MotorOperationTimer_Stop
  7103  04DF                     i1l14571:	
  7104                           
  7105                           ;ms83fxx02_motor.c: 357: }
  7106                           ;ms83fxx02_motor.c: 358: TMR4IF = 0;
  7107  04DF  1703               	bsf	3,6	;RP1=1, select bank2
  7108  04E0  1016               	bcf	22,0
  7109  04E1  0008               	return
  7110  04E2                     __end_of_MotorOperTimer_IntrHandler:	
  7111  04E2                     __ptext1715:	
  7112 ;; =============== function i1_GetDeviceMode ends ============
  7113                           
  7114                           
  7115 ;; *************** function i1_MotorOperationTimer_Init *****************
  7116 ;; Defined at:
  7117 ;;		line 215 in file "ms83fxx02_motor.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  MotorOperati    1    wreg     enum E1560
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  MotorOperati    1    0[COMMON] enum E1560
  7122 ;; Return value:  Size  Location     Type
  7123 ;;		None               void
  7124 ;; Registers used:
  7125 ;;		wreg, status,2
  7126 ;; Tracked objects:
  7127 ;;		On entry : 40/0
  7128 ;;		On exit  : 60/40
  7129 ;;		Unchanged: FFF9F/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7131 ;;      Params:         0       0       0       0
  7132 ;;      Locals:         1       0       0       0
  7133 ;;      Temps:          0       0       0       0
  7134 ;;      Totals:         1       0       0       0
  7135 ;;Total ram usage:        1 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; This function calls:
  7138 ;;		Nothing
  7139 ;; This function is called by:
  7140 ;;		_MotorOperTimer_IntrHandler
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143  04E2                     i1_MotorOperationTimer_Init:	
  7144                           
  7145                           ; Regs used in i1_MotorOperationTimer_Init: [wreg+status,2]
  7146                           ;i1MotorOperationTimer_Init@time stored from wreg
  7147  04E2  00F0               	movwf	i1MotorOperationTimer_Init@time
  7148                           
  7149                           ;ms83fxx02_motor.c: 217: TMR4ON = 0;
  7150  04E3  1283               	bcf	3,5	;RP0=0, select bank2
  7151  04E4  1703               	bsf	3,6	;RP1=1, select bank2
  7152  04E5  1116               	bcf	22,2
  7153                           
  7154                           ;ms83fxx02_motor.c: 219: if(time == MotorOperationTimer_30s)
  7155  04E6  0B70               	decfsz	i1MotorOperationTimer_Init@time,w
  7156  04E7  2CEE               	goto	i1l15009
  7157                           
  7158                           ;ms83fxx02_motor.c: 220: {
  7159                           ;ms83fxx02_motor.c: 222: PWM4CR0 = 0b01110010;
  7160  04E8  3072               	movlw	114
  7161  04E9  0095               	movwf	21	;volatile
  7162                           
  7163                           ;ms83fxx02_motor.c: 225: PWM4CR1 = 0b00111000;
  7164  04EA  3038               	movlw	56
  7165  04EB  0096               	movwf	22	;volatile
  7166                           
  7167                           ;ms83fxx02_motor.c: 230: T4CKDIV = 182;
  7168  04EC  30B6               	movlw	182
  7169  04ED  2CFD               	goto	L14
  7170  04EE                     i1l15009:	
  7171                           ;ms83fxx02_motor.c: 231: }
  7172                           
  7173                           
  7174                           ;ms83fxx02_motor.c: 232: else if(time == MotorOperationTimer_0_3s)
  7175  04EE  0870               	movf	i1MotorOperationTimer_Init@time,w
  7176  04EF  3A02               	xorlw	2
  7177  04F0  1D03               	skipz
  7178  04F1  2CF8               	goto	i1l15013
  7179                           
  7180                           ;ms83fxx02_motor.c: 233: {
  7181                           ;ms83fxx02_motor.c: 235: PWM4CR0 = 0b01100010;
  7182  04F2  3062               	movlw	98
  7183  04F3  0095               	movwf	21	;volatile
  7184                           
  7185                           ;ms83fxx02_motor.c: 237: PWM4CR1 = 0b00111000;
  7186  04F4  3038               	movlw	56
  7187  04F5  0096               	movwf	22	;volatile
  7188                           
  7189                           ;ms83fxx02_motor.c: 241: T4CKDIV = 8;
  7190  04F6  3008               	movlw	8
  7191  04F7  2CFD               	goto	L14
  7192  04F8                     i1l15013:	
  7193                           ;ms83fxx02_motor.c: 242: }
  7194                           
  7195                           
  7196                           ;ms83fxx02_motor.c: 243: else
  7197                           ;ms83fxx02_motor.c: 244: {
  7198                           ;ms83fxx02_motor.c: 246: PWM4CR0 = 0b01110010;
  7199  04F8  3072               	movlw	114
  7200  04F9  0095               	movwf	21	;volatile
  7201                           
  7202                           ;ms83fxx02_motor.c: 249: PWM4CR1 = 0b00111000;
  7203  04FA  3038               	movlw	56
  7204  04FB  0096               	movwf	22	;volatile
  7205                           
  7206                           ;ms83fxx02_motor.c: 252: T4CKDIV = 243;
  7207  04FC  30F3               	movlw	243
  7208  04FD                     L14:	
  7209  04FD  0097               	movwf	23	;volatile
  7210                           
  7211                           ;ms83fxx02_motor.c: 253: }
  7212                           ;ms83fxx02_motor.c: 255: TMR4H = 0x0F;
  7213  04FE  300F               	movlw	15
  7214  04FF  0093               	movwf	19	;volatile
  7215                           
  7216                           ;ms83fxx02_motor.c: 256: TMR4L = 0;
  7217  0500  0192               	clrf	18	;volatile
  7218                           
  7219                           ;ms83fxx02_motor.c: 257: PR4L = 0xFF;
  7220  0501  30FF               	movlw	255
  7221  0502  0094               	movwf	20	;volatile
  7222                           
  7223                           ;ms83fxx02_motor.c: 260: TMR4IF = 0;
  7224  0503  1016               	bcf	22,0
  7225                           
  7226                           ;ms83fxx02_motor.c: 263: TMR4ON = 1;
  7227  0504  1516               	bsf	22,2
  7228                           
  7229                           ;ms83fxx02_motor.c: 266: TMR4IE = 1;
  7230  0505  1496               	bsf	22,1
  7231                           
  7232                           ;ms83fxx02_motor.c: 267: PEIE = 1;
  7233  0506  170B               	bsf	11,6
  7234                           
  7235                           ;ms83fxx02_motor.c: 268: GIE = 1;
  7236  0507  178B               	bsf	11,7
  7237  0508  0008               	return
  7238  0509                     __end_ofi1_MotorOperationTimer_Init:	
  7239  0509                     __ptext1709:	
  7240 ;; =============== function i1_Motor_Stop ends ============
  7241                           
  7242                           
  7243 ;; *************** function i1_MotorOperationTimer_Stop *****************
  7244 ;; Defined at:
  7245 ;;		line 277 in file "ms83fxx02_motor.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;		None
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;		None               void
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, pclath, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 60/0
  7256 ;;		On exit  : 60/0
  7257 ;;		Unchanged: FFF9F/0
  7258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7259 ;;      Params:         0       0       0       0
  7260 ;;      Locals:         0       0       0       0
  7261 ;;      Temps:          0       0       0       0
  7262 ;;      Totals:         0       0       0       0
  7263 ;;Total ram usage:        0 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    1
  7266 ;; This function calls:
  7267 ;;		i1_Motor_CheckRunLimit
  7268 ;; This function is called by:
  7269 ;;		_MotorOperTimer_IntrHandler
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272  0509                     i1_MotorOperationTimer_Stop:	
  7273                           
  7274                           ;ms83fxx02_motor.c: 279: TMR4ON = 0;
  7275                           
  7276                           ; Regs used in i1_MotorOperationTimer_Stop: [wreg+status,2+pclath+cstack]
  7277  0509  1703               	bsf	3,6	;RP1=1, select bank2
  7278  050A  1116               	bcf	22,2
  7279                           
  7280                           ;ms83fxx02_motor.c: 281: TMR4IE = 0;
  7281  050B  1096               	bcf	22,1
  7282                           
  7283                           ;ms83fxx02_motor.c: 283: if(!Motor_CheckRunLimit())
  7284  050C  2515  118A         	fcall	i1_Motor_CheckRunLimit
  7285  050E  3800               	iorlw	0
  7286  050F  1D03               	skipz
  7287  0510  0008               	return
  7288                           
  7289                           ;ms83fxx02_motor.c: 284: {
  7290                           ;ms83fxx02_motor.c: 286: motor_timing_running_flag = 1;
  7291  0511  01C8               	clrf	_motor_timing_running_flag
  7292  0512  0AC8               	incf	_motor_timing_running_flag,f
  7293                           
  7294                           ;ms83fxx02_motor.c: 287: motor_intr_count = 0;
  7295  0513  01FB               	clrf	_motor_intr_count	;volatile
  7296  0514  0008               	return
  7297  0515                     __end_ofi1_MotorOperationTimer_Stop:	
  7298  0515                     __ptext1716:	
  7299 ;; =============== function i1_MotorOperationTimer_Init ends ============
  7300                           
  7301                           
  7302 ;; *************** function i1_Motor_CheckRunLimit *****************
  7303 ;; Defined at:
  7304 ;;		line 196 in file "ms83fxx02_motor.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      unsigned char 
  7311 ;; Registers used:
  7312 ;;		wreg
  7313 ;; Tracked objects:
  7314 ;;		On entry : 60/40
  7315 ;;		On exit  : 60/0
  7316 ;;		Unchanged: FFF9F/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7318 ;;      Params:         0       0       0       0
  7319 ;;      Locals:         0       0       0       0
  7320 ;;      Temps:          0       0       0       0
  7321 ;;      Totals:         0       0       0       0
  7322 ;;Total ram usage:        0 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_MotorOperTimer_IntrHandler
  7328 ;;		i1_MotorOperationTimer_Stop
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331  0515                     i1_Motor_CheckRunLimit:	
  7332                           
  7333                           ;ms83fxx02_motor.c: 200: if(motor_oper_record >= 120)
  7334                           
  7335                           ; Regs used in i1_Motor_CheckRunLimit: [wreg]
  7336  0515  3000               	movlw	0
  7337  0516  1303               	bcf	3,6	;RP1=0, select bank0
  7338  0517  022D               	subwf	_motor_oper_record+1,w	;volatile
  7339  0518  3078               	movlw	120
  7340  0519  1903               	skipnz
  7341  051A  022C               	subwf	_motor_oper_record,w	;volatile
  7342  051B  1803               	btfsc	3,0
  7343                           
  7344                           ;ms83fxx02_motor.c: 201: {
  7345                           ;ms83fxx02_motor.c: 202: return 1;
  7346  051C  3401               	retlw	1
  7347                           
  7348                           ;ms83fxx02_motor.c: 203: }
  7349                           ;ms83fxx02_motor.c: 204: return 0;
  7350  051D  3400               	retlw	0
  7351  051E                     __end_ofi1_Motor_CheckRunLimit:	
  7352  051E                     __ptext1721:	
  7353 ;; =============== function i1_GPIO_WriteBit ends ============
  7354                           
  7355                           
  7356 ;; *************** function ___lbmod *****************
  7357 ;; Defined at:
  7358 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lbmod.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  dividend        1    wreg     unsigned char 
  7361 ;;  divisor         1    0[COMMON] unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  dividend        1    2[COMMON] unsigned char 
  7364 ;;  rem             1    4[COMMON] unsigned char 
  7365 ;;  counter         1    3[COMMON] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      unsigned char 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 60/0
  7372 ;;		On exit  : 60/0
  7373 ;;		Unchanged: FFF9F/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7375 ;;      Params:         1       0       0       0
  7376 ;;      Locals:         3       0       0       0
  7377 ;;      Temps:          1       0       0       0
  7378 ;;      Totals:         5       0       0       0
  7379 ;;Total ram usage:        5 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_MotorOperTimer_IntrHandler
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387  051E                     ___lbmod:	
  7388                           
  7389                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  7390                           ;___lbmod@dividend stored from wreg
  7391  051E  00F2               	movwf	___lbmod@dividend
  7392  051F  3008               	movlw	8
  7393  0520  00F3               	movwf	___lbmod@counter
  7394  0521  01F4               	clrf	___lbmod@rem
  7395  0522                     i1l14903:	
  7396  0522  0872               	movf	___lbmod@dividend,w
  7397  0523  00F1               	movwf	??___lbmod
  7398  0524  3007               	movlw	7
  7399  0525  1003               	clrc
  7400  0526                     L16:	
  7401  0526  0CF1               	rrf	??___lbmod,f
  7402  0527  3EFF               	addlw	-1
  7403  0528  1003               	clrc
  7404  0529  1D03               	skipz
  7405  052A  2D26               	goto	L16
  7406  052B  0D74               	rlf	___lbmod@rem,w
  7407  052C  0471               	iorwf	??___lbmod,w
  7408  052D  00F4               	movwf	___lbmod@rem
  7409  052E  1003               	clrc
  7410  052F  0DF2               	rlf	___lbmod@dividend,f
  7411  0530  0870               	movf	___lbmod@divisor,w
  7412  0531  0274               	subwf	___lbmod@rem,w
  7413  0532  1C03               	skipc
  7414  0533  2D36               	goto	i1l14911
  7415  0534  0870               	movf	___lbmod@divisor,w
  7416  0535  02F4               	subwf	___lbmod@rem,f
  7417  0536                     i1l14911:	
  7418  0536  0BF3               	decfsz	___lbmod@counter,f
  7419  0537  2D22               	goto	i1l14903
  7420  0538  0874               	movf	___lbmod@rem,w
  7421  0539  0008               	return
  7422  053A                     __end_of___lbmod:	
  7423  053A                     __ptext1718:	
  7424 ;; =============== function i1_Motor_SetStatus ends ============
  7425                           
  7426                           
  7427 ;; *************** function i1_Motor_Init *****************
  7428 ;; Defined at:
  7429 ;;		line 65 in file "ms83fxx02_motor.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  Motor_Init      1    wreg     enum E1554
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;  Motor_Init      1    0[COMMON] enum E1554
  7434 ;; Return value:  Size  Location     Type
  7435 ;;		None               void
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0
  7438 ;; Tracked objects:
  7439 ;;		On entry : 60/0
  7440 ;;		On exit  : 40/0
  7441 ;;		Unchanged: FFF9F/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7443 ;;      Params:         0       0       0       0
  7444 ;;      Locals:         1       0       0       0
  7445 ;;      Temps:          0       0       0       0
  7446 ;;      Totals:         1       0       0       0
  7447 ;;Total ram usage:        1 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_MotorOperTimer_IntrHandler
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455  053A                     i1_Motor_Init:	
  7456                           
  7457                           ; Regs used in i1_Motor_Init: [wreg+status,2+status,0]
  7458                           ;i1Motor_Init@status stored from wreg
  7459  053A  00F0               	movwf	i1Motor_Init@status
  7460                           
  7461                           ;ms83fxx02_motor.c: 67: TRISC4 = 1;
  7462  053B  1683               	bsf	3,5	;RP0=1, select bank1
  7463  053C  3007               	movlw	7
  7464  053D  1607               	bsf	7,4
  7465                           
  7466                           ;ms83fxx02_motor.c: 70: CMCON0 |= 0x07;
  7467  053E  1283               	bcf	3,5	;RP0=0, select bank0
  7468  053F  0499               	iorwf	25,f	;volatile
  7469                           
  7470                           ;ms83fxx02_motor.c: 71: T2CKSRC = 0;
  7471  0540  129B               	bcf	27,5
  7472                           
  7473                           ;ms83fxx02_motor.c: 74: TMR2 = 0;
  7474  0541  0191               	clrf	17	;volatile
  7475                           
  7476                           ;ms83fxx02_motor.c: 76: T2CON = 0x03;
  7477  0542  3003               	movlw	3
  7478  0543  0092               	movwf	18	;volatile
  7479                           
  7480                           ;ms83fxx02_motor.c: 78: PR2 = 0x9C;
  7481  0544  309C               	movlw	156
  7482  0545  1683               	bsf	3,5	;RP0=1, select bank1
  7483  0546  0092               	movwf	18	;volatile
  7484                           
  7485                           ;ms83fxx02_motor.c: 79: if(status == MOTOR_MODE_STOP)
  7486  0547  0B70               	decfsz	i1Motor_Init@status,w
  7487  0548  2D4A               	goto	i1l14969
  7488  0549  0008               	return
  7489  054A                     i1l14969:	
  7490                           
  7491                           ;ms83fxx02_motor.c: 83: else if(status == MOTOR_MODE_DUTY_80)
  7492  054A  0870               	movf	i1Motor_Init@status,w
  7493  054B  3A04               	xorlw	4
  7494  054C  1D03               	skipz
  7495  054D  2D50               	goto	i1l14973
  7496                           
  7497                           ;ms83fxx02_motor.c: 84: {
  7498                           ;ms83fxx02_motor.c: 86: CCPR1L = 0x7D;
  7499  054E  307D               	movlw	125
  7500  054F  2D55               	goto	L15
  7501  0550                     i1l14973:	
  7502                           ;ms83fxx02_motor.c: 88: }
  7503                           
  7504                           ;ms83fxx02_motor.c: 87: CCP1CON = 0x8D | (0x00 << 4);
  7505                           
  7506                           
  7507                           ;ms83fxx02_motor.c: 89: else if(status == MOTOR_MODE_DUTY_90)
  7508  0550  0870               	movf	i1Motor_Init@status,w
  7509  0551  3A03               	xorlw	3
  7510  0552  1D03               	skipz
  7511  0553  2D5A               	goto	i1l14977
  7512                           
  7513                           ;ms83fxx02_motor.c: 90: {
  7514                           ;ms83fxx02_motor.c: 92: CCPR1L = 0x8C;
  7515  0554  308C               	movlw	140
  7516  0555                     L15:	
  7517  0555  1283               	bcf	3,5	;RP0=0, select bank0
  7518  0556  0093               	movwf	19	;volatile
  7519                           
  7520                           ;ms83fxx02_motor.c: 93: CCP1CON = 0x8D | (0x00 << 4);
  7521  0557  308D               	movlw	141
  7522  0558  0095               	movwf	21	;volatile
  7523                           
  7524                           ;ms83fxx02_motor.c: 94: }
  7525  0559  2D65               	goto	i1l8823
  7526  055A                     i1l14977:	
  7527                           
  7528                           ;ms83fxx02_motor.c: 95: else
  7529                           ;ms83fxx02_motor.c: 96: {
  7530                           ;ms83fxx02_motor.c: 97: if(status == MOTOR_MODE_DUTY_100)
  7531  055A  0870               	movf	i1Motor_Init@status,w
  7532  055B  3A02               	xorlw	2
  7533  055C  1D03               	skipz
  7534  055D  2D65               	goto	i1l8823
  7535                           
  7536                           ;ms83fxx02_motor.c: 98: {
  7537                           ;ms83fxx02_motor.c: 99: CCP1CON = 0;
  7538  055E  1283               	bcf	3,5	;RP0=0, select bank0
  7539  055F  0195               	clrf	21	;volatile
  7540                           
  7541                           ;ms83fxx02_motor.c: 100: TRISC4 = 0;
  7542  0560  1683               	bsf	3,5	;RP0=1, select bank1
  7543  0561  1207               	bcf	7,4
  7544                           
  7545                           ;ms83fxx02_motor.c: 102: PC4 = 1;
  7546  0562  1283               	bcf	3,5	;RP0=0, select bank0
  7547  0563  1607               	bsf	7,4
  7548  0564  0008               	return
  7549  0565                     i1l8823:	
  7550                           
  7551                           ;ms83fxx02_motor.c: 105: }
  7552                           ;ms83fxx02_motor.c: 106: }
  7553                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
  7554  0565  1283               	bcf	3,5	;RP0=0, select bank0
  7555  0566  108C               	bcf	12,1
  7556                           
  7557                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
  7558  0567  1512               	bsf	18,2
  7559  0568                     i1l8829:	
  7560                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
  7561                           
  7562  0568  1C8C               	btfss	12,1
  7563  0569  2D68               	goto	i1l8829
  7564                           
  7565                           ;ms83fxx02_motor.c: 113: TRISC4 = 0;
  7566  056A  1683               	bsf	3,5	;RP0=1, select bank1
  7567  056B  1207               	bcf	7,4
  7568  056C  0008               	return
  7569  056D                     __end_ofi1_Motor_Init:	
  7570  056D                     __ptext1717:	
  7571 ;; =============== function i1_Motor_CheckRunLimit ends ============
  7572                           
  7573                           
  7574 ;; *************** function i1_Motor_SetStatus *****************
  7575 ;; Defined at:
  7576 ;;		line 122 in file "ms83fxx02_motor.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  Motor_SetSta    1    wreg     enum E1554
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  Motor_SetSta    1    0[COMMON] enum E1554
  7581 ;; Return value:  Size  Location     Type
  7582 ;;		None               void
  7583 ;; Registers used:
  7584 ;;		wreg
  7585 ;; Tracked objects:
  7586 ;;		On entry : 60/0
  7587 ;;		On exit  : 60/0
  7588 ;;		Unchanged: FFF9F/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7590 ;;      Params:         0       0       0       0
  7591 ;;      Locals:         1       0       0       0
  7592 ;;      Temps:          0       0       0       0
  7593 ;;      Totals:         1       0       0       0
  7594 ;;Total ram usage:        1 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_MotorOperTimer_IntrHandler
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602  056D                     i1_Motor_SetStatus:	
  7603                           
  7604                           ; Regs used in i1_Motor_SetStatus: [wreg]
  7605                           ;i1Motor_SetStatus@status stored from wreg
  7606  056D  00F0               	movwf	i1Motor_SetStatus@status
  7607                           
  7608                           ;ms83fxx02_motor.c: 123: motor_status = status;
  7609  056E  00FD               	movwf	_motor_status	;volatile
  7610  056F  0008               	return
  7611  0570                     __end_ofi1_Motor_SetStatus:	
  7612  0570                     __ptext1708:	
  7613 ;; =============== function _MotorOperTimer_IntrHandler ends ============
  7614                           
  7615                           
  7616 ;; *************** function i1_Motor_Stop *****************
  7617 ;; Defined at:
  7618 ;;		line 184 in file "ms83fxx02_motor.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 60/0
  7629 ;;		On exit  : 60/0
  7630 ;;		Unchanged: FFF9F/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7632 ;;      Params:         0       0       0       0
  7633 ;;      Locals:         0       0       0       0
  7634 ;;      Temps:          0       0       0       0
  7635 ;;      Totals:         0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    2
  7639 ;; This function calls:
  7640 ;;		i1_LED_CloseMotorStatus
  7641 ;; This function is called by:
  7642 ;;		_MotorOperTimer_IntrHandler
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645  0570                     i1_Motor_Stop:	
  7646                           
  7647                           ;ms83fxx02_motor.c: 188: TRISC4 = 1;
  7648                           
  7649 ;; hardware stack exceeded
  7650                           ; Regs used in i1_Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  7651  0570  1683               	bsf	3,5	;RP0=1, select bank1
  7652  0571  1607               	bsf	7,4
  7653                           
  7654                           ;ms83fxx02_motor.c: 190: TMR2ON = 0;
  7655  0572  1283               	bcf	3,5	;RP0=0, select bank0
  7656  0573  1112               	bcf	18,2
  7657                           
  7658                           ;ms83fxx02_motor.c: 192: LED_CloseMotorStatus();
  7659  0574  2583               	fcall	i1_LED_CloseMotorStatus
  7660  0575  0008               	return
  7661  0576                     __end_ofi1_Motor_Stop:	
  7662  0576                     __ptext1722:	
  7663 ;; =============== function ___lbmod ends ============
  7664                           
  7665                           
  7666 ;; *************** function _TIM1_Init *****************
  7667 ;; Defined at:
  7668 ;;		line 38 in file "MS83FXX02_KEY.C"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;		None               void
  7675 ;; Registers used:
  7676 ;;		wreg, status,2
  7677 ;; Tracked objects:
  7678 ;;		On entry : 60/0
  7679 ;;		On exit  : 60/20
  7680 ;;		Unchanged: FFF9F/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7682 ;;      Params:         0       0       0       0
  7683 ;;      Locals:         0       0       0       0
  7684 ;;      Temps:          0       0       0       0
  7685 ;;      Totals:         0       0       0       0
  7686 ;;Total ram usage:        0 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_KEY_IntrHandler
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694  0576                     _TIM1_Init:	
  7695  0576                     i1l14669:	
  7696                           ; Regs used in _TIM1_Init: [wreg+status,2]
  7697                           
  7698  0576  30F0               	movlw	240
  7699                           
  7700                           ;MS83FXX02_KEY.C: 39: TMR1ON = 0;
  7701  0577  1010               	bcf	16,0
  7702                           
  7703                           ;MS83FXX02_KEY.C: 44: TMR1L = 0xF0;
  7704  0578  008E               	movwf	14	;volatile
  7705                           
  7706                           ;MS83FXX02_KEY.C: 45: TMR1H = 0xD8;
  7707  0579  30D8               	movlw	216
  7708  057A  008F               	movwf	15	;volatile
  7709                           
  7710                           ;MS83FXX02_KEY.C: 48: T1CON = 0b00000000;
  7711  057B  0190               	clrf	16	;volatile
  7712                           
  7713                           ;MS83FXX02_KEY.C: 49: TMR1IF = 0;
  7714  057C  100C               	bcf	12,0
  7715                           
  7716                           ;MS83FXX02_KEY.C: 51: TMR1ON = 1;
  7717  057D  1410               	bsf	16,0
  7718                           
  7719                           ;MS83FXX02_KEY.C: 53: TMR1IE = 1;
  7720  057E  1683               	bsf	3,5	;RP0=1, select bank1
  7721  057F  140C               	bsf	12,0
  7722                           
  7723                           ;MS83FXX02_KEY.C: 54: PEIE = 1;
  7724  0580  170B               	bsf	11,6
  7725                           
  7726                           ;MS83FXX02_KEY.C: 55: GIE = 1;
  7727  0581  178B               	bsf	11,7
  7728  0582  0008               	return
  7729  0583                     __end_of_TIM1_Init:	
  7730  0583                     __ptext1710:	
  7731 ;; =============== function i1_MotorOperationTimer_Stop ends ============
  7732                           
  7733                           
  7734 ;; *************** function i1_LED_CloseMotorStatus *****************
  7735 ;; Defined at:
  7736 ;;		line 71 in file "ms83fxx02_led.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 60/0
  7747 ;;		On exit  : 60/0
  7748 ;;		Unchanged: FFF9F/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7750 ;;      Params:         0       0       0       0
  7751 ;;      Locals:         0       0       0       0
  7752 ;;      Temps:          0       0       0       0
  7753 ;;      Totals:         0       0       0       0
  7754 ;;Total ram usage:        0 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    1
  7757 ;; This function calls:
  7758 ;;		i1_GPIO_WriteBit
  7759 ;; This function is called by:
  7760 ;;		i1_Motor_Stop
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763  0583                     i1_LED_CloseMotorStatus:	
  7764                           
  7765                           ;ms83fxx02_led.c: 72: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  7766                           
  7767 ;; hardware stack exceeded
  7768                           ; Regs used in i1_LED_CloseMotorStatus: [wreg+status,2+status,0+pclath+cstack]
  7769  0583  3004               	movlw	4
  7770  0584  00F0               	movwf	?i1_GPIO_WriteBit
  7771  0585  3000               	movlw	0
  7772  0586  01F1               	clrf	?i1_GPIO_WriteBit+1
  7773  0587  2595  118A         	fcall	i1_GPIO_WriteBit
  7774                           
  7775                           ;ms83fxx02_led.c: 73: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  7776  0589  3008               	movlw	8
  7777  058A  00F0               	movwf	?i1_GPIO_WriteBit
  7778  058B  3000               	movlw	0
  7779  058C  01F1               	clrf	?i1_GPIO_WriteBit+1
  7780  058D  2595  118A         	fcall	i1_GPIO_WriteBit
  7781  058F  3001               	movlw	1
  7782                           
  7783                           ;ms83fxx02_led.c: 74: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  7784  0590  01F0               	clrf	?i1_GPIO_WriteBit
  7785  0591  0AF0               	incf	?i1_GPIO_WriteBit,f
  7786  0592  01F1               	clrf	?i1_GPIO_WriteBit+1
  7787  0593  2595               	fcall	i1_GPIO_WriteBit
  7788  0594  0008               	return
  7789  0595                     __end_ofi1_LED_CloseMotorStatus:	
  7790  0595                     __ptext1720:	
  7791 ;; =============== function i1_GPIO_ReadInputDataBit ends ============
  7792                           
  7793                           
  7794 ;; *************** function i1_GPIO_WriteBit *****************
  7795 ;; Defined at:
  7796 ;;		line 68 in file "ms83fxx02_gpio.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  GPIO_WriteBi    1    wreg     enum E1491
  7799 ;;  GPIO_WriteBi    1    0[COMMON] unsigned char 
  7800 ;;  GPIO_WriteBi    1    1[COMMON] enum E1499
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  GPIO_WriteBi    1    2[COMMON] enum E1491
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0
  7807 ;; Tracked objects:
  7808 ;;		On entry : 60/0
  7809 ;;		On exit  : 60/0
  7810 ;;		Unchanged: FFF9F/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7812 ;;      Params:         2       0       0       0
  7813 ;;      Locals:         1       0       0       0
  7814 ;;      Temps:          0       0       0       0
  7815 ;;      Totals:         3       0       0       0
  7816 ;;Total ram usage:        3 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; This function calls:
  7819 ;;		Nothing
  7820 ;; This function is called by:
  7821 ;;		i1_LED_CloseMotorStatus
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824  0595                     i1_GPIO_WriteBit:	
  7825                           
  7826 ;; hardware stack exceeded
  7827                           ; Regs used in i1_GPIO_WriteBit: [wreg+status,2+status,0]
  7828                           ;i1GPIO_WriteBit@GPIOx stored from wreg
  7829  0595  00F2               	movwf	i1GPIO_WriteBit@GPIOx
  7830                           
  7831                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
  7832  0596  08F2               	movf	i1GPIO_WriteBit@GPIOx,f
  7833  0597  1D03               	skipz
  7834  0598  2DA2               	goto	i1l14925
  7835                           
  7836                           ;ms83fxx02_gpio.c: 70: {
  7837                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
  7838  0599  0871               	movf	i1GPIO_WriteBit@BitVal,w
  7839  059A  1903               	btfsc	3,2
  7840  059B  2D9F               	goto	i1l14923
  7841                           
  7842                           ;ms83fxx02_gpio.c: 72: {
  7843                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
  7844  059C  0870               	movf	i1GPIO_WriteBit@GPIO_Pin,w
  7845  059D  0485               	iorwf	5,f	;volatile
  7846                           
  7847                           ;ms83fxx02_gpio.c: 74: }
  7848  059E  0008               	return
  7849  059F                     i1l14923:	
  7850                           
  7851                           ;ms83fxx02_gpio.c: 75: else
  7852                           ;ms83fxx02_gpio.c: 76: {
  7853                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
  7854  059F  0970               	comf	i1GPIO_WriteBit@GPIO_Pin,w
  7855  05A0  0585               	andwf	5,f	;volatile
  7856  05A1  0008               	return
  7857  05A2                     i1l14925:	
  7858                           
  7859                           ;ms83fxx02_gpio.c: 80: else
  7860                           ;ms83fxx02_gpio.c: 81: {
  7861                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
  7862  05A2  0871               	movf	i1GPIO_WriteBit@BitVal,w
  7863  05A3  1903               	btfsc	3,2
  7864  05A4  2DA8               	goto	i1l14929
  7865                           
  7866                           ;ms83fxx02_gpio.c: 83: {
  7867                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
  7868  05A5  0870               	movf	i1GPIO_WriteBit@GPIO_Pin,w
  7869  05A6  0487               	iorwf	7,f	;volatile
  7870                           
  7871                           ;ms83fxx02_gpio.c: 85: }
  7872  05A7  0008               	return
  7873  05A8                     i1l14929:	
  7874                           
  7875                           ;ms83fxx02_gpio.c: 86: else
  7876                           ;ms83fxx02_gpio.c: 87: {
  7877                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
  7878  05A8  0970               	comf	i1GPIO_WriteBit@GPIO_Pin,w
  7879  05A9  0587               	andwf	7,f	;volatile
  7880  05AA  0008               	return
  7881  05AB                     __end_ofi1_GPIO_WriteBit:	
  7882                           
  7883                           	psect	intentry
  7884  0004                     __pintentry:	
  7885 ;; hardware stack exceeded
  7886                           ; Regs used in _ISR: [allreg]
  7887                           
  7888  0004                     interrupt_function:	
  7889  007E                     saved_w	set	btemp
  7890  0004  00FE               	movwf	btemp
  7891  0005  0E03               	swapf	3,w
  7892  0006  00F5               	movwf	??_ISR
  7893  0007  0804               	movf	4,w
  7894  0008  00F6               	movwf	??_ISR+1
  7895  0009  080A               	movf	10,w
  7896  000A  00F7               	movwf	??_ISR+2
  7897  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7898  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7899  000D  087F               	movf	btemp+1,w
  7900  000E  00F8               	movwf	??_ISR+3
  7901  000F  118A  2C0E         	ljmp	_ISR
  7902                           
  7903                           	psect	text1726
  7904  0000                     __ptext1726:	
  7905 ;; =============== function _SwitchModeTimer_IntrHandler ends ============
  7906                           
  7907  007E                     btemp	set	126	;btemp
  7908  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Oct 22 21:25:09 2017

                __size_of_GPIO_WriteBit 0016                   i1_Motor_CheckRunLimit 0515  
                     ??i1_GPIO_WriteBit 0072                                      _RD 04E0  
                                    _WR 04E8                                      fsr 0004  
       i1GPIO_ReadInputDataBit@GPIO_Pin 0070                                     _GIE 005F  
                                   _PC4 003C                 __size_of_EEPROM_GetFlag 0002  
                                   _PR2 0092                                     _ISR 040E  
                                   _WPD 0089           ?_SwitchModeTimer_GetINTStatus 0070  
                                   fsr0 0004                                     indf 0000  
                     SetDeviceMode@mode 0036                          _GPIO_INTConfig 065B  
          i1GPIO_ReadInputDataBit@GPIOx 0072                  ??_LEDTimer_IntrHandler 0070  
               __size_of_EEPROM_SetFlag 0004                __size_of_Motor_GetStatus 0002  
                       ?_Battery_Detect 0070                           ??_Driver_Init 003E  
                                  ?_ISR 0070                                    l1132 0000  
                                  l1151 05FD                                    l1129 0000  
                                  l2242 0000                                    l2245 0000  
                                  l2239 0000                                    l2248 0000  
                                  l3330 0000                                    l3333 03B7  
                                  l3327 0000                                    l3336 0000  
                                  l4431 067E                                    l4424 0000  
                                  l5515 0000                             ?_KEY_DeInit 0070  
                                  l5518 0000                                    l6611 0000  
                                  l6620 0000                                    l6614 0000  
                                  l6623 0000                                    l6608 0000  
                                  l6617 0000                                    l7702 0000  
                                  _ADON 00F8                                    l8910 0221  
                                  l8823 0360                                    l8913 0000  
                                  l8834 0000                                    l8860 0000  
                                  l8916 0000                                    l8837 0000  
                                  l8829 0362                                    l8846 0000  
                                  l8849 0000                                    _IOCA 0096  
                                  u1324 0649                                    u1325 0647  
                                  _PAIE 005B                                    _PAIF 0058  
                                  _PIE1 008C                                    _PIE2 008D  
                                  u1915 037E                                    _PEIE 005E  
                                  u1885 03ED                                    _INTE 005C  
                                  _INTF 0059                                    _PCON 008E  
                                  _PIR1 000C                                    _PR3L 010E  
                                  _PIR2 000D                                    _PR4L 0114  
                                  _PR5L 011A                                    _TMR2 0011  
              __size_of_KEY_IntrHandler 000E                                    _WPUA 0095  
                 __end_of_GetDeviceMode 0325                                    _main 05AB  
         __size_of_ChargeTimer_GetCount 0006                                    btemp 007E  
                      __end_of_ADC_Init 0657                                    start 0011  
                    __size_of_GPIO_Init 0028                              _Board_Init 06F5  
             KEY_DeInit@GPIO_InitStruct 0038                                   ??_ISR 0075  
                     i1_Motor_SetStatus 056D           __size_of_KEY_GetReleaseStatus 0008  
                  __end_of_EEPROM_Write 03BF                __size_of_ChargeCtrl_Init 0010  
                         ?_LEDTimer_Cmd 0070                        __end_of_LED_Init 014A  
                    ?i1_Motor_SetStatus 0070               _SwitchModeTimer_INTConfig 02AC  
                                 l10010 0000                                   l10022 03CE  
                                 l10007 0000                                   l10031 0000  
                                 l10016 0000                                   l10025 0000  
                                 l10034 0000                                   l10019 0000  
                                 l10028 0000                                   l10037 0000  
                                 l12213 0000                                   l12216 0000  
                                 l15101 0000                                   l15111 0000  
                                 l15041 0000                                   l15105 0018  
                                 l15121 0000                                   l15113 0000  
                                 l14411 0000                                   l14403 0000  
                                 l15051 0000                                   l15043 0000  
                                 l15123 0000                                   l15115 0000  
                                 l14413 0000                                   l14405 0000  
                                 l14421 0000                                   l15061 0000  
                                 l15053 0000                                   l15045 0000  
                                 l15125 0000                                   l15117 0000  
                                 l15133 0000                                   l15141 0000  
                 __size_of_ADC_ReadData 0024                                   l15221 00A7  
                                 l15213 0000                                   l15301 0000  
                                 l12902 0000                                   l14415 0000  
                                 l14407 0000                                   l14423 0000  
                                 l15063 0000                                   l15055 0000  
                                 l15047 0000                                   l15071 0000  
                                 l15119 0000                                   l15127 022E  
                                 l15135 0000                                   l15143 0000  
                                 l15151 0000                                   l15231 00C5  
                                 l15207 0000                                   l15303 0000  
                                 l14417 0000                                   l14409 0000  
                                 l14425 0000                                   l14441 028D  
                                 l14433 0000                                   l14601 0000  
                                 l15065 0000                                   l15057 0000  
                                 l15049 0000                                   l15073 0000  
                                 l15081 0000                                   l15129 0000  
                                 l15145 0000                                   l15137 0000  
                                 l15153 0000                                   l15161 0000  
                                 l15233 00D0                                   l15209 0000  
                                 l15241 0000                                   l15321 01CF  
                                 l15313 01BF                                   l15305 0000  
                                 l14419 0000                                   l14427 0000  
                                 l14443 0000                                   l14451 0000  
                                 l15067 0000                                   l15059 0000  
                                 l15075 0000                                   l15083 0000  
                                 l15091 0000                                   l15139 0000  
                                 l15147 068D                                   l15155 0000  
                                 l15163 0000                                   l15171 0000  
                                 l15235 0000                                   l15227 00B9  
                                 l15219 0000                                   l15243 0000  
                                 l15315 0000                                   l15307 01AF  
                                 l15403 0617                                   l14429 0000  
                                 l14445 0293                                   l14437 0000  
                                 l14453 0000                                   l14461 0000  
                                 l14605 0109                                   l14613 0112  
                                 l14621 0000                                   l14701 0000  
                                 l15077 0000                                   l15069 0000  
                                 l15149 0000                                   l15157 0000  
                                 l15173 0000                                   l15165 0000  
                                 l15245 0242                                   l15253 0254  
                                 l15261 0000                                   l15333 01F4  
                                 l15317 0000                                   l14439 028A  
                                 l14447 0000                                   l14455 0000  
                                 l14471 0000                                   l14463 0000  
                                 l14607 010C                                   l14623 0000  
                                 l14711 0000                                   l15079 0680  
                                 l15087 0000                                   l15159 0047  
                                 l15167 0000                                   l15183 0000  
                                 l15191 0000                                   l15239 0000  
                                 l15247 0248                                   l15255 025F  
                                 l15271 06B3                                   l15263 0000  
                                 l15343 0000                                   l15319 0000  
                                 l15327 01DA                                   l14465 0000  
                                 l14457 0000                                   l14473 0000  
                                 l14609 0000                                   l14641 0000  
                                 l14633 0000                                   l14625 0668  
                                 l14617 0000                                   l14721 0000  
                                 l14713 0000                                   l14801 0000  
                                 l15089 0000                                   l15097 0000  
                                 l15177 0000                                   l15169 0000  
                                 l15185 0000                                   l15193 0000  
                                 l15249 024E                                   l15257 0000  
                                 l15265 0000                                   l15353 0000  
                                 l15345 0207                                   l15329 01E9  
                                 l14467 0000                                   l14459 0000  
                                 l14475 0000                                   l14635 0000  
                                 l14627 066B                                   l14651 0000  
                                 l14643 0000                                   l14723 0000  
                                 l14715 0000                                   l14811 0000  
                                 l14803 0000                                   l15179 0000  
                                 l15187 0000                                   l15195 0000  
                                 l15259 0000                                   l15355 0220  
                                 l15347 0000                                   l15339 01FE  
                                 l15283 0000                                   l15275 0000  
                                 l15371 0000                                   l15363 05BB  
                                 l14469 0000                                   l14477 0000  
                                 l14637 0000                                   l14629 0000  
                                 l14653 0000                                   l14645 0000  
                                 l14661 0000                                   l14717 0000  
                                 l14709 0000                                   l14725 0000  
                                 l14733 0000                                   l14805 0000  
                                 l14813 0000                                   l15189 0058  
                                 l15349 0213                                   l15293 018F  
                                 l15285 0000                                   l15381 0000  
                                 l15373 05D5                                   l15365 0000  
                                 l15357 0000                                   l14591 015A  
                                 l14639 0000                                   l14647 0000  
                                 l14663 0000                                   l14655 0000  
                                 l14719 0000                                   l14727 0000  
                                 l14735 0000                                   l14751 0000  
                                 l14807 0000                                   l14815 0000  
                                 l14831 0000                                   l15287 0000  
                                 l15279 017B                                   l15391 0000  
                                 l15383 0000                                   l15375 05D9  
                                 l15367 05C1                                   l15359 0000  
            __size_of_ChargeCtrl_Output 0008                                   l14593 0160  
                                 l14585 0000                                   l14649 0000  
                                 l14665 0000                                   l14657 0000  
                                 l14729 0000                                   l14737 0000  
                                 l14761 0000                                   l14809 0000  
                                 l14817 0000                                   l14841 0000  
                                 l14833 02C5                                   l15289 018A  
                                 l15393 0000                                   l15385 0000  
                                 l15377 0000                                   l14595 0000  
                                 l14659 0000                                   l14747 0000  
                                 l14771 0000                                   l14763 0000  
                                 l14851 0000                                   l14843 0000  
                                 l14827 0000                                   l15299 019F  
                                 l15387 0000                                   l15379 0000  
                                 l14597 016C                                   l14589 0000  
                                 l14685 0000                                   l14749 0000  
                                 l14773 0000                                   l14765 0000  
                                 l14845 0000                                   l14837 02D0  
                                 l14829 0000                                   l14853 0000  
                                 l15397 0613                                   l15389 0000  
                                 l14599 0000                                   l14687 0000  
                                 l14791 0000                                   l14783 034D  
                                 l14767 0000                                   l14847 0000  
                                 l14839 0000                                   l14855 0000  
                                 l14871 03E7                                   l15399 0000  
                                 l14689 0000                                   l14697 0000  
                                 l14793 0000                                   l14769 0000  
                                 l14849 0000                                   l14857 0000  
                                 l14873 0000                                   l14699 0000  
                                 l14787 0356                                   l14779 0347  
                                 l14867 0000                                   l14883 0375  
                                 l14875 0000                                   l14797 0000  
                                 l14869 0000                                   l14893 0000  
                                 l14885 0000                                   l14799 0000  
                                 l14895 038C                                   l14889 0000  
             ??_EEPROM_RestoreMotorData 0038                                   ?_main 0070  
                                 _EEADR 009B                                   _EEDAT 009A  
                       __end_of___lbmod 053A                __size_of_Motor_SetStatus 0004  
                                 _ANSEL 0091                  __end_of_GPIO_INTConfig 0680  
                                 _T1CON 0010                                   _T2CON 0012  
                    __size_of_TIM1_Init 000D                         __end_of___lwdiv 0391  
                      __end_of_KEY_Init 0642                                   _TMR1H 000F  
                                 _TMR3H 010D                                   _TMR1L 000E  
                                 _TMR4H 0113                                   _TMR5H 0119  
                                 _TMR3L 010C                                   _TMR4L 0112  
                                 _TMR5L 0118                                   _PORTA 0005  
                                 _PORTC 0007                  ?_ChargeTimer_INTConfig 0070  
                                 _TRISA 0085                                   _TRISC 0087  
                                 _WREN1 04E2                                   _WREN2 04E4  
                                 _WREN3 04E5                             _Charge_Init 0657  
           __end_of_SwitchModeTimer_Cmd 02AC                      _LEDTimer_INTConfig 02F9  
                   ??i1_Motor_SetStatus 0070         __size_of_ChargeTimer_ResetCount 0003  
       __size_of_LED_UnderVoltageOutput 0008                           _GPIO_WriteBit 0280  
       __size_of_ChargeDetect_GetStatus 0020                     ?_LEDTimer_INTConfig 0070  
                   _LED_DisplayRunLimit 00DF                                   pclath 000A  
                        _charge_control 069D                                   status 0003  
                                 wtemp0 007E                __size_of_ChargeTimer_Cmd 0017  
               ?_LED_DisplayMotorStatus 003C                        EEPROM_Write@addr 0037  
                   __end_of_Driver_Init 0631                        EEPROM_Write@data 0036  
      __size_of_ChargeTimer_IntrHandler 000B                    __size_of_EEPROM_Init 000D  
                  __size_of_EEPROM_Read 000D               __end_ofi1_Motor_SetStatus 0570  
                ?i1_Motor_CheckRunLimit 0070                            _ADC_ReadData 03BF  
                          __end_of_main 0626                    ??_LEDTimer_INTConfig 0036  
                        ??_LEDTimer_Cmd 0036                    ?_LED_DisplayRunLimit 0070  
                     _motor_oper_record 002C                     __size_of_KEY_DeInit 0010  
                                ??_main 0048                         ?_GPIO_INTConfig 0036  
                    i1Motor_Init@status 0070           LED_VoltageChargeOutput@BitVal 003C  
         __size_of_EEPROM_StoreModeData 0005                       __end_of_GPIO_Init 0172  
                        ?_GPIO_WriteBit 0039                ?i1_GPIO_ReadInputDataBit 0070  
                                _ADCON0 001F                                  _ADCON1 009F  
         __size_of_LED_CloseMotorStatus 0011          ??_SwitchModeTimer_GetINTStatus 0036  
                __end_of_charge_control 06C3                                  _ADRESH 001E  
                                _ADRESL 009E                                  _CCPR1L 0013  
                                _EECON1 009C                    _led_timer_int_status 0033  
                                _CMCON0 0019                                  _ANSEL5 048D  
               _LED_VoltageChargeOutput 06C9              __end_of_KEY_GetPressStatus 032A  
                                i1l1164 0000                                  i1l4424 0000  
                                i1l5512 0000                                  i1l6617 0000  
                                _INTEDG 040E                                  i1l8823 0565  
                                _INTCON 000B                                  i1l8834 0000  
                                i1l8860 0000                                  i1l8829 0568  
                                i1l8849 0000                                  i1l8873 04DC  
                   GPIO_INTConfig@GPIOx 0038                 ??_GPIO_ReadInputDataBit 0037  
                                _OSCCON 008F          __end_of_LED_DisplayMotorStatus 0280  
                  _run_limit_int_status 0034                                  _TMR1IE 0460  
                                _TMR1IF 0060                                  _TMR2IF 0061  
                                _TMR3IE 0881                                  _TMR3IF 0880  
                                _TMR4IE 08B1                                  _TMR4IF 08B0  
                                _TMR5IE 08E1                                  _TMR5IF 08E0  
                                _TMR1ON 0080                                  _TMR2ON 0092  
                                _TMR3ON 0882                                  _TMR4ON 08B2  
                                _TMR5ON 08E2                                  _WDTCON 0018  
                                _TRISC4 043C                       ??_Motor_GetStatus 0036  
                     __end_of_TIM1_Init 0583                        __end_of_delay_us 03F9  
                       ADC_Init@channel 0037                      GPIO_WriteBit@GPIOx 003B  
                           ?_Board_Init 0070        __end_of_MotorOperationTimer_Init 02E2  
                     ??_KEY_IntrHandler 0070            ??i1_MotorOperationTimer_Init 0070  
      __end_of_MotorOperationTimer_Stop 023A                  _ChargeTimer_ResetCount 0760  
                _LED_UnderVoltageOutput 0319            ??i1_MotorOperationTimer_Stop 0070  
                            _Motor_Init 0336              ??_ChargeDetect_IntrHandler 0073  
                            _Motor_Stop 023A                           ??_Motor_Start 003E  
                  _battery_sample_count 002E                               ??___lbmod 0071  
                _ChargeDetect_GetStatus 0013                   ??_LED_DisplayRunLimit 003C  
                             ??___lwdiv 003A            ??_MotorOperTimer_IntrHandler 0075  
   __end_of_LEDTimer_GetOperationStatus 030A             _LEDTimer_GetOperationStatus 0305  
                        _EEPROM_GetFlag 06D1                                  clrloop 0751  
                          __pdataCOMMON 007C                       ??_ChargeCtrl_Init 003C  
                  _key_press_time_count 0032                               ?_ADC_Init 0070  
                                saved_w 007E                          _EEPROM_SetFlag 03F9  
                __size_of_SetDeviceMode 0004                       ??_Motor_SetStatus 0036  
                       ?_charge_control 0070                             _Driver_Init 0626  
                       ___lbmod@divisor 0070                         i1_GPIO_WriteBit 0595  
                       ___lbmod@counter 0073                         _charge_time_out 002A  
                             ?_LED_Init 0070                   __size_of_EEPROM_Write 0017  
                             ?_KEY_Init 0070                 LED_Init@GPIO_InitStruct 003C  
            __size_ofi1_Motor_SetStatus 0003                          __pcstackCOMMON 0070  
                          __pidataBANK0 0000                       ??_ChargeTimer_Cmd 0036  
              __size_ofi1_GetDeviceMode 0004                  __end_of_EEPROM_GetFlag 06D3  
                 _LEDTimer_GetINTStatus 032A     __end_of_Motor_HandleStatusChangeEvt 0222  
           _Motor_HandleStatusChangeEvt 0172                   _EEPROM_StoreMotorData 0391  
                   __end_of_Motor_Start 0267         __end_ofi1_GPIO_ReadInputDataBit 049B  
                      ??_Battery_Detect 0040                  __end_of_EEPROM_SetFlag 03FD  
                       ??_GPIO_WriteBit 003B                              ??_ADC_Init 0036  
             ??_LED_VoltageChargeOutput 003C                     __size_of_Board_Init 0018  
    __size_of_SwitchModeTimer_INTConfig 000C            __size_of_Motor_CheckRunLimit 0009  
                          ??_KEY_DeInit 0038                            _EEPROM_Write 03A8  
                            __pbssBANK0 0020                    __end_of_LEDTimer_Cmd 02F9  
               _ChargeTimer_IntrHandler 0439                              ??_LED_Init 003C  
                            ??_KEY_Init 0039                              __pmaintext 05AB  
                           ?_Motor_Init 0070                           _SetDeviceMode 0402  
              ??i1_LED_CloseMotorStatus 0073                             ?_Motor_Stop 0070  
     SwitchModeTimer_INTConfig@NewState 0036                              __pintentry 0004  
              _MotorOperationTimer_Init 02B8                                 _CCP1CON 0015  
                       ?_EEPROM_GetFlag 0070                              __ptext1700 0760  
                            __ptext1701 0763                              __ptext1710 0583  
                            __ptext1702 0280                _MotorOperationTimer_Stop 022E  
                            __ptext1711 049B                              __ptext1703 06C3  
                            __ptext1720 0595                              __ptext1712 0460  
                            __ptext1704 0642                              __ptext1721 051E  
                            __ptext1713 0452                              __ptext1705 06F5  
                            __ptext1722 0576                              __ptext1714 044E  
                            __ptext1706 040E                              __ptext1650 0240  
                            __ptext1723 0444                              __ptext1715 04E2  
                            __ptext1707 04A9                              __ptext1651 023A  
                            __ptext1724 0439                              __ptext1716 0515  
                            __ptext1708 0570                              __ptext1660 00DF  
                            __ptext1652 0058                              __ptext1725 042D  
                            __ptext1717 056D                              __ptext1709 0509  
                            __ptext1661 0267                              __ptext1653 0657  
                            __ptext1726 0000                              __ptext1718 053A  
                            __ptext1670 06D1                              __ptext1662 068D  
                            __ptext1654 03FD                              __ptext1719 0485  
                            __ptext1671 06C9                              __ptext1663 0033  
                            __ptext1655 03F9                              __ptext1647 0172  
                            __ptext1680 02AC                              __ptext1672 0680  
                            __ptext1664 0758                              __ptext1656 03BF  
                            __ptext1648 069D                              __ptext1681 0296  
                            __ptext1673 0631                              __ptext1665 022E  
                            __ptext1657 0391                              __ptext1649 0626  
                            __ptext1690 06E8                              __ptext1682 0336  
                            __ptext1674 0114                              __ptext1666 0734  
                            __ptext1658 0319                              __ptext1691 03A8  
                            __ptext1683 0330                              __ptext1675 0367  
                            __ptext1667 0013                              __ptext1659 0047  
                            __ptext1692 065B                              __ptext1684 032A  
                            __ptext1676 03E3                              __ptext1668 06D7  
                            __ptext1693 0100                              __ptext1685 0305  
                            __ptext1677 0313                              __ptext1669 06D3  
                            __ptext1694 014A                              __ptext1686 02F9  
                            __ptext1678 02B8                              __ptext1695 0321  
                            __ptext1687 02E2                              __ptext1679 030A  
                            __ptext1696 0744                              __ptext1688 0325  
                            __ptext1697 070D                              __ptext1689 0226  
                            __ptext1698 0222                              __ptext1699 0402  
               ??_ChargeTimer_INTConfig 0036            __end_of_ChargeTimer_GetCount 06C9  
                    __end_of_KEY_DeInit 0744                                 _T3CKDIV 0111  
                               _T2CKSRC 00DD                                 _T4CKDIV 0117  
                               _T5CKDIV 011D                                 i1l10007 0000  
                               i1l15003 0000                                 i1l15021 0000  
                               i1l15013 04F8                                 i1l15005 0000  
                               i1l15023 0000                                 i1l15015 0000  
                               i1l15007 0000                                 i1l15031 0000  
                               i1l15025 0000                                 i1l15017 0000  
                               i1l15009 04EE                                 i1l15027 0000  
                               i1l15019 0000                                 i1l15035 0000  
                               i1l15037 0000                                 i1l15029 0000  
                               i1l14503 0000                                 i1l14505 0000  
                               i1l14521 0474                                 i1l14523 0000  
                               i1l14507 0000                                 i1l14515 0000  
                               i1l14517 0479                                 i1l14509 0000  
                               i1l14535 0000                                 i1l14519 047C  
                               i1l14551 0000                                 i1l12928 0000  
                               i1l14529 0000                                 i1l14561 0000  
                               i1l14545 0000                                 i1l14553 04C2  
                               i1l14537 0000                                 i1l14481 0000  
                               i1l14563 0000                                 i1l14571 04DF  
                               i1l14547 0000                                 i1l14491 041C  
                               i1l14483 0000                                 i1l14573 0000  
                               i1l14901 0000                                 i1l14557 0000  
                               i1l14565 04D2                                 i1l14493 0000  
                               i1l14485 0000                         ?_EEPROM_SetFlag 0070  
                               i1l14671 0000                                 i1l14911 0536  
                               i1l14903 0522                                 i1l14583 0000  
                               i1l14567 04D8                                 i1l14559 0000  
                               i1l14495 0000                                 i1l14681 0000  
                               i1l14673 0000                                 i1l14913 0000  
                               i1l14905 0000                                 i1l14921 0000  
                               i1l14497 0000                                 i1l14569 0000  
                               i1l14489 041A                                 i1l14683 0000  
                               i1l14675 0000                                 i1l14907 0000  
                               i1l14923 059F                                 i1l14931 0000  
                               i1l14579 0000                                 i1l14677 0000  
                               i1l14669 0576                                 i1l14925 05A2  
                               i1l14917 0000                                 i1l14941 0000  
                               i1l14933 0000                                 i1l14679 0000  
                               i1l14927 0000                                 i1l14951 0000  
                               i1l14929 05A8                                 i1l14937 048F  
                               i1l14945 0499                                 i1l14961 0000  
                               i1l14953 0000                                 i1l14939 0492  
                               i1l14963 0000                                 i1l14955 0000  
                               i1l14981 0000                                 i1l14973 0550  
                               i1l14957 0000                                 i1l14949 0000  
                               i1l14983 0000                                 i1l14959 0000  
                               i1l14991 0000                                 i1l14977 055A  
                               i1l14969 054A                                 i1l14993 0000  
                               i1l14899 0000                                 i1l14987 0000  
                               i1l14989 0000                            ?_Charge_Init 0070  
                               _GO_DONE 00F9                                 _MSCKCON 001B  
                             ?_delay_us 0036                 __end_ofi1_GPIO_WriteBit 05AB  
                               _PWM3CR0 010F                                 _PWM3CR1 0110  
                               _PWM4CR0 0115                                 _PWM4CR1 0116  
                               _PWM5CR0 011B                                 _PWM5CR1 011C  
                     Motor_Start@status 003E            __end_of_KEY_GetReleaseStatus 022E  
         __size_of_LEDTimer_IntrHandler 000A       __end_of_SwitchModeTimer_INTConfig 02B8  
               ??i1_Motor_CheckRunLimit 0070                 ChargeDetect_GetStatus@i 0039  
    __end_ofi1_MotorOperationTimer_Init 0509              i1_MotorOperationTimer_Init 04E2  
    __end_ofi1_MotorOperationTimer_Stop 0515              i1_MotorOperationTimer_Stop 0509  
                        ?_SetDeviceMode 0070                     GPIO_WriteBit@BitVal 003A  
                           _Motor_Start 0240              ?_DebounceTimer_IntrHandler 0070  
                               ___lbmod 051E      __end_of_MotorOperTimer_IntrHandler 04E2  
            _MotorOperTimer_IntrHandler 04A9                        ??_GPIO_INTConfig 0038  
                               ___lwdiv 0367                  ?_LEDTimer_GetINTStatus 0070  
               i1GPIO_WriteBit@GPIO_Pin 0070           ChargeTimer_INTConfig@NewState 0036  
                ?_EEPROM_StoreMotorData 0070                              _key_status 007C  
                          __size_of_ISR 001F                  __size_of_GetDeviceMode 0004  
                     ??i1_GetDeviceMode 0070                         _Motor_GetStatus 0763  
                            ??_delay_us 0038                     __size_of_Motor_Init 0031  
                   __size_of_Motor_Stop 0006                               _GPIO_Init 014A  
                       _KEY_IntrHandler 0452                    end_of_initialization 0731  
             ??_ChargeTimer_IntrHandler 0070            __size_of_SwitchModeTimer_Cmd 0016  
                         ??_EEPROM_Init 0038                           ??_EEPROM_Read 0036  
                GPIO_INTConfig@GPIO_Pin 0036                 ?_ChargeTimer_ResetCount 0070  
               ?_LED_UnderVoltageOutput 0070          __size_of_GPIO_ReadInputDataBit 0014  
         __end_of_GPIO_ReadInputDataBit 0114            __end_of_EEPROM_StoreModeData 0402  
                          ??_Board_Init 0036                 ?_ChargeDetect_GetStatus 0070  
      __size_ofi1_GPIO_ReadInputDataBit 0016               ADC_ReadData@battery_value 003E  
          __end_of_LED_CloseMotorStatus 0058                      _KEY_GetPressStatus 0325  
                             _TIM1_Init 0576                         _ChargeCtrl_Init 068D  
       __size_ofi1_LED_CloseMotorStatus 0012                ?_EEPROM_RestoreMotorData 0070  
     __end_of_DebounceTimer_IntrHandler 0485             __size_of_LEDTimer_INTConfig 000C  
                   ADC_ReadData@channel 003D                         _Motor_SetStatus 0222  
                  _switch_mode_time_out 0035                     ?_KEY_GetPressStatus 0070  
                      ??_charge_control 0046                        ___lbmod@dividend 0072  
                   _charge_detect_count 002F                        delay_us@delay_us 0036  
                 __size_of_LEDTimer_Cmd 0017                           ?i1_Motor_Init 0070  
                      ?i1_GPIO_WriteBit 0070                           ?i1_Motor_Stop 0070  
                     __size_of_ADC_Init 0015                      __end_of_Board_Init 070D  
                          ?_Driver_Init 0070                              ?_GPIO_Init 0036  
        __end_of_ChargeTimer_ResetCount 0763          __end_of_LED_UnderVoltageOutput 0321  
                           ___lbmod@rem 0074                         _ChargeTimer_Cmd 070D  
                  ??_KEY_GetPressStatus 0036                    _ChargeTimer_GetCount 06C3  
                GPIO_INTConfig@NewState 0037                           _GetDeviceMode 0321  
        __end_of_ChargeDetect_GetStatus 0033                         ??_SetDeviceMode 0036  
           __end_of_LED_DisplayRunLimit 0100                       __size_of_LED_Init 0036  
          MotorOperationTimer_Init@time 0036                     __end_of_EEPROM_Init 068D  
                   __end_of_EEPROM_Read 06F5                              ?_TIM1_Init 0070  
                     __size_of_KEY_Init 0011                     _Motor_CheckRunLimit 030A  
  __end_of_SwitchModeTimer_GetINTStatus 0319   __size_of_SwitchModeTimer_GetINTStatus 0006  
          _SwitchModeTimer_GetINTStatus 0313                    _KEY_GetReleaseStatus 0226  
                      _motor_intr_count 007B                           __pidataCOMMON 0000  
               __end_of_Motor_GetStatus 0765                            _LEDTimer_Cmd 02E2  
                 GPIO_WriteBit@GPIO_Pin 0039                 __end_of_KEY_IntrHandler 0460  
                   start_initialization 0724                          ??i1_Motor_Init 0070  
                           __end_of_ISR 042D       __size_of_ChargeDetect_IntrHandler 000E  
                        ??i1_Motor_Stop 0073               ?_ChargeDetect_IntrHandler 0070  
             _motor_timing_running_flag 0048                    __size_of_Charge_Init 0004  
                i1_LED_CloseMotorStatus 0583                    ?_Motor_CheckRunLimit 0070  
        GPIO_ReadInputDataBit@bitstatus 0037    __size_of_Motor_HandleStatusChangeEvt 00B0  
     Motor_HandleStatusChangeEvt@status 003F                   ?_ChargeTimer_GetCount 0036  
                        ?_GetDeviceMode 0070                 __end_of_ChargeCtrl_Init 069D  
            ??_MotorOperationTimer_Init 0036              ??_MotorOperationTimer_Stop 0036  
       __end_of_EEPROM_RestoreMotorData 06E8                        ??_EEPROM_GetFlag 0038  
               __end_of_Motor_SetStatus 0226                            ??_Motor_Init 0036  
                          ??_Motor_Stop 003C                   ?_KEY_GetReleaseStatus 0070  
                      ??_EEPROM_SetFlag 0038                             __pdataBANK0 0048  
               KEY_Init@GPIO_InitStruct 0039          __size_of_ChargeTimer_INTConfig 000C  
         __end_of_ChargeTimer_INTConfig 0750                    _EEPROM_StoreModeData 03FD  
                           __pbssCOMMON 0079                           __pcstackBANK0 0036  
                 __end_of_GPIO_WriteBit 0296                 __end_of_ChargeTimer_Cmd 0724  
            LEDTimer_INTConfig@NewState 0036                ??_LED_DisplayMotorStatus 003D  
                         _battery_value 0020                   ??_Motor_CheckRunLimit 0036  
                  _LED_CloseMotorStatus 0047                             ??_GPIO_Init 0037  
                        _key_press_flag 0031                       __size_of_delay_us 0016  
                    __end_of_Motor_Init 0367                      __end_of_Motor_Stop 0240  
                           _EEPROM_Init 0680                             _EEPROM_Read 06E8  
               ChargeTimer_Cmd@NewState 0036                 i1_GPIO_ReadInputDataBit 0485  
        __size_ofi1_Motor_CheckRunLimit 0009             ?i1_MotorOperationTimer_Init 0070  
         __end_ofi1_Motor_CheckRunLimit 051E             ?i1_MotorOperationTimer_Stop 0070  
                      ___lwdiv@dividend 0038                           ?_ADC_ReadData 003A  
               ??_LEDTimer_GetINTStatus 0036                             ??_TIM1_Init 0070  
                       i1_GetDeviceMode 044E                 ??_EEPROM_StoreMotorData 0038  
          __end_of_LEDTimer_IntrHandler 044E                            ?_Motor_Start 0070  
                              ?___lbmod 0070             ??_DebounceTimer_IntrHandler 0073  
                              ?___lwdiv 0036             ?_MotorOperTimer_IntrHandler 0070  
  __size_of_SwitchModeTimer_IntrHandler 000C                     _SwitchModeTimer_Cmd 0296  
                      ?_Motor_GetStatus 0070                ?_LED_VoltageChargeOutput 0070  
                 ?_EEPROM_StoreModeData 0070                        ?_KEY_IntrHandler 0070  
                              _ADC_Init 0642                             _device_mode 0030  
       ??_LEDTimer_GetRunLimitINTStatus 0036                   ?_LED_CloseMotorStatus 0070  
                      ___lwdiv@quotient 003A                               _key_press 0079  
                  LEDTimer_Cmd@NewState 0036                         ??_GetDeviceMode 0036  
                ??_ChargeTimer_GetCount 0038                    ?_SwitchModeTimer_Cmd 0070  
               __size_of_Battery_Detect 0087              ?_SwitchModeTimer_INTConfig 0070  
                  __size_of_Driver_Init 000B                       interrupt_function 0004  
                              _LED_Init 0114                               delay_us@i 0038  
                      ?_ChargeCtrl_Init 0070                         Battery_Detect@i 0043  
                        ??_ADC_ReadData 003C                                _KEY_Init 0631  
  __end_of_EEPROM_RestoreDeviceModeData 06D7   __size_of_EEPROM_RestoreDeviceModeData 0004  
          _EEPROM_RestoreDeviceModeData 06D3                  ??_KEY_GetReleaseStatus 0036  
                      ?_Motor_SetStatus 0070                    __end_ofi1_Motor_Init 056D  
                  __end_ofi1_Motor_Stop 0576                 i1Motor_SetStatus@status 0070  
          ?_LEDTimer_GetOperationStatus 0070        __size_of_EEPROM_RestoreMotorData 0011  
                      ?_ChargeTimer_Cmd 0070         __size_of_LED_DisplayMotorStatus 0019  
             _DebounceTimer_IntrHandler 0460                   ??_SwitchModeTimer_Cmd 0036  
             ??i1_GPIO_ReadInputDataBit 0071                 __end_ofi1_GetDeviceMode 0452  
                     _ChargeDetect_Init 0033                          GPIO_Init@GPIOx 0037  
                    ?_ChargeDetect_Init 0070                   _GPIO_ReadInputDataBit 0100  
            __end_of_LEDTimer_INTConfig 0305          LED_DisplayMotorStatus@GPIO_Pin 003C  
         ?_EEPROM_RestoreDeviceModeData 0070         __end_of_LED_VoltageChargeOutput 06D1  
      __end_of_ChargeDetect_IntrHandler 04A9                      Battery_Detect@mode 0042  
                      __size_of___lbmod 001C                     ??_ChargeDetect_Init 0039  
                      __size_of___lwdiv 002A            ?_Motor_HandleStatusChangeEvt 0070  
                ??_EEPROM_StoreModeData 0038                 ?i1_LED_CloseMotorStatus 0070  
                           _key_release 007A           ??_LEDTimer_GetOperationStatus 0036  
              ?_ChargeTimer_IntrHandler 0070                  ??_LED_CloseMotorStatus 003C  
               __size_of_GPIO_INTConfig 0025                                _delay_us 03E3  
                       ___lwdiv@divisor 0036                         ___lwdiv@counter 003C  
   __size_ofi1_MotorOperationTimer_Init 0027              GPIO_ReadInputDataBit@GPIOx 0038  
   __size_ofi1_MotorOperationTimer_Stop 000C                 ChargeCtrl_Output@BitVal 003C  
                         ?_EEPROM_Write 0036                    _LEDTimer_IntrHandler 0444  
             __end_of_ChargeDetect_Init 0047            LED_UnderVoltageOutput@BitVal 003C  
 __end_of_LEDTimer_GetRunLimitINTStatus 0336  __size_of_LEDTimer_GetRunLimitINTStatus 0006  
         _LEDTimer_GetRunLimitINTStatus 0330     __size_of_MotorOperTimer_IntrHandler 0039  
           __size_of_KEY_GetPressStatus 0005                           __size_of_main 007B  
              __size_ofi1_GPIO_WriteBit 0016             LED_DisplayMotorStatus@GPIOx 003D  
           SwitchModeTimer_Cmd@NewState 0036                                clear_ram 0750  
                 i1GPIO_WriteBit@BitVal 0071                   __end_of_SetDeviceMode 0406  
                _LED_DisplayMotorStatus 0267        i1GPIO_ReadInputDataBit@bitstatus 0071  
         GPIO_ReadInputDataBit@GPIO_Pin 0036                GPIO_Init@GPIO_InitStruct 0036  
          __size_of_LED_DisplayRunLimit 0021                    __size_of_Motor_Start 0027  
        __end_ofi1_LED_CloseMotorStatus 0595                           ??_Charge_Init 003E  
                 Motor_SetStatus@status 0036           ??_Motor_HandleStatusChangeEvt 003F  
                     _ChargeCtrl_Output 0758                    __end_of_ADC_ReadData 03E3  
                    ?_ChargeCtrl_Output 0070          i1MotorOperationTimer_Init@time 0070  
                        ??_EEPROM_Write 0037                   ?_LEDTimer_IntrHandler 0070  
                            _KEY_DeInit 0734                          _Battery_Detect 0058  
                              intlevel1 0000                            _motor_status 007D  
                   ??_ChargeCtrl_Output 003C                 __size_of_charge_control 0026  
                          ?_EEPROM_Init 0070                            ?_EEPROM_Read 0070  
          ?_SwitchModeTimer_IntrHandler 0070                   __size_ofi1_Motor_Init 0033  
                      ?i1_GetDeviceMode 0070                   __size_ofi1_Motor_Stop 0006  
  __size_of_LEDTimer_GetOperationStatus 0005                    i1GPIO_WriteBit@GPIOx 0072  
                ?_GPIO_ReadInputDataBit 0036                  Battery_Detect@adc_data 0044  
        __size_of_LEDTimer_GetINTStatus 0006           __end_of_LEDTimer_GetINTStatus 0330  
        __size_of_EEPROM_StoreMotorData 0017           __end_of_EEPROM_StoreMotorData 03A8  
            charge_control@charge_count 0046         __end_of_ChargeTimer_IntrHandler 0444  
             __end_of_ChargeCtrl_Output 0760          ??_EEPROM_RestoreDeviceModeData 0038  
           __end_of_Motor_CheckRunLimit 0313       __size_of_MotorOperationTimer_Init 002A  
              _ChargeDetect_IntrHandler 049B               ?_MotorOperationTimer_Init 0070  
     __size_of_MotorOperationTimer_Stop 000C               ?_MotorOperationTimer_Stop 0070  
               _EEPROM_RestoreMotorData 06D7          ChargeCtrl_Init@GPIO_InitStruct 003C  
                 _ChargeTimer_INTConfig 0744                ??_ChargeTimer_ResetCount 0036  
              ??_LED_UnderVoltageOutput 003C        ChargeDetect_Init@GPIO_InitStruct 0039  
                __end_of_Battery_Detect 00DF                            i1_Motor_Init 053A  
                          i1_Motor_Stop 0570     __end_of_SwitchModeTimer_IntrHandler 0439  
           _SwitchModeTimer_IntrHandler 042D                        Motor_Init@status 0036  
              ??_ChargeDetect_GetStatus 0039                     __end_of_Charge_Init 065B  
            __size_of_ChargeDetect_Init 0014        __size_of_LED_VoltageChargeOutput 0008  
           ??_SwitchModeTimer_INTConfig 0036                         EEPROM_Read@addr 0036  
                       EEPROM_Read@data 0037           ??_SwitchModeTimer_IntrHandler 0070  
    __size_of_DebounceTimer_IntrHandler 0025          ?_LEDTimer_GetRunLimitINTStatus 0070  
