

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Oct 29 20:18:23 2017

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataCOMMON,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,delta=2
    15                           	psect	text1662,local,class=CODE,delta=2
    16                           	psect	text1663,local,class=CODE,delta=2
    17                           	psect	text1664,local,class=CODE,delta=2
    18                           	psect	text1668,local,class=CODE,delta=2
    19                           	psect	text1671,local,class=CODE,delta=2
    20                           	psect	text1673,local,class=CODE,delta=2
    21                           	psect	text1688,local,class=CODE,delta=2
    22                           	psect	text1692,local,class=CODE,delta=2
    23                           	psect	text1693,local,class=CODE,delta=2
    24                           	psect	text1696,local,class=CODE,delta=2
    25                           	psect	text1697,local,class=CODE,delta=2
    26                           	psect	text1698,local,class=CODE,delta=2
    27                           	psect	text1704,local,class=CODE,delta=2
    28                           	psect	text1705,local,class=CODE,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text1729,local,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  000A                     
    34                           	psect	idataBANK0
    35  0000                     __pidataBANK0:	
    36                           
    37                           	psect	idataCOMMON
    38  0000                     __pidataCOMMON:	
    39  001F                     _ADCON0	set	31
    40  001E                     _ADRESH	set	30
    41  0015                     _CCP1CON	set	21
    42  0013                     _CCPR1L	set	19
    43  0019                     _CMCON0	set	25
    44  000B                     _INTCON	set	11
    45  001B                     _MSCKCON	set	27
    46  000C                     _PIR1	set	12
    47  000D                     _PIR2	set	13
    48  0005                     _PORTA	set	5
    49  0007                     _PORTC	set	7
    50  0010                     _T1CON	set	16
    51  0012                     _T2CON	set	18
    52  000F                     _TMR1H	set	15
    53  000E                     _TMR1L	set	14
    54  0011                     _TMR2	set	17
    55  0018                     _WDTCON	set	24
    56  0069                     _ADIF	set	105
    57  00F8                     _ADON	set	248
    58  005F                     _GIE	set	95
    59  00F9                     _GO_DONE	set	249
    60  005C                     _INTE	set	92
    61  0059                     _INTF	set	89
    62  005B                     _PAIE	set	91
    63  0058                     _PAIF	set	88
    64  003C                     _PC4	set	60
    65  005E                     _PEIE	set	94
    66  00DD                     _T2CKSRC	set	221
    67  0060                     _TMR1IF	set	96
    68  0080                     _TMR1ON	set	128
    69  0061                     _TMR2IF	set	97
    70  0092                     _TMR2ON	set	146
    71  009F                     _ADCON1	set	159
    72  009E                     _ADRESL	set	158
    73  0091                     _ANSEL	set	145
    74  009B                     _EEADR	set	155
    75  009C                     _EECON1	set	156
    76  009A                     _EEDAT	set	154
    77  0096                     _IOCA	set	150
    78  008F                     _OSCCON	set	143
    79  008E                     _PCON	set	142
    80  008C                     _PIE1	set	140
    81  008D                     _PIE2	set	141
    82  0092                     _PR2	set	146
    83  0085                     _TRISA	set	133
    84  0087                     _TRISC	set	135
    85  0089                     _WPD	set	137
    86  0095                     _WPUA	set	149
    87  0469                     _ADIE	set	1129
    88  048D                     _ANSEL5	set	1165
    89  040E                     _INTEDG	set	1038
    90  04E0                     _RD	set	1248
    91  0460                     _TMR1IE	set	1120
    92  043C                     _TRISC4	set	1084
    93  04E8                     _WR	set	1256
    94  04E2                     _WREN1	set	1250
    95  04E4                     _WREN2	set	1252
    96  04E5                     _WREN3	set	1253
    97  010E                     _PR3L	set	270
    98  0114                     _PR4L	set	276
    99  011A                     _PR5L	set	282
   100  010F                     _PWM3CR0	set	271
   101  0110                     _PWM3CR1	set	272
   102  0115                     _PWM4CR0	set	277
   103  0116                     _PWM4CR1	set	278
   104  011B                     _PWM5CR0	set	283
   105  011C                     _PWM5CR1	set	284
   106  0111                     _T3CKDIV	set	273
   107  0117                     _T4CKDIV	set	279
   108  011D                     _T5CKDIV	set	285
   109  010D                     _TMR3H	set	269
   110  010C                     _TMR3L	set	268
   111  0113                     _TMR4H	set	275
   112  0112                     _TMR4L	set	274
   113  0119                     _TMR5H	set	281
   114  0118                     _TMR5L	set	280
   115  0881                     _TMR3IE	set	2177
   116  0880                     _TMR3IF	set	2176
   117  0882                     _TMR3ON	set	2178
   118  08B1                     _TMR4IE	set	2225
   119  08B0                     _TMR4IF	set	2224
   120  08B2                     _TMR4ON	set	2226
   121  08E1                     _TMR5IE	set	2273
   122  08E0                     _TMR5IF	set	2272
   123  08E2                     _TMR5ON	set	2274
   124                           
   125                           	psect	cinit
   126  075D                     start_initialization:	
   127  075D  3020               	movlw	low __pbssBANK0
   128                           
   129                           ; Clear objects allocated to COMMON
   130  075E  01FD               	clrf	__pbssCOMMON& (0+127)
   131                           
   132                           ; Clear objects allocated to BANK0
   133  075F  1383               	bcf	3,7	;select IRP bank0
   134  0760  0084               	movwf	4
   135  0761  3044               	movlw	low (__pbssBANK0+36)
   136  0762  118A  2784         	fcall	clear_ram
   137                           
   138                           ;initializer for _current_period_type
   139  0764  3001               	movlw	1
   140  0765  00D8               	movwf	__pdataBANK0& (0+127)
   141                           
   142                           ;initializer for _motor_timing_running_flag
   143  0766  00D9               	movwf	(__pdataBANK0+1)& (0+127)
   144                           
   145                           ;initializer for _key_status
   146  0767  00FB               	movwf	__pdataCOMMON& (0+127)
   147                           
   148                           ;initializer for _motor_status
   149  0768  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
   150  0769                     end_of_initialization:	
   151                           ;End of C runtime variable initialization code
   152                           
   153  0769  0183               	clrf	3
   154  076A  118A  2E22         	ljmp	_main	;jump to C main() function
   155                           
   156                           	psect	bssCOMMON
   157  007D                     __pbssCOMMON:	
   158  007D                     _motor_intr_count:	
   159  007D                     	ds	1
   160                           
   161                           	psect	dataCOMMON
   162  007B                     __pdataCOMMON:	
   163  007B                     _key_status:	
   164  007B                     	ds	1
   165  007C                     _motor_status:	
   166  007C                     	ds	1
   167                           
   168                           	psect	bssBANK0
   169  0020                     __pbssBANK0:	
   170  0020                     _battery_value:	
   171  0020                     	ds	20
   172  0034                     _charge_time_out:	
   173  0034                     	ds	2
   174  0036                     _motor_oper_record:	
   175  0036                     	ds	2
   176  0038                     _battery_handle_flag:	
   177  0038                     	ds	1
   178  0039                     _battery_sample_count:	
   179  0039                     	ds	1
   180  003A                     _charge_detect_count:	
   181  003A                     	ds	1
   182  003B                     _detect_under_voltage:	
   183  003B                     	ds	1
   184  003C                     _device_mode:	
   185  003C                     	ds	1
   186  003D                     _key_press:	
   187  003D                     	ds	1
   188  003E                     _key_press_flag:	
   189  003E                     	ds	1
   190  003F                     _key_press_time_count:	
   191  003F                     	ds	1
   192  0040                     _key_release:	
   193  0040                     	ds	1
   194  0041                     _run_limit_display_en:	
   195  0041                     	ds	1
   196  0042                     _switch_mode_time_out:	
   197  0042                     	ds	1
   198  0043                     _under_volt_display_En:	
   199  0043                     	ds	1
   200                           
   201                           	psect	dataBANK0
   202  0058                     __pdataBANK0:	
   203  0058                     _current_period_type:	
   204  0058                     	ds	1
   205  0059                     _motor_timing_running_flag:	
   206  0059                     	ds	1
   207                           
   208                           	psect	clrtext
   209  0784                     clear_ram:	
   210                           ;	Called with FSR containing the base address, and
   211                           ;	W with the last address+1
   212                           
   213  0784  0064               	clrwdt	;clear the watchdog before getting into this loop
   214  0785                     clrloop:	
   215  0785  0180               	clrf	0	;clear RAM location pointed to by FSR
   216  0786  0A84               	incf	4,f	;increment pointer
   217  0787  0604               	xorwf	4,w	;XOR with final address
   218  0788  1903               	btfsc	3,2	;have we reached the end yet?
   219  0789  3400               	retlw	0	;all done for this memory range, return
   220  078A  0604               	xorwf	4,w	;XOR again to restore value
   221  078B  2F85               	goto	clrloop	;do the next byte
   222                           
   223                           	psect	cstackCOMMON
   224  0070                     __pcstackCOMMON:	
   225  0070                     ?_LED_Init:	
   226  0070                     ?_KEY_Init:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ?_Charge_Init:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_ADC_Init:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_LEDTimer_INTConfig:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_EEPROM_Init:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_Battery_Detect:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_LED_VoltageChargeOutput:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_EEPROM_RestoreDeviceModeData:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ?_EEPROM_RestoreMotorData:	
   251                           ; 0 bytes @ 0x0
   252                           
   253  0070                     ?_Motor_HandleStatusChangeEvt:	
   254                           ; 0 bytes @ 0x0
   255                           
   256  0070                     ?_ChargeTimer_ResetCount:	
   257                           ; 0 bytes @ 0x0
   258                           
   259  0070                     ?_SetDeviceMode:	
   260                           ; 0 bytes @ 0x0
   261                           
   262  0070                     ?_KEY_DeInit:	
   263                           ; 0 bytes @ 0x0
   264                           
   265  0070                     ?_Motor_Stop:	
   266                           ; 0 bytes @ 0x0
   267                           
   268  0070                     ?_Motor_SetStatus:	
   269                           ; 0 bytes @ 0x0
   270                           
   271  0070                     ?_MotorOperationTimer_Stop:	
   272                           ; 0 bytes @ 0x0
   273                           
   274  0070                     ?_LEDTimer_DispRunLimitCmd:	
   275                           ; 0 bytes @ 0x0
   276                           
   277  0070                     ?_ChargeCtrl_Output:	
   278                           ; 0 bytes @ 0x0
   279                           
   280  0070                     ?_ChargeTimer_Cmd:	
   281                           ; 0 bytes @ 0x0
   282                           
   283  0070                     ?_ChargeTimer_INTConfig:	
   284                           ; 0 bytes @ 0x0
   285                           
   286  0070                     ?_KEY_IntrHandler:	
   287                           ; 0 bytes @ 0x0
   288                           
   289  0070                     ??_KEY_IntrHandler:	
   290                           ; 0 bytes @ 0x0
   291                           
   292  0070                     ?_DebounceTimer_IntrHandler:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0070                     ?_SwitchModeTimer_IntrHandler:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0070                     ??_SwitchModeTimer_IntrHandler:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_ChargeTimer_IntrHandler:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ??_ChargeTimer_IntrHandler:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ?_MotorOperTimer_IntrHandler:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0070                     ?_LEDTimer_IntrHandler:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_ChargeDetect_IntrHandler:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_ADC_IntrHandler:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_ADC_Enable:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ??_ADC_Enable:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?_SwitchModeTimer_Cmd:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_SwitchModeTimer_INTConfig:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_Board_Init:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_Driver_Init:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_charge_control:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ?_main:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0070                     ?_ISR:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ?_ChargeDetect_Init:	
   347                           ; 0 bytes @ 0x0
   348                           
   349  0070                     ?_ChargeCtrl_Init:	
   350                           ; 0 bytes @ 0x0
   351                           
   352  0070                     ?_TIM1_Init:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0070                     ??_TIM1_Init:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ?_LED_DisplayRunLimit:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ?_LED_UnderVoltageOutput:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_LEDTimer_DispUnderVoltCmd:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ?_Motor_Init:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?_Motor_Start:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0070                     ?_MotorOperationTimer_Init:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0070                     ?_EEPROM_StoreMotorData:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0070                     ?_EEPROM_SetFlag:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0070                     ?_EEPROM_StoreModeData:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0070                     ?i1_LED_UnderVoltageOutput:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0070                     ?i1_Motor_Init:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0070                     ??i1_Motor_Init:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0070                     ?i1_Motor_SetStatus:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0070                     ??i1_Motor_SetStatus:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0070                     ?i1_Motor_Stop:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0070                     ??i1_Motor_CheckRunLimit:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?i1_MotorOperationTimer_Init:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0070                     ??i1_MotorOperationTimer_Init:	
   410                           ; 0 bytes @ 0x0
   411                           
   412  0070                     ?i1_MotorOperationTimer_Stop:	
   413                           ; 0 bytes @ 0x0
   414                           
   415  0070                     ??i1_MotorOperationTimer_Stop:	
   416                           ; 0 bytes @ 0x0
   417                           
   418  0070                     ??i1_GetDeviceMode:	
   419                           ; 0 bytes @ 0x0
   420                           
   421  0070                     ?_EEPROM_GetFlag:	
   422                           ; 0 bytes @ 0x0
   423                           
   424  0070                     ?_Motor_GetStatus:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_ChargeDetect_GetStatus:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_GetDeviceMode:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_SwitchModeTimer_GetINTStatus:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_EEPROM_Read:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_KEY_GetReleaseStatus:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_KEY_GetPressStatus:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_Motor_CheckRunLimit:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?___lbmod:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?i1_GPIO_ReadInputDataBit:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?i1_Motor_CheckRunLimit:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?i1_GetDeviceMode:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_ADC_ReadData:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ___lbmod@divisor:	
   464                           ; 2 bytes @ 0x0
   465                           
   466  0070                     i1GPIO_ReadInputDataBit@GPIO_Pin:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     i1Motor_Init@status:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     i1Motor_SetStatus@status:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     i1MotorOperationTimer_Init@time:	
   476                           ; 1 bytes @ 0x0
   477                           
   478                           
   479                           ; 1 bytes @ 0x0
   480  0070                     	ds	1
   481  0071                     ??___lbmod:	
   482  0071                     ??i1_GPIO_ReadInputDataBit:	
   483                           ; 0 bytes @ 0x1
   484                           
   485  0071                     ADC_Enable@channel:	
   486                           ; 0 bytes @ 0x1
   487                           
   488  0071                     i1GPIO_ReadInputDataBit@bitstatus:	
   489                           ; 1 bytes @ 0x1
   490                           
   491                           
   492                           ; 1 bytes @ 0x1
   493  0071                     	ds	1
   494  0072                     ??_ADC_ReadData:	
   495  0072                     ___lbmod@dividend:	
   496                           ; 0 bytes @ 0x2
   497                           
   498  0072                     i1GPIO_ReadInputDataBit@GPIOx:	
   499                           ; 1 bytes @ 0x2
   500                           
   501                           
   502                           ; 1 bytes @ 0x2
   503  0072                     	ds	1
   504  0073                     ??_DebounceTimer_IntrHandler:	
   505  0073                     ??_ChargeDetect_IntrHandler:	
   506                           ; 0 bytes @ 0x3
   507                           
   508  0073                     ?i1_GPIO_WriteBit:	
   509                           ; 0 bytes @ 0x3
   510                           
   511  0073                     ___lbmod@counter:	
   512                           ; 0 bytes @ 0x3
   513                           
   514  0073                     i1GPIO_WriteBit@GPIO_Pin:	
   515                           ; 1 bytes @ 0x3
   516                           
   517  0073                     ADC_ReadData@battery_value:	
   518                           ; 1 bytes @ 0x3
   519                           
   520                           
   521                           ; 2 bytes @ 0x3
   522  0073                     	ds	1
   523  0074                     ___lbmod@rem:	
   524  0074                     i1GPIO_WriteBit@BitVal:	
   525                           ; 1 bytes @ 0x4
   526                           
   527                           
   528                           ; 1 bytes @ 0x4
   529  0074                     	ds	1
   530  0075                     ??_ADC_IntrHandler:	
   531  0075                     ??i1_GPIO_WriteBit:	
   532                           ; 0 bytes @ 0x5
   533                           
   534  0075                     i1GPIO_WriteBit@GPIOx:	
   535                           ; 0 bytes @ 0x5
   536                           
   537                           
   538                           ; 1 bytes @ 0x5
   539  0075                     	ds	1
   540  0076                     ??_MotorOperTimer_IntrHandler:	
   541  0076                     ??_LED_DisplayRunLimit:	
   542                           ; 0 bytes @ 0x6
   543                           
   544  0076                     ??i1_LED_UnderVoltageOutput:	
   545                           ; 0 bytes @ 0x6
   546                           
   547  0076                     ??i1_Motor_Stop:	
   548                           ; 0 bytes @ 0x6
   549                           
   550  0076                     i1LED_UnderVoltageOutput@BitVal:	
   551                           ; 0 bytes @ 0x6
   552                           
   553                           
   554                           ; 1 bytes @ 0x6
   555  0076                     	ds	1
   556  0077                     ??_LEDTimer_IntrHandler:	
   557  0077                     ??_ISR:	
   558                           ; 0 bytes @ 0x7
   559                           
   560                           
   561                           ; 0 bytes @ 0x7
   562  0077                     	ds	4
   563                           
   564                           	psect	cstackBANK0
   565  0044                     __pcstackBANK0:	
   566  0044                     ??_ADC_Init:	
   567  0044                     ?_LEDTimer_Cmd:	
   568                           ; 0 bytes @ 0x0
   569                           
   570  0044                     ??_LEDTimer_INTConfig:	
   571                           ; 0 bytes @ 0x0
   572                           
   573  0044                     ?_GPIO_WriteBit:	
   574                           ; 0 bytes @ 0x0
   575                           
   576  0044                     ??_Motor_GetStatus:	
   577                           ; 0 bytes @ 0x0
   578                           
   579  0044                     ??_ChargeTimer_ResetCount:	
   580                           ; 0 bytes @ 0x0
   581                           
   582  0044                     ??_SetDeviceMode:	
   583                           ; 0 bytes @ 0x0
   584                           
   585  0044                     ??_Motor_SetStatus:	
   586                           ; 0 bytes @ 0x0
   587                           
   588  0044                     ??_MotorOperationTimer_Stop:	
   589                           ; 0 bytes @ 0x0
   590                           
   591  0044                     ??_LEDTimer_DispRunLimitCmd:	
   592                           ; 0 bytes @ 0x0
   593                           
   594  0044                     ??_ChargeTimer_Cmd:	
   595                           ; 0 bytes @ 0x0
   596                           
   597  0044                     ??_ChargeTimer_INTConfig:	
   598                           ; 0 bytes @ 0x0
   599                           
   600  0044                     ??_GetDeviceMode:	
   601                           ; 0 bytes @ 0x0
   602                           
   603  0044                     ?_GPIO_Init:	
   604                           ; 0 bytes @ 0x0
   605                           
   606  0044                     ?_GPIO_INTConfig:	
   607                           ; 0 bytes @ 0x0
   608                           
   609  0044                     ?_EEPROM_Write:	
   610                           ; 0 bytes @ 0x0
   611                           
   612  0044                     ??_SwitchModeTimer_Cmd:	
   613                           ; 0 bytes @ 0x0
   614                           
   615  0044                     ??_SwitchModeTimer_INTConfig:	
   616                           ; 0 bytes @ 0x0
   617                           
   618  0044                     ??_SwitchModeTimer_GetINTStatus:	
   619                           ; 0 bytes @ 0x0
   620                           
   621  0044                     ??_Board_Init:	
   622                           ; 0 bytes @ 0x0
   623                           
   624  0044                     ??_EEPROM_Read:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0044                     ??_KEY_GetReleaseStatus:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0044                     ??_KEY_GetPressStatus:	
   631                           ; 0 bytes @ 0x0
   632                           
   633  0044                     ??_LEDTimer_DispUnderVoltCmd:	
   634                           ; 0 bytes @ 0x0
   635                           
   636  0044                     ??_Motor_Init:	
   637                           ; 0 bytes @ 0x0
   638                           
   639  0044                     ??_Motor_CheckRunLimit:	
   640                           ; 0 bytes @ 0x0
   641                           
   642  0044                     ??_MotorOperationTimer_Init:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0044                     ?_GPIO_ReadInputDataBit:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0044                     ?_ChargeTimer_GetCount:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0044                     ?_Battery_HandleData:	
   652                           ; 2 bytes @ 0x0
   653                           
   654  0044                     EEPROM_Read@addr:	
   655                           ; 2 bytes @ 0x0
   656                           
   657  0044                     EEPROM_Write@data:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0044                     GPIO_Init@GPIO_InitStruct:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0044                     GPIO_WriteBit@GPIO_Pin:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0044                     GPIO_ReadInputDataBit@GPIO_Pin:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0044                     GPIO_INTConfig@GPIO_Pin:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0044                     LEDTimer_Cmd@NewState:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0044                     LEDTimer_INTConfig@NewState:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0044                     LEDTimer_DispUnderVoltCmd@NewState:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0044                     LEDTimer_DispRunLimitCmd@NewState:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0044                     Motor_Init@status:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0044                     Motor_SetStatus@status:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0044                     MotorOperationTimer_Init@time:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0044                     SetDeviceMode@mode:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0044                     SwitchModeTimer_Cmd@NewState:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0044                     SwitchModeTimer_INTConfig@NewState:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0044                     ChargeTimer_Cmd@NewState:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0044                     ChargeTimer_INTConfig@NewState:	
   706                           ; 1 bytes @ 0x0
   707                           
   708                           
   709                           ; 1 bytes @ 0x0
   710  0044                     	ds	1
   711  0045                     ??_LEDTimer_Cmd:	
   712  0045                     ??_GPIO_Init:	
   713                           ; 0 bytes @ 0x1
   714                           
   715  0045                     ??_GPIO_ReadInputDataBit:	
   716                           ; 0 bytes @ 0x1
   717                           
   718  0045                     ??_EEPROM_Write:	
   719                           ; 0 bytes @ 0x1
   720                           
   721  0045                     EEPROM_Read@data:	
   722                           ; 0 bytes @ 0x1
   723                           
   724  0045                     EEPROM_Write@addr:	
   725                           ; 1 bytes @ 0x1
   726                           
   727  0045                     GPIO_Init@GPIOx:	
   728                           ; 1 bytes @ 0x1
   729                           
   730  0045                     GPIO_WriteBit@BitVal:	
   731                           ; 1 bytes @ 0x1
   732                           
   733  0045                     GPIO_ReadInputDataBit@bitstatus:	
   734                           ; 1 bytes @ 0x1
   735                           
   736  0045                     GPIO_INTConfig@NewState:	
   737                           ; 1 bytes @ 0x1
   738                           
   739  0045                     LEDTimer_Cmd@period_type:	
   740                           ; 1 bytes @ 0x1
   741                           
   742  0045                     ADC_Init@channel:	
   743                           ; 1 bytes @ 0x1
   744                           
   745                           
   746                           ; 1 bytes @ 0x1
   747  0045                     	ds	1
   748  0046                     ??_EEPROM_Init:	
   749  0046                     ??_ChargeTimer_GetCount:	
   750                           ; 0 bytes @ 0x2
   751                           
   752  0046                     ??_GPIO_WriteBit:	
   753                           ; 0 bytes @ 0x2
   754                           
   755  0046                     ??_EEPROM_GetFlag:	
   756                           ; 0 bytes @ 0x2
   757                           
   758  0046                     ??_EEPROM_RestoreDeviceModeData:	
   759                           ; 0 bytes @ 0x2
   760                           
   761  0046                     ??_EEPROM_RestoreMotorData:	
   762                           ; 0 bytes @ 0x2
   763                           
   764  0046                     ??_KEY_DeInit:	
   765                           ; 0 bytes @ 0x2
   766                           
   767  0046                     ??_GPIO_INTConfig:	
   768                           ; 0 bytes @ 0x2
   769                           
   770  0046                     ??_EEPROM_StoreMotorData:	
   771                           ; 0 bytes @ 0x2
   772                           
   773  0046                     ??_EEPROM_SetFlag:	
   774                           ; 0 bytes @ 0x2
   775                           
   776  0046                     ??_EEPROM_StoreModeData:	
   777                           ; 0 bytes @ 0x2
   778                           
   779  0046                     ??_Battery_HandleData:	
   780                           ; 0 bytes @ 0x2
   781                           
   782  0046                     GPIO_WriteBit@GPIOx:	
   783                           ; 0 bytes @ 0x2
   784                           
   785  0046                     GPIO_ReadInputDataBit@GPIOx:	
   786                           ; 1 bytes @ 0x2
   787                           
   788  0046                     GPIO_INTConfig@GPIOx:	
   789                           ; 1 bytes @ 0x2
   790                           
   791  0046                     KEY_DeInit@GPIO_InitStruct:	
   792                           ; 1 bytes @ 0x2
   793                           
   794                           
   795                           ; 2 bytes @ 0x2
   796  0046                     	ds	1
   797  0047                     ??_LED_Init:	
   798  0047                     ??_KEY_Init:	
   799                           ; 0 bytes @ 0x3
   800                           
   801  0047                     ??_LED_VoltageChargeOutput:	
   802                           ; 0 bytes @ 0x3
   803                           
   804  0047                     ??_ChargeDetect_GetStatus:	
   805                           ; 0 bytes @ 0x3
   806                           
   807  0047                     ??_Motor_Stop:	
   808                           ; 0 bytes @ 0x3
   809                           
   810  0047                     ??_ChargeCtrl_Output:	
   811                           ; 0 bytes @ 0x3
   812                           
   813  0047                     ??_ChargeDetect_Init:	
   814                           ; 0 bytes @ 0x3
   815                           
   816  0047                     ??_ChargeCtrl_Init:	
   817                           ; 0 bytes @ 0x3
   818                           
   819  0047                     ?_LED_DisplayMotorStatus:	
   820                           ; 0 bytes @ 0x3
   821                           
   822  0047                     ??_LED_UnderVoltageOutput:	
   823                           ; 0 bytes @ 0x3
   824                           
   825  0047                     ChargeCtrl_Output@BitVal:	
   826                           ; 0 bytes @ 0x3
   827                           
   828  0047                     LED_DisplayMotorStatus@GPIO_Pin:	
   829                           ; 1 bytes @ 0x3
   830                           
   831  0047                     LED_VoltageChargeOutput@BitVal:	
   832                           ; 1 bytes @ 0x3
   833                           
   834  0047                     LED_UnderVoltageOutput@BitVal:	
   835                           ; 1 bytes @ 0x3
   836                           
   837  0047                     ChargeDetect_Init@GPIO_InitStruct:	
   838                           ; 1 bytes @ 0x3
   839                           
   840  0047                     ChargeCtrl_Init@GPIO_InitStruct:	
   841                           ; 2 bytes @ 0x3
   842                           
   843  0047                     ChargeDetect_GetStatus@i:	
   844                           ; 2 bytes @ 0x3
   845                           
   846  0047                     KEY_Init@GPIO_InitStruct:	
   847                           ; 2 bytes @ 0x3
   848                           
   849  0047                     LED_Init@GPIO_InitStruct:	
   850                           ; 2 bytes @ 0x3
   851                           
   852                           
   853                           ; 2 bytes @ 0x3
   854  0047                     	ds	1
   855  0048                     ??_LED_DisplayMotorStatus:	
   856  0048                     LED_DisplayMotorStatus@GPIOx:	
   857                           ; 0 bytes @ 0x4
   858                           
   859                           
   860                           ; 1 bytes @ 0x4
   861  0048                     	ds	1
   862  0049                     ??_Charge_Init:	
   863  0049                     ??_Driver_Init:	
   864                           ; 0 bytes @ 0x5
   865                           
   866  0049                     ??_Motor_Start:	
   867                           ; 0 bytes @ 0x5
   868                           
   869  0049                     Motor_Start@status:	
   870                           ; 0 bytes @ 0x5
   871                           
   872                           
   873                           ; 1 bytes @ 0x5
   874  0049                     	ds	1
   875  004A                     ??_Motor_HandleStatusChangeEvt:	
   876  004A                     Motor_HandleStatusChangeEvt@status:	
   877                           ; 0 bytes @ 0x6
   878                           
   879                           
   880                           ; 1 bytes @ 0x6
   881  004A                     	ds	2
   882  004C                     Battery_HandleData@temp2:	
   883                           
   884                           ; 2 bytes @ 0x8
   885  004C                     	ds	2
   886  004E                     Battery_HandleData@average_data:	
   887                           
   888                           ; 2 bytes @ 0xA
   889  004E                     	ds	2
   890  0050                     Battery_HandleData@temp1:	
   891                           
   892                           ; 2 bytes @ 0xC
   893  0050                     	ds	2
   894  0052                     Battery_HandleData@i:	
   895                           
   896                           ; 1 bytes @ 0xE
   897  0052                     	ds	1
   898  0053                     ??_Battery_Detect:	
   899  0053                     Battery_Detect@mode:	
   900                           ; 0 bytes @ 0xF
   901                           
   902                           
   903                           ; 1 bytes @ 0xF
   904  0053                     	ds	1
   905  0054                     Battery_Detect@adc_data:	
   906                           
   907                           ; 2 bytes @ 0x10
   908  0054                     	ds	2
   909  0056                     ??_charge_control:	
   910  0056                     charge_control@charge_count:	
   911                           ; 0 bytes @ 0x12
   912                           
   913                           
   914                           ; 2 bytes @ 0x12
   915  0056                     	ds	2
   916  0058                     ??_main:	
   917                           
   918                           	psect	maintext
   919  0622                     __pmaintext:	
   920                           ; 0 bytes @ 0x14
   921 ;;Data sizes: Strings 0, constant 0, data 4, bss 37, persistent 0 stack 0
   922 ;;Auto spaces:   Size  Autos    Used
   923 ;; COMMON          14     11      14
   924 ;; BANK0           80     20      58
   925 ;; BANK1           80      0       0
   926 ;; BANK2           80      0       0
   927 ;;
   928 ;; Pointer list with targets:
   929 ;; ?_ChargeTimer_GetCount	unsigned int  size(1) Largest target is 0
   930 ;;
   931 ;; ?_Battery_HandleData	unsigned int  size(1) Largest target is 0
   932 ;;
   933 ;; ?_ADC_ReadData	unsigned short  size(1) Largest target is 0
   934 ;;
   935 ;; GPIO_Init@GPIO_InitStruct	PTR struct . size(1) Largest target is 2
   936 ;;		 -> LED_Init@GPIO_InitStruct(BANK0[2]), KEY_Init@GPIO_InitStruct(BANK0[2]), KEY_DeInit@GPIO_InitStruct(BANK0[2]), Ch
      +argeCtrl_Init@GPIO_InitStruct(BANK0[2]), 
   937 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(BANK0[2]), 
   938 ;;
   939 ;;
   940 ;; Critical Paths under _main in COMMON
   941 ;;
   942 ;;   None.
   943 ;;
   944 ;; Critical Paths under _ISR in COMMON
   945 ;;
   946 ;;   _LEDTimer_IntrHandler->i1_LED_UnderVoltageOutput
   947 ;;   i1_Motor_Stop->i1_GPIO_WriteBit
   948 ;;   i1_LED_UnderVoltageOutput->i1_GPIO_WriteBit
   949 ;;   _LED_DisplayRunLimit->i1_GPIO_WriteBit
   950 ;;   _ADC_IntrHandler->_ADC_ReadData
   951 ;;   _ChargeDetect_IntrHandler->i1_GPIO_ReadInputDataBit
   952 ;;   _DebounceTimer_IntrHandler->i1_GPIO_ReadInputDataBit
   953 ;;   i1_GPIO_WriteBit->i1_GPIO_ReadInputDataBit
   954 ;;
   955 ;; Critical Paths under _main in BANK0
   956 ;;
   957 ;;   _main->_charge_control
   958 ;;   _Motor_HandleStatusChangeEvt->_Motor_Start
   959 ;;   _charge_control->_Battery_Detect
   960 ;;   _Driver_Init->_LED_Init
   961 ;;   _Driver_Init->_KEY_Init
   962 ;;   _Motor_Start->_LED_DisplayMotorStatus
   963 ;;   _Battery_Detect->_Battery_HandleData
   964 ;;   _Charge_Init->_ChargeDetect_Init
   965 ;;   _Charge_Init->_ChargeCtrl_Init
   966 ;;   _EEPROM_StoreModeData->_EEPROM_Write
   967 ;;   _EEPROM_SetFlag->_EEPROM_Write
   968 ;;   _EEPROM_StoreMotorData->_EEPROM_Write
   969 ;;   _LED_UnderVoltageOutput->_GPIO_WriteBit
   970 ;;   _LED_DisplayMotorStatus->_GPIO_WriteBit
   971 ;;   _ChargeCtrl_Init->_GPIO_WriteBit
   972 ;;   _ChargeDetect_Init->_GPIO_ReadInputDataBit
   973 ;;   _ChargeDetect_Init->_GPIO_INTConfig
   974 ;;   _ChargeCtrl_Output->_GPIO_WriteBit
   975 ;;   _Motor_Stop->_GPIO_WriteBit
   976 ;;   _KEY_DeInit->_GPIO_Init
   977 ;;   _ChargeDetect_GetStatus->_GPIO_ReadInputDataBit
   978 ;;   _EEPROM_RestoreMotorData->_EEPROM_Read
   979 ;;   _EEPROM_RestoreDeviceModeData->_EEPROM_Read
   980 ;;   _EEPROM_GetFlag->_EEPROM_Read
   981 ;;   _LED_VoltageChargeOutput->_GPIO_WriteBit
   982 ;;   _EEPROM_Init->_EEPROM_Write
   983 ;;   _KEY_Init->_GPIO_INTConfig
   984 ;;   _LED_Init->_GPIO_WriteBit
   985 ;;
   986 ;; Critical Paths under _ISR in BANK0
   987 ;;
   988 ;;   None.
   989 ;;
   990 ;; Critical Paths under _main in BANK1
   991 ;;
   992 ;;   None.
   993 ;;
   994 ;; Critical Paths under _ISR in BANK1
   995 ;;
   996 ;;   None.
   997 ;;
   998 ;; Critical Paths under _main in BANK2
   999 ;;
  1000 ;;   None.
  1001 ;;
  1002 ;; Critical Paths under _ISR in BANK2
  1003 ;;
  1004 ;;   None.
  1005 ;;
  1006 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1007 ;;
  1008 ;;
  1009 ;;Call Graph Tables:
  1010 ;;
  1011 ;; ---------------------------------------------------------------------------------
  1012 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1013 ;; ---------------------------------------------------------------------------------
  1014 ;; (0) _main                                                 0     0      0    8242
  1015 ;;                        _EEPROM_Init
  1016 ;;                     _EEPROM_GetFlag
  1017 ;;       _EEPROM_RestoreDeviceModeData
  1018 ;;            _EEPROM_RestoreMotorData
  1019 ;;                         _Board_Init
  1020 ;;                        _Driver_Init
  1021 ;;                    _Motor_GetStatus
  1022 ;;        _Motor_HandleStatusChangeEvt
  1023 ;;             _ChargeDetect_GetStatus
  1024 ;;             _ChargeTimer_ResetCount
  1025 ;;                      _SetDeviceMode
  1026 ;;                     _Battery_Detect
  1027 ;;                           _LED_Init
  1028 ;;                         _KEY_DeInit
  1029 ;;                         _Motor_Stop
  1030 ;;                    _Motor_SetStatus
  1031 ;;           _MotorOperationTimer_Stop
  1032 ;;           _LEDTimer_DispRunLimitCmd
  1033 ;;                  _ChargeCtrl_Output
  1034 ;;            _LED_VoltageChargeOutput
  1035 ;;                           _ADC_Init
  1036 ;;                    _ChargeTimer_Cmd
  1037 ;;              _ChargeTimer_INTConfig
  1038 ;;                     _charge_control
  1039 ;;                      _GetDeviceMode
  1040 ;; ---------------------------------------------------------------------------------
  1041 ;; (1) _Motor_HandleStatusChangeEvt                          1     1      0     836
  1042 ;;                                              6 BANK0      1     1      0
  1043 ;;                _Motor_CheckRunLimit
  1044 ;;               _KEY_GetReleaseStatus
  1045 ;;                    _Motor_SetStatus
  1046 ;;                        _Motor_Start
  1047 ;;           _MotorOperationTimer_Stop
  1048 ;;           _MotorOperationTimer_Init
  1049 ;;       _SwitchModeTimer_GetINTStatus
  1050 ;;                         _Motor_Stop
  1051 ;;          _SwitchModeTimer_INTConfig
  1052 ;;                _SwitchModeTimer_Cmd
  1053 ;;           _LEDTimer_DispRunLimitCmd
  1054 ;;                 _KEY_GetPressStatus
  1055 ;;                      _GPIO_WriteBit
  1056 ;; ---------------------------------------------------------------------------------
  1057 ;; (1) _charge_control                                       2     2      0    2154
  1058 ;;                                             18 BANK0      2     2      0
  1059 ;;               _ChargeTimer_GetCount
  1060 ;;                     _Battery_Detect
  1061 ;;            _LED_VoltageChargeOutput
  1062 ;;                      _GPIO_WriteBit
  1063 ;; ---------------------------------------------------------------------------------
  1064 ;; (1) _Driver_Init                                          0     0      0    1830
  1065 ;;                           _LED_Init
  1066 ;;                           _KEY_Init
  1067 ;;                        _Charge_Init
  1068 ;;                           _ADC_Init
  1069 ;;                       _LEDTimer_Cmd
  1070 ;;                 _LEDTimer_INTConfig
  1071 ;;                        _EEPROM_Init
  1072 ;; ---------------------------------------------------------------------------------
  1073 ;; (2) _Motor_Start                                          1     1      0     374
  1074 ;;                                              5 BANK0      1     1      0
  1075 ;;             _LED_DisplayMotorStatus
  1076 ;;                         _Motor_Init
  1077 ;;                _SwitchModeTimer_Cmd
  1078 ;;          _SwitchModeTimer_INTConfig
  1079 ;; ---------------------------------------------------------------------------------
  1080 ;; (2) _Battery_Detect                                       3     3      0    1757
  1081 ;;                                             15 BANK0      3     3      0
  1082 ;;                 _Battery_HandleData
  1083 ;;                      _GetDeviceMode
  1084 ;;                     _EEPROM_SetFlag
  1085 ;;               _EEPROM_StoreModeData
  1086 ;;              _EEPROM_StoreMotorData
  1087 ;;             _LED_UnderVoltageOutput
  1088 ;;                           _LED_Init
  1089 ;;                         _KEY_DeInit
  1090 ;;                         _Motor_Stop
  1091 ;;                    _Motor_SetStatus
  1092 ;;           _MotorOperationTimer_Stop
  1093 ;;          _LEDTimer_DispUnderVoltCmd
  1094 ;;                      _GPIO_WriteBit
  1095 ;; ---------------------------------------------------------------------------------
  1096 ;; (2) _Charge_Init                                          0     0      0     835
  1097 ;;                  _ChargeDetect_Init
  1098 ;;                    _ChargeCtrl_Init
  1099 ;; ---------------------------------------------------------------------------------
  1100 ;; (3) _EEPROM_StoreModeData                                 0     0      0      44
  1101 ;;                       _EEPROM_Write
  1102 ;; ---------------------------------------------------------------------------------
  1103 ;; (3) _EEPROM_SetFlag                                       0     0      0      44
  1104 ;;                       _EEPROM_Write
  1105 ;; ---------------------------------------------------------------------------------
  1106 ;; (3) _EEPROM_StoreMotorData                                0     0      0      44
  1107 ;;                       _EEPROM_Write
  1108 ;; ---------------------------------------------------------------------------------
  1109 ;; (3) _LED_UnderVoltageOutput                               1     1      0     176
  1110 ;;                                              3 BANK0      1     1      0
  1111 ;;                      _GPIO_WriteBit
  1112 ;; ---------------------------------------------------------------------------------
  1113 ;; (3) _LED_DisplayMotorStatus                               2     1      1     198
  1114 ;;                                              3 BANK0      2     1      1
  1115 ;;                      _GPIO_WriteBit
  1116 ;; ---------------------------------------------------------------------------------
  1117 ;; (3) _ChargeCtrl_Init                                      2     2      0     361
  1118 ;;                                              3 BANK0      2     2      0
  1119 ;;                          _GPIO_Init
  1120 ;;                      _GPIO_WriteBit
  1121 ;; ---------------------------------------------------------------------------------
  1122 ;; (3) _ChargeDetect_Init                                    2     2      0     474
  1123 ;;                                              3 BANK0      2     2      0
  1124 ;;                          _GPIO_Init
  1125 ;;              _GPIO_ReadInputDataBit
  1126 ;;                     _GPIO_INTConfig
  1127 ;; ---------------------------------------------------------------------------------
  1128 ;; (1) _ChargeCtrl_Output                                    1     1      0     176
  1129 ;;                                              3 BANK0      1     1      0
  1130 ;;                      _GPIO_WriteBit
  1131 ;; ---------------------------------------------------------------------------------
  1132 ;; (3) _MotorOperationTimer_Stop                             0     0      0       0
  1133 ;;                _Motor_CheckRunLimit
  1134 ;; ---------------------------------------------------------------------------------
  1135 ;; (3) _Motor_Stop                                           0     0      0     154
  1136 ;;                      _GPIO_WriteBit
  1137 ;; ---------------------------------------------------------------------------------
  1138 ;; (3) _KEY_DeInit                                           2     2      0     207
  1139 ;;                                              2 BANK0      2     2      0
  1140 ;;                          _GPIO_Init
  1141 ;; ---------------------------------------------------------------------------------
  1142 ;; (1) _ChargeDetect_GetStatus                               2     2      0     136
  1143 ;;                                              3 BANK0      2     2      0
  1144 ;;              _GPIO_ReadInputDataBit
  1145 ;; ---------------------------------------------------------------------------------
  1146 ;; (1) _EEPROM_RestoreMotorData                              0     0      0      46
  1147 ;;                        _EEPROM_Read
  1148 ;; ---------------------------------------------------------------------------------
  1149 ;; (1) _EEPROM_RestoreDeviceModeData                         0     0      0      46
  1150 ;;                        _EEPROM_Read
  1151 ;; ---------------------------------------------------------------------------------
  1152 ;; (1) _EEPROM_GetFlag                                       0     0      0      46
  1153 ;;                        _EEPROM_Read
  1154 ;; ---------------------------------------------------------------------------------
  1155 ;; (2) _LED_VoltageChargeOutput                              1     1      0     176
  1156 ;;                                              3 BANK0      1     1      0
  1157 ;;                      _GPIO_WriteBit
  1158 ;; ---------------------------------------------------------------------------------
  1159 ;; (2) _EEPROM_Init                                          0     0      0      44
  1160 ;;                       _EEPROM_Write
  1161 ;; ---------------------------------------------------------------------------------
  1162 ;; (2) _KEY_Init                                             2     2      0     361
  1163 ;;                                              3 BANK0      2     2      0
  1164 ;;                          _GPIO_Init
  1165 ;;                     _GPIO_INTConfig
  1166 ;; ---------------------------------------------------------------------------------
  1167 ;; (3) _LED_Init                                             2     2      0     502
  1168 ;;                                              3 BANK0      2     2      0
  1169 ;;                          _GPIO_Init
  1170 ;;                      _GPIO_WriteBit
  1171 ;; ---------------------------------------------------------------------------------
  1172 ;; (3) _Battery_HandleData                                  15    13      2     252
  1173 ;;                                              0 BANK0     15    13      2
  1174 ;; ---------------------------------------------------------------------------------
  1175 ;; (2) _SwitchModeTimer_GetINTStatus                         0     0      0       0
  1176 ;; ---------------------------------------------------------------------------------
  1177 ;; (2) _MotorOperationTimer_Init                             1     1      0      44
  1178 ;;                                              0 BANK0      1     1      0
  1179 ;; ---------------------------------------------------------------------------------
  1180 ;; (4) _Motor_CheckRunLimit                                  0     0      0       0
  1181 ;; ---------------------------------------------------------------------------------
  1182 ;; (2) _SwitchModeTimer_INTConfig                            1     1      0      22
  1183 ;;                                              0 BANK0      1     1      0
  1184 ;; ---------------------------------------------------------------------------------
  1185 ;; (2) _SwitchModeTimer_Cmd                                  1     1      0      22
  1186 ;;                                              0 BANK0      1     1      0
  1187 ;; ---------------------------------------------------------------------------------
  1188 ;; (3) _Motor_Init                                           1     1      0      88
  1189 ;;                                              0 BANK0      1     1      0
  1190 ;; ---------------------------------------------------------------------------------
  1191 ;; (3) _LEDTimer_DispUnderVoltCmd                            1     1      0      22
  1192 ;;                                              0 BANK0      1     1      0
  1193 ;; ---------------------------------------------------------------------------------
  1194 ;; (2) _KEY_GetPressStatus                                   0     0      0       0
  1195 ;; ---------------------------------------------------------------------------------
  1196 ;; (2) _KEY_GetReleaseStatus                                 0     0      0       0
  1197 ;; ---------------------------------------------------------------------------------
  1198 ;; (2) _EEPROM_Read                                          2     2      0      46
  1199 ;;                                              0 BANK0      2     2      0
  1200 ;; ---------------------------------------------------------------------------------
  1201 ;; (4) _EEPROM_Write                                         2     1      1      44
  1202 ;;                                              0 BANK0      2     1      1
  1203 ;; ---------------------------------------------------------------------------------
  1204 ;; (4) _GPIO_INTConfig                                       3     1      2     154
  1205 ;;                                              0 BANK0      3     1      2
  1206 ;; ---------------------------------------------------------------------------------
  1207 ;; (2) _GPIO_ReadInputDataBit                                3     2      1     113
  1208 ;;                                              0 BANK0      3     2      1
  1209 ;; ---------------------------------------------------------------------------------
  1210 ;; (4) _GPIO_Init                                            2     1      1     154
  1211 ;;                                              0 BANK0      2     1      1
  1212 ;; ---------------------------------------------------------------------------------
  1213 ;; (1) _GetDeviceMode                                        0     0      0       0
  1214 ;; ---------------------------------------------------------------------------------
  1215 ;; (1) _ChargeTimer_INTConfig                                1     1      0      22
  1216 ;;                                              0 BANK0      1     1      0
  1217 ;; ---------------------------------------------------------------------------------
  1218 ;; (1) _ChargeTimer_Cmd                                      1     1      0      22
  1219 ;;                                              0 BANK0      1     1      0
  1220 ;; ---------------------------------------------------------------------------------
  1221 ;; (1) _LEDTimer_DispRunLimitCmd                             1     1      0      22
  1222 ;;                                              0 BANK0      1     1      0
  1223 ;; ---------------------------------------------------------------------------------
  1224 ;; (3) _Motor_SetStatus                                      1     1      0      22
  1225 ;;                                              0 BANK0      1     1      0
  1226 ;; ---------------------------------------------------------------------------------
  1227 ;; (1) _SetDeviceMode                                        1     1      0      22
  1228 ;;                                              0 BANK0      1     1      0
  1229 ;; ---------------------------------------------------------------------------------
  1230 ;; (1) _ChargeTimer_ResetCount                               0     0      0       0
  1231 ;; ---------------------------------------------------------------------------------
  1232 ;; (1) _Motor_GetStatus                                      0     0      0       0
  1233 ;; ---------------------------------------------------------------------------------
  1234 ;; (2) _GPIO_WriteBit                                        3     1      2     154
  1235 ;;                                              0 BANK0      3     1      2
  1236 ;; ---------------------------------------------------------------------------------
  1237 ;; (2) _ChargeTimer_GetCount                                 2     0      2       0
  1238 ;;                                              0 BANK0      2     0      2
  1239 ;; ---------------------------------------------------------------------------------
  1240 ;; (2) _LEDTimer_INTConfig                                   1     1      0      22
  1241 ;;                                              0 BANK0      1     1      0
  1242 ;; ---------------------------------------------------------------------------------
  1243 ;; (2) _LEDTimer_Cmd                                         2     1      1      44
  1244 ;;                                              0 BANK0      2     1      1
  1245 ;; ---------------------------------------------------------------------------------
  1246 ;; (1) _ADC_Init                                             2     2      0      22
  1247 ;;                                              0 BANK0      2     2      0
  1248 ;; ---------------------------------------------------------------------------------
  1249 ;; (1) _Board_Init                                           0     0      0       0
  1250 ;; ---------------------------------------------------------------------------------
  1251 ;; Estimated maximum stack depth 4
  1252 ;; ---------------------------------------------------------------------------------
  1253 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1254 ;; ---------------------------------------------------------------------------------
  1255 ;; (5) _ISR                                                  4     4      0    3829
  1256 ;;                                              7 COMMON     4     4      0
  1257 ;;                    _KEY_IntrHandler
  1258 ;;          _DebounceTimer_IntrHandler
  1259 ;;                    i1_GetDeviceMode
  1260 ;;        _SwitchModeTimer_IntrHandler
  1261 ;;            _ChargeTimer_IntrHandler
  1262 ;;         _MotorOperTimer_IntrHandler
  1263 ;;               _LEDTimer_IntrHandler
  1264 ;;           _ChargeDetect_IntrHandler
  1265 ;;                    _ADC_IntrHandler
  1266 ;; ---------------------------------------------------------------------------------
  1267 ;; (6) _LEDTimer_IntrHandler                                 0     0      0    1859
  1268 ;;            i1_GPIO_ReadInputDataBit
  1269 ;;           i1_LED_UnderVoltageOutput
  1270 ;;                _LED_DisplayRunLimit
  1271 ;;                         _ADC_Enable
  1272 ;; ---------------------------------------------------------------------------------
  1273 ;; (6) _MotorOperTimer_IntrHandler                           0     0      0    1181
  1274 ;;              i1_Motor_CheckRunLimit
  1275 ;;                            ___lbmod
  1276 ;;         i1_MotorOperationTimer_Init
  1277 ;;                       i1_Motor_Stop
  1278 ;;         i1_MotorOperationTimer_Stop
  1279 ;;                  i1_Motor_SetStatus
  1280 ;;                       i1_Motor_Init
  1281 ;; ---------------------------------------------------------------------------------
  1282 ;; (7) i1_MotorOperationTimer_Stop                           0     0      0       0
  1283 ;;              i1_Motor_CheckRunLimit
  1284 ;; ---------------------------------------------------------------------------------
  1285 ;; (7) i1_Motor_Stop                                         0     0      0     511
  1286 ;;                    i1_GPIO_WriteBit
  1287 ;; ---------------------------------------------------------------------------------
  1288 ;; (7) i1_LED_UnderVoltageOutput                             1     1      0     584
  1289 ;;                                              6 COMMON     1     1      0
  1290 ;;                    i1_GPIO_WriteBit
  1291 ;; ---------------------------------------------------------------------------------
  1292 ;; (7) _LED_DisplayRunLimit                                  0     0      0     882
  1293 ;;            i1_GPIO_ReadInputDataBit
  1294 ;;                    i1_GPIO_WriteBit
  1295 ;; ---------------------------------------------------------------------------------
  1296 ;; (6) _ADC_IntrHandler                                      0     0      0      47
  1297 ;;                       _ADC_ReadData
  1298 ;; ---------------------------------------------------------------------------------
  1299 ;; (6) _ChargeDetect_IntrHandler                             0     0      0     371
  1300 ;;            i1_GPIO_ReadInputDataBit
  1301 ;; ---------------------------------------------------------------------------------
  1302 ;; (6) _DebounceTimer_IntrHandler                            0     0      0     371
  1303 ;;            i1_GPIO_ReadInputDataBit
  1304 ;; ---------------------------------------------------------------------------------
  1305 ;; (6) _KEY_IntrHandler                                      0     0      0       0
  1306 ;;                          _TIM1_Init
  1307 ;; ---------------------------------------------------------------------------------
  1308 ;; (6) i1_GetDeviceMode                                      0     0      0       0
  1309 ;; ---------------------------------------------------------------------------------
  1310 ;; (7) i1_MotorOperationTimer_Init                           1     1      0     146
  1311 ;;                                              0 COMMON     1     1      0
  1312 ;; ---------------------------------------------------------------------------------
  1313 ;; (8) i1_Motor_CheckRunLimit                                0     0      0       0
  1314 ;; ---------------------------------------------------------------------------------
  1315 ;; (7) i1_Motor_SetStatus                                    1     1      0      73
  1316 ;;                                              0 COMMON     1     1      0
  1317 ;; ---------------------------------------------------------------------------------
  1318 ;; (7) i1_Motor_Init                                         1     1      0     292
  1319 ;;                                              0 COMMON     1     1      0
  1320 ;; ---------------------------------------------------------------------------------
  1321 ;; (7) i1_GPIO_ReadInputDataBit                              3     2      1     371
  1322 ;;                                              0 COMMON     3     2      1
  1323 ;; ---------------------------------------------------------------------------------
  1324 ;; (8) i1_GPIO_WriteBit                                      3     1      2     511
  1325 ;;                                              3 COMMON     3     1      2
  1326 ;;            i1_GPIO_ReadInputDataBit (ARG)
  1327 ;; ---------------------------------------------------------------------------------
  1328 ;; (7) ___lbmod                                              5     4      1     159
  1329 ;;                                              0 COMMON     5     4      1
  1330 ;; ---------------------------------------------------------------------------------
  1331 ;; (7) _ADC_ReadData                                         5     3      2      47
  1332 ;;                                              0 COMMON     5     3      2
  1333 ;; ---------------------------------------------------------------------------------
  1334 ;; (7) _ADC_Enable                                           2     2      0      22
  1335 ;;                                              0 COMMON     2     2      0
  1336 ;; ---------------------------------------------------------------------------------
  1337 ;; (7) _TIM1_Init                                            0     0      0       0
  1338 ;; ---------------------------------------------------------------------------------
  1339 ;; (6) _ChargeTimer_IntrHandler                              0     0      0       0
  1340 ;; ---------------------------------------------------------------------------------
  1341 ;; (6) _SwitchModeTimer_IntrHandler                          0     0      0       0
  1342 ;; ---------------------------------------------------------------------------------
  1343 ;; Estimated maximum stack depth 8
  1344 ;; ---------------------------------------------------------------------------------
  1345 ;; Call Graph Graphs:
  1346 ;; _main (ROOT)
  1347 ;;   _EEPROM_Init
  1348 ;;     _EEPROM_Write
  1349 ;;   _EEPROM_GetFlag
  1350 ;;     _EEPROM_Read
  1351 ;;   _EEPROM_RestoreDeviceModeData
  1352 ;;     _EEPROM_Read
  1353 ;;   _EEPROM_RestoreMotorData
  1354 ;;     _EEPROM_Read
  1355 ;;   _Board_Init
  1356 ;;   _Driver_Init
  1357 ;;     _LED_Init
  1358 ;;       _GPIO_Init
  1359 ;;       _GPIO_WriteBit
  1360 ;;     _KEY_Init
  1361 ;;       _GPIO_Init
  1362 ;;       _GPIO_INTConfig
  1363 ;;     _Charge_Init
  1364 ;;       _ChargeDetect_Init
  1365 ;;         _GPIO_Init
  1366 ;;         _GPIO_ReadInputDataBit
  1367 ;;         _GPIO_INTConfig
  1368 ;;       _ChargeCtrl_Init
  1369 ;;         _GPIO_Init
  1370 ;;         _GPIO_WriteBit
  1371 ;;     _ADC_Init
  1372 ;;     _LEDTimer_Cmd
  1373 ;;     _LEDTimer_INTConfig
  1374 ;;     _EEPROM_Init
  1375 ;;       _EEPROM_Write
  1376 ;;   _Motor_GetStatus
  1377 ;;   _Motor_HandleStatusChangeEvt
  1378 ;;     _Motor_CheckRunLimit
  1379 ;;     _KEY_GetReleaseStatus
  1380 ;;     _Motor_SetStatus
  1381 ;;     _Motor_Start
  1382 ;;       _LED_DisplayMotorStatus
  1383 ;;         _GPIO_WriteBit
  1384 ;;       _Motor_Init
  1385 ;;       _SwitchModeTimer_Cmd
  1386 ;;       _SwitchModeTimer_INTConfig
  1387 ;;     _MotorOperationTimer_Stop
  1388 ;;       _Motor_CheckRunLimit
  1389 ;;     _MotorOperationTimer_Init
  1390 ;;     _SwitchModeTimer_GetINTStatus
  1391 ;;     _Motor_Stop
  1392 ;;       _GPIO_WriteBit
  1393 ;;     _SwitchModeTimer_INTConfig
  1394 ;;     _SwitchModeTimer_Cmd
  1395 ;;     _LEDTimer_DispRunLimitCmd
  1396 ;;     _KEY_GetPressStatus
  1397 ;;     _GPIO_WriteBit
  1398 ;;   _ChargeDetect_GetStatus
  1399 ;;     _GPIO_ReadInputDataBit
  1400 ;;   _ChargeTimer_ResetCount
  1401 ;;   _SetDeviceMode
  1402 ;;   _Battery_Detect
  1403 ;;     _Battery_HandleData
  1404 ;;     _GetDeviceMode
  1405 ;;     _EEPROM_SetFlag
  1406 ;;       _EEPROM_Write
  1407 ;;     _EEPROM_StoreModeData
  1408 ;;       _EEPROM_Write
  1409 ;;     _EEPROM_StoreMotorData
  1410 ;;       _EEPROM_Write
  1411 ;;     _LED_UnderVoltageOutput
  1412 ;;       _GPIO_WriteBit
  1413 ;;     _LED_Init
  1414 ;;       _GPIO_Init
  1415 ;;       _GPIO_WriteBit
  1416 ;;     _KEY_DeInit
  1417 ;;       _GPIO_Init
  1418 ;;     _Motor_Stop
  1419 ;;       _GPIO_WriteBit
  1420 ;;     _Motor_SetStatus
  1421 ;;     _MotorOperationTimer_Stop
  1422 ;;       _Motor_CheckRunLimit
  1423 ;;     _LEDTimer_DispUnderVoltCmd
  1424 ;;     _GPIO_WriteBit
  1425 ;;   _LED_Init
  1426 ;;     _GPIO_Init
  1427 ;;     _GPIO_WriteBit
  1428 ;;   _KEY_DeInit
  1429 ;;     _GPIO_Init
  1430 ;;   _Motor_Stop
  1431 ;;     _GPIO_WriteBit
  1432 ;;   _Motor_SetStatus
  1433 ;;   _MotorOperationTimer_Stop
  1434 ;;     _Motor_CheckRunLimit
  1435 ;;   _LEDTimer_DispRunLimitCmd
  1436 ;;   _ChargeCtrl_Output
  1437 ;;     _GPIO_WriteBit
  1438 ;;   _LED_VoltageChargeOutput
  1439 ;;     _GPIO_WriteBit
  1440 ;;   _ADC_Init
  1441 ;;   _ChargeTimer_Cmd
  1442 ;;   _ChargeTimer_INTConfig
  1443 ;;   _charge_control
  1444 ;;     _ChargeTimer_GetCount
  1445 ;;     _Battery_Detect
  1446 ;;       _Battery_HandleData
  1447 ;;       _GetDeviceMode
  1448 ;;       _EEPROM_SetFlag
  1449 ;;         _EEPROM_Write
  1450 ;;       _EEPROM_StoreModeData
  1451 ;;         _EEPROM_Write
  1452 ;;       _EEPROM_StoreMotorData
  1453 ;;         _EEPROM_Write
  1454 ;;       _LED_UnderVoltageOutput
  1455 ;;         _GPIO_WriteBit
  1456 ;;       _LED_Init
  1457 ;;         _GPIO_Init
  1458 ;;         _GPIO_WriteBit
  1459 ;;       _KEY_DeInit
  1460 ;;         _GPIO_Init
  1461 ;;       _Motor_Stop
  1462 ;;         _GPIO_WriteBit
  1463 ;;       _Motor_SetStatus
  1464 ;;       _MotorOperationTimer_Stop
  1465 ;;         _Motor_CheckRunLimit
  1466 ;;       _LEDTimer_DispUnderVoltCmd
  1467 ;;       _GPIO_WriteBit
  1468 ;;     _LED_VoltageChargeOutput
  1469 ;;       _GPIO_WriteBit
  1470 ;;     _GPIO_WriteBit
  1471 ;;   _GetDeviceMode
  1472 ;;
  1473 ;; _ISR (ROOT)
  1474 ;;   _KEY_IntrHandler
  1475 ;;     _TIM1_Init
  1476 ;;   _DebounceTimer_IntrHandler
  1477 ;;     i1_GPIO_ReadInputDataBit
  1478 ;;   i1_GetDeviceMode
  1479 ;;   _SwitchModeTimer_IntrHandler
  1480 ;;   _ChargeTimer_IntrHandler
  1481 ;;   _MotorOperTimer_IntrHandler
  1482 ;;     i1_Motor_CheckRunLimit
  1483 ;;     ___lbmod
  1484 ;;     i1_MotorOperationTimer_Init
  1485 ;;     i1_Motor_Stop
  1486 ;;       i1_GPIO_WriteBit
  1487 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1488 ;;     i1_MotorOperationTimer_Stop
  1489 ;;       i1_Motor_CheckRunLimit
  1490 ;;     i1_Motor_SetStatus
  1491 ;;     i1_Motor_Init
  1492 ;;   _LEDTimer_IntrHandler
  1493 ;;     i1_GPIO_ReadInputDataBit
  1494 ;;     i1_LED_UnderVoltageOutput
  1495 ;;       i1_GPIO_WriteBit
  1496 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1497 ;;     _LED_DisplayRunLimit
  1498 ;;       i1_GPIO_ReadInputDataBit
  1499 ;;       i1_GPIO_WriteBit
  1500 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1501 ;;     _ADC_Enable
  1502 ;;   _ChargeDetect_IntrHandler
  1503 ;;     i1_GPIO_ReadInputDataBit
  1504 ;;   _ADC_IntrHandler
  1505 ;;     _ADC_ReadData
  1506 ;;
  1507 ;; Address spaces:
  1508 ;;Name               Size   Autos  Total    Cost      Usage
  1509 ;;SFR3                 0      0       0       4        0.0%
  1510 ;;BITSFR3              0      0       0       4        0.0%
  1511 ;;BANK2               50      0       0       7        0.0%
  1512 ;;BITBANK2            50      0       0       6        0.0%
  1513 ;;SFR2                 0      0       0       5        0.0%
  1514 ;;BITSFR2              0      0       0       5        0.0%
  1515 ;;SFR1                 0      0       0       2        0.0%
  1516 ;;BITSFR1              0      0       0       2        0.0%
  1517 ;;BANK1               50      0       0       5        0.0%
  1518 ;;BITBANK1            50      0       0       4        0.0%
  1519 ;;CODE                 0      0       0       0        0.0%
  1520 ;;DATA                 0      0      54      10        0.0%
  1521 ;;ABS                  0      0      48       8        0.0%
  1522 ;;NULL                 0      0       0       0        0.0%
  1523 ;;STACK                0      0       C       2        0.0%
  1524 ;;BANK0               50     14      3A       3       72.5%
  1525 ;;BITBANK0            50      0       0       9        0.0%
  1526 ;;SFR0                 0      0       0       1        0.0%
  1527 ;;BITSFR0              0      0       0       1        0.0%
  1528 ;;COMMON               E      B       E       1      100.0%
  1529 ;;BITCOMMON            E      0       0       0        0.0%
  1530 ;;EEDATA             100      0       0       0        0.0%
  1531                           
  1532                           
  1533 ;; *************** function _main *****************
  1534 ;; Defined at:
  1535 ;;		line 108 in file "main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 17F/0
  1546 ;;		On exit  : 60/0
  1547 ;;		Unchanged: FFE00/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1549 ;;      Params:         0       0       0       0
  1550 ;;      Locals:         0       0       0       0
  1551 ;;      Temps:          0       0       0       0
  1552 ;;      Totals:         0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels required when called:    8
  1555 ;; This function calls:
  1556 ;;		_EEPROM_Init
  1557 ;;		_EEPROM_GetFlag
  1558 ;;		_EEPROM_RestoreDeviceModeData
  1559 ;;		_EEPROM_RestoreMotorData
  1560 ;;		_Board_Init
  1561 ;;		_Driver_Init
  1562 ;;		_Motor_GetStatus
  1563 ;;		_Motor_HandleStatusChangeEvt
  1564 ;;		_ChargeDetect_GetStatus
  1565 ;;		_ChargeTimer_ResetCount
  1566 ;;		_SetDeviceMode
  1567 ;;		_Battery_Detect
  1568 ;;		_LED_Init
  1569 ;;		_KEY_DeInit
  1570 ;;		_Motor_Stop
  1571 ;;		_Motor_SetStatus
  1572 ;;		_MotorOperationTimer_Stop
  1573 ;;		_LEDTimer_DispRunLimitCmd
  1574 ;;		_ChargeCtrl_Output
  1575 ;;		_LED_VoltageChargeOutput
  1576 ;;		_ADC_Init
  1577 ;;		_ChargeTimer_Cmd
  1578 ;;		_ChargeTimer_INTConfig
  1579 ;;		_charge_control
  1580 ;;		_GetDeviceMode
  1581 ;; This function is called by:
  1582 ;;		Startup code after reset
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585  0622                     _main:	
  1586                           
  1587                           ;main.c: 111: EEPROM_Init();
  1588                           
  1589                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1590  0622  118A  276C  118A   	fcall	_EEPROM_Init
  1591                           
  1592                           ;main.c: 114: if(EEPROM_GetFlag() == 0x01)
  1593  0625  118A  26FA  118A   	fcall	_EEPROM_GetFlag
  1594  0628  3A01               	xorlw	1
  1595  0629  1D03               	skipz
  1596  062A  2E92               	goto	l15418
  1597                           
  1598                           ;main.c: 115: {
  1599                           ;main.c: 116: EEPROM_RestoreDeviceModeData();
  1600  062B  118A  26FC  118A   	fcall	_EEPROM_RestoreDeviceModeData
  1601                           
  1602                           ;main.c: 117: EEPROM_RestoreMotorData();
  1603  062E  118A  2700  118A   	fcall	_EEPROM_RestoreMotorData
  1604  0631  2E92               	goto	l15418
  1605  0632                     l15376:	
  1606                           
  1607                           ;main.c: 126: {
  1608                           ;main.c: 127: Board_Init();
  1609  0632  118A  271E  118A   	fcall	_Board_Init
  1610                           
  1611                           ;main.c: 128: Driver_Init();
  1612  0635  118A  2028  118A   	fcall	_Driver_Init
  1613  0638                     l15380:	
  1614                           
  1615                           ;main.c: 131: {
  1616                           ;main.c: 132: Motor_HandleStatusChangeEvt(Motor_GetStatus());
  1617  0638  118A  279B  118A   	fcall	_Motor_GetStatus
  1618  063B  118A  2169  118A   	fcall	_Motor_HandleStatusChangeEvt
  1619                           
  1620                           ;main.c: 135: if(ChargeDetect_GetStatus())
  1621  063E  118A  26A1  118A   	fcall	_ChargeDetect_GetStatus
  1622  0641  3A00               	xorlw	0
  1623  0642  1903               	skipnz
  1624  0643  2E4C               	goto	l15386
  1625                           
  1626                           ;main.c: 136: {
  1627                           ;main.c: 138: ChargeTimer_ResetCount();
  1628  0644  118A  2798  118A   	fcall	_ChargeTimer_ResetCount
  1629                           
  1630                           ;main.c: 139: SetDeviceMode(CHARGE_MODE);
  1631  0647  3001               	movlw	1
  1632  0648  118A  2794  118A   	fcall	_SetDeviceMode
  1633                           
  1634                           ;main.c: 140: break;
  1635  064B  2E92               	goto	l15418
  1636  064C                     l15386:	
  1637                           
  1638                           ;main.c: 141: }
  1639                           ;main.c: 144: Battery_Detect();
  1640  064C  118A  20AA  118A   	fcall	_Battery_Detect
  1641  064F  2E38               	goto	l15380
  1642  0650                     l15388:	
  1643                           
  1644                           ;main.c: 149: {
  1645                           ;main.c: 151: LED_Init();
  1646  0650  118A  2101  118A   	fcall	_LED_Init
  1647                           
  1648                           ;main.c: 152: KEY_DeInit();
  1649  0653  118A  239F  118A   	fcall	_KEY_DeInit
  1650                           
  1651                           ;main.c: 153: Motor_Stop();
  1652  0656  118A  223F  118A   	fcall	_Motor_Stop
  1653                           
  1654                           ;main.c: 154: Motor_SetStatus(MOTOR_MODE_STOP);
  1655  0659  3001               	movlw	1
  1656  065A  118A  2212  118A   	fcall	_Motor_SetStatus
  1657                           
  1658                           ;main.c: 155: MotorOperationTimer_Stop();
  1659  065D  118A  221D  118A   	fcall	_MotorOperationTimer_Stop
  1660                           
  1661                           ;main.c: 156: LEDTimer_DispRunLimitCmd(DISABLE);
  1662  0660  3000               	movlw	0
  1663  0661  118A  22E1  118A   	fcall	_LEDTimer_DispRunLimitCmd
  1664                           
  1665                           ;main.c: 158: ChargeCtrl_Output(Bit_SET);
  1666  0664  3001               	movlw	1
  1667  0665  118A  278C  118A   	fcall	_ChargeCtrl_Output
  1668                           
  1669                           ;main.c: 159: LED_VoltageChargeOutput(Bit_SET);
  1670  0668  3001               	movlw	1
  1671  0669  118A  23E5  118A   	fcall	_LED_VoltageChargeOutput
  1672                           
  1673                           ;main.c: 162: ADC_Init((0x06));
  1674  066C  3006               	movlw	6
  1675  066D  118A  203B  118A   	fcall	_ADC_Init
  1676                           
  1677                           ;main.c: 165: ChargeTimer_Cmd(ENABLE);
  1678  0670  3001               	movlw	1
  1679  0671  118A  2736  118A   	fcall	_ChargeTimer_Cmd
  1680                           
  1681                           ;main.c: 166: ChargeTimer_INTConfig(ENABLE);
  1682  0674  3001               	movlw	1
  1683  0675  118A  2778  118A   	fcall	_ChargeTimer_INTConfig
  1684  0678                     l15408:	
  1685                           
  1686                           ;main.c: 169: {
  1687                           ;main.c: 170: charge_control();
  1688  0678  118A  207F  118A   	fcall	_charge_control
  1689                           
  1690                           ;main.c: 173: if(!ChargeDetect_GetStatus())
  1691  067B  118A  26A1  118A   	fcall	_ChargeDetect_GetStatus
  1692  067E  3800               	iorlw	0
  1693  067F  1D03               	skipz
  1694  0680  2E78               	goto	l15408
  1695                           
  1696                           ;main.c: 174: {
  1697                           ;main.c: 176: ChargeTimer_Cmd(DISABLE);
  1698  0681  3000               	movlw	0
  1699  0682  118A  2736  118A   	fcall	_ChargeTimer_Cmd
  1700                           
  1701                           ;main.c: 177: ChargeTimer_INTConfig(DISABLE);
  1702  0685  3000               	movlw	0
  1703  0686  118A  2778  118A   	fcall	_ChargeTimer_INTConfig
  1704                           
  1705                           ;main.c: 179: SetDeviceMode(RUN_MODE);
  1706  0689  3000               	movlw	0
  1707  068A  118A  2794  118A   	fcall	_SetDeviceMode
  1708                           
  1709                           ;main.c: 180: break;
  1710  068D  2E92               	goto	l15418
  1711  068E                     l15412:	
  1712                           
  1713                           ;main.c: 187: {
  1714                           ;main.c: 189: LED_Init();
  1715  068E  118A  2101  118A   	fcall	_LED_Init
  1716  0691  0063               	sleep	;#
  1717  0692                     l15418:	
  1718                           ;main.c: 192: break;
  1719                           
  1720  0692  118A  2300  118A   	fcall	_GetDeviceMode
  1721                           
  1722                           ; Switch size 1, requested type "space"
  1723                           ; Number of cases is 3, Range of values is 0 to 2
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           10     6 (average)
  1727                           ; direct_byte           13     7 (fixed)
  1728                           ; jumptable            260     6 (fixed)
  1729                           ; rangetable             7     6 (fixed)
  1730                           ; spacedrange           12     9 (fixed)
  1731                           ; locatedrange           3     3 (fixed)
  1732                           ;	Chosen strategy is simple_byte
  1733  0695  3A00               	xorlw	0	; case 0
  1734  0696  1903               	skipnz
  1735  0697  2E32               	goto	l15376
  1736  0698  3A01               	xorlw	1	; case 1
  1737  0699  1903               	skipnz
  1738  069A  2E50               	goto	l15388
  1739  069B  3A03               	xorlw	3	; case 2
  1740  069C  1903               	skipnz
  1741  069D  2E8E               	goto	l15412
  1742  069E  2E92               	goto	l15418
  1743  069F  118A  2811         	ljmp	start
  1744  06A1                     __end_of_main:	
  1745                           
  1746                           	psect	text1662
  1747  074D                     __ptext1662:	
  1748 ;; =============== function _LED_DisplayMotorStatus ends ============
  1749                           
  1750                           
  1751 ;; *************** function _ChargeCtrl_Init *****************
  1752 ;; Defined at:
  1753 ;;		line 39 in file "ms83fxx02_charge.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  1758 ;; Return value:  Size  Location     Type
  1759 ;;		None               void
  1760 ;; Registers used:
  1761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 160/0
  1764 ;;		On exit  : 160/0
  1765 ;;		Unchanged: FFE9F/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1767 ;;      Params:         0       0       0       0
  1768 ;;      Locals:         0       2       0       0
  1769 ;;      Temps:          0       0       0       0
  1770 ;;      Totals:         0       2       0       0
  1771 ;;Total ram usage:        2 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    5
  1774 ;; This function calls:
  1775 ;;		_GPIO_Init
  1776 ;;		_GPIO_WriteBit
  1777 ;; This function is called by:
  1778 ;;		_Charge_Init
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781  074D                     _ChargeCtrl_Init:	
  1782  074D                     l15194:	
  1783                           ; Regs used in _ChargeCtrl_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1784                           
  1785  074D  3080               	movlw	128
  1786                           
  1787                           ;ms83fxx02_charge.c: 40: GPIO_InitTypeDef GPIO_InitStruct;
  1788                           ;ms83fxx02_charge.c: 42: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  1789  074E  01C8               	clrf	ChargeCtrl_Init@GPIO_InitStruct+1
  1790  074F  0AC8               	incf	ChargeCtrl_Init@GPIO_InitStruct+1,f
  1791                           
  1792                           ;ms83fxx02_charge.c: 43: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000080);
  1793  0750  00C7               	movwf	ChargeCtrl_Init@GPIO_InitStruct
  1794                           
  1795                           ;ms83fxx02_charge.c: 44: GPIO_Init(GPIOA, &GPIO_InitStruct);
  1796  0751  3047               	movlw	ChargeCtrl_Init@GPIO_InitStruct& (0+255)
  1797  0752  00C4               	movwf	?_GPIO_Init
  1798  0753  3000               	movlw	0
  1799  0754  118A  2141         	fcall	_GPIO_Init
  1800                           
  1801                           ;ms83fxx02_charge.c: 45: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), Bit_RESET);
  1802  0756  3080               	movlw	128
  1803  0757  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0758  00C4               	movwf	?_GPIO_WriteBit
  1805  0759  3000               	movlw	0
  1806  075A  01C5               	clrf	?_GPIO_WriteBit+1
  1807  075B  118A  2A29         	ljmp	_GPIO_WriteBit
  1808  075D                     __end_of_ChargeCtrl_Init:	
  1809                           
  1810                           	psect	text1663
  1811  0013                     __ptext1663:	
  1812 ;; =============== function _ChargeCtrl_Init ends ============
  1813                           
  1814                           
  1815 ;; *************** function _ChargeDetect_Init *****************
  1816 ;; Defined at:
  1817 ;;		line 27 in file "ms83fxx02_charge.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  1822 ;; Return value:  Size  Location     Type
  1823 ;;		None               void
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 160/0
  1828 ;;		On exit  : 160/0
  1829 ;;		Unchanged: FFE9F/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1831 ;;      Params:         0       0       0       0
  1832 ;;      Locals:         0       2       0       0
  1833 ;;      Temps:          0       0       0       0
  1834 ;;      Totals:         0       2       0       0
  1835 ;;Total ram usage:        2 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    5
  1838 ;; This function calls:
  1839 ;;		_GPIO_Init
  1840 ;;		_GPIO_ReadInputDataBit
  1841 ;;		_GPIO_INTConfig
  1842 ;; This function is called by:
  1843 ;;		_Charge_Init
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846  0013                     _ChargeDetect_Init:	
  1847  0013  3010               	movlw	16
  1848                           
  1849                           ;ms83fxx02_charge.c: 28: GPIO_InitTypeDef GPIO_InitStruct;
  1850                           ;ms83fxx02_charge.c: 30: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  1851                           
  1852                           ; Regs used in _ChargeDetect_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1853  0014  01C8               	clrf	ChargeDetect_Init@GPIO_InitStruct+1
  1854                           
  1855                           ;ms83fxx02_charge.c: 31: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000010);
  1856  0015  00C7               	movwf	ChargeDetect_Init@GPIO_InitStruct
  1857                           
  1858                           ;ms83fxx02_charge.c: 32: GPIO_Init(GPIOA, &GPIO_InitStruct);
  1859  0016  3047               	movlw	ChargeDetect_Init@GPIO_InitStruct& (0+255)
  1860  0017  00C4               	movwf	?_GPIO_Init
  1861  0018  3000               	movlw	0
  1862  0019  2141               	fcall	_GPIO_Init
  1863                           
  1864                           ;ms83fxx02_charge.c: 34: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
  1865  001A  3010               	movlw	16
  1866  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1867  001C  00C4               	movwf	?_GPIO_ReadInputDataBit
  1868  001D  3000               	movlw	0
  1869  001E  118A  26C1  118A   	fcall	_GPIO_ReadInputDataBit
  1870                           
  1871                           ;ms83fxx02_charge.c: 35: GPIO_INTConfig(GPIOA, ((uint8_t)0x00000010), ENABLE);
  1872  0021  3010               	movlw	16
  1873  0022  00C4               	movwf	?_GPIO_INTConfig
  1874  0023  3000               	movlw	0
  1875  0024  01C5               	clrf	?_GPIO_INTConfig+1
  1876  0025  0AC5               	incf	?_GPIO_INTConfig+1,f
  1877  0026  118A  2ED5         	ljmp	_GPIO_INTConfig
  1878  0028                     __end_of_ChargeDetect_Init:	
  1879  0028                     __ptext1653:	
  1880 ;; =============== function _charge_control ends ============
  1881                           
  1882                           
  1883 ;; *************** function _Driver_Init *****************
  1884 ;; Defined at:
  1885 ;;		line 57 in file "main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 60/20
  1896 ;;		On exit  : 60/20
  1897 ;;		Unchanged: FFE00/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1899 ;;      Params:         0       0       0       0
  1900 ;;      Locals:         0       0       0       0
  1901 ;;      Temps:          0       0       0       0
  1902 ;;      Totals:         0       0       0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    7
  1906 ;; This function calls:
  1907 ;;		_LED_Init
  1908 ;;		_KEY_Init
  1909 ;;		_Charge_Init
  1910 ;;		_ADC_Init
  1911 ;;		_LEDTimer_Cmd
  1912 ;;		_LEDTimer_INTConfig
  1913 ;;		_EEPROM_Init
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918  0028                     _Driver_Init:	
  1919                           
  1920                           ;main.c: 59: LED_Init();
  1921                           
  1922                           ; Regs used in _Driver_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1923  0028  2101  118A         	fcall	_LED_Init
  1924                           
  1925                           ;main.c: 62: KEY_Init();
  1926  002A  206F  118A         	fcall	_KEY_Init
  1927                           
  1928                           ;main.c: 65: Charge_Init();
  1929  002C  23EC  118A         	fcall	_Charge_Init
  1930                           
  1931                           ;main.c: 68: ADC_Init((0x06));
  1932  002E  3006               	movlw	6
  1933  002F  203B  118A         	fcall	_ADC_Init
  1934                           
  1935                           ;main.c: 70: LEDTimer_Cmd(TIM_PERIOD_0_33ms, ENABLE);
  1936  0031  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0032  3002               	movlw	2
  1938  0033  01C4               	clrf	?_LEDTimer_Cmd
  1939  0034  0AC4               	incf	?_LEDTimer_Cmd,f
  1940  0035  2051  118A         	fcall	_LEDTimer_Cmd
  1941                           
  1942                           ;main.c: 71: LEDTimer_INTConfig(ENABLE);
  1943  0037  3001               	movlw	1
  1944  0038  23EF               	fcall	_LEDTimer_INTConfig
  1945                           
  1946                           ;main.c: 74: EEPROM_Init();
  1947  0039  118A  2F6C         	ljmp	l15122
  1948  003B                     __end_of_Driver_Init:	
  1949  003B                     __ptext1703:	
  1950 ;; =============== function _LEDTimer_Cmd ends ============
  1951                           
  1952                           
  1953 ;; *************** function _ADC_Init *****************
  1954 ;; Defined at:
  1955 ;;		line 77 in file "ms83fxx02_pwr.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  channel         1    wreg     unsigned char 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  channel         1    1[BANK0 ] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0
  1964 ;; Tracked objects:
  1965 ;;		On entry : 160/0
  1966 ;;		On exit  : 160/20
  1967 ;;		Unchanged: FFE9F/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1969 ;;      Params:         0       0       0       0
  1970 ;;      Locals:         0       1       0       0
  1971 ;;      Temps:          0       1       0       0
  1972 ;;      Totals:         0       2       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    4
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_Driver_Init
  1980 ;;		_main
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983  003B                     _ADC_Init:	
  1984                           
  1985                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  1986                           ;ADC_Init@channel stored from wreg
  1987  003B  00C5               	movwf	ADC_Init@channel
  1988                           
  1989                           ;ms83fxx02_pwr.c: 79: ANSEL |= (0x01 << channel);
  1990  003C  3001               	movlw	1
  1991  003D  00C4               	movwf	??_ADC_Init
  1992  003E  0A45               	incf	ADC_Init@channel,w
  1993  003F  2842               	goto	u1304
  1994  0040                     u1305:	
  1995  0040  1003               	clrc
  1996  0041  0DC4               	rlf	??_ADC_Init,f
  1997  0042                     u1304:	
  1998  0042  3EFF               	addlw	-1
  1999  0043  1D03               	skipz
  2000  0044  2840               	goto	u1305
  2001  0045  0844               	movf	??_ADC_Init,w
  2002  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2003  0047  0491               	iorwf	17,f	;volatile
  2004                           
  2005                           ;ms83fxx02_pwr.c: 81: TRISC |= 0b00000100;
  2006  0048  1507               	bsf	7,2	;volatile
  2007                           
  2008                           ;ms83fxx02_pwr.c: 84: ADCON1 = 0b01010000;
  2009  0049  3050               	movlw	80
  2010  004A  009F               	movwf	31	;volatile
  2011                           
  2012                           ;ms83fxx02_pwr.c: 87: ADCON0 = 0b10100000;
  2013  004B  30A0               	movlw	160
  2014  004C  1283               	bcf	3,5	;RP0=0, select bank0
  2015  004D  009F               	movwf	31	;volatile
  2016                           
  2017                           ;ms83fxx02_pwr.c: 89: ADIE = 1;
  2018  004E  1683               	bsf	3,5	;RP0=1, select bank1
  2019  004F  148D               	bsf	13,1
  2020  0050  0008               	return
  2021  0051                     __end_of_ADC_Init:	
  2022  0051                     __ptext1702:	
  2023 ;; =============== function _LEDTimer_INTConfig ends ============
  2024                           
  2025                           
  2026 ;; *************** function _LEDTimer_Cmd *****************
  2027 ;; Defined at:
  2028 ;;		line 43 in file "ms83fxx02_led_timer.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  period_type     1    wreg     enum E1491
  2031 ;;  NewState        1    0[BANK0 ] enum E1482
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  period_type     1    1[BANK0 ] enum E1491
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, status,2
  2038 ;; Tracked objects:
  2039 ;;		On entry : 160/0
  2040 ;;		On exit  : 160/40
  2041 ;;		Unchanged: FFE9F/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2043 ;;      Params:         0       1       0       0
  2044 ;;      Locals:         0       1       0       0
  2045 ;;      Temps:          0       0       0       0
  2046 ;;      Totals:         0       2       0       0
  2047 ;;Total ram usage:        2 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    4
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_Driver_Init
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056  0051                     _LEDTimer_Cmd:	
  2057                           
  2058                           ; Regs used in _LEDTimer_Cmd: [wreg+status,2]
  2059                           ;LEDTimer_Cmd@period_type stored from wreg
  2060  0051  00C5               	movwf	LEDTimer_Cmd@period_type
  2061                           
  2062                           ;ms83fxx02_led_timer.c: 44: if(NewState != DISABLE)
  2063  0052  0844               	movf	LEDTimer_Cmd@NewState,w
  2064  0053  1903               	btfsc	3,2
  2065  0054  286C               	goto	l7707
  2066                           
  2067                           ;ms83fxx02_led_timer.c: 45: {
  2068                           ;ms83fxx02_led_timer.c: 46: if(period_type == TIM_PERIOD_0_33ms)
  2069  0055  0845               	movf	LEDTimer_Cmd@period_type,w
  2070  0056  3A02               	xorlw	2
  2071  0057  1D03               	skipz
  2072  0058  2866               	goto	l7708
  2073                           
  2074                           ;ms83fxx02_led_timer.c: 47: {
  2075                           ;ms83fxx02_led_timer.c: 48: current_period_type = TIM_PERIOD_0_33ms;
  2076  0059  3002               	movlw	2
  2077  005A  00D8               	movwf	_current_period_type	;volatile
  2078                           
  2079                           ;ms83fxx02_led_timer.c: 54: TMR3ON = 0;
  2080                           
  2081                           ;ms83fxx02_led_timer.c: 57: PWM3CR0 = 0b01100010;
  2082                           
  2083                           ;ms83fxx02_led_timer.c: 60: PWM3CR1 = 0b00111000;
  2084  005B  23FB               	fcall	PL2	;call to abstracted procedure
  2085                           
  2086                           ;ms83fxx02_led_timer.c: 63: T3CKDIV = 19;
  2087  005C  3013               	movlw	19
  2088  005D                     L11:	
  2089  005D  0091               	movwf	17	;volatile
  2090                           
  2091                           ;ms83fxx02_led_timer.c: 65: TMR3H = 0x0F;
  2092  005E  300F               	movlw	15
  2093  005F  008D               	movwf	13	;volatile
  2094                           
  2095                           ;ms83fxx02_led_timer.c: 66: TMR3L = 0;
  2096  0060  018C               	clrf	12	;volatile
  2097                           
  2098                           ;ms83fxx02_led_timer.c: 67: PR3L = 0xFF;
  2099  0061  30FF               	movlw	255
  2100  0062  008E               	movwf	14	;volatile
  2101                           
  2102                           ;ms83fxx02_led_timer.c: 70: TMR3IF = 0;
  2103  0063  1010               	bcf	16,0
  2104                           
  2105                           ;ms83fxx02_led_timer.c: 73: TMR3ON = 1;
  2106  0064  1510               	bsf	16,2
  2107                           
  2108                           ;ms83fxx02_led_timer.c: 74: }
  2109  0065  0008               	return
  2110  0066                     l7708:	
  2111                           
  2112                           ;ms83fxx02_led_timer.c: 75: else
  2113                           ;ms83fxx02_led_timer.c: 76: {
  2114                           ;ms83fxx02_led_timer.c: 77: current_period_type = TIM_PERIOD_1s;
  2115  0066  01D8               	clrf	_current_period_type	;volatile
  2116  0067  0AD8               	incf	_current_period_type,f	;volatile
  2117                           
  2118                           ;ms83fxx02_led_timer.c: 83: TMR3ON = 0;
  2119                           
  2120                           ;ms83fxx02_led_timer.c: 86: PWM3CR0 = 0b01100010;
  2121                           
  2122                           ;ms83fxx02_led_timer.c: 89: PWM3CR1 = 0b00111000;
  2123  0068  23FB  118A         	fcall	PL2	;call to abstracted procedure
  2124                           
  2125                           ;ms83fxx02_led_timer.c: 92: T3CKDIV = 60;
  2126  006A  303C               	movlw	60
  2127  006B  285D               	goto	L11
  2128  006C                     l7707:	
  2129                           ;ms83fxx02_led_timer.c: 94: TMR3H = 0x0F;
  2130                           
  2131                           
  2132                           ;ms83fxx02_led_timer.c: 105: else
  2133                           ;ms83fxx02_led_timer.c: 106: {
  2134                           ;ms83fxx02_led_timer.c: 108: TMR3ON = 0;
  2135  006C  1703               	bsf	3,6	;RP1=1, select bank2
  2136  006D  1110               	bcf	16,2
  2137  006E  0008               	return
  2138  006F                     __end_of_LEDTimer_Cmd:	
  2139  006F                     __ptext1674:	
  2140 ;; =============== function _EEPROM_Init ends ============
  2141                           
  2142                           
  2143 ;; *************** function _KEY_Init *****************
  2144 ;; Defined at:
  2145 ;;		line 73 in file "MS83FXX02_KEY.C"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;		None
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  2150 ;; Return value:  Size  Location     Type
  2151 ;;		None               void
  2152 ;; Registers used:
  2153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 160/0
  2156 ;;		On exit  : 160/0
  2157 ;;		Unchanged: FFE9F/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2159 ;;      Params:         0       0       0       0
  2160 ;;      Locals:         0       2       0       0
  2161 ;;      Temps:          0       0       0       0
  2162 ;;      Totals:         0       2       0       0
  2163 ;;Total ram usage:        2 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    5
  2166 ;; This function calls:
  2167 ;;		_GPIO_Init
  2168 ;;		_GPIO_INTConfig
  2169 ;; This function is called by:
  2170 ;;		_Driver_Init
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173  006F                     _KEY_Init:	
  2174  006F  3002               	movlw	2
  2175                           
  2176                           ;MS83FXX02_KEY.C: 74: GPIO_InitTypeDef GPIO_InitStruct;
  2177                           ;MS83FXX02_KEY.C: 75: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  2178                           
  2179                           ; Regs used in _KEY_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2180  0070  01C8               	clrf	KEY_Init@GPIO_InitStruct+1
  2181                           
  2182                           ;MS83FXX02_KEY.C: 76: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  2183  0071  00C7               	movwf	KEY_Init@GPIO_InitStruct
  2184                           
  2185                           ;MS83FXX02_KEY.C: 77: GPIO_Init(GPIOC, &GPIO_InitStruct);
  2186  0072  3047               	movlw	KEY_Init@GPIO_InitStruct& (0+255)
  2187  0073  00C4               	movwf	?_GPIO_Init
  2188  0074  3001               	movlw	1
  2189  0075  2141               	fcall	_GPIO_Init
  2190  0076  3002               	movlw	2
  2191                           
  2192                           ;MS83FXX02_KEY.C: 80: INTEDG = 0;
  2193  0077  1301               	bcf	1,6
  2194                           
  2195                           ;MS83FXX02_KEY.C: 81: GPIO_INTConfig(GPIOC, ((uint8_t)0x00000002), ENABLE);
  2196  0078  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0079  00C4               	movwf	?_GPIO_INTConfig
  2198  007A  3001               	movlw	1
  2199  007B  01C5               	clrf	?_GPIO_INTConfig+1
  2200  007C  0AC5               	incf	?_GPIO_INTConfig+1,f
  2201  007D  118A  2ED5         	ljmp	_GPIO_INTConfig
  2202  007F                     __end_of_KEY_Init:	
  2203  007F                     __ptext1652:	
  2204 ;; =============== function _Motor_HandleStatusChangeEvt ends ============
  2205                           
  2206                           
  2207 ;; *************** function _charge_control *****************
  2208 ;; Defined at:
  2209 ;;		line 83 in file "main.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  charge_count    2   18[BANK0 ] unsigned int 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;		None               void
  2216 ;; Registers used:
  2217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 20/40
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: FFE00/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2223 ;;      Params:         0       0       0       0
  2224 ;;      Locals:         0       2       0       0
  2225 ;;      Temps:          0       0       0       0
  2226 ;;      Totals:         0       2       0       0
  2227 ;;Total ram usage:        2 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    7
  2230 ;; This function calls:
  2231 ;;		_ChargeTimer_GetCount
  2232 ;;		_Battery_Detect
  2233 ;;		_LED_VoltageChargeOutput
  2234 ;;		_GPIO_WriteBit
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239  007F                     _charge_control:	
  2240                           
  2241                           ;main.c: 84: uint32_t charge_count = ChargeTimer_GetCount();
  2242                           
  2243                           ; Regs used in _charge_control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2244  007F  20A4  118A         	fcall	_ChargeTimer_GetCount
  2245  0081  0845               	movf	?_ChargeTimer_GetCount+1,w
  2246  0082  00D7               	movwf	charge_control@charge_count+1
  2247  0083  0844               	movf	?_ChargeTimer_GetCount,w
  2248  0084  00D6               	movwf	charge_control@charge_count
  2249                           
  2250                           ;main.c: 87: if((charge_count >= 5) && (charge_count < 7200))
  2251  0085  3000               	movlw	0
  2252  0086  0257               	subwf	charge_control@charge_count+1,w
  2253  0087  3005               	movlw	5
  2254  0088  1903               	skipnz
  2255  0089  0256               	subwf	charge_control@charge_count,w
  2256  008A  301C               	movlw	28
  2257  008B  1C03               	skipc
  2258  008C  2895               	goto	L1
  2259  008D  0257               	subwf	charge_control@charge_count+1,w
  2260  008E  3020               	movlw	32
  2261  008F  1903               	skipnz
  2262  0090  0256               	subwf	charge_control@charge_count,w
  2263  0091  1803               	skipnc
  2264  0092  2894               	goto	l15292
  2265                           
  2266                           ;main.c: 88: {
  2267                           ;main.c: 89: Battery_Detect();
  2268  0093  28AA               	ljmp	l15214
  2269  0094                     l15292:	
  2270                           ;main.c: 90: }
  2271                           
  2272                           
  2273                           ;main.c: 91: else
  2274                           ;main.c: 92: {
  2275                           ;main.c: 93: if(charge_count >= 7200)
  2276  0094  301C               	movlw	28
  2277  0095                     L1:	
  2278  0095  0257               	subwf	charge_control@charge_count+1,w
  2279  0096  3020               	movlw	32
  2280  0097  1903               	skipnz
  2281  0098  0256               	subwf	charge_control@charge_count,w
  2282  0099  1C03               	skipc
  2283  009A  0008               	return
  2284                           
  2285                           ;main.c: 94: {
  2286                           ;main.c: 95: LED_VoltageChargeOutput(Bit_RESET);
  2287  009B  3000               	movlw	0
  2288  009C  23E5  118A         	fcall	_LED_VoltageChargeOutput
  2289  009E  3001               	movlw	1
  2290                           
  2291                           ;main.c: 97: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), SET);
  2292  009F  01C4               	clrf	?_GPIO_WriteBit
  2293  00A0  0AC4               	incf	?_GPIO_WriteBit,f
  2294  00A1  01C5               	clrf	?_GPIO_WriteBit+1
  2295  00A2  0AC5               	incf	?_GPIO_WriteBit+1,f
  2296  00A3  2A29               	ljmp	_GPIO_WriteBit
  2297  00A4                     __end_of_charge_control:	
  2298  00A4                     __ptext1700:	
  2299 ;; =============== function _GPIO_WriteBit ends ============
  2300                           
  2301                           
  2302 ;; *************** function _ChargeTimer_GetCount *****************
  2303 ;; Defined at:
  2304 ;;		line 112 in file "ms83fxx02_charge_timer.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  2    0[BANK0 ] unsigned int 
  2311 ;; Registers used:
  2312 ;;		wreg
  2313 ;; Tracked objects:
  2314 ;;		On entry : 20/40
  2315 ;;		On exit  : 60/0
  2316 ;;		Unchanged: FFF9F/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2318 ;;      Params:         0       2       0       0
  2319 ;;      Locals:         0       0       0       0
  2320 ;;      Temps:          0       0       0       0
  2321 ;;      Totals:         0       2       0       0
  2322 ;;Total ram usage:        2 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    4
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_charge_control
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331  00A4                     _ChargeTimer_GetCount:	
  2332                           
  2333                           ;ms83fxx02_charge_timer.c: 113: return charge_time_out;
  2334                           
  2335                           ; Regs used in _ChargeTimer_GetCount: [wreg]
  2336  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  2337  00A5  0835               	movf	_charge_time_out+1,w	;volatile
  2338  00A6  00C5               	movwf	?_ChargeTimer_GetCount+1
  2339  00A7  0834               	movf	_charge_time_out,w	;volatile
  2340  00A8  00C4               	movwf	?_ChargeTimer_GetCount
  2341  00A9  0008               	return
  2342  00AA                     __end_of_ChargeTimer_GetCount:	
  2343  00AA                     __ptext1655:	
  2344 ;; =============== function _Motor_Start ends ============
  2345                           
  2346                           
  2347 ;; *************** function _Battery_Detect *****************
  2348 ;; Defined at:
  2349 ;;		line 216 in file "ms83fxx02_pwr.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  adc_data        2   16[BANK0 ] unsigned int 
  2354 ;;  mode            1   15[BANK0 ] enum E1521
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 60/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: FFE00/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2364 ;;      Params:         0       0       0       0
  2365 ;;      Locals:         0       3       0       0
  2366 ;;      Temps:          0       0       0       0
  2367 ;;      Totals:         0       3       0       0
  2368 ;;Total ram usage:        3 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    6
  2371 ;; This function calls:
  2372 ;;		_Battery_HandleData
  2373 ;;		_GetDeviceMode
  2374 ;;		_EEPROM_SetFlag
  2375 ;;		_EEPROM_StoreModeData
  2376 ;;		_EEPROM_StoreMotorData
  2377 ;;		_LED_UnderVoltageOutput
  2378 ;;		_LED_Init
  2379 ;;		_KEY_DeInit
  2380 ;;		_Motor_Stop
  2381 ;;		_Motor_SetStatus
  2382 ;;		_MotorOperationTimer_Stop
  2383 ;;		_LEDTimer_DispUnderVoltCmd
  2384 ;;		_GPIO_WriteBit
  2385 ;; This function is called by:
  2386 ;;		_charge_control
  2387 ;;		_main
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390  00AA                     _Battery_Detect:	
  2391  00AA                     l15214:	
  2392                           ; Regs used in _Battery_Detect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2393                           
  2394                           
  2395                           ;ms83fxx02_pwr.c: 218: DEVICE_MODE_Type mode = RUN_MODE;
  2396  00AA  01D3               	clrf	Battery_Detect@mode
  2397                           
  2398                           ;ms83fxx02_pwr.c: 220: if(!battery_handle_flag)
  2399  00AB  08B8               	movf	_battery_handle_flag,f
  2400  00AC  1903               	btfsc	3,2
  2401  00AD  0008               	return
  2402                           
  2403                           ;ms83fxx02_pwr.c: 224: else
  2404                           ;ms83fxx02_pwr.c: 225: {
  2405                           ;ms83fxx02_pwr.c: 226: adc_data = Battery_HandleData();
  2406                           
  2407                           ;ms83fxx02_pwr.c: 221: {
  2408                           ;ms83fxx02_pwr.c: 222: return;
  2409  00AE  2343  118A         	fcall	_Battery_HandleData
  2410  00B0  0845               	movf	?_Battery_HandleData+1,w
  2411  00B1  00D5               	movwf	Battery_Detect@adc_data+1
  2412  00B2  0844               	movf	?_Battery_HandleData,w
  2413  00B3  00D4               	movwf	Battery_Detect@adc_data
  2414                           
  2415                           ;ms83fxx02_pwr.c: 227: }
  2416                           ;ms83fxx02_pwr.c: 229: mode = GetDeviceMode();
  2417  00B4  2300  118A         	fcall	_GetDeviceMode
  2418  00B6  00D3               	movwf	Battery_Detect@mode
  2419                           
  2420                           ;ms83fxx02_pwr.c: 231: if(mode == RUN_MODE)
  2421  00B7  08D3               	movf	Battery_Detect@mode,f
  2422  00B8  1D03               	skipz
  2423  00B9  28F2               	goto	l15254
  2424                           
  2425                           ;ms83fxx02_pwr.c: 232: {
  2426                           ;ms83fxx02_pwr.c: 234: if(adc_data < ((uint16_t)460))
  2427  00BA  3001               	movlw	1
  2428  00BB  0255               	subwf	Battery_Detect@adc_data+1,w
  2429  00BC  30CC               	movlw	204
  2430  00BD  1903               	skipnz
  2431  00BE  0254               	subwf	Battery_Detect@adc_data,w
  2432  00BF  1803               	skipnc
  2433  00C0  28D6               	goto	l15238
  2434                           
  2435                           ;ms83fxx02_pwr.c: 235: {
  2436                           ;ms83fxx02_pwr.c: 238: EEPROM_SetFlag();
  2437  00C1  23DC  118A         	fcall	_EEPROM_SetFlag
  2438                           
  2439                           ;ms83fxx02_pwr.c: 239: EEPROM_StoreModeData();
  2440  00C3  23E0  118A         	fcall	_EEPROM_StoreModeData
  2441                           
  2442                           ;ms83fxx02_pwr.c: 240: EEPROM_StoreMotorData();
  2443  00C5  23AE  118A         	fcall	_EEPROM_StoreMotorData
  2444                           
  2445                           ;ms83fxx02_pwr.c: 241: LED_UnderVoltageOutput(Bit_RESET);
  2446  00C7  3000               	movlw	0
  2447  00C8  22F8  118A         	fcall	_LED_UnderVoltageOutput
  2448                           
  2449                           ;ms83fxx02_pwr.c: 244: LED_Init();
  2450  00CA  2101  118A         	fcall	_LED_Init
  2451                           
  2452                           ;ms83fxx02_pwr.c: 245: KEY_DeInit();
  2453  00CC  239F  118A         	fcall	_KEY_DeInit
  2454                           
  2455                           ;ms83fxx02_pwr.c: 246: Motor_Stop();
  2456  00CE  223F  118A         	fcall	_Motor_Stop
  2457                           
  2458                           ;ms83fxx02_pwr.c: 247: Motor_SetStatus(MOTOR_MODE_STOP);
  2459  00D0  3001               	movlw	1
  2460  00D1  2212  118A         	fcall	_Motor_SetStatus
  2461                           
  2462                           ;ms83fxx02_pwr.c: 248: MotorOperationTimer_Stop();
  2463  00D3  221D               	fcall	_MotorOperationTimer_Stop
  2464  00D4  0063               	sleep	;#
  2465                           
  2466                           ;ms83fxx02_pwr.c: 255: }
  2467  00D5  0008               	return
  2468  00D6                     l15238:	
  2469                           
  2470                           ;ms83fxx02_pwr.c: 257: else if(adc_data < ((uint16_t)512))
  2471  00D6  3002               	movlw	2
  2472  00D7  0255               	subwf	Battery_Detect@adc_data+1,w
  2473  00D8  3000               	movlw	0
  2474  00D9  1903               	skipnz
  2475  00DA  0254               	subwf	Battery_Detect@adc_data,w
  2476  00DB  1803               	skipnc
  2477  00DC  28E2               	goto	l15244
  2478                           
  2479                           ;ms83fxx02_pwr.c: 258: {
  2480                           ;ms83fxx02_pwr.c: 260: LEDTimer_DispUnderVoltCmd(ENABLE);
  2481  00DD  3001               	movlw	1
  2482  00DE  2309               	fcall	_LEDTimer_DispUnderVoltCmd
  2483                           
  2484                           ;ms83fxx02_pwr.c: 261: detect_under_voltage = 1;
  2485  00DF  01BB               	clrf	_detect_under_voltage
  2486  00E0  0ABB               	incf	_detect_under_voltage,f
  2487                           
  2488                           ;ms83fxx02_pwr.c: 263: }
  2489  00E1  0008               	return
  2490  00E2                     l15244:	
  2491                           
  2492                           ;ms83fxx02_pwr.c: 265: else
  2493                           ;ms83fxx02_pwr.c: 266: {
  2494                           ;ms83fxx02_pwr.c: 267: if(detect_under_voltage)
  2495  00E2  083B               	movf	_detect_under_voltage,w
  2496  00E3  1903               	btfsc	3,2
  2497  00E4  0008               	return
  2498                           
  2499                           ;ms83fxx02_pwr.c: 268: {
  2500                           ;ms83fxx02_pwr.c: 269: if(adc_data > ((uint16_t)614))
  2501  00E5  3002               	movlw	2
  2502  00E6  0255               	subwf	Battery_Detect@adc_data+1,w
  2503  00E7  3067               	movlw	103
  2504  00E8  1903               	skipnz
  2505  00E9  0254               	subwf	Battery_Detect@adc_data,w
  2506  00EA  1C03               	skipc
  2507  00EB  0008               	return
  2508  00EC  3000               	movlw	0
  2509                           
  2510                           ;ms83fxx02_pwr.c: 270: {
  2511                           ;ms83fxx02_pwr.c: 271: detect_under_voltage = 0;
  2512  00ED  01BB               	clrf	_detect_under_voltage
  2513                           
  2514                           ;ms83fxx02_pwr.c: 272: LED_UnderVoltageOutput(Bit_RESET);
  2515  00EE  22F8  118A         	fcall	_LED_UnderVoltageOutput
  2516                           
  2517                           ;ms83fxx02_pwr.c: 274: LEDTimer_DispUnderVoltCmd(DISABLE);
  2518  00F0  3000               	movlw	0
  2519  00F1  2B09               	ljmp	_LEDTimer_DispUnderVoltCmd
  2520  00F2                     l15254:	
  2521                           
  2522                           ;ms83fxx02_pwr.c: 280: else
  2523                           ;ms83fxx02_pwr.c: 281: {
  2524                           ;ms83fxx02_pwr.c: 282: if(mode == CHARGE_MODE)
  2525  00F2  0B53               	decfsz	Battery_Detect@mode,w
  2526  00F3  0008               	return
  2527                           
  2528                           ;ms83fxx02_pwr.c: 283: {
  2529                           ;ms83fxx02_pwr.c: 285: if(adc_data > ((uint16_t)686))
  2530  00F4  3002               	movlw	2
  2531  00F5  0255               	subwf	Battery_Detect@adc_data+1,w
  2532  00F6  30AF               	movlw	175
  2533  00F7  1903               	skipnz
  2534  00F8  0254               	subwf	Battery_Detect@adc_data,w
  2535  00F9  1C03               	skipc
  2536  00FA  0008               	return
  2537  00FB  3001               	movlw	1
  2538                           
  2539                           ;ms83fxx02_pwr.c: 286: {
  2540                           ;ms83fxx02_pwr.c: 288: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_SET);
  2541  00FC  01C4               	clrf	?_GPIO_WriteBit
  2542  00FD  0AC4               	incf	?_GPIO_WriteBit,f
  2543  00FE  01C5               	clrf	?_GPIO_WriteBit+1
  2544  00FF  0AC5               	incf	?_GPIO_WriteBit+1,f
  2545  0100  2A29               	ljmp	_GPIO_WriteBit
  2546  0101                     __end_of_Battery_Detect:	
  2547  0101                     __ptext1675:	
  2548 ;; =============== function _KEY_Init ends ============
  2549                           
  2550                           
  2551 ;; *************** function _LED_Init *****************
  2552 ;; Defined at:
  2553 ;;		line 24 in file "ms83fxx02_led.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  GPIO_InitStr    2    3[BANK0 ] struct .
  2558 ;; Return value:  Size  Location     Type
  2559 ;;		None               void
  2560 ;; Registers used:
  2561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 40/0
  2564 ;;		On exit  : 160/0
  2565 ;;		Unchanged: FFE9F/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2567 ;;      Params:         0       0       0       0
  2568 ;;      Locals:         0       2       0       0
  2569 ;;      Temps:          0       0       0       0
  2570 ;;      Totals:         0       2       0       0
  2571 ;;Total ram usage:        2 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    5
  2574 ;; This function calls:
  2575 ;;		_GPIO_Init
  2576 ;;		_GPIO_WriteBit
  2577 ;; This function is called by:
  2578 ;;		_Driver_Init
  2579 ;;		_main
  2580 ;;		_Battery_Detect
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583  0101                     _LED_Init:	
  2584                           
  2585                           ;ms83fxx02_led.c: 25: GPIO_InitTypeDef GPIO_InitStruct;
  2586                           ;ms83fxx02_led.c: 27: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  2587                           
  2588                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2589  0101  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0102  3004               	movlw	4
  2591  0103  01C8               	clrf	LED_Init@GPIO_InitStruct+1
  2592  0104  0AC8               	incf	LED_Init@GPIO_InitStruct+1,f
  2593                           
  2594                           ;ms83fxx02_led.c: 28: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000004);
  2595  0105  00C7               	movwf	LED_Init@GPIO_InitStruct
  2596                           
  2597                           ;ms83fxx02_led.c: 29: GPIO_Init(GPIOA, &GPIO_InitStruct);
  2598  0106  3047               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  2599  0107  00C4               	movwf	?_GPIO_Init
  2600  0108  3000               	movlw	0
  2601  0109  2141  118A         	fcall	_GPIO_Init
  2602                           
  2603                           ;ms83fxx02_led.c: 31: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  2604  010B  1283               	bcf	3,5	;RP0=0, select bank0
  2605  010C  3008               	movlw	8
  2606  010D  01C8               	clrf	LED_Init@GPIO_InitStruct+1
  2607  010E  0AC8               	incf	LED_Init@GPIO_InitStruct+1,f
  2608                           
  2609                           ;ms83fxx02_led.c: 32: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000008);
  2610  010F  00C7               	movwf	LED_Init@GPIO_InitStruct
  2611                           
  2612                           ;ms83fxx02_led.c: 33: GPIO_Init(GPIOA, &GPIO_InitStruct);
  2613  0110  3047               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  2614  0111  00C4               	movwf	?_GPIO_Init
  2615  0112  3000               	movlw	0
  2616  0113  2141  118A         	fcall	_GPIO_Init
  2617                           
  2618                           ;ms83fxx02_led.c: 35: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  2619  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0116  3047               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  2621  0117  01C8               	clrf	LED_Init@GPIO_InitStruct+1
  2622  0118  0AC8               	incf	LED_Init@GPIO_InitStruct+1,f
  2623  0119  01C7               	clrf	LED_Init@GPIO_InitStruct
  2624  011A  0AC7               	incf	LED_Init@GPIO_InitStruct,f
  2625                           
  2626                           ;ms83fxx02_led.c: 37: GPIO_Init(GPIOC, &GPIO_InitStruct);
  2627  011B  00C4               	movwf	?_GPIO_Init
  2628  011C  3001               	movlw	1
  2629  011D  2141  118A         	fcall	_GPIO_Init
  2630                           
  2631                           ;ms83fxx02_led.c: 43: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  2632  011F  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0120  3008               	movlw	8
  2634  0121  01C8               	clrf	LED_Init@GPIO_InitStruct+1
  2635  0122  0AC8               	incf	LED_Init@GPIO_InitStruct+1,f
  2636                           
  2637                           ;ms83fxx02_led.c: 44: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000008);
  2638  0123  00C7               	movwf	LED_Init@GPIO_InitStruct
  2639                           
  2640                           ;ms83fxx02_led.c: 45: GPIO_Init(GPIOC, &GPIO_InitStruct);
  2641  0124  3047               	movlw	LED_Init@GPIO_InitStruct& (0+255)
  2642  0125  00C4               	movwf	?_GPIO_Init
  2643  0126  3001               	movlw	1
  2644  0127  2141  118A         	fcall	_GPIO_Init
  2645                           
  2646                           ;ms83fxx02_led.c: 47: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  2647  0129  3004               	movlw	4
  2648  012A  1283               	bcf	3,5	;RP0=0, select bank0
  2649  012B  00C4               	movwf	?_GPIO_WriteBit
  2650  012C  3000               	movlw	0
  2651  012D  01C5               	clrf	?_GPIO_WriteBit+1
  2652  012E  2229  118A         	fcall	_GPIO_WriteBit
  2653                           
  2654                           ;ms83fxx02_led.c: 48: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  2655  0130  3008               	movlw	8
  2656  0131  00C4               	movwf	?_GPIO_WriteBit
  2657  0132  3000               	movlw	0
  2658  0133  01C5               	clrf	?_GPIO_WriteBit+1
  2659  0134  2229  118A         	fcall	_GPIO_WriteBit
  2660  0136  3001               	movlw	1
  2661                           
  2662                           ;ms83fxx02_led.c: 49: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  2663  0137  01C4               	clrf	?_GPIO_WriteBit
  2664  0138  0AC4               	incf	?_GPIO_WriteBit,f
  2665  0139  01C5               	clrf	?_GPIO_WriteBit+1
  2666  013A  2229  118A         	fcall	_GPIO_WriteBit
  2667                           
  2668                           ;ms83fxx02_led.c: 52: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), Bit_RESET);
  2669  013C  3008               	movlw	8
  2670  013D  00C4               	movwf	?_GPIO_WriteBit
  2671  013E  3001               	movlw	1
  2672  013F  01C5               	clrf	?_GPIO_WriteBit+1
  2673  0140  2A29               	ljmp	_GPIO_WriteBit
  2674  0141                     __end_of_LED_Init:	
  2675  0141                     __ptext1690:	
  2676 ;; =============== function _GPIO_ReadInputDataBit ends ============
  2677                           
  2678                           
  2679 ;; *************** function _GPIO_Init *****************
  2680 ;; Defined at:
  2681 ;;		line 27 in file "ms83fxx02_gpio.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  GPIOx           1    wreg     enum E1491
  2684 ;;  GPIO_InitStr    1    0[BANK0 ] PTR struct .
  2685 ;;		 -> LED_Init@GPIO_InitStruct(2), KEY_Init@GPIO_InitStruct(2), KEY_DeInit@GPIO_InitStruct(2), ChargeCtrl_Init@GPIO_In
      +itStruct(2), 
  2686 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(2), 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  GPIOx           1    1[BANK0 ] enum E1491
  2689 ;; Return value:  Size  Location     Type
  2690 ;;		None               void
  2691 ;; Registers used:
  2692 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2693 ;; Tracked objects:
  2694 ;;		On entry : 60/0
  2695 ;;		On exit  : 160/20
  2696 ;;		Unchanged: FFE9F/0
  2697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2698 ;;      Params:         0       1       0       0
  2699 ;;      Locals:         0       1       0       0
  2700 ;;      Temps:          0       0       0       0
  2701 ;;      Totals:         0       2       0       0
  2702 ;;Total ram usage:        2 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    4
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_ChargeDetect_Init
  2709 ;;		_ChargeCtrl_Init
  2710 ;;		_KEY_DeInit
  2711 ;;		_KEY_Init
  2712 ;;		_LED_Init
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715  0141                     _GPIO_Init:	
  2716                           
  2717                           ; Regs used in _GPIO_Init: [wreg-fsr0h+status,2+status,0]
  2718                           ;GPIO_Init@GPIOx stored from wreg
  2719  0141  00C5               	movwf	GPIO_Init@GPIOx
  2720                           
  2721                           ;ms83fxx02_gpio.c: 28: if(GPIOx == GPIOA)
  2722  0142  08C5               	movf	GPIO_Init@GPIOx,f
  2723  0143  1D03               	skipz
  2724  0144  2957               	goto	l14666
  2725                           
  2726                           ;ms83fxx02_gpio.c: 29: {
  2727                           ;ms83fxx02_gpio.c: 30: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  2728  0145  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2729  0146  3E01               	addlw	1
  2730  0147  0084               	movwf	4
  2731  0148  1383               	bcf	3,7	;select IRP bank0
  2732  0149  0B00               	decfsz	0,w
  2733  014A  2951               	goto	l14664
  2734                           
  2735                           ;ms83fxx02_gpio.c: 31: {
  2736                           ;ms83fxx02_gpio.c: 33: TRISA &= ~(GPIO_InitStruct->GPIO_Pin);
  2737  014B  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2738  014C  0084               	movwf	4
  2739  014D  0900               	comf	0,w
  2740  014E  1683               	bsf	3,5	;RP0=1, select bank1
  2741  014F  0585               	andwf	5,f	;volatile
  2742                           
  2743                           ;ms83fxx02_gpio.c: 34: }
  2744  0150  0008               	return
  2745  0151                     l14664:	
  2746                           
  2747                           ;ms83fxx02_gpio.c: 35: else
  2748                           ;ms83fxx02_gpio.c: 36: {
  2749                           ;ms83fxx02_gpio.c: 38: TRISA |= GPIO_InitStruct->GPIO_Pin;
  2750  0151  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2751  0152  0084               	movwf	4
  2752  0153  0800               	movf	0,w
  2753  0154  1683               	bsf	3,5	;RP0=1, select bank1
  2754  0155  0485               	iorwf	5,f	;volatile
  2755  0156  0008               	return
  2756  0157                     l14666:	
  2757                           
  2758                           ;ms83fxx02_gpio.c: 41: else
  2759                           ;ms83fxx02_gpio.c: 42: {
  2760                           ;ms83fxx02_gpio.c: 43: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  2761  0157  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2762  0158  3E01               	addlw	1
  2763  0159  0084               	movwf	4
  2764  015A  1383               	bcf	3,7	;select IRP bank0
  2765  015B  0B00               	decfsz	0,w
  2766  015C  2963               	goto	l14670
  2767                           
  2768                           ;ms83fxx02_gpio.c: 44: {
  2769                           ;ms83fxx02_gpio.c: 46: TRISC &= ~(GPIO_InitStruct->GPIO_Pin);
  2770  015D  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2771  015E  0084               	movwf	4
  2772  015F  0900               	comf	0,w
  2773  0160  1683               	bsf	3,5	;RP0=1, select bank1
  2774  0161  0587               	andwf	7,f	;volatile
  2775                           
  2776                           ;ms83fxx02_gpio.c: 47: }
  2777  0162  0008               	return
  2778  0163                     l14670:	
  2779                           
  2780                           ;ms83fxx02_gpio.c: 48: else
  2781                           ;ms83fxx02_gpio.c: 49: {
  2782                           ;ms83fxx02_gpio.c: 51: TRISC |= GPIO_InitStruct->GPIO_Pin;
  2783  0163  0844               	movf	GPIO_Init@GPIO_InitStruct,w
  2784  0164  0084               	movwf	4
  2785  0165  0800               	movf	0,w
  2786  0166  1683               	bsf	3,5	;RP0=1, select bank1
  2787  0167  0487               	iorwf	7,f	;volatile
  2788  0168  0008               	return
  2789  0169                     __end_of_GPIO_Init:	
  2790  0169                     __ptext1651:	
  2791 ;; =============== function _main ends ============
  2792                           
  2793                           
  2794 ;; *************** function _Motor_HandleStatusChangeEvt *****************
  2795 ;; Defined at:
  2796 ;;		line 371 in file "ms83fxx02_motor.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  status          1    wreg     enum E1552
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  status          1    6[BANK0 ] enum E1552
  2801 ;; Return value:  Size  Location     Type
  2802 ;;		None               void
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/20
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: FFE00/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2810 ;;      Params:         0       0       0       0
  2811 ;;      Locals:         0       1       0       0
  2812 ;;      Temps:          0       0       0       0
  2813 ;;      Totals:         0       1       0       0
  2814 ;;Total ram usage:        1 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    7
  2817 ;; This function calls:
  2818 ;;		_Motor_CheckRunLimit
  2819 ;;		_KEY_GetReleaseStatus
  2820 ;;		_Motor_SetStatus
  2821 ;;		_Motor_Start
  2822 ;;		_MotorOperationTimer_Stop
  2823 ;;		_MotorOperationTimer_Init
  2824 ;;		_SwitchModeTimer_GetINTStatus
  2825 ;;		_Motor_Stop
  2826 ;;		_SwitchModeTimer_INTConfig
  2827 ;;		_SwitchModeTimer_Cmd
  2828 ;;		_LEDTimer_DispRunLimitCmd
  2829 ;;		_KEY_GetPressStatus
  2830 ;;		_GPIO_WriteBit
  2831 ;; This function is called by:
  2832 ;;		_main
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835  0169                     _Motor_HandleStatusChangeEvt:	
  2836                           
  2837                           ; Regs used in _Motor_HandleStatusChangeEvt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2838                           ;Motor_HandleStatusChangeEvt@status stored from wreg
  2839  0169  1283               	bcf	3,5	;RP0=0, select bank0
  2840  016A  1303               	bcf	3,6	;RP1=0, select bank0
  2841  016B  00CA               	movwf	Motor_HandleStatusChangeEvt@status
  2842                           
  2843                           ;ms83fxx02_motor.c: 372: if(!Motor_CheckRunLimit())
  2844  016C  22EA  118A         	fcall	_Motor_CheckRunLimit
  2845  016E  3800               	iorlw	0
  2846  016F  1903               	btfsc	3,2
  2847  0170  29D0               	goto	l15348
  2848  0171  29DF               	goto	l15350
  2849  0172                     l15300:	
  2850                           
  2851                           ;ms83fxx02_motor.c: 377: {
  2852                           ;ms83fxx02_motor.c: 378: if(KEY_GetReleaseStatus())
  2853  0172  2216  118A         	fcall	_KEY_GetReleaseStatus
  2854  0174  3A00               	xorlw	0
  2855  0175  1903               	skipnz
  2856  0176  2981               	goto	l15310
  2857                           
  2858                           ;ms83fxx02_motor.c: 379: {
  2859                           ;ms83fxx02_motor.c: 380: Motor_SetStatus(MOTOR_MODE_DUTY_100);
  2860  0177  3002               	movlw	2
  2861  0178  2212  118A         	fcall	_Motor_SetStatus
  2862                           
  2863                           ;ms83fxx02_motor.c: 381: Motor_Start(MOTOR_MODE_DUTY_100);
  2864  017A  3002               	movlw	2
  2865  017B  2254  118A         	fcall	_Motor_Start
  2866                           
  2867                           ;ms83fxx02_motor.c: 384: MotorOperationTimer_Stop();
  2868  017D  221D  118A         	fcall	_MotorOperationTimer_Stop
  2869                           
  2870                           ;ms83fxx02_motor.c: 385: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2871  017F  3001               	movlw	1
  2872  0180  2AB7               	ljmp	_MotorOperationTimer_Init
  2873  0181                     l15310:	
  2874                           ;ms83fxx02_motor.c: 386: }
  2875                           
  2876                           
  2877                           ;ms83fxx02_motor.c: 387: else
  2878                           ;ms83fxx02_motor.c: 388: {
  2879                           ;ms83fxx02_motor.c: 389: if(!key_press_flag)
  2880  0181  08BE               	movf	_key_press_flag,f
  2881  0182  1903               	btfsc	3,2
  2882  0183  0063               	sleep	;#
  2883  0184  0008               	return
  2884  0185                     l15314:	
  2885                           
  2886                           ;ms83fxx02_motor.c: 398: {
  2887                           ;ms83fxx02_motor.c: 399: if(KEY_GetReleaseStatus())
  2888  0185  2216  118A         	fcall	_KEY_GetReleaseStatus
  2889  0187  3A00               	xorlw	0
  2890  0188  1903               	skipnz
  2891  0189  0008               	return
  2892                           
  2893                           ;ms83fxx02_motor.c: 400: {
  2894                           ;ms83fxx02_motor.c: 402: if(SwitchModeTimer_GetINTStatus())
  2895  018A  22F3  118A         	fcall	_SwitchModeTimer_GetINTStatus
  2896  018C  3A00               	xorlw	0
  2897  018D  1903               	skipnz
  2898  018E  2995               	goto	l15320
  2899                           
  2900                           ;ms83fxx02_motor.c: 403: {
  2901                           ;ms83fxx02_motor.c: 404: Motor_Stop();
  2902  018F  223F  118A         	fcall	_Motor_Stop
  2903                           
  2904                           ;ms83fxx02_motor.c: 405: Motor_SetStatus(MOTOR_MODE_STOP);
  2905  0191  3001               	movlw	1
  2906  0192  2212  118A         	fcall	_Motor_SetStatus
  2907                           
  2908                           ;ms83fxx02_motor.c: 406: MotorOperationTimer_Stop();
  2909  0194  2A1D               	ljmp	l15174
  2910  0195                     l15320:	
  2911                           ;ms83fxx02_motor.c: 407: }
  2912                           
  2913                           
  2914                           ;ms83fxx02_motor.c: 408: else
  2915                           ;ms83fxx02_motor.c: 409: {
  2916                           ;ms83fxx02_motor.c: 411: SwitchModeTimer_INTConfig(DISABLE);
  2917  0195  3000               	movlw	0
  2918  0196  22AB  118A         	fcall	_SwitchModeTimer_INTConfig
  2919                           
  2920                           ;ms83fxx02_motor.c: 412: SwitchModeTimer_Cmd(DISABLE);
  2921  0198  3000               	movlw	0
  2922  0199  2294  118A         	fcall	_SwitchModeTimer_Cmd
  2923                           
  2924                           ;ms83fxx02_motor.c: 414: Motor_SetStatus(MOTOR_MODE_DUTY_90);
  2925  019B  3003               	movlw	3
  2926  019C  2212  118A         	fcall	_Motor_SetStatus
  2927                           
  2928                           ;ms83fxx02_motor.c: 415: Motor_Start(MOTOR_MODE_DUTY_90);
  2929  019E  3003               	movlw	3
  2930  019F  2254  118A         	fcall	_Motor_Start
  2931                           
  2932                           ;ms83fxx02_motor.c: 418: MotorOperationTimer_Stop();
  2933  01A1  221D  118A         	fcall	_MotorOperationTimer_Stop
  2934                           
  2935                           ;ms83fxx02_motor.c: 419: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2936  01A3  3001               	movlw	1
  2937  01A4  2AB7               	ljmp	_MotorOperationTimer_Init
  2938  01A5                     l15328:	
  2939                           
  2940                           ;ms83fxx02_motor.c: 425: {
  2941                           ;ms83fxx02_motor.c: 426: if(KEY_GetReleaseStatus())
  2942  01A5  2216  118A         	fcall	_KEY_GetReleaseStatus
  2943  01A7  3A00               	xorlw	0
  2944  01A8  1903               	skipnz
  2945  01A9  0008               	return
  2946                           
  2947                           ;ms83fxx02_motor.c: 427: {
  2948                           ;ms83fxx02_motor.c: 429: if(SwitchModeTimer_GetINTStatus())
  2949  01AA  22F3  118A         	fcall	_SwitchModeTimer_GetINTStatus
  2950  01AC  3A00               	xorlw	0
  2951  01AD  1903               	skipnz
  2952  01AE  29B5               	goto	l15334
  2953                           
  2954                           ;ms83fxx02_motor.c: 430: {
  2955                           ;ms83fxx02_motor.c: 431: Motor_Stop();
  2956  01AF  223F  118A         	fcall	_Motor_Stop
  2957                           
  2958                           ;ms83fxx02_motor.c: 432: Motor_SetStatus(MOTOR_MODE_STOP);
  2959  01B1  3001               	movlw	1
  2960  01B2  2212  118A         	fcall	_Motor_SetStatus
  2961                           
  2962                           ;ms83fxx02_motor.c: 433: MotorOperationTimer_Stop();
  2963  01B4  2A1D               	ljmp	l15174
  2964  01B5                     l15334:	
  2965                           ;ms83fxx02_motor.c: 434: }
  2966                           
  2967                           
  2968                           ;ms83fxx02_motor.c: 435: else
  2969                           ;ms83fxx02_motor.c: 436: {
  2970                           ;ms83fxx02_motor.c: 438: SwitchModeTimer_Cmd(DISABLE);
  2971  01B5  3000               	movlw	0
  2972  01B6  2294  118A         	fcall	_SwitchModeTimer_Cmd
  2973                           
  2974                           ;ms83fxx02_motor.c: 439: SwitchModeTimer_INTConfig(DISABLE);
  2975  01B8  3000               	movlw	0
  2976  01B9  22AB  118A         	fcall	_SwitchModeTimer_INTConfig
  2977                           
  2978                           ;ms83fxx02_motor.c: 441: Motor_SetStatus(MOTOR_MODE_DUTY_80);
  2979  01BB  3004               	movlw	4
  2980  01BC  2212  118A         	fcall	_Motor_SetStatus
  2981                           
  2982                           ;ms83fxx02_motor.c: 442: Motor_Start(MOTOR_MODE_DUTY_80);
  2983  01BE  3004               	movlw	4
  2984  01BF  2254  118A         	fcall	_Motor_Start
  2985                           
  2986                           ;ms83fxx02_motor.c: 445: MotorOperationTimer_Stop();
  2987  01C1  221D  118A         	fcall	_MotorOperationTimer_Stop
  2988                           
  2989                           ;ms83fxx02_motor.c: 446: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2990  01C3  3001               	movlw	1
  2991  01C4  2AB7               	ljmp	_MotorOperationTimer_Init
  2992  01C5                     l15342:	
  2993                           
  2994                           ;ms83fxx02_motor.c: 452: {
  2995                           ;ms83fxx02_motor.c: 453: if(KEY_GetReleaseStatus())
  2996  01C5  2216  118A         	fcall	_KEY_GetReleaseStatus
  2997  01C7  3A00               	xorlw	0
  2998  01C8  1903               	skipnz
  2999  01C9  0008               	return
  3000                           
  3001                           ;ms83fxx02_motor.c: 454: {
  3002                           ;ms83fxx02_motor.c: 455: Motor_Stop();
  3003  01CA  223F  118A         	fcall	_Motor_Stop
  3004                           
  3005                           ;ms83fxx02_motor.c: 456: Motor_SetStatus(MOTOR_MODE_STOP);
  3006  01CC  3001               	movlw	1
  3007  01CD  2212  118A         	fcall	_Motor_SetStatus
  3008                           
  3009                           ;ms83fxx02_motor.c: 457: MotorOperationTimer_Stop();
  3010  01CF  2A1D               	ljmp	l15174
  3011  01D0                     l15348:	
  3012  01D0  084A               	movf	Motor_HandleStatusChangeEvt@status,w
  3013                           
  3014                           ; Switch size 1, requested type "space"
  3015                           ; Number of cases is 4, Range of values is 1 to 4
  3016                           ; switch strategies available:
  3017                           ; Name         Instructions Cycles
  3018                           ; simple_byte           13     7 (average)
  3019                           ; direct_byte           18    10 (fixed)
  3020                           ; jumptable            263     9 (fixed)
  3021                           ;	Chosen strategy is simple_byte
  3022  01D1  3A01               	xorlw	1	; case 1
  3023  01D2  1903               	skipnz
  3024  01D3  2972               	goto	l15300
  3025  01D4  3A03               	xorlw	3	; case 2
  3026  01D5  1903               	skipnz
  3027  01D6  2985               	goto	l15314
  3028  01D7  3A01               	xorlw	1	; case 3
  3029  01D8  1903               	skipnz
  3030  01D9  29A5               	goto	l15328
  3031  01DA  3A07               	xorlw	7	; case 4
  3032  01DB  1903               	skipnz
  3033  01DC  29C5               	goto	l15342
  3034  01DD  2A11               	goto	l8915
  3035                           
  3036                           ;ms83fxx02_motor.c: 466: }
  3037  01DE  0008               	return
  3038  01DF                     l15350:	
  3039                           
  3040                           ;ms83fxx02_motor.c: 467: else
  3041                           ;ms83fxx02_motor.c: 468: {
  3042                           ;ms83fxx02_motor.c: 470: LEDTimer_DispRunLimitCmd(ENABLE);
  3043  01DF  3001               	movlw	1
  3044  01E0  22E1  118A         	fcall	_LEDTimer_DispRunLimitCmd
  3045                           
  3046                           ;ms83fxx02_motor.c: 473: if(KEY_GetPressStatus())
  3047  01E2  2304  118A         	fcall	_KEY_GetPressStatus
  3048  01E4  3A00               	xorlw	0
  3049  01E5  1903               	skipnz
  3050  01E6  29EB               	goto	l15358
  3051                           
  3052                           ;ms83fxx02_motor.c: 474: {
  3053                           ;ms83fxx02_motor.c: 475: key_press_time_count = 0;
  3054  01E7  01BF               	clrf	_key_press_time_count	;volatile
  3055                           
  3056                           ;ms83fxx02_motor.c: 477: MotorOperationTimer_Init(MotorOperationTimer_8s);
  3057  01E8  3003               	movlw	3
  3058  01E9  22B7  118A         	fcall	_MotorOperationTimer_Init
  3059  01EB                     l15358:	
  3060                           
  3061                           ;ms83fxx02_motor.c: 478: }
  3062                           ;ms83fxx02_motor.c: 480: if(key_press_time_count)
  3063  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  3064  01EC  083F               	movf	_key_press_time_count,w	;volatile
  3065  01ED  1903               	btfsc	3,2
  3066  01EE  2A04               	goto	l15362
  3067                           
  3068                           ;ms83fxx02_motor.c: 481: {
  3069                           ;ms83fxx02_motor.c: 484: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  3070  01EF  3004               	movlw	4
  3071  01F0  00C4               	movwf	?_GPIO_WriteBit
  3072  01F1  3000               	movlw	0
  3073  01F2  01C5               	clrf	?_GPIO_WriteBit+1
  3074  01F3  2229  118A         	fcall	_GPIO_WriteBit
  3075                           
  3076                           ;ms83fxx02_motor.c: 485: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  3077  01F5  3008               	movlw	8
  3078  01F6  00C4               	movwf	?_GPIO_WriteBit
  3079  01F7  3000               	movlw	0
  3080  01F8  01C5               	clrf	?_GPIO_WriteBit+1
  3081  01F9  2229  118A         	fcall	_GPIO_WriteBit
  3082  01FB  3001               	movlw	1
  3083                           
  3084                           ;ms83fxx02_motor.c: 486: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  3085  01FC  01C4               	clrf	?_GPIO_WriteBit
  3086  01FD  0AC4               	incf	?_GPIO_WriteBit,f
  3087  01FE  01C5               	clrf	?_GPIO_WriteBit+1
  3088  01FF  2229  118A         	fcall	_GPIO_WriteBit
  3089                           
  3090                           ;ms83fxx02_motor.c: 489: LEDTimer_DispRunLimitCmd(DISABLE);
  3091  0201  3000               	movlw	0
  3092  0202  22E1  118A         	fcall	_LEDTimer_DispRunLimitCmd
  3093  0204                     l15362:	
  3094                           
  3095                           ;ms83fxx02_motor.c: 490: }
  3096                           ;ms83fxx02_motor.c: 492: if(KEY_GetReleaseStatus())
  3097  0204  2216  118A         	fcall	_KEY_GetReleaseStatus
  3098  0206  3A00               	xorlw	0
  3099  0207  1903               	skipnz
  3100  0208  0008               	return
  3101                           
  3102                           ;ms83fxx02_motor.c: 493: {
  3103                           ;ms83fxx02_motor.c: 494: if(key_press_time_count)
  3104  0209  083F               	movf	_key_press_time_count,w	;volatile
  3105  020A  1903               	btfsc	3,2
  3106  020B  2A10               	goto	l15368
  3107                           
  3108                           ;ms83fxx02_motor.c: 495: {
  3109                           ;ms83fxx02_motor.c: 497: motor_oper_record = 0;
  3110  020C  01B6               	clrf	_motor_oper_record	;volatile
  3111  020D  01B7               	clrf	_motor_oper_record+1	;volatile
  3112                           
  3113                           ;ms83fxx02_motor.c: 498: key_press_time_count = 0;
  3114  020E  01BF               	clrf	_key_press_time_count	;volatile
  3115                           
  3116                           ;ms83fxx02_motor.c: 499: }
  3117  020F  0008               	return
  3118  0210                     l15368:	
  3119                           
  3120                           ;ms83fxx02_motor.c: 500: else
  3121                           ;ms83fxx02_motor.c: 501: {
  3122                           ;ms83fxx02_motor.c: 502: MotorOperationTimer_Stop();
  3123  0210  221D               	fcall	_MotorOperationTimer_Stop
  3124  0211                     l8915:	
  3125  0211  0008               	return
  3126  0212                     __end_of_Motor_HandleStatusChangeEvt:	
  3127  0212                     __ptext1695:	
  3128 ;; =============== function _LEDTimer_DispRunLimitCmd ends ============
  3129                           
  3130                           
  3131 ;; *************** function _Motor_SetStatus *****************
  3132 ;; Defined at:
  3133 ;;		line 122 in file "ms83fxx02_motor.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  status          1    wreg     enum E1552
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  status          1    0[BANK0 ] enum E1552
  3138 ;; Return value:  Size  Location     Type
  3139 ;;		None               void
  3140 ;; Registers used:
  3141 ;;		wreg
  3142 ;; Tracked objects:
  3143 ;;		On entry : 20/0
  3144 ;;		On exit  : 60/0
  3145 ;;		Unchanged: FFF9F/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3147 ;;      Params:         0       0       0       0
  3148 ;;      Locals:         0       1       0       0
  3149 ;;      Temps:          0       0       0       0
  3150 ;;      Totals:         0       1       0       0
  3151 ;;Total ram usage:        1 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    4
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;;		_Motor_HandleStatusChangeEvt
  3159 ;;		_Battery_Detect
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162  0212                     _Motor_SetStatus:	
  3163                           
  3164                           ; Regs used in _Motor_SetStatus: [wreg]
  3165                           ;Motor_SetStatus@status stored from wreg
  3166  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3167  0213  00C4               	movwf	Motor_SetStatus@status
  3168                           
  3169                           ;ms83fxx02_motor.c: 123: motor_status = status;
  3170  0214  00FC               	movwf	_motor_status	;volatile
  3171  0215  0008               	return
  3172  0216                     __end_of_Motor_SetStatus:	
  3173  0216                     __ptext1685:	
  3174 ;; =============== function _KEY_GetPressStatus ends ============
  3175                           
  3176                           
  3177 ;; *************** function _KEY_GetReleaseStatus *****************
  3178 ;; Defined at:
  3179 ;;		line 85 in file "MS83FXX02_KEY.C"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      enum E1477
  3186 ;; Registers used:
  3187 ;;		wreg, status,2
  3188 ;; Tracked objects:
  3189 ;;		On entry : 60/0
  3190 ;;		On exit  : 60/0
  3191 ;;		Unchanged: FFF9F/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3193 ;;      Params:         0       0       0       0
  3194 ;;      Locals:         0       0       0       0
  3195 ;;      Temps:          0       0       0       0
  3196 ;;      Totals:         0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    4
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_Motor_HandleStatusChangeEvt
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206  0216                     _KEY_GetReleaseStatus:	
  3207                           
  3208                           ;MS83FXX02_KEY.C: 86: if(key_release)
  3209                           
  3210                           ; Regs used in _KEY_GetReleaseStatus: [wreg+status,2]
  3211  0216  0840               	movf	_key_release,w	;volatile
  3212  0217  1903               	btfsc	3,2
  3213  0218  3400               	retlw	0
  3214                           
  3215                           ;MS83FXX02_KEY.C: 87: {
  3216                           ;MS83FXX02_KEY.C: 88: key_press = 0;
  3217  0219  01BD               	clrf	_key_press	;volatile
  3218                           
  3219                           ;MS83FXX02_KEY.C: 89: key_release = 0;
  3220  021A  01C0               	clrf	_key_release	;volatile
  3221                           
  3222                           ;MS83FXX02_KEY.C: 90: key_press_flag = 0;
  3223  021B  01BE               	clrf	_key_press_flag	;volatile
  3224                           
  3225                           ;MS83FXX02_KEY.C: 91: return SET;
  3226  021C  3401               	retlw	1
  3227  021D                     __end_of_KEY_GetReleaseStatus:	
  3228                           ;MS83FXX02_KEY.C: 92: }
  3229                           ;MS83FXX02_KEY.C: 94: return RESET;
  3230                           
  3231  021D                     __ptext1665:	
  3232 ;; =============== function _ChargeCtrl_Output ends ============
  3233                           
  3234                           
  3235 ;; *************** function _MotorOperationTimer_Stop *****************
  3236 ;; Defined at:
  3237 ;;		line 281 in file "ms83fxx02_motor.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 20/0
  3248 ;;		On exit  : 60/0
  3249 ;;		Unchanged: FFF9F/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3251 ;;      Params:         0       0       0       0
  3252 ;;      Locals:         0       0       0       0
  3253 ;;      Temps:          0       0       0       0
  3254 ;;      Totals:         0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    5
  3258 ;; This function calls:
  3259 ;;		_Motor_CheckRunLimit
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;;		_Motor_HandleStatusChangeEvt
  3263 ;;		_Battery_Detect
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266  021D                     _MotorOperationTimer_Stop:	
  3267  021D                     l15174:	
  3268                           ; Regs used in _MotorOperationTimer_Stop: [wreg+status,2+pclath+cstack]
  3269                           
  3270                           
  3271                           ;ms83fxx02_motor.c: 283: TMR4ON = 0;
  3272  021D  1703               	bsf	3,6	;RP1=1, select bank2
  3273  021E  1116               	bcf	22,2
  3274                           
  3275                           ;ms83fxx02_motor.c: 285: TMR4IE = 0;
  3276  021F  1096               	bcf	22,1
  3277                           
  3278                           ;ms83fxx02_motor.c: 287: if(!Motor_CheckRunLimit())
  3279  0220  22EA  118A         	fcall	_Motor_CheckRunLimit
  3280  0222  3800               	iorlw	0
  3281  0223  1D03               	skipz
  3282  0224  0008               	return
  3283                           
  3284                           ;ms83fxx02_motor.c: 288: {
  3285                           ;ms83fxx02_motor.c: 290: motor_timing_running_flag = 1;
  3286  0225  01D9               	clrf	_motor_timing_running_flag
  3287  0226  0AD9               	incf	_motor_timing_running_flag,f
  3288                           
  3289                           ;ms83fxx02_motor.c: 291: motor_intr_count = 0;
  3290  0227  01FD               	clrf	_motor_intr_count	;volatile
  3291  0228  0008               	return
  3292  0229                     __end_of_MotorOperationTimer_Stop:	
  3293  0229                     __ptext1699:	
  3294 ;; =============== function _Motor_GetStatus ends ============
  3295                           
  3296                           
  3297 ;; *************** function _GPIO_WriteBit *****************
  3298 ;; Defined at:
  3299 ;;		line 68 in file "ms83fxx02_gpio.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  GPIOx           1    wreg     enum E1491
  3302 ;;  GPIO_Pin        1    0[BANK0 ] unsigned char 
  3303 ;;  BitVal          1    1[BANK0 ] enum E1499
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  GPIOx           1    2[BANK0 ] enum E1491
  3306 ;; Return value:  Size  Location     Type
  3307 ;;		None               void
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 60/0
  3312 ;;		On exit  : 60/0
  3313 ;;		Unchanged: FFF9F/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3315 ;;      Params:         0       2       0       0
  3316 ;;      Locals:         0       1       0       0
  3317 ;;      Temps:          0       0       0       0
  3318 ;;      Totals:         0       3       0       0
  3319 ;;Total ram usage:        3 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    4
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_charge_control
  3326 ;;		_ChargeCtrl_Init
  3327 ;;		_ChargeCtrl_Output
  3328 ;;		_LED_Init
  3329 ;;		_LED_DisplayMotorStatus
  3330 ;;		_LED_VoltageChargeOutput
  3331 ;;		_LED_UnderVoltageOutput
  3332 ;;		_Motor_Stop
  3333 ;;		_Motor_HandleStatusChangeEvt
  3334 ;;		_Battery_Detect
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337  0229                     _GPIO_WriteBit:	
  3338                           
  3339                           ; Regs used in _GPIO_WriteBit: [wreg+status,2+status,0]
  3340                           ;GPIO_WriteBit@GPIOx stored from wreg
  3341  0229  00C6               	movwf	GPIO_WriteBit@GPIOx
  3342                           
  3343                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
  3344  022A  08C6               	movf	GPIO_WriteBit@GPIOx,f
  3345  022B  1D03               	skipz
  3346  022C  2A36               	goto	l14482
  3347                           
  3348                           ;ms83fxx02_gpio.c: 70: {
  3349                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
  3350  022D  0845               	movf	GPIO_WriteBit@BitVal,w
  3351  022E  1903               	btfsc	3,2
  3352  022F  2A33               	goto	l14480
  3353                           
  3354                           ;ms83fxx02_gpio.c: 72: {
  3355                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
  3356  0230  0844               	movf	GPIO_WriteBit@GPIO_Pin,w
  3357  0231  0485               	iorwf	5,f	;volatile
  3358                           
  3359                           ;ms83fxx02_gpio.c: 74: }
  3360  0232  0008               	return
  3361  0233                     l14480:	
  3362                           
  3363                           ;ms83fxx02_gpio.c: 75: else
  3364                           ;ms83fxx02_gpio.c: 76: {
  3365                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
  3366  0233  0944               	comf	GPIO_WriteBit@GPIO_Pin,w
  3367  0234  0585               	andwf	5,f	;volatile
  3368  0235  0008               	return
  3369  0236                     l14482:	
  3370                           
  3371                           ;ms83fxx02_gpio.c: 80: else
  3372                           ;ms83fxx02_gpio.c: 81: {
  3373                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
  3374  0236  0845               	movf	GPIO_WriteBit@BitVal,w
  3375  0237  1903               	btfsc	3,2
  3376  0238  2A3C               	goto	l14486
  3377                           
  3378                           ;ms83fxx02_gpio.c: 83: {
  3379                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
  3380  0239  0844               	movf	GPIO_WriteBit@GPIO_Pin,w
  3381  023A  0487               	iorwf	7,f	;volatile
  3382                           
  3383                           ;ms83fxx02_gpio.c: 85: }
  3384  023B  0008               	return
  3385  023C                     l14486:	
  3386                           
  3387                           ;ms83fxx02_gpio.c: 86: else
  3388                           ;ms83fxx02_gpio.c: 87: {
  3389                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
  3390  023C  0944               	comf	GPIO_WriteBit@GPIO_Pin,w
  3391  023D  0587               	andwf	7,f	;volatile
  3392  023E  0008               	return
  3393  023F                     __end_of_GPIO_WriteBit:	
  3394  023F                     __ptext1666:	
  3395 ;; =============== function _MotorOperationTimer_Stop ends ============
  3396                           
  3397                           
  3398 ;; *************** function _Motor_Stop *****************
  3399 ;; Defined at:
  3400 ;;		line 184 in file "ms83fxx02_motor.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;		None
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;		None               void
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0, pclath, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 60/0
  3411 ;;		On exit  : 60/0
  3412 ;;		Unchanged: FFF9F/0
  3413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3414 ;;      Params:         0       0       0       0
  3415 ;;      Locals:         0       0       0       0
  3416 ;;      Temps:          0       0       0       0
  3417 ;;      Totals:         0       0       0       0
  3418 ;;Total ram usage:        0 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    5
  3421 ;; This function calls:
  3422 ;;		_GPIO_WriteBit
  3423 ;; This function is called by:
  3424 ;;		_main
  3425 ;;		_Motor_HandleStatusChangeEvt
  3426 ;;		_Battery_Detect
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429  023F                     _Motor_Stop:	
  3430                           
  3431                           ;ms83fxx02_motor.c: 188: TRISC4 = 1;
  3432                           
  3433                           ; Regs used in _Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  3434  023F  1683               	bsf	3,5	;RP0=1, select bank1
  3435  0240  1607               	bsf	7,4
  3436                           
  3437                           ;ms83fxx02_motor.c: 190: TMR2ON = 0;
  3438  0241  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0242  3004               	movlw	4
  3440  0243  1112               	bcf	18,2
  3441                           
  3442                           ;ms83fxx02_motor.c: 194: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  3443  0244  00C4               	movwf	?_GPIO_WriteBit
  3444  0245  3000               	movlw	0
  3445  0246  01C5               	clrf	?_GPIO_WriteBit+1
  3446  0247  2229  118A         	fcall	_GPIO_WriteBit
  3447                           
  3448                           ;ms83fxx02_motor.c: 195: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  3449  0249  3008               	movlw	8
  3450  024A  00C4               	movwf	?_GPIO_WriteBit
  3451  024B  3000               	movlw	0
  3452  024C  01C5               	clrf	?_GPIO_WriteBit+1
  3453  024D  2229  118A         	fcall	_GPIO_WriteBit
  3454  024F  3001               	movlw	1
  3455                           
  3456                           ;ms83fxx02_motor.c: 196: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  3457  0250  01C4               	clrf	?_GPIO_WriteBit
  3458  0251  0AC4               	incf	?_GPIO_WriteBit,f
  3459  0252  01C5               	clrf	?_GPIO_WriteBit+1
  3460  0253  2A29               	ljmp	_GPIO_WriteBit
  3461  0254                     __end_of_Motor_Stop:	
  3462  0254                     __ptext1654:	
  3463 ;; =============== function _Driver_Init ends ============
  3464                           
  3465                           
  3466 ;; *************** function _Motor_Start *****************
  3467 ;; Defined at:
  3468 ;;		line 142 in file "ms83fxx02_motor.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  status          1    wreg     enum E1552
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  status          1    5[BANK0 ] enum E1552
  3473 ;; Return value:  Size  Location     Type
  3474 ;;		None               void
  3475 ;; Registers used:
  3476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 60/0
  3479 ;;		On exit  : 60/40
  3480 ;;		Unchanged: FFF9F/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3482 ;;      Params:         0       0       0       0
  3483 ;;      Locals:         0       1       0       0
  3484 ;;      Temps:          0       0       0       0
  3485 ;;      Totals:         0       1       0       0
  3486 ;;Total ram usage:        1 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    6
  3489 ;; This function calls:
  3490 ;;		_LED_DisplayMotorStatus
  3491 ;;		_Motor_Init
  3492 ;;		_SwitchModeTimer_Cmd
  3493 ;;		_SwitchModeTimer_INTConfig
  3494 ;; This function is called by:
  3495 ;;		_Motor_HandleStatusChangeEvt
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498  0254                     _Motor_Start:	
  3499                           
  3500                           ; Regs used in _Motor_Start: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3501                           ;Motor_Start@status stored from wreg
  3502  0254  00C9               	movwf	Motor_Start@status
  3503                           
  3504                           ;ms83fxx02_motor.c: 144: switch(status)
  3505  0255  2A68               	goto	l15270
  3506  0256                     l15262:	
  3507                           
  3508                           ;ms83fxx02_motor.c: 147: {
  3509                           ;ms83fxx02_motor.c: 148: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000004));
  3510  0256  3004               	movlw	4
  3511  0257  00C7               	movwf	?_LED_DisplayMotorStatus
  3512  0258  3000               	movlw	0
  3513  0259  227B  118A         	fcall	_LED_DisplayMotorStatus
  3514                           
  3515                           ;ms83fxx02_motor.c: 149: break;
  3516  025B  2A73               	goto	l15272
  3517  025C                     l15264:	
  3518                           
  3519                           ;ms83fxx02_motor.c: 152: {
  3520                           ;ms83fxx02_motor.c: 153: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000008));
  3521  025C  3008               	movlw	8
  3522  025D  00C7               	movwf	?_LED_DisplayMotorStatus
  3523  025E  3000               	movlw	0
  3524  025F  227B  118A         	fcall	_LED_DisplayMotorStatus
  3525                           
  3526                           ;ms83fxx02_motor.c: 154: break;
  3527  0261  2A73               	goto	l15272
  3528  0262                     l15266:	
  3529  0262  3001               	movlw	1
  3530                           
  3531                           ;ms83fxx02_motor.c: 157: {
  3532                           ;ms83fxx02_motor.c: 158: LED_DisplayMotorStatus(GPIOC, ((uint8_t)0x00000001));
  3533  0263  01C7               	clrf	?_LED_DisplayMotorStatus
  3534  0264  0AC7               	incf	?_LED_DisplayMotorStatus,f
  3535  0265  227B  118A         	fcall	_LED_DisplayMotorStatus
  3536                           
  3537                           ;ms83fxx02_motor.c: 159: break;
  3538  0267  2A73               	goto	l15272
  3539  0268                     l15270:	
  3540  0268  0849               	movf	Motor_Start@status,w
  3541                           
  3542                           ; Switch size 1, requested type "space"
  3543                           ; Number of cases is 3, Range of values is 2 to 4
  3544                           ; switch strategies available:
  3545                           ; Name         Instructions Cycles
  3546                           ; simple_byte           10     6 (average)
  3547                           ; direct_byte           16    10 (fixed)
  3548                           ; jumptable            263     9 (fixed)
  3549                           ;	Chosen strategy is simple_byte
  3550  0269  3A02               	xorlw	2	; case 2
  3551  026A  1903               	skipnz
  3552  026B  2A56               	goto	l15262
  3553  026C  3A01               	xorlw	1	; case 3
  3554  026D  1903               	skipnz
  3555  026E  2A5C               	goto	l15264
  3556  026F  3A07               	xorlw	7	; case 4
  3557  0270  1903               	skipnz
  3558  0271  2A62               	goto	l15266
  3559  0272  2A73               	goto	l15272
  3560  0273                     l15272:	
  3561                           
  3562                           ;ms83fxx02_motor.c: 167: Motor_Init(status);
  3563  0273  0849               	movf	Motor_Start@status,w
  3564  0274  2312  118A         	fcall	_Motor_Init
  3565                           
  3566                           ;ms83fxx02_motor.c: 170: SwitchModeTimer_Cmd(ENABLE);
  3567  0276  3001               	movlw	1
  3568  0277  2294  118A         	fcall	_SwitchModeTimer_Cmd
  3569                           
  3570                           ;ms83fxx02_motor.c: 171: SwitchModeTimer_INTConfig(ENABLE);
  3571  0279  3001               	movlw	1
  3572  027A  2AAB               	ljmp	_SwitchModeTimer_INTConfig
  3573  027B                     __end_of_Motor_Start:	
  3574  027B                     __ptext1661:	
  3575 ;; =============== function _LED_UnderVoltageOutput ends ============
  3576                           
  3577                           
  3578 ;; *************** function _LED_DisplayMotorStatus *****************
  3579 ;; Defined at:
  3580 ;;		line 56 in file "ms83fxx02_led.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;  GPIOx           1    wreg     enum E1491
  3583 ;;  GPIO_Pin        1    3[BANK0 ] unsigned char 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  GPIOx           1    4[BANK0 ] enum E1491
  3586 ;; Return value:  Size  Location     Type
  3587 ;;		None               void
  3588 ;; Registers used:
  3589 ;;		wreg, status,2, status,0, pclath, cstack
  3590 ;; Tracked objects:
  3591 ;;		On entry : 60/0
  3592 ;;		On exit  : 60/0
  3593 ;;		Unchanged: FFF9F/0
  3594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3595 ;;      Params:         0       1       0       0
  3596 ;;      Locals:         0       1       0       0
  3597 ;;      Temps:          0       0       0       0
  3598 ;;      Totals:         0       2       0       0
  3599 ;;Total ram usage:        2 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    5
  3602 ;; This function calls:
  3603 ;;		_GPIO_WriteBit
  3604 ;; This function is called by:
  3605 ;;		_Motor_Start
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608  027B                     _LED_DisplayMotorStatus:	
  3609                           
  3610                           ; Regs used in _LED_DisplayMotorStatus: [wreg+status,2+status,0+pclath+cstack]
  3611                           ;LED_DisplayMotorStatus@GPIOx stored from wreg
  3612  027B  00C8               	movwf	LED_DisplayMotorStatus@GPIOx
  3613                           
  3614                           ;ms83fxx02_led.c: 57: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  3615  027C  3004               	movlw	4
  3616  027D  00C4               	movwf	?_GPIO_WriteBit
  3617  027E  3000               	movlw	0
  3618  027F  01C5               	clrf	?_GPIO_WriteBit+1
  3619  0280  2229  118A         	fcall	_GPIO_WriteBit
  3620                           
  3621                           ;ms83fxx02_led.c: 58: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  3622  0282  3008               	movlw	8
  3623  0283  00C4               	movwf	?_GPIO_WriteBit
  3624  0284  3000               	movlw	0
  3625  0285  01C5               	clrf	?_GPIO_WriteBit+1
  3626  0286  2229  118A         	fcall	_GPIO_WriteBit
  3627  0288  3001               	movlw	1
  3628                           
  3629                           ;ms83fxx02_led.c: 59: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  3630  0289  01C4               	clrf	?_GPIO_WriteBit
  3631  028A  0AC4               	incf	?_GPIO_WriteBit,f
  3632  028B  01C5               	clrf	?_GPIO_WriteBit+1
  3633  028C  2229  118A         	fcall	_GPIO_WriteBit
  3634                           
  3635                           ;ms83fxx02_led.c: 60: GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);
  3636  028E  0847               	movf	LED_DisplayMotorStatus@GPIO_Pin,w
  3637  028F  00C4               	movwf	?_GPIO_WriteBit
  3638  0290  01C5               	clrf	?_GPIO_WriteBit+1
  3639  0291  0AC5               	incf	?_GPIO_WriteBit+1,f
  3640  0292  0848               	movf	LED_DisplayMotorStatus@GPIOx,w
  3641  0293  2A29               	ljmp	_GPIO_WriteBit
  3642  0294                     __end_of_LED_DisplayMotorStatus:	
  3643  0294                     __ptext1681:	
  3644 ;; =============== function _SwitchModeTimer_INTConfig ends ============
  3645                           
  3646                           
  3647 ;; *************** function _SwitchModeTimer_Cmd *****************
  3648 ;; Defined at:
  3649 ;;		line 39 in file "ms83fxx02_tim.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  NewState        1    wreg     enum E1482
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  NewState        1    0[BANK0 ] enum E1482
  3654 ;; Return value:  Size  Location     Type
  3655 ;;		None               void
  3656 ;; Registers used:
  3657 ;;		wreg, status,2
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/40
  3660 ;;		On exit  : 60/40
  3661 ;;		Unchanged: FFF9F/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3663 ;;      Params:         0       0       0       0
  3664 ;;      Locals:         0       1       0       0
  3665 ;;      Temps:          0       0       0       0
  3666 ;;      Totals:         0       1       0       0
  3667 ;;Total ram usage:        1 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    4
  3670 ;; This function calls:
  3671 ;;		Nothing
  3672 ;; This function is called by:
  3673 ;;		_Motor_Start
  3674 ;;		_Motor_HandleStatusChangeEvt
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677  0294                     _SwitchModeTimer_Cmd:	
  3678                           
  3679                           ; Regs used in _SwitchModeTimer_Cmd: [wreg+status,2]
  3680                           ;SwitchModeTimer_Cmd@NewState stored from wreg
  3681  0294  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0295  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0296  00C4               	movwf	SwitchModeTimer_Cmd@NewState
  3684                           
  3685                           ;ms83fxx02_tim.c: 40: switch_mode_time_out = 0;
  3686  0297  01C2               	clrf	_switch_mode_time_out	;volatile
  3687                           
  3688                           ;ms83fxx02_tim.c: 42: if(NewState != DISABLE)
  3689  0298  0844               	movf	SwitchModeTimer_Cmd@NewState,w
  3690                           
  3691                           ;ms83fxx02_tim.c: 43: {
  3692                           ;ms83fxx02_tim.c: 45: TMR5ON = 0;
  3693  0299  1703               	bsf	3,6	;RP1=1, select bank2
  3694  029A  111C               	bcf	28,2
  3695  029B  1903               	btfsc	3,2
  3696  029C  0008               	return
  3697                           
  3698                           ;ms83fxx02_tim.c: 47: PWM5CR0 = 0b01110010;
  3699  029D  3072               	movlw	114
  3700  029E  009B               	movwf	27	;volatile
  3701                           
  3702                           ;ms83fxx02_tim.c: 50: PWM5CR1 = 0b00111000;
  3703  029F  3038               	movlw	56
  3704  02A0  009C               	movwf	28	;volatile
  3705                           
  3706                           ;ms83fxx02_tim.c: 53: T5CKDIV = 151;
  3707  02A1  3097               	movlw	151
  3708  02A2  009D               	movwf	29	;volatile
  3709                           
  3710                           ;ms83fxx02_tim.c: 55: TMR5H = 0x0F;
  3711  02A3  300F               	movlw	15
  3712  02A4  0099               	movwf	25	;volatile
  3713                           
  3714                           ;ms83fxx02_tim.c: 56: TMR5L = 0;
  3715  02A5  0198               	clrf	24	;volatile
  3716                           
  3717                           ;ms83fxx02_tim.c: 57: PR5L = 0xFF;
  3718  02A6  30FF               	movlw	255
  3719  02A7  009A               	movwf	26	;volatile
  3720                           
  3721                           ;ms83fxx02_tim.c: 60: TMR5IF = 0;
  3722  02A8  101C               	bcf	28,0
  3723                           
  3724                           ;ms83fxx02_tim.c: 63: TMR5ON = 1;
  3725  02A9  151C               	bsf	28,2
  3726                           
  3727                           ;ms83fxx02_tim.c: 64: }
  3728  02AA  0008               	return
  3729  02AB                     __end_of_SwitchModeTimer_Cmd:	
  3730                           ;ms83fxx02_tim.c: 65: else
  3731                           ;ms83fxx02_tim.c: 66: {
  3732                           ;ms83fxx02_tim.c: 68: TMR5ON = 0;
  3733                           
  3734  02AB                     __ptext1680:	
  3735 ;; =============== function _Motor_CheckRunLimit ends ============
  3736                           
  3737                           
  3738 ;; *************** function _SwitchModeTimer_INTConfig *****************
  3739 ;; Defined at:
  3740 ;;		line 79 in file "ms83fxx02_tim.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  NewState        1    wreg     enum E1482
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  NewState        1    0[BANK0 ] enum E1482
  3745 ;; Return value:  Size  Location     Type
  3746 ;;		None               void
  3747 ;; Registers used:
  3748 ;;		wreg
  3749 ;; Tracked objects:
  3750 ;;		On entry : 20/0
  3751 ;;		On exit  : 60/40
  3752 ;;		Unchanged: FFF9F/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3754 ;;      Params:         0       0       0       0
  3755 ;;      Locals:         0       1       0       0
  3756 ;;      Temps:          0       0       0       0
  3757 ;;      Totals:         0       1       0       0
  3758 ;;Total ram usage:        1 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    4
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		_Motor_Start
  3765 ;;		_Motor_HandleStatusChangeEvt
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768  02AB                     _SwitchModeTimer_INTConfig:	
  3769                           
  3770                           ; Regs used in _SwitchModeTimer_INTConfig: [wreg]
  3771                           ;SwitchModeTimer_INTConfig@NewState stored from wreg
  3772  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3773  02AC  00C4               	movwf	SwitchModeTimer_INTConfig@NewState
  3774                           
  3775                           ;ms83fxx02_tim.c: 80: if(NewState != DISABLE)
  3776  02AD  0844               	movf	SwitchModeTimer_INTConfig@NewState,w
  3777                           
  3778                           ;ms83fxx02_tim.c: 81: {
  3779                           ;ms83fxx02_tim.c: 83: TMR5IE = 1;
  3780  02AE  1703               	bsf	3,6	;RP1=1, select bank2
  3781  02AF  1903               	btfsc	3,2
  3782  02B0  2AB5               	goto	L5
  3783  02B1  149C               	bsf	28,1
  3784                           
  3785                           ;ms83fxx02_tim.c: 84: PEIE = 1;
  3786  02B2  170B               	bsf	11,6
  3787                           
  3788                           ;ms83fxx02_tim.c: 85: GIE = 1;
  3789  02B3  178B               	bsf	11,7
  3790                           
  3791                           ;ms83fxx02_tim.c: 86: }
  3792  02B4  0008               	return
  3793  02B5                     L5:	
  3794                           ;ms83fxx02_tim.c: 87: else
  3795                           ;ms83fxx02_tim.c: 88: {
  3796                           ;ms83fxx02_tim.c: 90: TMR5IE = 0;
  3797                           
  3798  02B5  109C               	bcf	28,1
  3799  02B6  0008               	return
  3800  02B7                     __end_of_SwitchModeTimer_INTConfig:	
  3801  02B7                     __ptext1678:	
  3802 ;; =============== function _SwitchModeTimer_GetINTStatus ends ============
  3803                           
  3804                           
  3805 ;; *************** function _MotorOperationTimer_Init *****************
  3806 ;; Defined at:
  3807 ;;		line 219 in file "ms83fxx02_motor.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  time            1    wreg     enum E1558
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  time            1    0[BANK0 ] enum E1558
  3812 ;; Return value:  Size  Location     Type
  3813 ;;		None               void
  3814 ;; Registers used:
  3815 ;;		wreg, status,2
  3816 ;; Tracked objects:
  3817 ;;		On entry : 60/0
  3818 ;;		On exit  : 60/40
  3819 ;;		Unchanged: FFF9F/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3821 ;;      Params:         0       0       0       0
  3822 ;;      Locals:         0       1       0       0
  3823 ;;      Temps:          0       0       0       0
  3824 ;;      Totals:         0       1       0       0
  3825 ;;Total ram usage:        1 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    4
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_Motor_HandleStatusChangeEvt
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834  02B7                     _MotorOperationTimer_Init:	
  3835                           
  3836                           ; Regs used in _MotorOperationTimer_Init: [wreg+status,2]
  3837                           ;MotorOperationTimer_Init@time stored from wreg
  3838  02B7  00C4               	movwf	MotorOperationTimer_Init@time
  3839                           
  3840                           ;ms83fxx02_motor.c: 221: TMR4ON = 0;
  3841  02B8  1703               	bsf	3,6	;RP1=1, select bank2
  3842  02B9  1116               	bcf	22,2
  3843                           
  3844                           ;ms83fxx02_motor.c: 223: if(time == MotorOperationTimer_30s)
  3845  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3846  02BB  0B44               	decfsz	MotorOperationTimer_Init@time,w
  3847  02BC  2AC4               	goto	l14872
  3848                           
  3849                           ;ms83fxx02_motor.c: 224: {
  3850                           ;ms83fxx02_motor.c: 226: PWM4CR0 = 0b01110010;
  3851  02BD  3072               	movlw	114
  3852  02BE  1703               	bsf	3,6	;RP1=1, select bank2
  3853  02BF  0095               	movwf	21	;volatile
  3854                           
  3855                           ;ms83fxx02_motor.c: 229: PWM4CR1 = 0b00111000;
  3856  02C0  3038               	movlw	56
  3857  02C1  0096               	movwf	22	;volatile
  3858                           
  3859                           ;ms83fxx02_motor.c: 234: T4CKDIV = 182;
  3860  02C2  30B6               	movlw	182
  3861  02C3  2AD5               	goto	L4
  3862  02C4                     l14872:	
  3863                           ;ms83fxx02_motor.c: 235: }
  3864                           
  3865                           
  3866                           ;ms83fxx02_motor.c: 236: else if(time == MotorOperationTimer_0_3s)
  3867  02C4  0844               	movf	MotorOperationTimer_Init@time,w
  3868  02C5  3A02               	xorlw	2
  3869  02C6  1D03               	skipz
  3870  02C7  2ACF               	goto	l14876
  3871                           
  3872                           ;ms83fxx02_motor.c: 237: {
  3873                           ;ms83fxx02_motor.c: 239: PWM4CR0 = 0b01100010;
  3874  02C8  3062               	movlw	98
  3875  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  3876  02CA  0095               	movwf	21	;volatile
  3877                           
  3878                           ;ms83fxx02_motor.c: 241: PWM4CR1 = 0b00111000;
  3879  02CB  3038               	movlw	56
  3880  02CC  0096               	movwf	22	;volatile
  3881                           
  3882                           ;ms83fxx02_motor.c: 245: T4CKDIV = 8;
  3883  02CD  3008               	movlw	8
  3884  02CE  2AD5               	goto	L4
  3885  02CF                     l14876:	
  3886                           ;ms83fxx02_motor.c: 246: }
  3887                           
  3888                           
  3889                           ;ms83fxx02_motor.c: 247: else
  3890                           ;ms83fxx02_motor.c: 248: {
  3891                           ;ms83fxx02_motor.c: 250: PWM4CR0 = 0b01110010;
  3892  02CF  3072               	movlw	114
  3893  02D0  1703               	bsf	3,6	;RP1=1, select bank2
  3894  02D1  0095               	movwf	21	;volatile
  3895                           
  3896                           ;ms83fxx02_motor.c: 253: PWM4CR1 = 0b00111000;
  3897  02D2  3038               	movlw	56
  3898  02D3  0096               	movwf	22	;volatile
  3899                           
  3900                           ;ms83fxx02_motor.c: 256: T4CKDIV = 243;
  3901  02D4  30F3               	movlw	243
  3902  02D5                     L4:	
  3903  02D5  0097               	movwf	23	;volatile
  3904                           
  3905                           ;ms83fxx02_motor.c: 257: }
  3906                           ;ms83fxx02_motor.c: 259: TMR4H = 0x0F;
  3907  02D6  300F               	movlw	15
  3908  02D7  0093               	movwf	19	;volatile
  3909                           
  3910                           ;ms83fxx02_motor.c: 260: TMR4L = 0;
  3911  02D8  0192               	clrf	18	;volatile
  3912                           
  3913                           ;ms83fxx02_motor.c: 261: PR4L = 0xFF;
  3914  02D9  30FF               	movlw	255
  3915  02DA  0094               	movwf	20	;volatile
  3916                           
  3917                           ;ms83fxx02_motor.c: 264: TMR4IF = 0;
  3918  02DB  1016               	bcf	22,0
  3919                           
  3920                           ;ms83fxx02_motor.c: 267: TMR4ON = 1;
  3921  02DC  1516               	bsf	22,2
  3922                           
  3923                           ;ms83fxx02_motor.c: 270: TMR4IE = 1;
  3924  02DD  1496               	bsf	22,1
  3925                           
  3926                           ;ms83fxx02_motor.c: 271: PEIE = 1;
  3927  02DE  170B               	bsf	11,6
  3928                           
  3929                           ;ms83fxx02_motor.c: 272: GIE = 1;
  3930  02DF  178B               	bsf	11,7
  3931  02E0  0008               	return
  3932  02E1                     __end_of_MotorOperationTimer_Init:	
  3933  02E1                     __ptext1694:	
  3934 ;; =============== function _ChargeTimer_Cmd ends ============
  3935                           
  3936                           
  3937 ;; *************** function _LEDTimer_DispRunLimitCmd *****************
  3938 ;; Defined at:
  3939 ;;		line 181 in file "ms83fxx02_led_timer.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  NewState        1    wreg     enum E1482
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  NewState        1    0[BANK0 ] enum E1482
  3944 ;; Return value:  Size  Location     Type
  3945 ;;		None               void
  3946 ;; Registers used:
  3947 ;;		wreg, status,2
  3948 ;; Tracked objects:
  3949 ;;		On entry : 60/0
  3950 ;;		On exit  : 60/0
  3951 ;;		Unchanged: FFF9F/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3953 ;;      Params:         0       0       0       0
  3954 ;;      Locals:         0       1       0       0
  3955 ;;      Temps:          0       0       0       0
  3956 ;;      Totals:         0       1       0       0
  3957 ;;Total ram usage:        1 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    4
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;;		_Motor_HandleStatusChangeEvt
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967  02E1                     _LEDTimer_DispRunLimitCmd:	
  3968                           
  3969                           ; Regs used in _LEDTimer_DispRunLimitCmd: [wreg+status,2]
  3970                           ;LEDTimer_DispRunLimitCmd@NewState stored from wreg
  3971  02E1  00C4               	movwf	LEDTimer_DispRunLimitCmd@NewState
  3972                           
  3973                           ;ms83fxx02_led_timer.c: 182: if(NewState != DISABLE)
  3974  02E2  0844               	movf	LEDTimer_DispRunLimitCmd@NewState,w
  3975  02E3  1903               	btfsc	3,2
  3976  02E4  2AE8               	goto	l14502
  3977                           
  3978                           ;ms83fxx02_led_timer.c: 183: {
  3979                           ;ms83fxx02_led_timer.c: 184: run_limit_display_en = 1;
  3980  02E5  01C1               	clrf	_run_limit_display_en	;volatile
  3981  02E6  0AC1               	incf	_run_limit_display_en,f	;volatile
  3982                           
  3983                           ;ms83fxx02_led_timer.c: 185: }
  3984  02E7  0008               	return
  3985  02E8                     l14502:	
  3986                           
  3987                           ;ms83fxx02_led_timer.c: 186: else
  3988                           ;ms83fxx02_led_timer.c: 187: {
  3989                           ;ms83fxx02_led_timer.c: 188: run_limit_display_en = 0;
  3990  02E8  01C1               	clrf	_run_limit_display_en	;volatile
  3991  02E9  0008               	return
  3992  02EA                     __end_of_LEDTimer_DispRunLimitCmd:	
  3993  02EA                     __ptext1679:	
  3994 ;; =============== function _MotorOperationTimer_Init ends ============
  3995                           
  3996                           
  3997 ;; *************** function _Motor_CheckRunLimit *****************
  3998 ;; Defined at:
  3999 ;;		line 200 in file "ms83fxx02_motor.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      unsigned char 
  4006 ;; Registers used:
  4007 ;;		wreg
  4008 ;; Tracked objects:
  4009 ;;		On entry : 20/0
  4010 ;;		On exit  : 60/0
  4011 ;;		Unchanged: FFF9F/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4013 ;;      Params:         0       0       0       0
  4014 ;;      Locals:         0       0       0       0
  4015 ;;      Temps:          0       0       0       0
  4016 ;;      Totals:         0       0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    4
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_MotorOperationTimer_Stop
  4024 ;;		_Motor_HandleStatusChangeEvt
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027  02EA                     _Motor_CheckRunLimit:	
  4028                           
  4029                           ;ms83fxx02_motor.c: 204: if(motor_oper_record >= 120)
  4030                           
  4031                           ; Regs used in _Motor_CheckRunLimit: [wreg]
  4032  02EA  3000               	movlw	0
  4033  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  4034  02EC  0237               	subwf	_motor_oper_record+1,w	;volatile
  4035  02ED  3078               	movlw	120
  4036  02EE  1903               	skipnz
  4037  02EF  0236               	subwf	_motor_oper_record,w	;volatile
  4038  02F0  1803               	btfsc	3,0
  4039                           
  4040                           ;ms83fxx02_motor.c: 205: {
  4041                           ;ms83fxx02_motor.c: 206: return 1;
  4042  02F1  3401               	retlw	1
  4043                           
  4044                           ;ms83fxx02_motor.c: 207: }
  4045                           ;ms83fxx02_motor.c: 208: return 0;
  4046  02F2  3400               	retlw	0
  4047  02F3                     __end_of_Motor_CheckRunLimit:	
  4048  02F3                     __ptext1677:	
  4049 ;; =============== function _Battery_HandleData ends ============
  4050                           
  4051                           
  4052 ;; *************** function _SwitchModeTimer_GetINTStatus *****************
  4053 ;; Defined at:
  4054 ;;		line 100 in file "ms83fxx02_tim.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      enum E1477
  4061 ;; Registers used:
  4062 ;;		wreg, status,2
  4063 ;; Tracked objects:
  4064 ;;		On entry : 60/0
  4065 ;;		On exit  : 60/0
  4066 ;;		Unchanged: FFF9F/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4068 ;;      Params:         0       0       0       0
  4069 ;;      Locals:         0       0       0       0
  4070 ;;      Temps:          0       0       0       0
  4071 ;;      Totals:         0       0       0       0
  4072 ;;Total ram usage:        0 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    4
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_Motor_HandleStatusChangeEvt
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081  02F3                     _SwitchModeTimer_GetINTStatus:	
  4082                           
  4083                           ;ms83fxx02_tim.c: 101: if(switch_mode_time_out)
  4084                           
  4085                           ; Regs used in _SwitchModeTimer_GetINTStatus: [wreg+status,2]
  4086  02F3  0842               	movf	_switch_mode_time_out,w	;volatile
  4087  02F4  1903               	btfsc	3,2
  4088  02F5  3400               	retlw	0
  4089                           
  4090                           ;ms83fxx02_tim.c: 102: {
  4091                           ;ms83fxx02_tim.c: 103: switch_mode_time_out = 0;
  4092  02F6  01C2               	clrf	_switch_mode_time_out	;volatile
  4093                           
  4094                           ;ms83fxx02_tim.c: 105: return SET;
  4095  02F7  3401               	retlw	1
  4096  02F8                     __end_of_SwitchModeTimer_GetINTStatus:	
  4097                           ;ms83fxx02_tim.c: 107: else
  4098                           ;ms83fxx02_tim.c: 108: {
  4099                           ;ms83fxx02_tim.c: 109: return RESET;
  4100                           
  4101  02F8                     __ptext1660:	
  4102 ;; =============== function _EEPROM_StoreMotorData ends ============
  4103                           
  4104                           
  4105 ;; *************** function _LED_UnderVoltageOutput *****************
  4106 ;; Defined at:
  4107 ;;		line 85 in file "ms83fxx02_led.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  BitVal          1    wreg     enum E1499
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  BitVal          1    3[BANK0 ] enum E1499
  4112 ;; Return value:  Size  Location     Type
  4113 ;;		None               void
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0, pclath, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 40/20
  4118 ;;		On exit  : 60/0
  4119 ;;		Unchanged: FFF9F/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4121 ;;      Params:         0       0       0       0
  4122 ;;      Locals:         0       1       0       0
  4123 ;;      Temps:          0       0       0       0
  4124 ;;      Totals:         0       1       0       0
  4125 ;;Total ram usage:        1 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    5
  4128 ;; This function calls:
  4129 ;;		_GPIO_WriteBit
  4130 ;; This function is called by:
  4131 ;;		_Battery_Detect
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134  02F8                     _LED_UnderVoltageOutput:	
  4135                           
  4136                           ; Regs used in _LED_UnderVoltageOutput: [wreg+status,2+status,0+pclath+cstack]
  4137                           ;LED_UnderVoltageOutput@BitVal stored from wreg
  4138  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  4139  02F9  00C7               	movwf	LED_UnderVoltageOutput@BitVal
  4140                           
  4141                           ;ms83fxx02_led.c: 86: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), BitVal);
  4142  02FA  3008               	movlw	8
  4143  02FB  00C4               	movwf	?_GPIO_WriteBit
  4144  02FC  0847               	movf	LED_UnderVoltageOutput@BitVal,w
  4145  02FD  00C5               	movwf	?_GPIO_WriteBit+1
  4146  02FE  3001               	movlw	1
  4147  02FF  2A29               	ljmp	_GPIO_WriteBit
  4148  0300                     __end_of_LED_UnderVoltageOutput:	
  4149  0300                     __ptext1691:	
  4150 ;; =============== function _GPIO_Init ends ============
  4151                           
  4152                           
  4153 ;; *************** function _GetDeviceMode *****************
  4154 ;; Defined at:
  4155 ;;		line 45 in file "ms83fxx02_pwr.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      enum E1584
  4162 ;; Registers used:
  4163 ;;		wreg
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 60/0
  4167 ;;		Unchanged: FFF9F/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4169 ;;      Params:         0       0       0       0
  4170 ;;      Locals:         0       0       0       0
  4171 ;;      Temps:          0       0       0       0
  4172 ;;      Totals:         0       0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    4
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;;		_Battery_Detect
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183  0300                     _GetDeviceMode:	
  4184                           
  4185                           ;ms83fxx02_pwr.c: 46: return device_mode;
  4186                           
  4187                           ; Regs used in _GetDeviceMode: [wreg]
  4188  0300  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0301  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0302  083C               	movf	_device_mode,w	;volatile
  4191  0303  0008               	return
  4192  0304                     __end_of_GetDeviceMode:	
  4193  0304                     __ptext1684:	
  4194 ;; =============== function _LEDTimer_DispUnderVoltCmd ends ============
  4195                           
  4196                           
  4197 ;; *************** function _KEY_GetPressStatus *****************
  4198 ;; Defined at:
  4199 ;;		line 98 in file "MS83FXX02_KEY.C"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      enum E1477
  4206 ;; Registers used:
  4207 ;;		wreg, status,2
  4208 ;; Tracked objects:
  4209 ;;		On entry : 60/0
  4210 ;;		On exit  : 60/0
  4211 ;;		Unchanged: FFF9F/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4213 ;;      Params:         0       0       0       0
  4214 ;;      Locals:         0       0       0       0
  4215 ;;      Temps:          0       0       0       0
  4216 ;;      Totals:         0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    4
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_Motor_HandleStatusChangeEvt
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226  0304                     _KEY_GetPressStatus:	
  4227                           
  4228                           ;MS83FXX02_KEY.C: 99: if(key_press)
  4229                           
  4230                           ; Regs used in _KEY_GetPressStatus: [wreg+status,2]
  4231  0304  083D               	movf	_key_press,w	;volatile
  4232  0305  1903               	btfsc	3,2
  4233  0306  3400               	retlw	0
  4234                           
  4235                           ;MS83FXX02_KEY.C: 100: {
  4236                           ;MS83FXX02_KEY.C: 101: key_press = 0;
  4237  0307  01BD               	clrf	_key_press	;volatile
  4238                           
  4239                           ;MS83FXX02_KEY.C: 102: return SET;
  4240  0308  3401               	retlw	1
  4241  0309                     __end_of_KEY_GetPressStatus:	
  4242                           ;MS83FXX02_KEY.C: 103: }
  4243                           ;MS83FXX02_KEY.C: 105: return RESET;
  4244                           
  4245  0309                     __ptext1683:	
  4246 ;; =============== function _Motor_Init ends ============
  4247                           
  4248                           
  4249 ;; *************** function _LEDTimer_DispUnderVoltCmd *****************
  4250 ;; Defined at:
  4251 ;;		line 141 in file "ms83fxx02_led_timer.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  NewState        1    wreg     enum E1482
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  NewState        1    0[BANK0 ] enum E1482
  4256 ;; Return value:  Size  Location     Type
  4257 ;;		None               void
  4258 ;; Registers used:
  4259 ;;		wreg, status,2
  4260 ;; Tracked objects:
  4261 ;;		On entry : 160/0
  4262 ;;		On exit  : 160/0
  4263 ;;		Unchanged: FFE9F/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4265 ;;      Params:         0       0       0       0
  4266 ;;      Locals:         0       1       0       0
  4267 ;;      Temps:          0       0       0       0
  4268 ;;      Totals:         0       1       0       0
  4269 ;;Total ram usage:        1 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    4
  4272 ;; This function calls:
  4273 ;;		Nothing
  4274 ;; This function is called by:
  4275 ;;		_Battery_Detect
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278  0309                     _LEDTimer_DispUnderVoltCmd:	
  4279                           
  4280                           ; Regs used in _LEDTimer_DispUnderVoltCmd: [wreg+status,2]
  4281                           ;LEDTimer_DispUnderVoltCmd@NewState stored from wreg
  4282  0309  00C4               	movwf	LEDTimer_DispUnderVoltCmd@NewState
  4283                           
  4284                           ;ms83fxx02_led_timer.c: 142: if(NewState != DISABLE)
  4285  030A  0844               	movf	LEDTimer_DispUnderVoltCmd@NewState,w
  4286  030B  1903               	btfsc	3,2
  4287  030C  2B10               	goto	l14788
  4288                           
  4289                           ;ms83fxx02_led_timer.c: 143: {
  4290                           ;ms83fxx02_led_timer.c: 144: under_volt_display_En = 1;
  4291  030D  01C3               	clrf	_under_volt_display_En	;volatile
  4292  030E  0AC3               	incf	_under_volt_display_En,f	;volatile
  4293                           
  4294                           ;ms83fxx02_led_timer.c: 145: }
  4295  030F  0008               	return
  4296  0310                     l14788:	
  4297                           
  4298                           ;ms83fxx02_led_timer.c: 146: else
  4299                           ;ms83fxx02_led_timer.c: 147: {
  4300                           ;ms83fxx02_led_timer.c: 148: under_volt_display_En = 0;
  4301  0310  01C3               	clrf	_under_volt_display_En	;volatile
  4302  0311  0008               	return
  4303  0312                     __end_of_LEDTimer_DispUnderVoltCmd:	
  4304  0312                     __ptext1682:	
  4305 ;; =============== function _SwitchModeTimer_Cmd ends ============
  4306                           
  4307                           
  4308 ;; *************** function _Motor_Init *****************
  4309 ;; Defined at:
  4310 ;;		line 65 in file "ms83fxx02_motor.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  status          1    wreg     enum E1552
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  status          1    0[BANK0 ] enum E1552
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 60/0
  4321 ;;		On exit  : 40/0
  4322 ;;		Unchanged: FFF9F/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4324 ;;      Params:         0       0       0       0
  4325 ;;      Locals:         0       1       0       0
  4326 ;;      Temps:          0       0       0       0
  4327 ;;      Totals:         0       1       0       0
  4328 ;;Total ram usage:        1 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    4
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_Motor_Start
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337  0312                     _Motor_Init:	
  4338                           
  4339                           ; Regs used in _Motor_Init: [wreg+status,2+status,0]
  4340                           ;Motor_Init@status stored from wreg
  4341  0312  00C4               	movwf	Motor_Init@status
  4342                           
  4343                           ;ms83fxx02_motor.c: 67: TRISC4 = 1;
  4344  0313  1683               	bsf	3,5	;RP0=1, select bank1
  4345  0314  3007               	movlw	7
  4346  0315  1607               	bsf	7,4
  4347                           
  4348                           ;ms83fxx02_motor.c: 70: CMCON0 |= 0x07;
  4349  0316  1283               	bcf	3,5	;RP0=0, select bank0
  4350  0317  0499               	iorwf	25,f	;volatile
  4351                           
  4352                           ;ms83fxx02_motor.c: 71: T2CKSRC = 0;
  4353  0318  129B               	bcf	27,5
  4354                           
  4355                           ;ms83fxx02_motor.c: 74: TMR2 = 0;
  4356  0319  0191               	clrf	17	;volatile
  4357                           
  4358                           ;ms83fxx02_motor.c: 76: T2CON = 0x03;
  4359  031A  3003               	movlw	3
  4360  031B  0092               	movwf	18	;volatile
  4361                           
  4362                           ;ms83fxx02_motor.c: 78: PR2 = 0x9C;
  4363  031C  309C               	movlw	156
  4364  031D  1683               	bsf	3,5	;RP0=1, select bank1
  4365  031E  0092               	movwf	18	;volatile
  4366                           
  4367                           ;ms83fxx02_motor.c: 79: if(status == MOTOR_MODE_STOP)
  4368  031F  1283               	bcf	3,5	;RP0=0, select bank0
  4369  0320  0B44               	decfsz	Motor_Init@status,w
  4370  0321  2B23               	goto	l14818
  4371  0322  0008               	return
  4372  0323                     l14818:	
  4373                           
  4374                           ;ms83fxx02_motor.c: 83: else if(status == MOTOR_MODE_DUTY_80)
  4375  0323  0844               	movf	Motor_Init@status,w
  4376  0324  3A04               	xorlw	4
  4377  0325  1D03               	skipz
  4378  0326  2B29               	goto	l14822
  4379                           
  4380                           ;ms83fxx02_motor.c: 84: {
  4381                           ;ms83fxx02_motor.c: 86: CCPR1L = 0x7D;
  4382  0327  307D               	movlw	125
  4383  0328  2B2E               	goto	L7
  4384  0329                     l14822:	
  4385                           ;ms83fxx02_motor.c: 88: }
  4386                           
  4387                           ;ms83fxx02_motor.c: 87: CCP1CON = 0x8D | (0x00 << 4);
  4388                           
  4389                           
  4390                           ;ms83fxx02_motor.c: 89: else if(status == MOTOR_MODE_DUTY_90)
  4391  0329  0844               	movf	Motor_Init@status,w
  4392  032A  3A03               	xorlw	3
  4393  032B  1D03               	skipz
  4394  032C  2B32               	goto	l14826
  4395                           
  4396                           ;ms83fxx02_motor.c: 90: {
  4397                           ;ms83fxx02_motor.c: 92: CCPR1L = 0x8C;
  4398  032D  308C               	movlw	140
  4399  032E                     L7:	
  4400  032E  0093               	movwf	19	;volatile
  4401                           
  4402                           ;ms83fxx02_motor.c: 93: CCP1CON = 0x8D | (0x00 << 4);
  4403  032F  308D               	movlw	141
  4404  0330  0095               	movwf	21	;volatile
  4405                           
  4406                           ;ms83fxx02_motor.c: 94: }
  4407  0331  2B3C               	goto	l8831
  4408  0332                     l14826:	
  4409                           
  4410                           ;ms83fxx02_motor.c: 95: else
  4411                           ;ms83fxx02_motor.c: 96: {
  4412                           ;ms83fxx02_motor.c: 97: if(status == MOTOR_MODE_DUTY_100)
  4413  0332  0844               	movf	Motor_Init@status,w
  4414  0333  3A02               	xorlw	2
  4415  0334  1D03               	skipz
  4416  0335  2B3C               	goto	l8831
  4417                           
  4418                           ;ms83fxx02_motor.c: 98: {
  4419                           ;ms83fxx02_motor.c: 99: CCP1CON = 0;
  4420  0336  0195               	clrf	21	;volatile
  4421                           
  4422                           ;ms83fxx02_motor.c: 100: TRISC4 = 0;
  4423  0337  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0338  1207               	bcf	7,4
  4425                           
  4426                           ;ms83fxx02_motor.c: 102: PC4 = 1;
  4427  0339  1283               	bcf	3,5	;RP0=0, select bank0
  4428  033A  1607               	bsf	7,4
  4429  033B  0008               	return
  4430  033C                     l8831:	
  4431                           
  4432                           ;ms83fxx02_motor.c: 105: }
  4433                           ;ms83fxx02_motor.c: 106: }
  4434                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
  4435  033C  108C               	bcf	12,1
  4436                           
  4437                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
  4438  033D  1512               	bsf	18,2
  4439  033E                     l8837:	
  4440                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
  4441                           
  4442  033E  1C8C               	btfss	12,1
  4443  033F  2B3E               	goto	l8837
  4444                           
  4445                           ;ms83fxx02_motor.c: 113: TRISC4 = 0;
  4446  0340  1683               	bsf	3,5	;RP0=1, select bank1
  4447  0341  1207               	bcf	7,4
  4448  0342  0008               	return
  4449  0343                     __end_of_Motor_Init:	
  4450  0343                     __ptext1676:	
  4451 ;; =============== function _LED_Init ends ============
  4452                           
  4453                           
  4454 ;; *************** function _Battery_HandleData *****************
  4455 ;; Defined at:
  4456 ;;		line 194 in file "ms83fxx02_pwr.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  temp1           2   12[BANK0 ] unsigned short 
  4461 ;;  average_data    2   10[BANK0 ] unsigned int 
  4462 ;;  temp2           2    8[BANK0 ] unsigned short 
  4463 ;;  i               1   14[BANK0 ] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  2    0[BANK0 ] unsigned int 
  4466 ;; Registers used:
  4467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 60/0
  4470 ;;		On exit  : 160/0
  4471 ;;		Unchanged: FFE9F/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4473 ;;      Params:         0       2       0       0
  4474 ;;      Locals:         0       7       0       0
  4475 ;;      Temps:          0       6       0       0
  4476 ;;      Totals:         0      15       0       0
  4477 ;;Total ram usage:       15 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    4
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_Battery_Detect
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486  0343                     _Battery_HandleData:	
  4487                           
  4488                           ;ms83fxx02_pwr.c: 196: uint32_t average_data = 0;
  4489                           
  4490                           ; Regs used in _Battery_HandleData: [wreg-fsr0h+status,2+status,0]
  4491  0343  01CE               	clrf	Battery_HandleData@average_data
  4492  0344  01CF               	clrf	Battery_HandleData@average_data+1
  4493                           
  4494                           ;ms83fxx02_pwr.c: 197: uint16_t temp1 = battery_value[0];
  4495  0345  0821               	movf	_battery_value+1,w	;volatile
  4496  0346  00D1               	movwf	Battery_HandleData@temp1+1
  4497  0347  0820               	movf	_battery_value,w	;volatile
  4498  0348  00D0               	movwf	Battery_HandleData@temp1
  4499                           
  4500                           ;ms83fxx02_pwr.c: 198: uint16_t temp2 = battery_value[0];
  4501  0349  0821               	movf	_battery_value+1,w	;volatile
  4502  034A  00CD               	movwf	Battery_HandleData@temp2+1
  4503  034B  0820               	movf	_battery_value,w	;volatile
  4504  034C  00CC               	movwf	Battery_HandleData@temp2
  4505                           
  4506                           ;ms83fxx02_pwr.c: 200: for(i=0; i<10; i++)
  4507  034D  01D2               	clrf	Battery_HandleData@i
  4508                           
  4509                           ;ms83fxx02_pwr.c: 201: {
  4510                           ;ms83fxx02_pwr.c: 202: if(temp1 > battery_value[i])
  4511  034E  1003               	clrc
  4512  034F                     L3:	
  4513  034F  0D52               	rlf	Battery_HandleData@i,w
  4514  0350  3E20               	addlw	_battery_value& (0+255)
  4515  0351  0084               	movwf	4
  4516  0352  1383               	bcf	3,7	;select IRP bank0
  4517  0353  2402  118A         	fcall	PL3	;call to abstracted procedure
  4518  0355  0851               	movf	Battery_HandleData@temp1+1,w
  4519  0356  0247               	subwf	??_Battery_HandleData+1,w
  4520  0357  1D03               	skipz
  4521  0358  2B5B               	goto	u1925
  4522  0359  0850               	movf	Battery_HandleData@temp1,w
  4523  035A  0246               	subwf	??_Battery_HandleData,w
  4524  035B                     u1925:	
  4525  035B  1803               	skipnc
  4526  035C  2B68               	goto	l14930
  4527                           
  4528                           ;ms83fxx02_pwr.c: 203: {
  4529                           ;ms83fxx02_pwr.c: 204: temp2 = temp1;
  4530  035D  0851               	movf	Battery_HandleData@temp1+1,w
  4531  035E  00CD               	movwf	Battery_HandleData@temp2+1
  4532  035F  0850               	movf	Battery_HandleData@temp1,w
  4533  0360  00CC               	movwf	Battery_HandleData@temp2
  4534                           
  4535                           ;ms83fxx02_pwr.c: 205: temp1 = battery_value[i];
  4536  0361  2408  118A         	fcall	PL4	;call to abstracted procedure
  4537  0363  0800               	movf	0,w
  4538  0364  00D0               	movwf	Battery_HandleData@temp1
  4539  0365  0A84               	incf	4,f
  4540  0366  0800               	movf	0,w
  4541  0367  00D1               	movwf	Battery_HandleData@temp1+1
  4542  0368                     l14930:	
  4543                           
  4544                           ;ms83fxx02_pwr.c: 206: }
  4545                           ;ms83fxx02_pwr.c: 207: average_data += battery_value[i];
  4546  0368  2408  118A         	fcall	PL4	;call to abstracted procedure
  4547  036A  2402  118A         	fcall	PL3	;call to abstracted procedure
  4548  036C  0846               	movf	??_Battery_HandleData,w
  4549  036D  07CE               	addwf	Battery_HandleData@average_data,f
  4550  036E  1803               	skipnc
  4551  036F  0ACF               	incf	Battery_HandleData@average_data+1,f
  4552  0370  0847               	movf	??_Battery_HandleData+1,w
  4553  0371  07CF               	addwf	Battery_HandleData@average_data+1,f
  4554  0372  300A               	movlw	10
  4555  0373  0AD2               	incf	Battery_HandleData@i,f
  4556  0374  0252               	subwf	Battery_HandleData@i,w
  4557  0375  1C03               	skipc
  4558  0376  2B4F               	goto	L3
  4559                           
  4560                           ;ms83fxx02_pwr.c: 208: }
  4561                           ;ms83fxx02_pwr.c: 210: average_data = (average_data - temp1 - temp2) / (10 - 2);
  4562  0377  0950               	comf	Battery_HandleData@temp1,w
  4563  0378  00C6               	movwf	??_Battery_HandleData
  4564  0379  0951               	comf	Battery_HandleData@temp1+1,w
  4565  037A  00C7               	movwf	??_Battery_HandleData+1
  4566  037B  0AC6               	incf	??_Battery_HandleData,f
  4567  037C  1903               	skipnz
  4568  037D  0AC7               	incf	??_Battery_HandleData+1,f
  4569  037E  084C               	movf	Battery_HandleData@temp2,w
  4570  037F  0246               	subwf	??_Battery_HandleData,w
  4571  0380  00C8               	movwf	??_Battery_HandleData+2
  4572  0381  084D               	movf	Battery_HandleData@temp2+1,w
  4573  0382  1C03               	skipc
  4574  0383  0A4D               	incf	Battery_HandleData@temp2+1,w
  4575  0384  0247               	subwf	??_Battery_HandleData+1,w
  4576  0385  00C9               	movwf	??_Battery_HandleData+3
  4577  0386  084E               	movf	Battery_HandleData@average_data,w
  4578  0387  0748               	addwf	??_Battery_HandleData+2,w
  4579  0388  00CA               	movwf	??_Battery_HandleData+4
  4580  0389  084F               	movf	Battery_HandleData@average_data+1,w
  4581  038A  1803               	skipnc
  4582  038B  0A4F               	incf	Battery_HandleData@average_data+1,w
  4583  038C  0749               	addwf	??_Battery_HandleData+3,w
  4584  038D  00CB               	movwf	??_Battery_HandleData+5
  4585  038E  1003               	clrc
  4586  038F  0CCB               	rrf	??_Battery_HandleData+5,f
  4587  0390  0CCA               	rrf	??_Battery_HandleData+4,f
  4588  0391  1003               	clrc
  4589  0392  0CCB               	rrf	??_Battery_HandleData+5,f
  4590  0393  0CCA               	rrf	??_Battery_HandleData+4,f
  4591  0394  1003               	clrc
  4592  0395  0CCB               	rrf	??_Battery_HandleData+5,f
  4593  0396  0CCA               	rrf	??_Battery_HandleData+4,f
  4594  0397  084A               	movf	??_Battery_HandleData+4,w
  4595  0398  00CE               	movwf	Battery_HandleData@average_data
  4596  0399  084B               	movf	??_Battery_HandleData+5,w
  4597  039A  00CF               	movwf	Battery_HandleData@average_data+1
  4598                           
  4599                           ;ms83fxx02_pwr.c: 212: return average_data;
  4600  039B  00C5               	movwf	?_Battery_HandleData+1
  4601  039C  084E               	movf	Battery_HandleData@average_data,w
  4602  039D  00C4               	movwf	?_Battery_HandleData
  4603  039E  0008               	return
  4604  039F                     __end_of_Battery_HandleData:	
  4605  039F                     __ptext1667:	
  4606 ;; =============== function _Motor_Stop ends ============
  4607                           
  4608                           
  4609 ;; *************** function _KEY_DeInit *****************
  4610 ;; Defined at:
  4611 ;;		line 59 in file "MS83FXX02_KEY.C"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  GPIO_InitStr    2    2[BANK0 ] struct .
  4616 ;; Return value:  Size  Location     Type
  4617 ;;		None               void
  4618 ;; Registers used:
  4619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 160/0
  4622 ;;		On exit  : 160/0
  4623 ;;		Unchanged: FFE9F/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4625 ;;      Params:         0       0       0       0
  4626 ;;      Locals:         0       2       0       0
  4627 ;;      Temps:          0       0       0       0
  4628 ;;      Totals:         0       2       0       0
  4629 ;;Total ram usage:        2 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    5
  4632 ;; This function calls:
  4633 ;;		_GPIO_Init
  4634 ;; This function is called by:
  4635 ;;		_main
  4636 ;;		_Battery_Detect
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639  039F                     _KEY_DeInit:	
  4640  039F  3002               	movlw	2
  4641                           
  4642                           ;MS83FXX02_KEY.C: 60: GPIO_InitTypeDef GPIO_InitStruct;
  4643                           ;MS83FXX02_KEY.C: 61: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  4644                           
  4645                           ; Regs used in _KEY_DeInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4646  03A0  01C7               	clrf	KEY_DeInit@GPIO_InitStruct+1
  4647                           
  4648                           ;MS83FXX02_KEY.C: 62: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  4649  03A1  00C6               	movwf	KEY_DeInit@GPIO_InitStruct
  4650                           
  4651                           ;MS83FXX02_KEY.C: 63: GPIO_Init(GPIOC, &GPIO_InitStruct);
  4652  03A2  3046               	movlw	KEY_DeInit@GPIO_InitStruct& (0+255)
  4653  03A3  00C4               	movwf	?_GPIO_Init
  4654  03A4  3001               	movlw	1
  4655  03A5  2141               	fcall	_GPIO_Init
  4656                           
  4657                           ;MS83FXX02_KEY.C: 65: INTE = 0;
  4658  03A6  120B               	bcf	11,4
  4659                           
  4660                           ;MS83FXX02_KEY.C: 66: key_status = 1;
  4661  03A7  01FB               	clrf	_key_status	;volatile
  4662  03A8  0AFB               	incf	_key_status,f	;volatile
  4663                           
  4664                           ;MS83FXX02_KEY.C: 67: key_press = 0;
  4665  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  4666  03AA  01BD               	clrf	_key_press	;volatile
  4667                           
  4668                           ;MS83FXX02_KEY.C: 68: key_release = 0;
  4669  03AB  01C0               	clrf	_key_release	;volatile
  4670                           
  4671                           ;MS83FXX02_KEY.C: 69: key_press_flag = 0;
  4672  03AC  01BE               	clrf	_key_press_flag	;volatile
  4673  03AD  0008               	return
  4674  03AE                     __end_of_KEY_DeInit:	
  4675  03AE                     __ptext1659:	
  4676 ;; =============== function _EEPROM_SetFlag ends ============
  4677                           
  4678                           
  4679 ;; *************** function _EEPROM_StoreMotorData *****************
  4680 ;; Defined at:
  4681 ;;		line 509 in file "ms83fxx02_motor.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;		None               void
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, pclath, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 60/20
  4692 ;;		On exit  : 60/20
  4693 ;;		Unchanged: FFE00/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4695 ;;      Params:         0       0       0       0
  4696 ;;      Locals:         0       0       0       0
  4697 ;;      Temps:          0       0       0       0
  4698 ;;      Totals:         0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		_EEPROM_Write
  4704 ;; This function is called by:
  4705 ;;		_Battery_Detect
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708  03AE                     _EEPROM_StoreMotorData:	
  4709                           
  4710                           ;ms83fxx02_motor.c: 510: EEPROM_Write(0x12, motor_status);
  4711                           
  4712                           ; Regs used in _EEPROM_StoreMotorData: [wreg+status,2+status,0+pclath+cstack]
  4713  03AE  087C               	movf	_motor_status,w	;volatile
  4714  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  4715  03B0  00C4               	movwf	?_EEPROM_Write
  4716  03B1  3012               	movlw	18
  4717  03B2  23C5  118A         	fcall	_EEPROM_Write
  4718                           
  4719                           ;ms83fxx02_motor.c: 511: EEPROM_Write(0x13, motor_intr_count);
  4720  03B4  087D               	movf	_motor_intr_count,w	;volatile
  4721  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  4722  03B6  00C4               	movwf	?_EEPROM_Write
  4723  03B7  3013               	movlw	19
  4724  03B8  23C5  118A         	fcall	_EEPROM_Write
  4725                           
  4726                           ;ms83fxx02_motor.c: 512: EEPROM_Write(0x14, motor_oper_record);
  4727  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  4728  03BB  0836               	movf	_motor_oper_record,w	;volatile
  4729  03BC  00C4               	movwf	?_EEPROM_Write
  4730  03BD  3014               	movlw	20
  4731  03BE  23C5  118A         	fcall	_EEPROM_Write
  4732                           
  4733                           ;ms83fxx02_motor.c: 513: EEPROM_Write(0x15, motor_timing_running_flag);
  4734  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  4735  03C1  0859               	movf	_motor_timing_running_flag,w
  4736  03C2  00C4               	movwf	?_EEPROM_Write
  4737  03C3  3015               	movlw	21
  4738  03C4  2BC5               	ljmp	_EEPROM_Write
  4739  03C5                     __end_of_EEPROM_StoreMotorData:	
  4740  03C5                     __ptext1687:	
  4741 ;; =============== function _EEPROM_Read ends ============
  4742                           
  4743                           
  4744 ;; *************** function _EEPROM_Write *****************
  4745 ;; Defined at:
  4746 ;;		line 39 in file "ms83fxx02_eeprom.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  addr            1    wreg     unsigned char 
  4749 ;;  data            1    0[BANK0 ] unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  addr            1    1[BANK0 ] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg
  4756 ;; Tracked objects:
  4757 ;;		On entry : 60/0
  4758 ;;		On exit  : 60/20
  4759 ;;		Unchanged: FFE00/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4761 ;;      Params:         0       1       0       0
  4762 ;;      Locals:         0       1       0       0
  4763 ;;      Temps:          0       0       0       0
  4764 ;;      Totals:         0       2       0       0
  4765 ;;Total ram usage:        2 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    4
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_EEPROM_Init
  4772 ;;		_EEPROM_StoreMotorData
  4773 ;;		_EEPROM_SetFlag
  4774 ;;		_EEPROM_StoreModeData
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777  03C5                     _EEPROM_Write:	
  4778                           
  4779                           ; Regs used in _EEPROM_Write: [wreg]
  4780                           ;EEPROM_Write@addr stored from wreg
  4781  03C5  00C5               	movwf	EEPROM_Write@addr
  4782                           
  4783                           ;ms83fxx02_eeprom.c: 40: EEADR = addr;
  4784  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  4785  03C7  009B               	movwf	27	;volatile
  4786  03C8  0000               	nop	;#
  4787                           
  4788                           ;ms83fxx02_eeprom.c: 42: EEDAT = data;
  4789  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  4790  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  4791  03CB  0844               	movf	EEPROM_Write@data,w
  4792  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  4793  03CD  009A               	movwf	26	;volatile
  4794                           
  4795                           ;ms83fxx02_eeprom.c: 43: EECON1 = 0x34;
  4796  03CE  3034               	movlw	52
  4797  03CF  009C               	movwf	28	;volatile
  4798                           
  4799                           ;ms83fxx02_eeprom.c: 44: WR = 1;
  4800  03D0  141D               	bsf	29,0
  4801  03D1  0000               	nop	;#
  4802  03D2  0000               	nop	;#
  4803  03D3  0000               	nop	;#
  4804  03D4                     l3341:	
  4805                           ;ms83fxx02_eeprom.c: 49: while(WR == 1);
  4806                           
  4807  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  4808  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  4809  03D6  181D               	btfsc	29,0
  4810  03D7  2BD4               	goto	l3341
  4811                           
  4812                           ;ms83fxx02_eeprom.c: 50: WREN1 = 0;
  4813  03D8  111C               	bcf	28,2
  4814                           
  4815                           ;ms83fxx02_eeprom.c: 51: WREN2 = 0;
  4816  03D9  121C               	bcf	28,4
  4817                           
  4818                           ;ms83fxx02_eeprom.c: 52: WREN3 = 0;
  4819  03DA  129C               	bcf	28,5
  4820  03DB  0008               	return
  4821  03DC                     __end_of_EEPROM_Write:	
  4822  03DC                     __ptext1658:	
  4823 ;; =============== function _EEPROM_StoreModeData ends ============
  4824                           
  4825                           
  4826 ;; *************** function _EEPROM_SetFlag *****************
  4827 ;; Defined at:
  4828 ;;		line 174 in file "ms83fxx02_pwr.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;		None               void
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0, pclath, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 160/0
  4839 ;;		On exit  : 60/20
  4840 ;;		Unchanged: FFE00/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4842 ;;      Params:         0       0       0       0
  4843 ;;      Locals:         0       0       0       0
  4844 ;;      Temps:          0       0       0       0
  4845 ;;      Totals:         0       0       0       0
  4846 ;;Total ram usage:        0 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    5
  4849 ;; This function calls:
  4850 ;;		_EEPROM_Write
  4851 ;; This function is called by:
  4852 ;;		_Battery_Detect
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855  03DC                     _EEPROM_SetFlag:	
  4856                           
  4857                           ; Regs used in _EEPROM_SetFlag: [wreg+status,2+status,0+pclath+cstack]
  4858  03DC  3016               	movlw	22
  4859                           
  4860                           ;ms83fxx02_pwr.c: 175: EEPROM_Write(0x16, 0x01);
  4861  03DD  01C4               	clrf	?_EEPROM_Write
  4862  03DE  0AC4               	incf	?_EEPROM_Write,f
  4863  03DF  2BC5               	ljmp	_EEPROM_Write
  4864  03E0                     __end_of_EEPROM_SetFlag:	
  4865  03E0                     __ptext1657:	
  4866 ;; =============== function _Charge_Init ends ============
  4867                           
  4868                           
  4869 ;; *************** function _EEPROM_StoreModeData *****************
  4870 ;; Defined at:
  4871 ;;		line 184 in file "ms83fxx02_pwr.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;		None               void
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, pclath, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 60/20
  4882 ;;		On exit  : 60/20
  4883 ;;		Unchanged: FFE00/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4885 ;;      Params:         0       0       0       0
  4886 ;;      Locals:         0       0       0       0
  4887 ;;      Temps:          0       0       0       0
  4888 ;;      Totals:         0       0       0       0
  4889 ;;Total ram usage:        0 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    5
  4892 ;; This function calls:
  4893 ;;		_EEPROM_Write
  4894 ;; This function is called by:
  4895 ;;		_Battery_Detect
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898  03E0                     _EEPROM_StoreModeData:	
  4899                           
  4900                           ;ms83fxx02_pwr.c: 185: EEPROM_Write(0x11, device_mode);
  4901                           
  4902                           ; Regs used in _EEPROM_StoreModeData: [wreg+status,2+status,0+pclath+cstack]
  4903  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  4904  03E1  083C               	movf	_device_mode,w	;volatile
  4905  03E2  00C4               	movwf	?_EEPROM_Write
  4906  03E3  3011               	movlw	17
  4907  03E4  2BC5               	ljmp	_EEPROM_Write
  4908  03E5                     __end_of_EEPROM_StoreModeData:	
  4909  03E5                     __ptext1672:	
  4910 ;; =============== function _EEPROM_GetFlag ends ============
  4911                           
  4912                           
  4913 ;; *************** function _LED_VoltageChargeOutput *****************
  4914 ;; Defined at:
  4915 ;;		line 80 in file "ms83fxx02_led.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  BitVal          1    wreg     enum E1499
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  BitVal          1    3[BANK0 ] enum E1499
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 60/0
  4926 ;;		On exit  : 60/0
  4927 ;;		Unchanged: FFF9F/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4929 ;;      Params:         0       0       0       0
  4930 ;;      Locals:         0       1       0       0
  4931 ;;      Temps:          0       0       0       0
  4932 ;;      Totals:         0       1       0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    5
  4936 ;; This function calls:
  4937 ;;		_GPIO_WriteBit
  4938 ;; This function is called by:
  4939 ;;		_charge_control
  4940 ;;		_main
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943  03E5                     _LED_VoltageChargeOutput:	
  4944                           
  4945                           ; Regs used in _LED_VoltageChargeOutput: [wreg+status,2+status,0+pclath+cstack]
  4946                           ;LED_VoltageChargeOutput@BitVal stored from wreg
  4947  03E5  00C7               	movwf	LED_VoltageChargeOutput@BitVal
  4948                           
  4949                           ;ms83fxx02_led.c: 81: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), BitVal);
  4950  03E6  3008               	movlw	8
  4951  03E7  00C4               	movwf	?_GPIO_WriteBit
  4952  03E8  0847               	movf	LED_VoltageChargeOutput@BitVal,w
  4953  03E9  00C5               	movwf	?_GPIO_WriteBit+1
  4954  03EA  3001               	movlw	1
  4955  03EB  2A29               	ljmp	_GPIO_WriteBit
  4956  03EC                     __end_of_LED_VoltageChargeOutput:	
  4957  03EC                     __ptext1656:	
  4958 ;; =============== function _Battery_Detect ends ============
  4959                           
  4960                           
  4961 ;; *************** function _Charge_Init *****************
  4962 ;; Defined at:
  4963 ;;		line 49 in file "ms83fxx02_charge.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 160/0
  4974 ;;		On exit  : 160/0
  4975 ;;		Unchanged: FFE9F/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4977 ;;      Params:         0       0       0       0
  4978 ;;      Locals:         0       0       0       0
  4979 ;;      Temps:          0       0       0       0
  4980 ;;      Totals:         0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    6
  4984 ;; This function calls:
  4985 ;;		_ChargeDetect_Init
  4986 ;;		_ChargeCtrl_Init
  4987 ;; This function is called by:
  4988 ;;		_Driver_Init
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991  03EC                     _Charge_Init:	
  4992                           
  4993                           ;ms83fxx02_charge.c: 50: ChargeDetect_Init();
  4994                           
  4995                           ; Regs used in _Charge_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4996  03EC  2013               	fcall	_ChargeDetect_Init
  4997                           
  4998                           ;ms83fxx02_charge.c: 51: ChargeCtrl_Init();
  4999  03ED  118A  2F4D         	ljmp	l15194
  5000  03EF                     __end_of_Charge_Init:	
  5001  03EF                     __ptext1701:	
  5002 ;; =============== function _ChargeTimer_GetCount ends ============
  5003                           
  5004                           
  5005 ;; *************** function _LEDTimer_INTConfig *****************
  5006 ;; Defined at:
  5007 ;;		line 119 in file "ms83fxx02_led_timer.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  NewState        1    wreg     enum E1482
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  NewState        1    0[BANK0 ] enum E1482
  5012 ;; Return value:  Size  Location     Type
  5013 ;;		None               void
  5014 ;; Registers used:
  5015 ;;		wreg
  5016 ;; Tracked objects:
  5017 ;;		On entry : 160/40
  5018 ;;		On exit  : 160/40
  5019 ;;		Unchanged: FFE9F/0
  5020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5021 ;;      Params:         0       0       0       0
  5022 ;;      Locals:         0       1       0       0
  5023 ;;      Temps:          0       0       0       0
  5024 ;;      Totals:         0       1       0       0
  5025 ;;Total ram usage:        1 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    4
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_Driver_Init
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034  03EF                     _LEDTimer_INTConfig:	
  5035                           
  5036                           ; Regs used in _LEDTimer_INTConfig: [wreg]
  5037                           ;LEDTimer_INTConfig@NewState stored from wreg
  5038  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  5039  03F0  00C4               	movwf	LEDTimer_INTConfig@NewState
  5040                           
  5041                           ;ms83fxx02_led_timer.c: 120: if(NewState != DISABLE)
  5042  03F1  0844               	movf	LEDTimer_INTConfig@NewState,w
  5043                           
  5044                           ;ms83fxx02_led_timer.c: 121: {
  5045                           ;ms83fxx02_led_timer.c: 123: TMR3IE = 1;
  5046  03F2  1703               	bsf	3,6	;RP1=1, select bank2
  5047  03F3  1903               	btfsc	3,2
  5048  03F4  2BF9               	goto	L10
  5049  03F5  1490               	bsf	16,1
  5050                           
  5051                           ;ms83fxx02_led_timer.c: 124: PEIE = 1;
  5052  03F6  170B               	bsf	11,6
  5053                           
  5054                           ;ms83fxx02_led_timer.c: 125: GIE = 1;
  5055  03F7  178B               	bsf	11,7
  5056                           
  5057                           ;ms83fxx02_led_timer.c: 126: }
  5058  03F8  0008               	return
  5059  03F9                     L10:	
  5060                           ;ms83fxx02_led_timer.c: 127: else
  5061                           ;ms83fxx02_led_timer.c: 128: {
  5062                           ;ms83fxx02_led_timer.c: 130: TMR3IE = 0;
  5063                           
  5064  03F9  1090               	bcf	16,1
  5065  03FA  0008               	return
  5066  03FB                     __end_of_LEDTimer_INTConfig:	
  5067  03FB                     PL2:	
  5068  03FB  3062               	movlw	98
  5069  03FC  1703               	bsf	3,6	;RP1=1, select bank2
  5070  03FD  1110               	bcf	16,2
  5071  03FE  008F               	movwf	15	;volatile
  5072  03FF  3038               	movlw	56
  5073  0400  0090               	movwf	16	;volatile
  5074  0401  0008               	return
  5075  0402                     PL3:	
  5076  0402  0800               	movf	0,w
  5077  0403  00C6               	movwf	??_Battery_HandleData
  5078  0404  0A84               	incf	4,f
  5079  0405  0800               	movf	0,w
  5080  0406  00C7               	movwf	??_Battery_HandleData+1
  5081  0407  0008               	return
  5082  0408                     PL4:	
  5083  0408  1003               	clrc
  5084  0409  0D52               	rlf	Battery_HandleData@i,w
  5085  040A  3E20               	addlw	_battery_value& (0+255)
  5086  040B  0084               	movwf	4
  5087  040C  0008               	return
  5088                           
  5089                           	psect	text1664
  5090  078C                     __ptext1664:	
  5091 ;; =============== function _ChargeDetect_Init ends ============
  5092                           
  5093                           
  5094 ;; *************** function _ChargeCtrl_Output *****************
  5095 ;; Defined at:
  5096 ;;		line 55 in file "ms83fxx02_charge.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  BitVal          1    wreg     enum E1499
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  BitVal          1    3[BANK0 ] enum E1499
  5101 ;; Return value:  Size  Location     Type
  5102 ;;		None               void
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0, pclath, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 160/0
  5107 ;;		On exit  : 160/0
  5108 ;;		Unchanged: FFE9F/0
  5109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5110 ;;      Params:         0       0       0       0
  5111 ;;      Locals:         0       1       0       0
  5112 ;;      Temps:          0       0       0       0
  5113 ;;      Totals:         0       1       0       0
  5114 ;;Total ram usage:        1 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    5
  5117 ;; This function calls:
  5118 ;;		_GPIO_WriteBit
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123  078C                     _ChargeCtrl_Output:	
  5124                           
  5125                           ; Regs used in _ChargeCtrl_Output: [wreg+status,2+status,0+pclath+cstack]
  5126                           ;ChargeCtrl_Output@BitVal stored from wreg
  5127  078C  00C7               	movwf	ChargeCtrl_Output@BitVal
  5128                           
  5129                           ;ms83fxx02_charge.c: 56: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), BitVal);
  5130  078D  3080               	movlw	128
  5131  078E  00C4               	movwf	?_GPIO_WriteBit
  5132  078F  0847               	movf	ChargeCtrl_Output@BitVal,w
  5133  0790  00C5               	movwf	?_GPIO_WriteBit+1
  5134  0791  3000               	movlw	0
  5135  0792  118A  2A29         	ljmp	_GPIO_WriteBit
  5136  0794                     __end_of_ChargeCtrl_Output:	
  5137                           
  5138                           	psect	text1668
  5139  06A1                     __ptext1668:	
  5140 ;; =============== function _KEY_DeInit ends ============
  5141                           
  5142                           
  5143 ;; *************** function _ChargeDetect_GetStatus *****************
  5144 ;; Defined at:
  5145 ;;		line 60 in file "ms83fxx02_charge.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  i               2    3[BANK0 ] unsigned int 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      unsigned char 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/20
  5156 ;;		On exit  : 60/0
  5157 ;;		Unchanged: FFF9F/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5159 ;;      Params:         0       0       0       0
  5160 ;;      Locals:         0       2       0       0
  5161 ;;      Temps:          0       0       0       0
  5162 ;;      Totals:         0       2       0       0
  5163 ;;Total ram usage:        2 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    5
  5166 ;; This function calls:
  5167 ;;		_GPIO_ReadInputDataBit
  5168 ;; This function is called by:
  5169 ;;		_main
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172  06A1                     _ChargeDetect_GetStatus:	
  5173                           
  5174                           ;ms83fxx02_charge.c: 61: uint32_t i = 50;
  5175                           
  5176                           ; Regs used in _ChargeDetect_GetStatus: [wreg+status,2+status,0+pclath+cstack]
  5177  06A1  3032               	movlw	50
  5178  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  5179  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  5180  06A4  00C7               	movwf	ChargeDetect_GetStatus@i
  5181  06A5  01C8               	clrf	ChargeDetect_GetStatus@i+1
  5182  06A6                     l15148:	
  5183                           ;ms83fxx02_charge.c: 63: while(i--)
  5184                           
  5185  06A6  3001               	movlw	1
  5186  06A7                     L2:	
  5187  06A7  02C7               	subwf	ChargeDetect_GetStatus@i,f
  5188  06A8  3000               	movlw	0
  5189  06A9  1C03               	skipc
  5190  06AA  03C8               	decf	ChargeDetect_GetStatus@i+1,f
  5191  06AB  02C8               	subwf	ChargeDetect_GetStatus@i+1,f
  5192  06AC  0A47               	incf	ChargeDetect_GetStatus@i,w
  5193  06AD  1903               	skipnz
  5194  06AE  0A48               	incf	ChargeDetect_GetStatus@i+1,w
  5195  06AF  1903               	btfsc	3,2
  5196  06B0  3400               	retlw	0
  5197                           
  5198                           ;ms83fxx02_charge.c: 64: {
  5199                           ;ms83fxx02_charge.c: 65: if(1 == GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010)))
  5200  06B1  3010               	movlw	16
  5201  06B2  00C4               	movwf	?_GPIO_ReadInputDataBit
  5202  06B3  3000               	movlw	0
  5203  06B4  26C1  118A         	fcall	_GPIO_ReadInputDataBit
  5204  06B6  3A01               	xorlw	1
  5205  06B7  1D03               	skipz
  5206  06B8  2EA6               	goto	l15148
  5207  06B9  301E               	movlw	30
  5208                           
  5209                           ;ms83fxx02_charge.c: 66: {
  5210                           ;ms83fxx02_charge.c: 67: charge_detect_count++;
  5211  06BA  0ABA               	incf	_charge_detect_count,f
  5212                           
  5213                           ;ms83fxx02_charge.c: 68: if(charge_detect_count >= 30)
  5214  06BB  023A               	subwf	_charge_detect_count,w
  5215  06BC  3001               	movlw	1
  5216  06BD  1C03               	skipc
  5217  06BE  2EA7               	goto	L2
  5218                           
  5219                           ;ms83fxx02_charge.c: 69: {
  5220                           ;ms83fxx02_charge.c: 70: charge_detect_count = 0;
  5221  06BF  01BA               	clrf	_charge_detect_count
  5222                           
  5223                           ;ms83fxx02_charge.c: 71: return 1;
  5224  06C0  0008               	return
  5225  06C1                     __end_of_ChargeDetect_GetStatus:	
  5226                           ;ms83fxx02_charge.c: 72: }
  5227                           ;ms83fxx02_charge.c: 73: }
  5228                           ;ms83fxx02_charge.c: 74: }
  5229                           ;ms83fxx02_charge.c: 76: return 0;
  5230                           
  5231  06C1                     __ptext1689:	
  5232 ;; =============== function _GPIO_INTConfig ends ============
  5233                           
  5234                           
  5235 ;; *************** function _GPIO_ReadInputDataBit *****************
  5236 ;; Defined at:
  5237 ;;		line 101 in file "ms83fxx02_gpio.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  GPIOx           1    wreg     enum E1491
  5240 ;;  GPIO_Pin        1    0[BANK0 ] unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  GPIOx           1    2[BANK0 ] enum E1491
  5243 ;;  bitstatus       1    1[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      unsigned char 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0
  5248 ;; Tracked objects:
  5249 ;;		On entry : 60/0
  5250 ;;		On exit  : 60/0
  5251 ;;		Unchanged: FFF9F/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5253 ;;      Params:         0       1       0       0
  5254 ;;      Locals:         0       2       0       0
  5255 ;;      Temps:          0       0       0       0
  5256 ;;      Totals:         0       3       0       0
  5257 ;;Total ram usage:        3 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    4
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_ChargeDetect_Init
  5264 ;;		_ChargeDetect_GetStatus
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267  06C1                     _GPIO_ReadInputDataBit:	
  5268                           
  5269                           ; Regs used in _GPIO_ReadInputDataBit: [wreg+status,2+status,0]
  5270                           ;GPIO_ReadInputDataBit@GPIOx stored from wreg
  5271  06C1  00C6               	movwf	GPIO_ReadInputDataBit@GPIOx
  5272                           
  5273                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
  5274  06C2  01C5               	clrf	GPIO_ReadInputDataBit@bitstatus
  5275                           
  5276                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
  5277  06C3  08C6               	movf	GPIO_ReadInputDataBit@GPIOx,f
  5278  06C4  1D03               	skipz
  5279  06C5  2ECD               	goto	l14680
  5280                           
  5281                           ;ms83fxx02_gpio.c: 105: {
  5282                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
  5283  06C6  0805               	movf	5,w	;volatile
  5284  06C7  0544               	andwf	GPIO_ReadInputDataBit@GPIO_Pin,w
  5285  06C8  1903               	btfsc	3,2
  5286  06C9  2ED3               	goto	l14686
  5287  06CA                     l14678:	
  5288                           
  5289                           ;ms83fxx02_gpio.c: 107: {
  5290                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
  5291  06CA  01C5               	clrf	GPIO_ReadInputDataBit@bitstatus
  5292  06CB  0AC5               	incf	GPIO_ReadInputDataBit@bitstatus,f
  5293  06CC  2ED3               	goto	l14686
  5294  06CD                     l14680:	
  5295                           
  5296                           ;ms83fxx02_gpio.c: 111: else
  5297                           ;ms83fxx02_gpio.c: 112: {
  5298                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
  5299  06CD  0B46               	decfsz	GPIO_ReadInputDataBit@GPIOx,w
  5300  06CE  2ED3               	goto	l14686
  5301                           
  5302                           ;ms83fxx02_gpio.c: 114: {
  5303                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
  5304  06CF  0807               	movf	7,w	;volatile
  5305  06D0  0544               	andwf	GPIO_ReadInputDataBit@GPIO_Pin,w
  5306  06D1  1D03               	btfss	3,2
  5307  06D2  2ECA               	goto	l14678
  5308  06D3                     l14686:	
  5309                           
  5310                           ;ms83fxx02_gpio.c: 118: }
  5311                           ;ms83fxx02_gpio.c: 119: }
  5312                           ;ms83fxx02_gpio.c: 120: }
  5313                           ;ms83fxx02_gpio.c: 122: return bitstatus;
  5314  06D3  0845               	movf	GPIO_ReadInputDataBit@bitstatus,w
  5315  06D4  0008               	return
  5316  06D5                     __end_of_GPIO_ReadInputDataBit:	
  5317                           
  5318                           	psect	text1671
  5319  06FA                     __ptext1671:	
  5320 ;; =============== function _EEPROM_RestoreDeviceModeData ends ============
  5321                           
  5322                           
  5323 ;; *************** function _EEPROM_GetFlag *****************
  5324 ;; Defined at:
  5325 ;;		line 179 in file "ms83fxx02_pwr.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      unsigned char 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 60/20
  5336 ;;		On exit  : 60/0
  5337 ;;		Unchanged: FFF9F/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5339 ;;      Params:         0       0       0       0
  5340 ;;      Locals:         0       0       0       0
  5341 ;;      Temps:          0       0       0       0
  5342 ;;      Totals:         0       0       0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    5
  5346 ;; This function calls:
  5347 ;;		_EEPROM_Read
  5348 ;; This function is called by:
  5349 ;;		_main
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352  06FA                     _EEPROM_GetFlag:	
  5353                           
  5354                           ;ms83fxx02_pwr.c: 180: return EEPROM_Read(0x16);
  5355                           
  5356                           ; Regs used in _EEPROM_GetFlag: [wreg+status,2+pclath+cstack]
  5357  06FA  3016               	movlw	22
  5358  06FB  2F11               	ljmp	_EEPROM_Read
  5359  06FC                     __end_of_EEPROM_GetFlag:	
  5360  06FC                     __ptext1670:	
  5361 ;; =============== function _EEPROM_RestoreMotorData ends ============
  5362                           
  5363                           
  5364 ;; *************** function _EEPROM_RestoreDeviceModeData *****************
  5365 ;; Defined at:
  5366 ;;		line 189 in file "ms83fxx02_pwr.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;		None               void
  5373 ;; Registers used:
  5374 ;;		wreg, status,2, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 60/0
  5377 ;;		On exit  : 60/0
  5378 ;;		Unchanged: FFF9F/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5380 ;;      Params:         0       0       0       0
  5381 ;;      Locals:         0       0       0       0
  5382 ;;      Temps:          0       0       0       0
  5383 ;;      Totals:         0       0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    5
  5387 ;; This function calls:
  5388 ;;		_EEPROM_Read
  5389 ;; This function is called by:
  5390 ;;		_main
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393  06FC                     _EEPROM_RestoreDeviceModeData:	
  5394                           
  5395                           ;ms83fxx02_pwr.c: 190: device_mode = EEPROM_Read(0x11);
  5396                           
  5397                           ; Regs used in _EEPROM_RestoreDeviceModeData: [wreg+status,2+pclath+cstack]
  5398  06FC  3011               	movlw	17
  5399  06FD  2711               	fcall	_EEPROM_Read
  5400  06FE  00BC               	movwf	_device_mode
  5401  06FF  0008               	return
  5402  0700                     __end_of_EEPROM_RestoreDeviceModeData:	
  5403  0700                     __ptext1669:	
  5404 ;; =============== function _ChargeDetect_GetStatus ends ============
  5405                           
  5406                           
  5407 ;; *************** function _EEPROM_RestoreMotorData *****************
  5408 ;; Defined at:
  5409 ;;		line 517 in file "ms83fxx02_motor.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;		None               void
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 60/0
  5420 ;;		On exit  : 60/0
  5421 ;;		Unchanged: FFF9F/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5423 ;;      Params:         0       0       0       0
  5424 ;;      Locals:         0       0       0       0
  5425 ;;      Temps:          0       0       0       0
  5426 ;;      Totals:         0       0       0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    5
  5430 ;; This function calls:
  5431 ;;		_EEPROM_Read
  5432 ;; This function is called by:
  5433 ;;		_main
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436  0700                     _EEPROM_RestoreMotorData:	
  5437                           
  5438                           ;ms83fxx02_motor.c: 518: motor_status = EEPROM_Read(0x12);
  5439                           
  5440                           ; Regs used in _EEPROM_RestoreMotorData: [wreg+status,2+pclath+cstack]
  5441  0700  3012               	movlw	18
  5442  0701  2711  118A         	fcall	_EEPROM_Read
  5443  0703  00FC               	movwf	_motor_status
  5444                           
  5445                           ;ms83fxx02_motor.c: 519: motor_intr_count = EEPROM_Read(0x13);
  5446  0704  3013               	movlw	19
  5447  0705  2711  118A         	fcall	_EEPROM_Read
  5448  0707  00FD               	movwf	_motor_intr_count	;volatile
  5449                           
  5450                           ;ms83fxx02_motor.c: 520: motor_oper_record = EEPROM_Read(0x14);
  5451  0708  3014               	movlw	20
  5452  0709  2711  118A         	fcall	_EEPROM_Read
  5453  070B  00B6               	movwf	_motor_oper_record	;volatile
  5454  070C  01B7               	clrf	_motor_oper_record+1	;volatile
  5455                           
  5456                           ;ms83fxx02_motor.c: 521: motor_timing_running_flag = EEPROM_Read(0x15);
  5457  070D  3015               	movlw	21
  5458  070E  2711               	fcall	_EEPROM_Read
  5459  070F  00D9               	movwf	_motor_timing_running_flag
  5460  0710  0008               	return
  5461  0711                     __end_of_EEPROM_RestoreMotorData:	
  5462  0711                     __ptext1686:	
  5463 ;; =============== function _KEY_GetReleaseStatus ends ============
  5464                           
  5465                           
  5466 ;; *************** function _EEPROM_Read *****************
  5467 ;; Defined at:
  5468 ;;		line 28 in file "ms83fxx02_eeprom.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  addr            1    wreg     unsigned char 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  addr            1    0[BANK0 ] unsigned char 
  5473 ;;  data            1    1[BANK0 ] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      unsigned char 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2
  5478 ;; Tracked objects:
  5479 ;;		On entry : 40/0
  5480 ;;		On exit  : 60/0
  5481 ;;		Unchanged: FFF9F/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5483 ;;      Params:         0       0       0       0
  5484 ;;      Locals:         0       2       0       0
  5485 ;;      Temps:          0       0       0       0
  5486 ;;      Totals:         0       2       0       0
  5487 ;;Total ram usage:        2 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    4
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_EEPROM_RestoreMotorData
  5494 ;;		_EEPROM_GetFlag
  5495 ;;		_EEPROM_RestoreDeviceModeData
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498  0711                     _EEPROM_Read:	
  5499                           
  5500                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  5501                           ;EEPROM_Read@addr stored from wreg
  5502  0711  1283               	bcf	3,5	;RP0=0, select bank0
  5503  0712  00C4               	movwf	EEPROM_Read@addr
  5504                           
  5505                           ;ms83fxx02_eeprom.c: 31: EEADR = addr;
  5506  0713  1683               	bsf	3,5	;RP0=1, select bank1
  5507  0714  009B               	movwf	27	;volatile
  5508                           
  5509                           ;ms83fxx02_eeprom.c: 32: RD = 1;
  5510  0715  141C               	bsf	28,0
  5511                           
  5512                           ;ms83fxx02_eeprom.c: 33: data = EEDAT;
  5513  0716  081A               	movf	26,w	;volatile
  5514  0717  1283               	bcf	3,5	;RP0=0, select bank0
  5515  0718  00C5               	movwf	EEPROM_Read@data
  5516                           
  5517                           ;ms83fxx02_eeprom.c: 34: RD = 0;
  5518  0719  1683               	bsf	3,5	;RP0=1, select bank1
  5519  071A  101C               	bcf	28,0
  5520                           
  5521                           ;ms83fxx02_eeprom.c: 35: return data;
  5522  071B  1283               	bcf	3,5	;RP0=0, select bank0
  5523  071C  0845               	movf	EEPROM_Read@data,w
  5524  071D  0008               	return
  5525  071E                     __end_of_EEPROM_Read:	
  5526                           
  5527                           	psect	text1673
  5528  076C                     __ptext1673:	
  5529 ;; =============== function _LED_VoltageChargeOutput ends ============
  5530                           
  5531                           
  5532 ;; *************** function _EEPROM_Init *****************
  5533 ;; Defined at:
  5534 ;;		line 23 in file "ms83fxx02_eeprom.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;		None
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;		None
  5539 ;; Return value:  Size  Location     Type
  5540 ;;		None               void
  5541 ;; Registers used:
  5542 ;;		wreg, status,2, status,0, pclath, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 120/0
  5545 ;;		On exit  : 60/20
  5546 ;;		Unchanged: FFE00/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5548 ;;      Params:         0       0       0       0
  5549 ;;      Locals:         0       0       0       0
  5550 ;;      Temps:          0       0       0       0
  5551 ;;      Totals:         0       0       0       0
  5552 ;;Total ram usage:        0 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    5
  5555 ;; This function calls:
  5556 ;;		_EEPROM_Write
  5557 ;; This function is called by:
  5558 ;;		_Driver_Init
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562  076C                     _EEPROM_Init:	
  5563  076C                     l15122:	
  5564                           ; Regs used in _EEPROM_Init: [wreg+status,2+status,0+pclath+cstack]
  5565                           
  5566                           
  5567                           ;ms83fxx02_eeprom.c: 24: EEPROM_Write(0x55, 0xAA);
  5568  076C  30AA               	movlw	170
  5569  076D  1303               	bcf	3,6	;RP1=0, select bank0
  5570  076E  00C4               	movwf	?_EEPROM_Write
  5571  076F  3055               	movlw	85
  5572  0770  118A  23C5         	fcall	_EEPROM_Write
  5573                           
  5574                           ;ms83fxx02_eeprom.c: 25: EEPROM_Write(0x55, 0xAA);
  5575  0772  30AA               	movlw	170
  5576  0773  1283               	bcf	3,5	;RP0=0, select bank0
  5577  0774  00C4               	movwf	?_EEPROM_Write
  5578  0775  3055               	movlw	85
  5579  0776  118A  2BC5         	ljmp	_EEPROM_Write
  5580  0778                     __end_of_EEPROM_Init:	
  5581                           
  5582                           	psect	text1688
  5583  06D5                     __ptext1688:	
  5584 ;; =============== function _EEPROM_Write ends ============
  5585                           
  5586                           
  5587 ;; *************** function _GPIO_INTConfig *****************
  5588 ;; Defined at:
  5589 ;;		line 134 in file "ms83fxx02_gpio.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  GPIOx           1    wreg     enum E1491
  5592 ;;  GPIO_Pin        1    0[BANK0 ] unsigned char 
  5593 ;;  NewState        1    1[BANK0 ] enum E1482
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  GPIOx           1    2[BANK0 ] enum E1491
  5596 ;; Return value:  Size  Location     Type
  5597 ;;		None               void
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0
  5600 ;; Tracked objects:
  5601 ;;		On entry : 160/0
  5602 ;;		On exit  : 160/0
  5603 ;;		Unchanged: FFE9F/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5605 ;;      Params:         0       2       0       0
  5606 ;;      Locals:         0       1       0       0
  5607 ;;      Temps:          0       0       0       0
  5608 ;;      Totals:         0       3       0       0
  5609 ;;Total ram usage:        3 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    4
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_ChargeDetect_Init
  5616 ;;		_KEY_Init
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619  06D5                     _GPIO_INTConfig:	
  5620                           
  5621                           ; Regs used in _GPIO_INTConfig: [wreg+status,2+status,0]
  5622                           ;GPIO_INTConfig@GPIOx stored from wreg
  5623  06D5  00C6               	movwf	GPIO_INTConfig@GPIOx
  5624                           
  5625                           ;ms83fxx02_gpio.c: 135: if(GPIOx == GPIOA)
  5626  06D6  08C6               	movf	GPIO_INTConfig@GPIOx,f
  5627  06D7  1D03               	skipz
  5628  06D8  2EE5               	goto	l14700
  5629                           
  5630                           ;ms83fxx02_gpio.c: 136: {
  5631                           ;ms83fxx02_gpio.c: 137: if (NewState != DISABLE)
  5632  06D9  0845               	movf	GPIO_INTConfig@NewState,w
  5633  06DA  1903               	btfsc	3,2
  5634  06DB  2EE2               	goto	l14698
  5635                           
  5636                           ;ms83fxx02_gpio.c: 138: {
  5637                           ;ms83fxx02_gpio.c: 140: PAIE = 1;
  5638  06DC  158B               	bsf	11,3
  5639                           
  5640                           ;ms83fxx02_gpio.c: 141: GIE = 1;
  5641  06DD  178B               	bsf	11,7
  5642                           
  5643                           ;ms83fxx02_gpio.c: 142: IOCA |= GPIO_Pin;
  5644  06DE  0844               	movf	GPIO_INTConfig@GPIO_Pin,w
  5645  06DF  1683               	bsf	3,5	;RP0=1, select bank1
  5646  06E0  0496               	iorwf	22,f	;volatile
  5647                           
  5648                           ;ms83fxx02_gpio.c: 143: }
  5649  06E1  2EE5               	goto	l14700
  5650  06E2                     l14698:	
  5651                           
  5652                           ;ms83fxx02_gpio.c: 144: else
  5653                           ;ms83fxx02_gpio.c: 145: {
  5654                           ;ms83fxx02_gpio.c: 147: IOCA &= ~GPIO_Pin;
  5655  06E2  0944               	comf	GPIO_INTConfig@GPIO_Pin,w
  5656  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  5657  06E4  0596               	andwf	22,f	;volatile
  5658  06E5                     l14700:	
  5659                           
  5660                           ;ms83fxx02_gpio.c: 148: }
  5661                           ;ms83fxx02_gpio.c: 149: }
  5662                           ;ms83fxx02_gpio.c: 151: if((GPIOx == GPIOC) && (GPIO_Pin == ((uint8_t)0x00000002)))
  5663  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  5664  06E6  0B46               	decfsz	GPIO_INTConfig@GPIOx,w
  5665  06E7  0008               	return
  5666  06E8  0844               	movf	GPIO_INTConfig@GPIO_Pin,w
  5667  06E9  3A02               	xorlw	2
  5668  06EA  1D03               	skipz
  5669  06EB  0008               	return
  5670                           
  5671                           ;ms83fxx02_gpio.c: 152: {
  5672                           ;ms83fxx02_gpio.c: 154: if (NewState != DISABLE)
  5673  06EC  0845               	movf	GPIO_INTConfig@NewState,w
  5674  06ED  1903               	btfsc	3,2
  5675  06EE  2EF8               	goto	l4439
  5676                           
  5677                           ;ms83fxx02_gpio.c: 155: {
  5678                           ;ms83fxx02_gpio.c: 157: ANSEL5 = 0;
  5679  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  5680  06F0  3007               	movlw	7
  5681  06F1  1291               	bcf	17,5
  5682                           
  5683                           ;ms83fxx02_gpio.c: 158: CMCON0 |= 0x07;
  5684  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  5685  06F3  0499               	iorwf	25,f	;volatile
  5686                           
  5687                           ;ms83fxx02_gpio.c: 160: GIE = 1;
  5688  06F4  178B               	bsf	11,7
  5689                           
  5690                           ;ms83fxx02_gpio.c: 161: INTF = 0;
  5691  06F5  108B               	bcf	11,1
  5692                           
  5693                           ;ms83fxx02_gpio.c: 162: INTE = 1;
  5694  06F6  160B               	bsf	11,4
  5695                           
  5696                           ;ms83fxx02_gpio.c: 163: }
  5697  06F7  0008               	return
  5698  06F8                     l4439:	
  5699                           
  5700                           ;ms83fxx02_gpio.c: 164: else
  5701                           ;ms83fxx02_gpio.c: 165: {
  5702                           ;ms83fxx02_gpio.c: 167: INTE = 0;
  5703  06F8  120B               	bcf	11,4
  5704  06F9  0008               	return
  5705  06FA                     __end_of_GPIO_INTConfig:	
  5706                           
  5707                           	psect	text1692
  5708  0778                     __ptext1692:	
  5709 ;; =============== function _GetDeviceMode ends ============
  5710                           
  5711                           
  5712 ;; *************** function _ChargeTimer_INTConfig *****************
  5713 ;; Defined at:
  5714 ;;		line 81 in file "ms83fxx02_charge_timer.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  NewState        1    wreg     enum E1482
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  NewState        1    0[BANK0 ] enum E1482
  5719 ;; Return value:  Size  Location     Type
  5720 ;;		None               void
  5721 ;; Registers used:
  5722 ;;		wreg
  5723 ;; Tracked objects:
  5724 ;;		On entry : 60/40
  5725 ;;		On exit  : 60/40
  5726 ;;		Unchanged: FFF9F/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5728 ;;      Params:         0       0       0       0
  5729 ;;      Locals:         0       1       0       0
  5730 ;;      Temps:          0       0       0       0
  5731 ;;      Totals:         0       1       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    4
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_main
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741  0778                     _ChargeTimer_INTConfig:	
  5742                           
  5743                           ; Regs used in _ChargeTimer_INTConfig: [wreg]
  5744                           ;ChargeTimer_INTConfig@NewState stored from wreg
  5745  0778  1303               	bcf	3,6	;RP1=0, select bank0
  5746  0779  00C4               	movwf	ChargeTimer_INTConfig@NewState
  5747                           
  5748                           ;ms83fxx02_charge_timer.c: 82: if(NewState != DISABLE)
  5749  077A  0844               	movf	ChargeTimer_INTConfig@NewState,w
  5750                           
  5751                           ;ms83fxx02_charge_timer.c: 83: {
  5752                           ;ms83fxx02_charge_timer.c: 85: TMR5IE = 1;
  5753  077B  1703               	bsf	3,6	;RP1=1, select bank2
  5754  077C  1903               	btfsc	3,2
  5755  077D  2F82               	goto	L8
  5756  077E  149C               	bsf	28,1
  5757                           
  5758                           ;ms83fxx02_charge_timer.c: 86: PEIE = 1;
  5759  077F  170B               	bsf	11,6
  5760                           
  5761                           ;ms83fxx02_charge_timer.c: 87: GIE = 1;
  5762  0780  178B               	bsf	11,7
  5763                           
  5764                           ;ms83fxx02_charge_timer.c: 88: }
  5765  0781  0008               	return
  5766  0782                     L8:	
  5767                           ;ms83fxx02_charge_timer.c: 89: else
  5768                           ;ms83fxx02_charge_timer.c: 90: {
  5769                           ;ms83fxx02_charge_timer.c: 92: TMR5IE = 0;
  5770                           
  5771  0782  109C               	bcf	28,1
  5772  0783  0008               	return
  5773  0784                     __end_of_ChargeTimer_INTConfig:	
  5774                           
  5775                           	psect	text1693
  5776  0736                     __ptext1693:	
  5777 ;; =============== function _ChargeTimer_INTConfig ends ============
  5778                           
  5779                           
  5780 ;; *************** function _ChargeTimer_Cmd *****************
  5781 ;; Defined at:
  5782 ;;		line 41 in file "ms83fxx02_charge_timer.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  NewState        1    wreg     enum E1482
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  NewState        1    0[BANK0 ] enum E1482
  5787 ;; Return value:  Size  Location     Type
  5788 ;;		None               void
  5789 ;; Registers used:
  5790 ;;		wreg, status,2
  5791 ;; Tracked objects:
  5792 ;;		On entry : 40/20
  5793 ;;		On exit  : 60/40
  5794 ;;		Unchanged: FFF9F/0
  5795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5796 ;;      Params:         0       0       0       0
  5797 ;;      Locals:         0       1       0       0
  5798 ;;      Temps:          0       0       0       0
  5799 ;;      Totals:         0       1       0       0
  5800 ;;Total ram usage:        1 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    4
  5803 ;; This function calls:
  5804 ;;		Nothing
  5805 ;; This function is called by:
  5806 ;;		_main
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809  0736                     _ChargeTimer_Cmd:	
  5810                           
  5811                           ; Regs used in _ChargeTimer_Cmd: [wreg+status,2]
  5812                           ;ChargeTimer_Cmd@NewState stored from wreg
  5813  0736  1283               	bcf	3,5	;RP0=0, select bank0
  5814  0737  00C4               	movwf	ChargeTimer_Cmd@NewState
  5815                           
  5816                           ;ms83fxx02_charge_timer.c: 42: charge_time_out = 0;
  5817  0738  01B4               	clrf	_charge_time_out	;volatile
  5818  0739  01B5               	clrf	_charge_time_out+1	;volatile
  5819                           
  5820                           ;ms83fxx02_charge_timer.c: 44: if(NewState != DISABLE)
  5821  073A  0844               	movf	ChargeTimer_Cmd@NewState,w
  5822                           
  5823                           ;ms83fxx02_charge_timer.c: 45: {
  5824                           ;ms83fxx02_charge_timer.c: 47: TMR5ON = 0;
  5825  073B  1703               	bsf	3,6	;RP1=1, select bank2
  5826  073C  111C               	bcf	28,2
  5827  073D  1903               	btfsc	3,2
  5828  073E  0008               	return
  5829                           
  5830                           ;ms83fxx02_charge_timer.c: 49: PWM5CR0 = 0b01110010;
  5831  073F  3072               	movlw	114
  5832  0740  009B               	movwf	27	;volatile
  5833                           
  5834                           ;ms83fxx02_charge_timer.c: 52: PWM5CR1 = 0b00111000;
  5835  0741  3038               	movlw	56
  5836  0742  009C               	movwf	28	;volatile
  5837                           
  5838                           ;ms83fxx02_charge_timer.c: 55: T5CKDIV = 119;
  5839  0743  3077               	movlw	119
  5840  0744  009D               	movwf	29	;volatile
  5841                           
  5842                           ;ms83fxx02_charge_timer.c: 57: TMR5H = 0x0F;
  5843  0745  300F               	movlw	15
  5844  0746  0099               	movwf	25	;volatile
  5845                           
  5846                           ;ms83fxx02_charge_timer.c: 58: TMR5L = 0;
  5847  0747  0198               	clrf	24	;volatile
  5848                           
  5849                           ;ms83fxx02_charge_timer.c: 59: PR5L = 0xFF;
  5850  0748  30FF               	movlw	255
  5851  0749  009A               	movwf	26	;volatile
  5852                           
  5853                           ;ms83fxx02_charge_timer.c: 62: TMR5IF = 0;
  5854  074A  101C               	bcf	28,0
  5855                           
  5856                           ;ms83fxx02_charge_timer.c: 65: TMR5ON = 1;
  5857  074B  151C               	bsf	28,2
  5858                           
  5859                           ;ms83fxx02_charge_timer.c: 66: }
  5860  074C  0008               	return
  5861  074D                     __end_of_ChargeTimer_Cmd:	
  5862                           ;ms83fxx02_charge_timer.c: 67: else
  5863                           ;ms83fxx02_charge_timer.c: 68: {
  5864                           ;ms83fxx02_charge_timer.c: 70: TMR5ON = 0;
  5865                           
  5866                           
  5867                           	psect	text1696
  5868  0794                     __ptext1696:	
  5869 ;; =============== function _Motor_SetStatus ends ============
  5870                           
  5871                           
  5872 ;; *************** function _SetDeviceMode *****************
  5873 ;; Defined at:
  5874 ;;		line 55 in file "ms83fxx02_pwr.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  mode            1    wreg     enum E1521
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  mode            1    0[BANK0 ] enum E1521
  5879 ;; Return value:  Size  Location     Type
  5880 ;;		None               void
  5881 ;; Registers used:
  5882 ;;		wreg
  5883 ;; Tracked objects:
  5884 ;;		On entry : 20/0
  5885 ;;		On exit  : 60/0
  5886 ;;		Unchanged: FFF9F/0
  5887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5888 ;;      Params:         0       0       0       0
  5889 ;;      Locals:         0       1       0       0
  5890 ;;      Temps:          0       0       0       0
  5891 ;;      Totals:         0       1       0       0
  5892 ;;Total ram usage:        1 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    4
  5895 ;; This function calls:
  5896 ;;		Nothing
  5897 ;; This function is called by:
  5898 ;;		_main
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901  0794                     _SetDeviceMode:	
  5902                           
  5903                           ; Regs used in _SetDeviceMode: [wreg]
  5904                           ;SetDeviceMode@mode stored from wreg
  5905  0794  1303               	bcf	3,6	;RP1=0, select bank0
  5906  0795  00C4               	movwf	SetDeviceMode@mode
  5907                           
  5908                           ;ms83fxx02_pwr.c: 56: device_mode = mode;
  5909  0796  00BC               	movwf	_device_mode	;volatile
  5910  0797  0008               	return
  5911  0798                     __end_of_SetDeviceMode:	
  5912                           
  5913                           	psect	text1697
  5914  0798                     __ptext1697:	
  5915 ;; =============== function _SetDeviceMode ends ============
  5916                           
  5917                           
  5918 ;; *************** function _ChargeTimer_ResetCount *****************
  5919 ;; Defined at:
  5920 ;;		line 102 in file "ms83fxx02_charge_timer.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;		None               void
  5927 ;; Registers used:
  5928 ;;		status,2
  5929 ;; Tracked objects:
  5930 ;;		On entry : 60/0
  5931 ;;		On exit  : 60/0
  5932 ;;		Unchanged: FFF9F/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5934 ;;      Params:         0       0       0       0
  5935 ;;      Locals:         0       0       0       0
  5936 ;;      Temps:          0       0       0       0
  5937 ;;      Totals:         0       0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    4
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_main
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947  0798                     _ChargeTimer_ResetCount:	
  5948                           
  5949                           ;ms83fxx02_charge_timer.c: 103: charge_time_out = 0;
  5950                           
  5951                           ; Regs used in _ChargeTimer_ResetCount: [status,2]
  5952  0798  01B4               	clrf	_charge_time_out	;volatile
  5953  0799  01B5               	clrf	_charge_time_out+1	;volatile
  5954  079A  0008               	return
  5955  079B                     __end_of_ChargeTimer_ResetCount:	
  5956                           
  5957                           	psect	text1698
  5958  079B                     __ptext1698:	
  5959 ;; =============== function _ChargeTimer_ResetCount ends ============
  5960                           
  5961                           
  5962 ;; *************** function _Motor_GetStatus *****************
  5963 ;; Defined at:
  5964 ;;		line 132 in file "ms83fxx02_motor.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      enum E1552
  5971 ;; Registers used:
  5972 ;;		wreg
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/20
  5975 ;;		On exit  : 0/20
  5976 ;;		Unchanged: FFFFF/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5978 ;;      Params:         0       0       0       0
  5979 ;;      Locals:         0       0       0       0
  5980 ;;      Temps:          0       0       0       0
  5981 ;;      Totals:         0       0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    4
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991  079B                     _Motor_GetStatus:	
  5992                           
  5993                           ;ms83fxx02_motor.c: 133: return motor_status;
  5994                           
  5995                           ; Regs used in _Motor_GetStatus: [wreg]
  5996  079B  087C               	movf	_motor_status,w	;volatile
  5997  079C  0008               	return
  5998  079D                     __end_of_Motor_GetStatus:	
  5999                           
  6000                           	psect	text1704
  6001  071E                     __ptext1704:	
  6002 ;; =============== function _ADC_Init ends ============
  6003                           
  6004                           
  6005 ;; *************** function _Board_Init *****************
  6006 ;; Defined at:
  6007 ;;		line 33 in file "main.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;		None
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;		None
  6012 ;; Return value:  Size  Location     Type
  6013 ;;		None               void
  6014 ;; Registers used:
  6015 ;;		wreg, status,2
  6016 ;; Tracked objects:
  6017 ;;		On entry : 60/0
  6018 ;;		On exit  : 60/20
  6019 ;;		Unchanged: FFF9F/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6021 ;;      Params:         0       0       0       0
  6022 ;;      Locals:         0       0       0       0
  6023 ;;      Temps:          0       0       0       0
  6024 ;;      Totals:         0       0       0       0
  6025 ;;Total ram usage:        0 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    4
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_main
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034  071E                     _Board_Init:	
  6035                           
  6036                           ;main.c: 34: PCON = 0b00000011;
  6037                           
  6038                           ; Regs used in _Board_Init: [wreg+status,2]
  6039  071E  3003               	movlw	3
  6040  071F  1683               	bsf	3,5	;RP0=1, select bank1
  6041  0720  008E               	movwf	14	;volatile
  6042                           
  6043                           ;main.c: 35: MSCKCON = 0b00010000;
  6044  0721  3010               	movlw	16
  6045  0722  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0723  009B               	movwf	27	;volatile
  6047                           
  6048                           ;main.c: 37: WDTCON = 0b00001110;
  6049  0724  300E               	movlw	14
  6050  0725  0098               	movwf	24	;volatile
  6051                           
  6052                           ;main.c: 39: OSCCON = 0b01010000;
  6053  0726  3050               	movlw	80
  6054  0727  1683               	bsf	3,5	;RP0=1, select bank1
  6055  0728  008F               	movwf	15	;volatile
  6056                           
  6057                           ;main.c: 40: INTCON = 0b00000000;
  6058  0729  018B               	clrf	11	;volatile
  6059                           
  6060                           ;main.c: 41: PIE1 = 0b00000000;
  6061  072A  018C               	clrf	12	;volatile
  6062                           
  6063                           ;main.c: 42: PIE2 = 0b00000000;
  6064  072B  018D               	clrf	13	;volatile
  6065                           
  6066                           ;main.c: 43: PIR1 = 0b00000000;
  6067  072C  1283               	bcf	3,5	;RP0=0, select bank0
  6068  072D  018C               	clrf	12	;volatile
  6069                           
  6070                           ;main.c: 44: PIR2 = 0b00000000;
  6071  072E  018D               	clrf	13	;volatile
  6072                           
  6073                           ;main.c: 45: WPD = 0b00000000;
  6074  072F  1683               	bsf	3,5	;RP0=1, select bank1
  6075  0730  0189               	clrf	9	;volatile
  6076                           
  6077                           ;main.c: 46: ANSEL = 0b01000000;
  6078  0731  3040               	movlw	64
  6079  0732  0091               	movwf	17	;volatile
  6080                           
  6081                           ;main.c: 47: TRISA = 0b00000000;
  6082  0733  0185               	clrf	5	;volatile
  6083                           
  6084                           ;main.c: 48: WPUA = 0b00000000;
  6085  0734  0195               	clrf	21	;volatile
  6086  0735  0008               	return
  6087  0736                     __end_of_Board_Init:	
  6088                           
  6089                           	psect	text1705
  6090  040D                     __ptext1705:	
  6091 ;; =============== function _Board_Init ends ============
  6092                           
  6093                           
  6094 ;; *************** function _ISR *****************
  6095 ;; Defined at:
  6096 ;;		line 208 in file "main.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;		None
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 60/0
  6108 ;;		Unchanged: FFE00/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6110 ;;      Params:         0       0       0       0
  6111 ;;      Locals:         0       0       0       0
  6112 ;;      Temps:          4       0       0       0
  6113 ;;      Totals:         4       0       0       0
  6114 ;;Total ram usage:        4 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    3
  6117 ;; This function calls:
  6118 ;;		_KEY_IntrHandler
  6119 ;;		_DebounceTimer_IntrHandler
  6120 ;;		i1_GetDeviceMode
  6121 ;;		_SwitchModeTimer_IntrHandler
  6122 ;;		_ChargeTimer_IntrHandler
  6123 ;;		_MotorOperTimer_IntrHandler
  6124 ;;		_LEDTimer_IntrHandler
  6125 ;;		_ChargeDetect_IntrHandler
  6126 ;;		_ADC_IntrHandler
  6127 ;; This function is called by:
  6128 ;;		Interrupt level 1
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131  040D                     _ISR:	
  6132                           
  6133                           ;main.c: 209: KEY_IntrHandler();
  6134  040D  2599  118A         	fcall	_KEY_IntrHandler
  6135                           
  6136                           ;main.c: 210: DebounceTimer_IntrHandler();
  6137  040F  25A7  118A         	fcall	_DebounceTimer_IntrHandler
  6138                           
  6139                           ;main.c: 212: if(RUN_MODE == GetDeviceMode())
  6140  0411  2595  118A         	fcall	i1_GetDeviceMode
  6141  0413  3800               	iorlw	0
  6142  0414  1D03               	skipz
  6143  0415  2C19               	goto	i1l14536
  6144                           
  6145                           ;main.c: 213: {
  6146                           ;main.c: 214: SwitchModeTimer_IntrHandler();
  6147  0416  257E  118A         	fcall	_SwitchModeTimer_IntrHandler
  6148                           
  6149                           ;main.c: 215: }
  6150  0418  2C1B               	goto	i1l14538
  6151  0419                     i1l14536:	
  6152                           
  6153                           ;main.c: 216: else
  6154                           ;main.c: 217: {
  6155                           ;main.c: 218: ChargeTimer_IntrHandler();
  6156  0419  258A  118A         	fcall	_ChargeTimer_IntrHandler
  6157  041B                     i1l14538:	
  6158                           
  6159                           ;main.c: 219: }
  6160                           ;main.c: 221: MotorOperTimer_IntrHandler();
  6161  041B  242E  118A         	fcall	_MotorOperTimer_IntrHandler
  6162                           
  6163                           ;main.c: 223: LEDTimer_IntrHandler();
  6164  041D  24F5  118A         	fcall	_LEDTimer_IntrHandler
  6165                           
  6166                           ;main.c: 225: ChargeDetect_IntrHandler();
  6167  041F  25CB  118A         	fcall	_ChargeDetect_IntrHandler
  6168                           
  6169                           ;main.c: 227: ADC_IntrHandler();
  6170  0421  25D9               	fcall	_ADC_IntrHandler
  6171  0422  087A               	movf	??_ISR+3,w
  6172  0423  1283               	bcf	3,5	;RP0=0, select bank0
  6173  0424  00FF               	movwf	127
  6174  0425  0879               	movf	??_ISR+2,w
  6175  0426  008A               	movwf	10
  6176  0427  0878               	movf	??_ISR+1,w
  6177  0428  0084               	movwf	4
  6178  0429  0E77               	swapf	??_ISR^(0+-128),w
  6179  042A  0083               	movwf	3
  6180  042B  0EFE               	swapf	126,f
  6181  042C  0E7E               	swapf	126,w
  6182  042D  0009               	retfie
  6183  042E                     __end_of_ISR:	
  6184  042E                     __ptext1707:	
  6185 ;; =============== function _LEDTimer_IntrHandler ends ============
  6186                           
  6187                           
  6188 ;; *************** function _MotorOperTimer_IntrHandler *****************
  6189 ;; Defined at:
  6190 ;;		line 323 in file "ms83fxx02_motor.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;		None               void
  6197 ;; Registers used:
  6198 ;;		wreg, status,2, status,0, pclath, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 60/40
  6201 ;;		On exit  : 60/40
  6202 ;;		Unchanged: FFF9F/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6204 ;;      Params:         0       0       0       0
  6205 ;;      Locals:         0       0       0       0
  6206 ;;      Temps:          0       0       0       0
  6207 ;;      Totals:         0       0       0       0
  6208 ;;Total ram usage:        0 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    2
  6211 ;; This function calls:
  6212 ;;		i1_Motor_CheckRunLimit
  6213 ;;		___lbmod
  6214 ;;		i1_MotorOperationTimer_Init
  6215 ;;		i1_Motor_Stop
  6216 ;;		i1_MotorOperationTimer_Stop
  6217 ;;		i1_Motor_SetStatus
  6218 ;;		i1_Motor_Init
  6219 ;; This function is called by:
  6220 ;;		_ISR
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223  042E                     _MotorOperTimer_IntrHandler:	
  6224                           
  6225                           ;ms83fxx02_motor.c: 324: if(TMR4IE && TMR4IF)
  6226                           
  6227                           ; Regs used in _MotorOperTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  6228  042E  1896               	btfsc	22,1
  6229  042F  1C16               	btfss	22,0
  6230  0430  0008               	return
  6231                           
  6232                           ;ms83fxx02_motor.c: 325: {
  6233                           ;ms83fxx02_motor.c: 326: if(!Motor_CheckRunLimit())
  6234  0431  249A  118A         	fcall	i1_Motor_CheckRunLimit
  6235  0433  3800               	iorlw	0
  6236  0434  1D03               	skipz
  6237  0435  2C61               	goto	i1l8881
  6238                           
  6239                           ;ms83fxx02_motor.c: 327: {
  6240                           ;ms83fxx02_motor.c: 328: if(motor_timing_running_flag)
  6241  0436  0859               	movf	_motor_timing_running_flag,w
  6242  0437  1903               	btfsc	3,2
  6243  0438  2C47               	goto	i1l14602
  6244                           
  6245                           ;ms83fxx02_motor.c: 329: {
  6246                           ;ms83fxx02_motor.c: 330: motor_intr_count++;
  6247  0439  0AFD               	incf	_motor_intr_count,f	;volatile
  6248                           
  6249                           ;ms83fxx02_motor.c: 331: if((motor_intr_count % 5) == 0)
  6250  043A  3005               	movlw	5
  6251  043B  00F0               	movwf	?___lbmod
  6252  043C  087D               	movf	_motor_intr_count,w	;volatile
  6253  043D  24A3  118A         	fcall	___lbmod
  6254  043F  3800               	iorlw	0
  6255  0440  1D03               	skipz
  6256  0441  2C64               	goto	i1l14620
  6257  0442  3002               	movlw	2
  6258                           
  6259                           ;ms83fxx02_motor.c: 332: {
  6260                           ;ms83fxx02_motor.c: 333: motor_timing_running_flag = 0;
  6261  0443  01D9               	clrf	_motor_timing_running_flag
  6262                           
  6263                           ;ms83fxx02_motor.c: 334: MotorOperationTimer_Init(MotorOperationTimer_0_3s);
  6264  0444  2467  118A         	fcall	i1_MotorOperationTimer_Init
  6265  0446  2C64               	goto	i1l14620
  6266  0447                     i1l14602:	
  6267                           
  6268                           ;ms83fxx02_motor.c: 337: else
  6269                           ;ms83fxx02_motor.c: 338: {
  6270                           ;ms83fxx02_motor.c: 339: if(motor_intr_count >= 20)
  6271  0447  3014               	movlw	20
  6272  0448  027D               	subwf	_motor_intr_count,w	;volatile
  6273  0449  1C03               	skipc
  6274  044A  2C57               	goto	i1l14614
  6275                           
  6276                           ;ms83fxx02_motor.c: 340: {
  6277                           ;ms83fxx02_motor.c: 341: motor_intr_count = 0;
  6278  044B  01FD               	clrf	_motor_intr_count	;volatile
  6279                           
  6280                           ;ms83fxx02_motor.c: 342: motor_oper_record++;
  6281  044C  0AB6               	incf	_motor_oper_record,f	;volatile
  6282  044D  1903               	skipnz
  6283  044E  0AB7               	incf	_motor_oper_record+1,f	;volatile
  6284                           
  6285                           ;ms83fxx02_motor.c: 343: Motor_Stop();
  6286  044F  250E  118A         	fcall	i1_Motor_Stop
  6287                           
  6288                           ;ms83fxx02_motor.c: 344: MotorOperationTimer_Stop();
  6289  0451  248E  118A         	fcall	i1_MotorOperationTimer_Stop
  6290                           
  6291                           ;ms83fxx02_motor.c: 345: Motor_SetStatus(MOTOR_MODE_STOP);
  6292  0453  3001               	movlw	1
  6293  0454  24F2  118A         	fcall	i1_Motor_SetStatus
  6294                           
  6295                           ;ms83fxx02_motor.c: 346: }
  6296  0456  2C5D               	goto	i1l14616
  6297  0457                     i1l14614:	
  6298                           
  6299                           ;ms83fxx02_motor.c: 347: else
  6300                           ;ms83fxx02_motor.c: 348: {
  6301                           ;ms83fxx02_motor.c: 349: Motor_Init(motor_status);
  6302  0457  087C               	movf	_motor_status,w	;volatile
  6303  0458  24BF  118A         	fcall	i1_Motor_Init
  6304                           
  6305                           ;ms83fxx02_motor.c: 350: MotorOperationTimer_Init(MotorOperationTimer_30s);
  6306  045A  3001               	movlw	1
  6307  045B  2467  118A         	fcall	i1_MotorOperationTimer_Init
  6308  045D                     i1l14616:	
  6309                           
  6310                           ;ms83fxx02_motor.c: 351: }
  6311                           ;ms83fxx02_motor.c: 353: motor_timing_running_flag = 1;
  6312  045D  1303               	bcf	3,6	;RP1=0, select bank0
  6313  045E  01D9               	clrf	_motor_timing_running_flag
  6314  045F  0AD9               	incf	_motor_timing_running_flag,f
  6315  0460  2C64               	goto	i1l14620
  6316  0461                     i1l8881:	
  6317                           
  6318                           ;ms83fxx02_motor.c: 356: else
  6319                           ;ms83fxx02_motor.c: 357: {
  6320                           ;ms83fxx02_motor.c: 358: key_press_time_count = 1;
  6321  0461  01BF               	clrf	_key_press_time_count	;volatile
  6322  0462  0ABF               	incf	_key_press_time_count,f	;volatile
  6323                           
  6324                           ;ms83fxx02_motor.c: 359: MotorOperationTimer_Stop();
  6325  0463  248E               	fcall	i1_MotorOperationTimer_Stop
  6326  0464                     i1l14620:	
  6327                           
  6328                           ;ms83fxx02_motor.c: 360: }
  6329                           ;ms83fxx02_motor.c: 361: TMR4IF = 0;
  6330  0464  1703               	bsf	3,6	;RP1=1, select bank2
  6331  0465  1016               	bcf	22,0
  6332  0466  0008               	return
  6333  0467                     __end_of_MotorOperTimer_IntrHandler:	
  6334  0467                     __ptext1717:	
  6335 ;; =============== function i1_GetDeviceMode ends ============
  6336                           
  6337                           
  6338 ;; *************** function i1_MotorOperationTimer_Init *****************
  6339 ;; Defined at:
  6340 ;;		line 219 in file "ms83fxx02_motor.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  MotorOperati    1    wreg     enum E1558
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  MotorOperati    1    0[COMMON] enum E1558
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, status,2
  6349 ;; Tracked objects:
  6350 ;;		On entry : 40/0
  6351 ;;		On exit  : 60/40
  6352 ;;		Unchanged: FFF9F/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6354 ;;      Params:         0       0       0       0
  6355 ;;      Locals:         1       0       0       0
  6356 ;;      Temps:          0       0       0       0
  6357 ;;      Totals:         1       0       0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		_MotorOperTimer_IntrHandler
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366  0467                     i1_MotorOperationTimer_Init:	
  6367                           
  6368                           ; Regs used in i1_MotorOperationTimer_Init: [wreg+status,2]
  6369                           ;i1MotorOperationTimer_Init@time stored from wreg
  6370  0467  00F0               	movwf	i1MotorOperationTimer_Init@time
  6371                           
  6372                           ;ms83fxx02_motor.c: 221: TMR4ON = 0;
  6373  0468  1283               	bcf	3,5	;RP0=0, select bank2
  6374  0469  1703               	bsf	3,6	;RP1=1, select bank2
  6375  046A  1116               	bcf	22,2
  6376                           
  6377                           ;ms83fxx02_motor.c: 223: if(time == MotorOperationTimer_30s)
  6378  046B  0B70               	decfsz	i1MotorOperationTimer_Init@time,w
  6379  046C  2C73               	goto	i1l15052
  6380                           
  6381                           ;ms83fxx02_motor.c: 224: {
  6382                           ;ms83fxx02_motor.c: 226: PWM4CR0 = 0b01110010;
  6383  046D  3072               	movlw	114
  6384  046E  0095               	movwf	21	;volatile
  6385                           
  6386                           ;ms83fxx02_motor.c: 229: PWM4CR1 = 0b00111000;
  6387  046F  3038               	movlw	56
  6388  0470  0096               	movwf	22	;volatile
  6389                           
  6390                           ;ms83fxx02_motor.c: 234: T4CKDIV = 182;
  6391  0471  30B6               	movlw	182
  6392  0472  2C82               	goto	L13
  6393  0473                     i1l15052:	
  6394                           ;ms83fxx02_motor.c: 235: }
  6395                           
  6396                           
  6397                           ;ms83fxx02_motor.c: 236: else if(time == MotorOperationTimer_0_3s)
  6398  0473  0870               	movf	i1MotorOperationTimer_Init@time,w
  6399  0474  3A02               	xorlw	2
  6400  0475  1D03               	skipz
  6401  0476  2C7D               	goto	i1l15056
  6402                           
  6403                           ;ms83fxx02_motor.c: 237: {
  6404                           ;ms83fxx02_motor.c: 239: PWM4CR0 = 0b01100010;
  6405  0477  3062               	movlw	98
  6406  0478  0095               	movwf	21	;volatile
  6407                           
  6408                           ;ms83fxx02_motor.c: 241: PWM4CR1 = 0b00111000;
  6409  0479  3038               	movlw	56
  6410  047A  0096               	movwf	22	;volatile
  6411                           
  6412                           ;ms83fxx02_motor.c: 245: T4CKDIV = 8;
  6413  047B  3008               	movlw	8
  6414  047C  2C82               	goto	L13
  6415  047D                     i1l15056:	
  6416                           ;ms83fxx02_motor.c: 246: }
  6417                           
  6418                           
  6419                           ;ms83fxx02_motor.c: 247: else
  6420                           ;ms83fxx02_motor.c: 248: {
  6421                           ;ms83fxx02_motor.c: 250: PWM4CR0 = 0b01110010;
  6422  047D  3072               	movlw	114
  6423  047E  0095               	movwf	21	;volatile
  6424                           
  6425                           ;ms83fxx02_motor.c: 253: PWM4CR1 = 0b00111000;
  6426  047F  3038               	movlw	56
  6427  0480  0096               	movwf	22	;volatile
  6428                           
  6429                           ;ms83fxx02_motor.c: 256: T4CKDIV = 243;
  6430  0481  30F3               	movlw	243
  6431  0482                     L13:	
  6432  0482  0097               	movwf	23	;volatile
  6433                           
  6434                           ;ms83fxx02_motor.c: 257: }
  6435                           ;ms83fxx02_motor.c: 259: TMR4H = 0x0F;
  6436  0483  300F               	movlw	15
  6437  0484  0093               	movwf	19	;volatile
  6438                           
  6439                           ;ms83fxx02_motor.c: 260: TMR4L = 0;
  6440  0485  0192               	clrf	18	;volatile
  6441                           
  6442                           ;ms83fxx02_motor.c: 261: PR4L = 0xFF;
  6443  0486  30FF               	movlw	255
  6444  0487  0094               	movwf	20	;volatile
  6445                           
  6446                           ;ms83fxx02_motor.c: 264: TMR4IF = 0;
  6447  0488  1016               	bcf	22,0
  6448                           
  6449                           ;ms83fxx02_motor.c: 267: TMR4ON = 1;
  6450  0489  1516               	bsf	22,2
  6451                           
  6452                           ;ms83fxx02_motor.c: 270: TMR4IE = 1;
  6453  048A  1496               	bsf	22,1
  6454                           
  6455                           ;ms83fxx02_motor.c: 271: PEIE = 1;
  6456  048B  170B               	bsf	11,6
  6457                           
  6458                           ;ms83fxx02_motor.c: 272: GIE = 1;
  6459  048C  178B               	bsf	11,7
  6460  048D  0008               	return
  6461  048E                     __end_ofi1_MotorOperationTimer_Init:	
  6462  048E                     __ptext1708:	
  6463 ;; =============== function _MotorOperTimer_IntrHandler ends ============
  6464                           
  6465                           
  6466 ;; *************** function i1_MotorOperationTimer_Stop *****************
  6467 ;; Defined at:
  6468 ;;		line 281 in file "ms83fxx02_motor.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, pclath, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 60/0
  6479 ;;		On exit  : 60/0
  6480 ;;		Unchanged: FFF9F/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6482 ;;      Params:         0       0       0       0
  6483 ;;      Locals:         0       0       0       0
  6484 ;;      Temps:          0       0       0       0
  6485 ;;      Totals:         0       0       0       0
  6486 ;;Total ram usage:        0 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    1
  6489 ;; This function calls:
  6490 ;;		i1_Motor_CheckRunLimit
  6491 ;; This function is called by:
  6492 ;;		_MotorOperTimer_IntrHandler
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495  048E                     i1_MotorOperationTimer_Stop:	
  6496                           
  6497                           ;ms83fxx02_motor.c: 283: TMR4ON = 0;
  6498                           
  6499                           ; Regs used in i1_MotorOperationTimer_Stop: [wreg+status,2+pclath+cstack]
  6500  048E  1703               	bsf	3,6	;RP1=1, select bank2
  6501  048F  1116               	bcf	22,2
  6502                           
  6503                           ;ms83fxx02_motor.c: 285: TMR4IE = 0;
  6504  0490  1096               	bcf	22,1
  6505                           
  6506                           ;ms83fxx02_motor.c: 287: if(!Motor_CheckRunLimit())
  6507  0491  249A  118A         	fcall	i1_Motor_CheckRunLimit
  6508  0493  3800               	iorlw	0
  6509  0494  1D03               	skipz
  6510  0495  0008               	return
  6511                           
  6512                           ;ms83fxx02_motor.c: 288: {
  6513                           ;ms83fxx02_motor.c: 290: motor_timing_running_flag = 1;
  6514  0496  01D9               	clrf	_motor_timing_running_flag
  6515  0497  0AD9               	incf	_motor_timing_running_flag,f
  6516                           
  6517                           ;ms83fxx02_motor.c: 291: motor_intr_count = 0;
  6518  0498  01FD               	clrf	_motor_intr_count	;volatile
  6519  0499  0008               	return
  6520  049A                     __end_ofi1_MotorOperationTimer_Stop:	
  6521  049A                     __ptext1718:	
  6522 ;; =============== function i1_MotorOperationTimer_Init ends ============
  6523                           
  6524                           
  6525 ;; *************** function i1_Motor_CheckRunLimit *****************
  6526 ;; Defined at:
  6527 ;;		line 200 in file "ms83fxx02_motor.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      unsigned char 
  6534 ;; Registers used:
  6535 ;;		wreg
  6536 ;; Tracked objects:
  6537 ;;		On entry : 60/40
  6538 ;;		On exit  : 60/0
  6539 ;;		Unchanged: FFF9F/0
  6540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6541 ;;      Params:         0       0       0       0
  6542 ;;      Locals:         0       0       0       0
  6543 ;;      Temps:          0       0       0       0
  6544 ;;      Totals:         0       0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_MotorOperTimer_IntrHandler
  6551 ;;		i1_MotorOperationTimer_Stop
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554  049A                     i1_Motor_CheckRunLimit:	
  6555                           
  6556                           ;ms83fxx02_motor.c: 204: if(motor_oper_record >= 120)
  6557                           
  6558                           ; Regs used in i1_Motor_CheckRunLimit: [wreg]
  6559  049A  3000               	movlw	0
  6560  049B  1303               	bcf	3,6	;RP1=0, select bank0
  6561  049C  0237               	subwf	_motor_oper_record+1,w	;volatile
  6562  049D  3078               	movlw	120
  6563  049E  1903               	skipnz
  6564  049F  0236               	subwf	_motor_oper_record,w	;volatile
  6565  04A0  1803               	btfsc	3,0
  6566                           
  6567                           ;ms83fxx02_motor.c: 205: {
  6568                           ;ms83fxx02_motor.c: 206: return 1;
  6569  04A1  3401               	retlw	1
  6570                           
  6571                           ;ms83fxx02_motor.c: 207: }
  6572                           ;ms83fxx02_motor.c: 208: return 0;
  6573  04A2  3400               	retlw	0
  6574  04A3                     __end_ofi1_Motor_CheckRunLimit:	
  6575  04A3                     __ptext1723:	
  6576 ;; =============== function i1_GPIO_WriteBit ends ============
  6577                           
  6578                           
  6579 ;; *************** function ___lbmod *****************
  6580 ;; Defined at:
  6581 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lbmod.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  dividend        1    wreg     unsigned char 
  6584 ;;  divisor         1    0[COMMON] unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  dividend        1    2[COMMON] unsigned char 
  6587 ;;  rem             1    4[COMMON] unsigned char 
  6588 ;;  counter         1    3[COMMON] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      unsigned char 
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0
  6593 ;; Tracked objects:
  6594 ;;		On entry : 60/0
  6595 ;;		On exit  : 60/0
  6596 ;;		Unchanged: FFF9F/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6598 ;;      Params:         1       0       0       0
  6599 ;;      Locals:         3       0       0       0
  6600 ;;      Temps:          1       0       0       0
  6601 ;;      Totals:         5       0       0       0
  6602 ;;Total ram usage:        5 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_MotorOperTimer_IntrHandler
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610  04A3                     ___lbmod:	
  6611                           
  6612                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  6613                           ;___lbmod@dividend stored from wreg
  6614  04A3  00F2               	movwf	___lbmod@dividend
  6615  04A4  3008               	movlw	8
  6616  04A5  00F3               	movwf	___lbmod@counter
  6617  04A6  01F4               	clrf	___lbmod@rem
  6618  04A7                     i1l14946:	
  6619  04A7  0872               	movf	___lbmod@dividend,w
  6620  04A8  00F1               	movwf	??___lbmod
  6621  04A9  3007               	movlw	7
  6622  04AA  1003               	clrc
  6623  04AB                     L15:	
  6624  04AB  0CF1               	rrf	??___lbmod,f
  6625  04AC  3EFF               	addlw	-1
  6626  04AD  1003               	clrc
  6627  04AE  1D03               	skipz
  6628  04AF  2CAB               	goto	L15
  6629  04B0  0D74               	rlf	___lbmod@rem,w
  6630  04B1  0471               	iorwf	??___lbmod,w
  6631  04B2  00F4               	movwf	___lbmod@rem
  6632  04B3  1003               	clrc
  6633  04B4  0DF2               	rlf	___lbmod@dividend,f
  6634  04B5  0870               	movf	___lbmod@divisor,w
  6635  04B6  0274               	subwf	___lbmod@rem,w
  6636  04B7  1C03               	skipc
  6637  04B8  2CBB               	goto	i1l14954
  6638  04B9  0870               	movf	___lbmod@divisor,w
  6639  04BA  02F4               	subwf	___lbmod@rem,f
  6640  04BB                     i1l14954:	
  6641  04BB  0BF3               	decfsz	___lbmod@counter,f
  6642  04BC  2CA7               	goto	i1l14946
  6643  04BD  0874               	movf	___lbmod@rem,w
  6644  04BE  0008               	return
  6645  04BF                     __end_of___lbmod:	
  6646  04BF                     __ptext1720:	
  6647 ;; =============== function i1_Motor_SetStatus ends ============
  6648                           
  6649                           
  6650 ;; *************** function i1_Motor_Init *****************
  6651 ;; Defined at:
  6652 ;;		line 65 in file "ms83fxx02_motor.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  Motor_Init      1    wreg     enum E1552
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  Motor_Init      1    0[COMMON] enum E1552
  6657 ;; Return value:  Size  Location     Type
  6658 ;;		None               void
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0
  6661 ;; Tracked objects:
  6662 ;;		On entry : 60/0
  6663 ;;		On exit  : 40/0
  6664 ;;		Unchanged: FFF9F/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6666 ;;      Params:         0       0       0       0
  6667 ;;      Locals:         1       0       0       0
  6668 ;;      Temps:          0       0       0       0
  6669 ;;      Totals:         1       0       0       0
  6670 ;;Total ram usage:        1 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_MotorOperTimer_IntrHandler
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678  04BF                     i1_Motor_Init:	
  6679                           
  6680                           ; Regs used in i1_Motor_Init: [wreg+status,2+status,0]
  6681                           ;i1Motor_Init@status stored from wreg
  6682  04BF  00F0               	movwf	i1Motor_Init@status
  6683                           
  6684                           ;ms83fxx02_motor.c: 67: TRISC4 = 1;
  6685  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  6686  04C1  3007               	movlw	7
  6687  04C2  1607               	bsf	7,4
  6688                           
  6689                           ;ms83fxx02_motor.c: 70: CMCON0 |= 0x07;
  6690  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  6691  04C4  0499               	iorwf	25,f	;volatile
  6692                           
  6693                           ;ms83fxx02_motor.c: 71: T2CKSRC = 0;
  6694  04C5  129B               	bcf	27,5
  6695                           
  6696                           ;ms83fxx02_motor.c: 74: TMR2 = 0;
  6697  04C6  0191               	clrf	17	;volatile
  6698                           
  6699                           ;ms83fxx02_motor.c: 76: T2CON = 0x03;
  6700  04C7  3003               	movlw	3
  6701  04C8  0092               	movwf	18	;volatile
  6702                           
  6703                           ;ms83fxx02_motor.c: 78: PR2 = 0x9C;
  6704  04C9  309C               	movlw	156
  6705  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  6706  04CB  0092               	movwf	18	;volatile
  6707                           
  6708                           ;ms83fxx02_motor.c: 79: if(status == MOTOR_MODE_STOP)
  6709  04CC  0B70               	decfsz	i1Motor_Init@status,w
  6710  04CD  2CCF               	goto	i1l15012
  6711  04CE  0008               	return
  6712  04CF                     i1l15012:	
  6713                           
  6714                           ;ms83fxx02_motor.c: 83: else if(status == MOTOR_MODE_DUTY_80)
  6715  04CF  0870               	movf	i1Motor_Init@status,w
  6716  04D0  3A04               	xorlw	4
  6717  04D1  1D03               	skipz
  6718  04D2  2CD5               	goto	i1l15016
  6719                           
  6720                           ;ms83fxx02_motor.c: 84: {
  6721                           ;ms83fxx02_motor.c: 86: CCPR1L = 0x7D;
  6722  04D3  307D               	movlw	125
  6723  04D4  2CDA               	goto	L14
  6724  04D5                     i1l15016:	
  6725                           ;ms83fxx02_motor.c: 88: }
  6726                           
  6727                           ;ms83fxx02_motor.c: 87: CCP1CON = 0x8D | (0x00 << 4);
  6728                           
  6729                           
  6730                           ;ms83fxx02_motor.c: 89: else if(status == MOTOR_MODE_DUTY_90)
  6731  04D5  0870               	movf	i1Motor_Init@status,w
  6732  04D6  3A03               	xorlw	3
  6733  04D7  1D03               	skipz
  6734  04D8  2CDF               	goto	i1l15020
  6735                           
  6736                           ;ms83fxx02_motor.c: 90: {
  6737                           ;ms83fxx02_motor.c: 92: CCPR1L = 0x8C;
  6738  04D9  308C               	movlw	140
  6739  04DA                     L14:	
  6740  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  6741  04DB  0093               	movwf	19	;volatile
  6742                           
  6743                           ;ms83fxx02_motor.c: 93: CCP1CON = 0x8D | (0x00 << 4);
  6744  04DC  308D               	movlw	141
  6745  04DD  0095               	movwf	21	;volatile
  6746                           
  6747                           ;ms83fxx02_motor.c: 94: }
  6748  04DE  2CEA               	goto	i1l8831
  6749  04DF                     i1l15020:	
  6750                           
  6751                           ;ms83fxx02_motor.c: 95: else
  6752                           ;ms83fxx02_motor.c: 96: {
  6753                           ;ms83fxx02_motor.c: 97: if(status == MOTOR_MODE_DUTY_100)
  6754  04DF  0870               	movf	i1Motor_Init@status,w
  6755  04E0  3A02               	xorlw	2
  6756  04E1  1D03               	skipz
  6757  04E2  2CEA               	goto	i1l8831
  6758                           
  6759                           ;ms83fxx02_motor.c: 98: {
  6760                           ;ms83fxx02_motor.c: 99: CCP1CON = 0;
  6761  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  6762  04E4  0195               	clrf	21	;volatile
  6763                           
  6764                           ;ms83fxx02_motor.c: 100: TRISC4 = 0;
  6765  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  6766  04E6  1207               	bcf	7,4
  6767                           
  6768                           ;ms83fxx02_motor.c: 102: PC4 = 1;
  6769  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  6770  04E8  1607               	bsf	7,4
  6771  04E9  0008               	return
  6772  04EA                     i1l8831:	
  6773                           
  6774                           ;ms83fxx02_motor.c: 105: }
  6775                           ;ms83fxx02_motor.c: 106: }
  6776                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
  6777  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  6778  04EB  108C               	bcf	12,1
  6779                           
  6780                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
  6781  04EC  1512               	bsf	18,2
  6782  04ED                     i1l8837:	
  6783                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
  6784                           
  6785  04ED  1C8C               	btfss	12,1
  6786  04EE  2CED               	goto	i1l8837
  6787                           
  6788                           ;ms83fxx02_motor.c: 113: TRISC4 = 0;
  6789  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  6790  04F0  1207               	bcf	7,4
  6791  04F1  0008               	return
  6792  04F2                     __end_ofi1_Motor_Init:	
  6793  04F2                     __ptext1719:	
  6794 ;; =============== function i1_Motor_CheckRunLimit ends ============
  6795                           
  6796                           
  6797 ;; *************** function i1_Motor_SetStatus *****************
  6798 ;; Defined at:
  6799 ;;		line 122 in file "ms83fxx02_motor.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  Motor_SetSta    1    wreg     enum E1552
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  Motor_SetSta    1    0[COMMON] enum E1552
  6804 ;; Return value:  Size  Location     Type
  6805 ;;		None               void
  6806 ;; Registers used:
  6807 ;;		wreg
  6808 ;; Tracked objects:
  6809 ;;		On entry : 60/0
  6810 ;;		On exit  : 60/0
  6811 ;;		Unchanged: FFF9F/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6813 ;;      Params:         0       0       0       0
  6814 ;;      Locals:         1       0       0       0
  6815 ;;      Temps:          0       0       0       0
  6816 ;;      Totals:         1       0       0       0
  6817 ;;Total ram usage:        1 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_MotorOperTimer_IntrHandler
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825  04F2                     i1_Motor_SetStatus:	
  6826                           
  6827                           ; Regs used in i1_Motor_SetStatus: [wreg]
  6828                           ;i1Motor_SetStatus@status stored from wreg
  6829  04F2  00F0               	movwf	i1Motor_SetStatus@status
  6830                           
  6831                           ;ms83fxx02_motor.c: 123: motor_status = status;
  6832  04F3  00FC               	movwf	_motor_status	;volatile
  6833  04F4  0008               	return
  6834  04F5                     __end_ofi1_Motor_SetStatus:	
  6835  04F5                     __ptext1706:	
  6836 ;; =============== function _ISR ends ============
  6837                           
  6838                           
  6839 ;; *************** function _LEDTimer_IntrHandler *****************
  6840 ;; Defined at:
  6841 ;;		line 233 in file "ms83fxx02_led_timer.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;		None               void
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, pclath, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 60/40
  6852 ;;		On exit  : 60/40
  6853 ;;		Unchanged: FFE00/0
  6854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6855 ;;      Params:         0       0       0       0
  6856 ;;      Locals:         0       0       0       0
  6857 ;;      Temps:          0       0       0       0
  6858 ;;      Totals:         0       0       0       0
  6859 ;;Total ram usage:        0 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    2
  6862 ;; This function calls:
  6863 ;;		i1_GPIO_ReadInputDataBit
  6864 ;;		i1_LED_UnderVoltageOutput
  6865 ;;		_LED_DisplayRunLimit
  6866 ;;		_ADC_Enable
  6867 ;; This function is called by:
  6868 ;;		_ISR
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871  04F5                     _LEDTimer_IntrHandler:	
  6872                           
  6873                           ;ms83fxx02_led_timer.c: 234: if(TMR3IE && TMR3IF)
  6874                           
  6875                           ; Regs used in _LEDTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  6876  04F5  1890               	btfsc	16,1
  6877  04F6  1C10               	btfss	16,0
  6878  04F7  0008               	return
  6879                           
  6880                           ;ms83fxx02_led_timer.c: 235: {
  6881                           ;ms83fxx02_led_timer.c: 238: if(under_volt_display_En)
  6882  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  6883  04F9  0843               	movf	_under_volt_display_En,w	;volatile
  6884  04FA  1903               	btfsc	3,2
  6885  04FB  2D04               	goto	i1l14630
  6886                           
  6887                           ;ms83fxx02_led_timer.c: 239: {
  6888                           ;ms83fxx02_led_timer.c: 240: LED_UnderVoltageOutput((BitAction)(1 - GPIO_ReadInputDataBi
      +                          t(GPIOC, ((uint8_t)0x00000008))));
  6889  04FC  3008               	movlw	8
  6890  04FD  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  6891  04FE  3001               	movlw	1
  6892  04FF  2546  118A         	fcall	i1_GPIO_ReadInputDataBit
  6893  0501  3C01               	sublw	1
  6894  0502  2576  118A         	fcall	i1_LED_UnderVoltageOutput
  6895  0504                     i1l14630:	
  6896                           
  6897                           ;ms83fxx02_led_timer.c: 241: }
  6898                           ;ms83fxx02_led_timer.c: 243: if(run_limit_display_en)
  6899  0504  0841               	movf	_run_limit_display_en,w	;volatile
  6900  0505  1903               	btfsc	3,2
  6901  0506  2D09               	goto	i1l7731
  6902                           
  6903                           ;ms83fxx02_led_timer.c: 244: {
  6904                           ;ms83fxx02_led_timer.c: 245: LED_DisplayRunLimit();
  6905  0507  2524  118A         	fcall	_LED_DisplayRunLimit
  6906  0509                     i1l7731:	
  6907                           
  6908                           ;ms83fxx02_led_timer.c: 246: }
  6909                           ;ms83fxx02_led_timer.c: 248: ADC_Enable((0x06));
  6910  0509  3006               	movlw	6
  6911  050A  2614               	fcall	_ADC_Enable
  6912                           
  6913                           ;ms83fxx02_led_timer.c: 251: TMR3IF = 0;
  6914  050B  1703               	bsf	3,6	;RP1=1, select bank2
  6915  050C  1010               	bcf	16,0
  6916  050D  0008               	return
  6917  050E                     __end_of_LEDTimer_IntrHandler:	
  6918  050E                     __ptext1709:	
  6919 ;; =============== function i1_MotorOperationTimer_Stop ends ============
  6920                           
  6921                           
  6922 ;; *************** function i1_Motor_Stop *****************
  6923 ;; Defined at:
  6924 ;;		line 184 in file "ms83fxx02_motor.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;		None               void
  6931 ;; Registers used:
  6932 ;;		wreg, status,2, status,0, pclath, cstack
  6933 ;; Tracked objects:
  6934 ;;		On entry : 60/0
  6935 ;;		On exit  : 60/0
  6936 ;;		Unchanged: FFF9F/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6938 ;;      Params:         0       0       0       0
  6939 ;;      Locals:         0       0       0       0
  6940 ;;      Temps:          0       0       0       0
  6941 ;;      Totals:         0       0       0       0
  6942 ;;Total ram usage:        0 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    1
  6945 ;; This function calls:
  6946 ;;		i1_GPIO_WriteBit
  6947 ;; This function is called by:
  6948 ;;		_MotorOperTimer_IntrHandler
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951  050E                     i1_Motor_Stop:	
  6952                           
  6953                           ;ms83fxx02_motor.c: 188: TRISC4 = 1;
  6954                           
  6955                           ; Regs used in i1_Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  6956  050E  1683               	bsf	3,5	;RP0=1, select bank1
  6957  050F  1607               	bsf	7,4
  6958                           
  6959                           ;ms83fxx02_motor.c: 190: TMR2ON = 0;
  6960  0510  1283               	bcf	3,5	;RP0=0, select bank0
  6961  0511  3004               	movlw	4
  6962  0512  1112               	bcf	18,2
  6963                           
  6964                           ;ms83fxx02_motor.c: 194: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  6965  0513  00F3               	movwf	?i1_GPIO_WriteBit
  6966  0514  3000               	movlw	0
  6967  0515  01F4               	clrf	?i1_GPIO_WriteBit+1
  6968  0516  255C  118A         	fcall	i1_GPIO_WriteBit
  6969                           
  6970                           ;ms83fxx02_motor.c: 195: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  6971  0518  3008               	movlw	8
  6972  0519  00F3               	movwf	?i1_GPIO_WriteBit
  6973  051A  3000               	movlw	0
  6974  051B  01F4               	clrf	?i1_GPIO_WriteBit+1
  6975  051C  255C  118A         	fcall	i1_GPIO_WriteBit
  6976  051E  3001               	movlw	1
  6977                           
  6978                           ;ms83fxx02_motor.c: 196: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  6979  051F  01F3               	clrf	?i1_GPIO_WriteBit
  6980  0520  0AF3               	incf	?i1_GPIO_WriteBit,f
  6981  0521  01F4               	clrf	?i1_GPIO_WriteBit+1
  6982  0522  255C               	fcall	i1_GPIO_WriteBit
  6983  0523  0008               	return
  6984  0524                     __end_ofi1_Motor_Stop:	
  6985  0524                     __ptext1711:	
  6986 ;; =============== function i1_LED_UnderVoltageOutput ends ============
  6987                           
  6988                           
  6989 ;; *************** function _LED_DisplayRunLimit *****************
  6990 ;; Defined at:
  6991 ;;		line 64 in file "ms83fxx02_led.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;		None               void
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, pclath, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 60/0
  7002 ;;		On exit  : 60/0
  7003 ;;		Unchanged: FFF9F/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7005 ;;      Params:         0       0       0       0
  7006 ;;      Locals:         0       0       0       0
  7007 ;;      Temps:          0       0       0       0
  7008 ;;      Totals:         0       0       0       0
  7009 ;;Total ram usage:        0 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    1
  7012 ;; This function calls:
  7013 ;;		i1_GPIO_ReadInputDataBit
  7014 ;;		i1_GPIO_WriteBit
  7015 ;; This function is called by:
  7016 ;;		_LEDTimer_IntrHandler
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019  0524                     _LED_DisplayRunLimit:	
  7020                           
  7021                           ;ms83fxx02_led.c: 65: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOA, ((uint8_t)0x00000004))));
  7022                           
  7023                           ; Regs used in _LED_DisplayRunLimit: [wreg+status,2+status,0+pclath+cstack]
  7024  0524  3004               	movlw	4
  7025  0525  00F3               	movwf	?i1_GPIO_WriteBit
  7026  0526  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  7027  0527  3000               	movlw	0
  7028  0528  2546  118A         	fcall	i1_GPIO_ReadInputDataBit
  7029  052A  3C01               	sublw	1
  7030  052B  00F4               	movwf	?i1_GPIO_WriteBit+1
  7031  052C  3000               	movlw	0
  7032  052D  255C  118A         	fcall	i1_GPIO_WriteBit
  7033                           
  7034                           ;ms83fxx02_led.c: 66: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOA, ((uint8_t)0x00000008))));
  7035  052F  3008               	movlw	8
  7036  0530  00F3               	movwf	?i1_GPIO_WriteBit
  7037  0531  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  7038  0532  3000               	movlw	0
  7039  0533  2546  118A         	fcall	i1_GPIO_ReadInputDataBit
  7040  0535  3C01               	sublw	1
  7041  0536  00F4               	movwf	?i1_GPIO_WriteBit+1
  7042  0537  3000               	movlw	0
  7043  0538  255C  118A         	fcall	i1_GPIO_WriteBit
  7044  053A  3001               	movlw	1
  7045                           
  7046                           ;ms83fxx02_led.c: 67: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), (BitAction)(1 - GPIO_R
      +                          eadInputDataBit(GPIOC, ((uint8_t)0x00000001))));
  7047  053B  01F3               	clrf	?i1_GPIO_WriteBit
  7048  053C  0AF3               	incf	?i1_GPIO_WriteBit,f
  7049  053D  01F0               	clrf	?i1_GPIO_ReadInputDataBit
  7050  053E  0AF0               	incf	?i1_GPIO_ReadInputDataBit,f
  7051  053F  2546  118A         	fcall	i1_GPIO_ReadInputDataBit
  7052  0541  3C01               	sublw	1
  7053  0542  00F4               	movwf	?i1_GPIO_WriteBit+1
  7054  0543  3001               	movlw	1
  7055  0544  255C               	fcall	i1_GPIO_WriteBit
  7056  0545  0008               	return
  7057  0546                     __end_of_LED_DisplayRunLimit:	
  7058  0546                     __ptext1721:	
  7059 ;; =============== function i1_Motor_Init ends ============
  7060                           
  7061                           
  7062 ;; *************** function i1_GPIO_ReadInputDataBit *****************
  7063 ;; Defined at:
  7064 ;;		line 101 in file "ms83fxx02_gpio.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;  GPIO_ReadInp    1    wreg     enum E1491
  7067 ;;  GPIO_ReadInp    1    0[COMMON] unsigned char 
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  GPIO_ReadInp    1    2[COMMON] enum E1491
  7070 ;;  GPIO_ReadInp    1    1[COMMON] unsigned char 
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      unsigned char 
  7073 ;; Registers used:
  7074 ;;		wreg, status,2, status,0
  7075 ;; Tracked objects:
  7076 ;;		On entry : 20/0
  7077 ;;		On exit  : 20/0
  7078 ;;		Unchanged: FFF9F/0
  7079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7080 ;;      Params:         1       0       0       0
  7081 ;;      Locals:         2       0       0       0
  7082 ;;      Temps:          0       0       0       0
  7083 ;;      Totals:         3       0       0       0
  7084 ;;Total ram usage:        3 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_ChargeDetect_IntrHandler
  7090 ;;		_DebounceTimer_IntrHandler
  7091 ;;		_LED_DisplayRunLimit
  7092 ;;		_LEDTimer_IntrHandler
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095  0546                     i1_GPIO_ReadInputDataBit:	
  7096                           
  7097                           ; Regs used in i1_GPIO_ReadInputDataBit: [wreg+status,2+status,0]
  7098                           ;i1GPIO_ReadInputDataBit@GPIOx stored from wreg
  7099  0546  00F2               	movwf	i1GPIO_ReadInputDataBit@GPIOx
  7100                           
  7101                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
  7102  0547  01F1               	clrf	i1GPIO_ReadInputDataBit@bitstatus
  7103                           
  7104                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
  7105  0548  08F2               	movf	i1GPIO_ReadInputDataBit@GPIOx,f
  7106  0549  1D03               	skipz
  7107  054A  2D53               	goto	i1l14982
  7108                           
  7109                           ;ms83fxx02_gpio.c: 105: {
  7110                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
  7111  054B  1303               	bcf	3,6	;RP1=0, select bank0
  7112  054C  0805               	movf	5,w	;volatile
  7113  054D  0570               	andwf	i1GPIO_ReadInputDataBit@GPIO_Pin,w
  7114  054E  1903               	btfsc	3,2
  7115  054F  2D5A               	goto	i1l14988
  7116  0550                     i1l14980:	
  7117                           
  7118                           ;ms83fxx02_gpio.c: 107: {
  7119                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
  7120  0550  01F1               	clrf	i1GPIO_ReadInputDataBit@bitstatus
  7121  0551  0AF1               	incf	i1GPIO_ReadInputDataBit@bitstatus,f
  7122  0552  2D5A               	goto	i1l14988
  7123  0553                     i1l14982:	
  7124                           
  7125                           ;ms83fxx02_gpio.c: 111: else
  7126                           ;ms83fxx02_gpio.c: 112: {
  7127                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
  7128  0553  0B72               	decfsz	i1GPIO_ReadInputDataBit@GPIOx,w
  7129  0554  2D5A               	goto	i1l14988
  7130                           
  7131                           ;ms83fxx02_gpio.c: 114: {
  7132                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
  7133  0555  1303               	bcf	3,6	;RP1=0, select bank0
  7134  0556  0807               	movf	7,w	;volatile
  7135  0557  0570               	andwf	i1GPIO_ReadInputDataBit@GPIO_Pin,w
  7136  0558  1D03               	btfss	3,2
  7137  0559  2D50               	goto	i1l14980
  7138  055A                     i1l14988:	
  7139                           
  7140                           ;ms83fxx02_gpio.c: 118: }
  7141                           ;ms83fxx02_gpio.c: 119: }
  7142                           ;ms83fxx02_gpio.c: 120: }
  7143                           ;ms83fxx02_gpio.c: 122: return bitstatus;
  7144  055A  0871               	movf	i1GPIO_ReadInputDataBit@bitstatus,w
  7145  055B  0008               	return
  7146  055C                     __end_ofi1_GPIO_ReadInputDataBit:	
  7147  055C                     __ptext1722:	
  7148 ;; =============== function i1_GPIO_ReadInputDataBit ends ============
  7149                           
  7150                           
  7151 ;; *************** function i1_GPIO_WriteBit *****************
  7152 ;; Defined at:
  7153 ;;		line 68 in file "ms83fxx02_gpio.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  GPIO_WriteBi    1    wreg     enum E1491
  7156 ;;  GPIO_WriteBi    1    3[COMMON] unsigned char 
  7157 ;;  GPIO_WriteBi    1    4[COMMON] enum E1499
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  GPIO_WriteBi    1    5[COMMON] enum E1491
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0
  7164 ;; Tracked objects:
  7165 ;;		On entry : 20/0
  7166 ;;		On exit  : 60/0
  7167 ;;		Unchanged: FFF9F/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7169 ;;      Params:         2       0       0       0
  7170 ;;      Locals:         1       0       0       0
  7171 ;;      Temps:          0       0       0       0
  7172 ;;      Totals:         3       0       0       0
  7173 ;;Total ram usage:        3 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_LED_DisplayRunLimit
  7179 ;;		i1_LED_UnderVoltageOutput
  7180 ;;		i1_Motor_Stop
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183  055C                     i1_GPIO_WriteBit:	
  7184                           
  7185                           ; Regs used in i1_GPIO_WriteBit: [wreg+status,2+status,0]
  7186                           ;i1GPIO_WriteBit@GPIOx stored from wreg
  7187  055C  00F5               	movwf	i1GPIO_WriteBit@GPIOx
  7188                           
  7189                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
  7190  055D  08F5               	movf	i1GPIO_WriteBit@GPIOx,f
  7191  055E  1D03               	skipz
  7192  055F  2D6B               	goto	i1l14968
  7193                           
  7194                           ;ms83fxx02_gpio.c: 70: {
  7195                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
  7196  0560  0874               	movf	i1GPIO_WriteBit@BitVal,w
  7197  0561  1903               	btfsc	3,2
  7198  0562  2D67               	goto	i1l14966
  7199                           
  7200                           ;ms83fxx02_gpio.c: 72: {
  7201                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
  7202  0563  0873               	movf	i1GPIO_WriteBit@GPIO_Pin,w
  7203  0564  1303               	bcf	3,6	;RP1=0, select bank0
  7204  0565  0485               	iorwf	5,f	;volatile
  7205                           
  7206                           ;ms83fxx02_gpio.c: 74: }
  7207  0566  0008               	return
  7208  0567                     i1l14966:	
  7209                           
  7210                           ;ms83fxx02_gpio.c: 75: else
  7211                           ;ms83fxx02_gpio.c: 76: {
  7212                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
  7213  0567  0973               	comf	i1GPIO_WriteBit@GPIO_Pin,w
  7214  0568  1303               	bcf	3,6	;RP1=0, select bank0
  7215  0569  0585               	andwf	5,f	;volatile
  7216  056A  0008               	return
  7217  056B                     i1l14968:	
  7218                           
  7219                           ;ms83fxx02_gpio.c: 80: else
  7220                           ;ms83fxx02_gpio.c: 81: {
  7221                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
  7222  056B  0874               	movf	i1GPIO_WriteBit@BitVal,w
  7223  056C  1903               	btfsc	3,2
  7224  056D  2D72               	goto	i1l14972
  7225                           
  7226                           ;ms83fxx02_gpio.c: 83: {
  7227                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
  7228  056E  0873               	movf	i1GPIO_WriteBit@GPIO_Pin,w
  7229  056F  1303               	bcf	3,6	;RP1=0, select bank0
  7230  0570  0487               	iorwf	7,f	;volatile
  7231                           
  7232                           ;ms83fxx02_gpio.c: 85: }
  7233  0571  0008               	return
  7234  0572                     i1l14972:	
  7235                           
  7236                           ;ms83fxx02_gpio.c: 86: else
  7237                           ;ms83fxx02_gpio.c: 87: {
  7238                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
  7239  0572  0973               	comf	i1GPIO_WriteBit@GPIO_Pin,w
  7240  0573  1303               	bcf	3,6	;RP1=0, select bank0
  7241  0574  0587               	andwf	7,f	;volatile
  7242  0575  0008               	return
  7243  0576                     __end_ofi1_GPIO_WriteBit:	
  7244  0576                     __ptext1710:	
  7245 ;; =============== function i1_Motor_Stop ends ============
  7246                           
  7247                           
  7248 ;; *************** function i1_LED_UnderVoltageOutput *****************
  7249 ;; Defined at:
  7250 ;;		line 85 in file "ms83fxx02_led.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  LED_UnderVol    1    wreg     enum E1499
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  LED_UnderVol    1    6[COMMON] enum E1499
  7255 ;; Return value:  Size  Location     Type
  7256 ;;		None               void
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 20/0
  7261 ;;		On exit  : 60/0
  7262 ;;		Unchanged: FFF9F/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7264 ;;      Params:         0       0       0       0
  7265 ;;      Locals:         1       0       0       0
  7266 ;;      Temps:          0       0       0       0
  7267 ;;      Totals:         1       0       0       0
  7268 ;;Total ram usage:        1 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    1
  7271 ;; This function calls:
  7272 ;;		i1_GPIO_WriteBit
  7273 ;; This function is called by:
  7274 ;;		_LEDTimer_IntrHandler
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277  0576                     i1_LED_UnderVoltageOutput:	
  7278                           
  7279                           ; Regs used in i1_LED_UnderVoltageOutput: [wreg+status,2+status,0+pclath+cstack]
  7280                           ;i1LED_UnderVoltageOutput@BitVal stored from wreg
  7281  0576  00F6               	movwf	i1LED_UnderVoltageOutput@BitVal
  7282                           
  7283                           ;ms83fxx02_led.c: 86: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000008), BitVal);
  7284  0577  3008               	movlw	8
  7285  0578  00F3               	movwf	?i1_GPIO_WriteBit
  7286  0579  0876               	movf	i1LED_UnderVoltageOutput@BitVal,w
  7287  057A  00F4               	movwf	?i1_GPIO_WriteBit+1
  7288  057B  3001               	movlw	1
  7289  057C  255C               	fcall	i1_GPIO_WriteBit
  7290  057D  0008               	return
  7291  057E                     __end_ofi1_LED_UnderVoltageOutput:	
  7292  057E                     __ptext1728:	
  7293 ;; =============== function _ChargeTimer_IntrHandler ends ============
  7294                           
  7295                           
  7296 ;; *************** function _SwitchModeTimer_IntrHandler *****************
  7297 ;; Defined at:
  7298 ;;		line 119 in file "ms83fxx02_tim.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;		None
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;		None               void
  7305 ;; Registers used:
  7306 ;;		None
  7307 ;; Tracked objects:
  7308 ;;		On entry : 60/0
  7309 ;;		On exit  : 60/40
  7310 ;;		Unchanged: FFF9F/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7312 ;;      Params:         0       0       0       0
  7313 ;;      Locals:         0       0       0       0
  7314 ;;      Temps:          0       0       0       0
  7315 ;;      Totals:         0       0       0       0
  7316 ;;Total ram usage:        0 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_ISR
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324  057E                     _SwitchModeTimer_IntrHandler:	
  7325                           
  7326                           ;ms83fxx02_tim.c: 120: if(TMR5IE && TMR5IF)
  7327                           
  7328                           ; Regs used in _SwitchModeTimer_IntrHandler: []
  7329  057E  1703               	bsf	3,6	;RP1=1, select bank2
  7330  057F  189C               	btfsc	28,1
  7331  0580  1C1C               	btfss	28,0
  7332  0581  0008               	return
  7333                           
  7334                           ;ms83fxx02_tim.c: 121: {
  7335                           ;ms83fxx02_tim.c: 123: switch_mode_time_out = 1;
  7336  0582  1303               	bcf	3,6	;RP1=0, select bank0
  7337  0583  01C2               	clrf	_switch_mode_time_out	;volatile
  7338  0584  0AC2               	incf	_switch_mode_time_out,f	;volatile
  7339                           
  7340                           ;ms83fxx02_tim.c: 124: TMR5IF = 0;
  7341  0585  1703               	bsf	3,6	;RP1=1, select bank2
  7342  0586  101C               	bcf	28,0
  7343                           
  7344                           ;ms83fxx02_tim.c: 127: TMR5ON = 0;
  7345  0587  111C               	bcf	28,2
  7346                           
  7347                           ;ms83fxx02_tim.c: 129: TMR5IE = 0;
  7348  0588  109C               	bcf	28,1
  7349  0589  0008               	return
  7350  058A                     __end_of_SwitchModeTimer_IntrHandler:	
  7351  058A                     __ptext1727:	
  7352 ;; =============== function _TIM1_Init ends ============
  7353                           
  7354                           
  7355 ;; *************** function _ChargeTimer_IntrHandler *****************
  7356 ;; Defined at:
  7357 ;;		line 122 in file "ms83fxx02_charge_timer.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;		None               void
  7364 ;; Registers used:
  7365 ;;		status,2, status,0
  7366 ;; Tracked objects:
  7367 ;;		On entry : 60/0
  7368 ;;		On exit  : 60/40
  7369 ;;		Unchanged: FFF9F/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7371 ;;      Params:         0       0       0       0
  7372 ;;      Locals:         0       0       0       0
  7373 ;;      Temps:          0       0       0       0
  7374 ;;      Totals:         0       0       0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_ISR
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383  058A                     _ChargeTimer_IntrHandler:	
  7384                           
  7385                           ;ms83fxx02_charge_timer.c: 123: if(TMR5IE && TMR5IF)
  7386                           
  7387                           ; Regs used in _ChargeTimer_IntrHandler: [status]
  7388  058A  1703               	bsf	3,6	;RP1=1, select bank2
  7389  058B  189C               	btfsc	28,1
  7390  058C  1C1C               	btfss	28,0
  7391  058D  0008               	return
  7392                           
  7393                           ;ms83fxx02_charge_timer.c: 124: {
  7394                           ;ms83fxx02_charge_timer.c: 126: charge_time_out++;
  7395  058E  1303               	bcf	3,6	;RP1=0, select bank0
  7396  058F  0AB4               	incf	_charge_time_out,f	;volatile
  7397  0590  1903               	skipnz
  7398  0591  0AB5               	incf	_charge_time_out+1,f	;volatile
  7399                           
  7400                           ;ms83fxx02_charge_timer.c: 127: TMR5IF = 0;
  7401  0592  1703               	bsf	3,6	;RP1=1, select bank2
  7402  0593  101C               	bcf	28,0
  7403  0594  0008               	return
  7404  0595                     __end_of_ChargeTimer_IntrHandler:	
  7405  0595                     __ptext1716:	
  7406 ;; =============== function _KEY_IntrHandler ends ============
  7407                           
  7408                           
  7409 ;; *************** function i1_GetDeviceMode *****************
  7410 ;; Defined at:
  7411 ;;		line 45 in file "ms83fxx02_pwr.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      enum E1584
  7418 ;; Registers used:
  7419 ;;		wreg
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 60/0
  7423 ;;		Unchanged: FFF9F/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7425 ;;      Params:         0       0       0       0
  7426 ;;      Locals:         0       0       0       0
  7427 ;;      Temps:          0       0       0       0
  7428 ;;      Totals:         0       0       0       0
  7429 ;;Total ram usage:        0 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_ISR
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437  0595                     i1_GetDeviceMode:	
  7438                           
  7439                           ;ms83fxx02_pwr.c: 46: return device_mode;
  7440                           
  7441                           ; Regs used in i1_GetDeviceMode: [wreg]
  7442  0595  1283               	bcf	3,5	;RP0=0, select bank0
  7443  0596  1303               	bcf	3,6	;RP1=0, select bank0
  7444  0597  083C               	movf	_device_mode,w	;volatile
  7445  0598  0008               	return
  7446  0599                     __end_ofi1_GetDeviceMode:	
  7447  0599                     __ptext1715:	
  7448 ;; =============== function _DebounceTimer_IntrHandler ends ============
  7449                           
  7450                           
  7451 ;; *************** function _KEY_IntrHandler *****************
  7452 ;; Defined at:
  7453 ;;		line 114 in file "MS83FXX02_KEY.C"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;		None               void
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0, pclath, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 60/0
  7464 ;;		On exit  : 40/0
  7465 ;;		Unchanged: FFF9F/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7467 ;;      Params:         0       0       0       0
  7468 ;;      Locals:         0       0       0       0
  7469 ;;      Temps:          0       0       0       0
  7470 ;;      Totals:         0       0       0       0
  7471 ;;Total ram usage:        0 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    1
  7474 ;; This function calls:
  7475 ;;		_TIM1_Init
  7476 ;; This function is called by:
  7477 ;;		_ISR
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480  0599                     _KEY_IntrHandler:	
  7481                           
  7482                           ;MS83FXX02_KEY.C: 115: if(INTE && INTF)
  7483                           
  7484                           ; Regs used in _KEY_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  7485  0599  1A0B               	btfsc	11,4
  7486  059A  1C8B               	btfss	11,1
  7487  059B  0008               	return
  7488  059C  3000               	movlw	0
  7489                           
  7490                           ;MS83FXX02_KEY.C: 116: {
  7491                           ;MS83FXX02_KEY.C: 118: INTF = 0;
  7492  059D  108B               	bcf	11,1
  7493                           
  7494                           ;MS83FXX02_KEY.C: 119: INTE = 0;
  7495  059E  120B               	bcf	11,4
  7496                           
  7497                           ;MS83FXX02_KEY.C: 120: key_status = INTEDG;
  7498  059F  1683               	bsf	3,5	;RP0=1, select bank1
  7499  05A0  1B01               	btfsc	1,6
  7500  05A1  3001               	movlw	1
  7501  05A2  00FB               	movwf	_key_status	;volatile
  7502                           
  7503                           ;MS83FXX02_KEY.C: 121: key_press_flag= 1;
  7504  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  7505  05A4  01BE               	clrf	_key_press_flag	;volatile
  7506  05A5  0ABE               	incf	_key_press_flag,f	;volatile
  7507                           
  7508                           ;MS83FXX02_KEY.C: 122: TIM1_Init();
  7509  05A6  2E07               	ljmp	i1l14742
  7510  05A7                     __end_of_KEY_IntrHandler:	
  7511  05A7                     __ptext1714:	
  7512 ;; =============== function _ChargeDetect_IntrHandler ends ============
  7513                           
  7514                           
  7515 ;; *************** function _DebounceTimer_IntrHandler *****************
  7516 ;; Defined at:
  7517 ;;		line 132 in file "MS83FXX02_KEY.C"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0, pclath, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 40/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: FFF9F/0
  7530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7531 ;;      Params:         0       0       0       0
  7532 ;;      Locals:         0       0       0       0
  7533 ;;      Temps:          0       0       0       0
  7534 ;;      Totals:         0       0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    1
  7538 ;; This function calls:
  7539 ;;		i1_GPIO_ReadInputDataBit
  7540 ;; This function is called by:
  7541 ;;		_ISR
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544  05A7                     _DebounceTimer_IntrHandler:	
  7545                           
  7546                           ;MS83FXX02_KEY.C: 133: if(TMR1IE && TMR1IF)
  7547                           
  7548                           ; Regs used in _DebounceTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  7549  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  7550  05A8  1C0C               	btfss	12,0
  7551  05A9  0008               	return
  7552  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  7553  05AB  1C0C               	btfss	12,0
  7554  05AC  0008               	return
  7555                           
  7556                           ;MS83FXX02_KEY.C: 134: {
  7557                           ;MS83FXX02_KEY.C: 135: TMR1IF = 0;
  7558  05AD  100C               	bcf	12,0
  7559                           
  7560                           ;MS83FXX02_KEY.C: 136: TMR1IE = 0;
  7561  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  7562  05AF  100C               	bcf	12,0
  7563                           
  7564                           ;MS83FXX02_KEY.C: 137: TMR1ON = 0;
  7565  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  7566  05B1  3002               	movlw	2
  7567  05B2  1010               	bcf	16,0
  7568                           
  7569                           ;MS83FXX02_KEY.C: 139: if(key_status != GPIO_ReadInputDataBit(GPIOC, ((uint8_t)0x0000000
      +                          2)))
  7570  05B3  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  7571  05B4  3001               	movlw	1
  7572  05B5  2546  118A         	fcall	i1_GPIO_ReadInputDataBit
  7573  05B7  067B               	xorwf	_key_status,w	;volatile
  7574  05B8  1D03               	btfss	3,2
  7575  05B9  2DBF               	goto	i1l14566
  7576  05BA  2DC2               	goto	i1l14568
  7577  05BB                     L12:	
  7578                           ;MS83FXX02_KEY.C: 148: {
  7579                           ;MS83FXX02_KEY.C: 150: key_press = 1;
  7580                           
  7581  05BB  01BD               	clrf	_key_press	;volatile
  7582  05BC  0ABD               	incf	_key_press,f	;volatile
  7583                           
  7584                           ;MS83FXX02_KEY.C: 153: INTEDG = 1;
  7585  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  7586  05BE  1701               	bsf	1,6
  7587  05BF                     i1l14566:	
  7588                           ;MS83FXX02_KEY.C: 154: }
  7589                           
  7590                           
  7591                           ;MS83FXX02_KEY.C: 140: {
  7592                           ;MS83FXX02_KEY.C: 142: INTF = 0;
  7593  05BF  108B               	bcf	11,1
  7594                           
  7595                           ;MS83FXX02_KEY.C: 143: INTE = 1;
  7596  05C0  160B               	bsf	11,4
  7597                           
  7598                           ;MS83FXX02_KEY.C: 144: return ;
  7599  05C1  0008               	return
  7600  05C2                     i1l14568:	
  7601                           
  7602                           ;MS83FXX02_KEY.C: 145: }
  7603                           ;MS83FXX02_KEY.C: 147: if(!key_status)
  7604  05C2  08FB               	movf	_key_status,f
  7605                           
  7606                           ;MS83FXX02_KEY.C: 155: else
  7607                           ;MS83FXX02_KEY.C: 156: {
  7608                           ;MS83FXX02_KEY.C: 158: key_release = 1;
  7609  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  7610  05C4  1903               	btfsc	3,2
  7611  05C5  2DBB               	goto	L12
  7612  05C6  01C0               	clrf	_key_release	;volatile
  7613  05C7  0AC0               	incf	_key_release,f	;volatile
  7614                           
  7615                           ;MS83FXX02_KEY.C: 161: INTEDG = 0;
  7616  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  7617  05C9  1301               	bcf	1,6
  7618  05CA  2DBF               	goto	i1l14566
  7619  05CB                     __end_of_DebounceTimer_IntrHandler:	
  7620  05CB                     __ptext1713:	
  7621 ;; =============== function _ADC_IntrHandler ends ============
  7622                           
  7623                           
  7624 ;; *************** function _ChargeDetect_IntrHandler *****************
  7625 ;; Defined at:
  7626 ;;		line 80 in file "ms83fxx02_charge.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 60/40
  7637 ;;		On exit  : 20/0
  7638 ;;		Unchanged: FFF9F/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7640 ;;      Params:         0       0       0       0
  7641 ;;      Locals:         0       0       0       0
  7642 ;;      Temps:          0       0       0       0
  7643 ;;      Totals:         0       0       0       0
  7644 ;;Total ram usage:        0 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    1
  7647 ;; This function calls:
  7648 ;;		i1_GPIO_ReadInputDataBit
  7649 ;; This function is called by:
  7650 ;;		_ISR
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653  05CB                     _ChargeDetect_IntrHandler:	
  7654                           
  7655                           ;ms83fxx02_charge.c: 81: if(PAIE & PAIF)
  7656                           
  7657                           ; Regs used in _ChargeDetect_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  7658  05CB  3001               	movlw	1
  7659  05CC  1D8B               	btfss	11,3
  7660  05CD  3900               	andlw	0
  7661  05CE  1C0B               	btfss	11,0
  7662  05CF  3900               	andlw	0
  7663  05D0  3800               	iorlw	0
  7664  05D1  1903               	skipnz
  7665  05D2  0008               	return
  7666                           
  7667                           ;ms83fxx02_charge.c: 82: {
  7668                           ;ms83fxx02_charge.c: 83: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
  7669  05D3  3010               	movlw	16
  7670  05D4  00F0               	movwf	?i1_GPIO_ReadInputDataBit
  7671  05D5  3000               	movlw	0
  7672  05D6  2546               	fcall	i1_GPIO_ReadInputDataBit
  7673                           
  7674                           ;ms83fxx02_charge.c: 85: PAIF = 0;
  7675  05D7  100B               	bcf	11,0
  7676  05D8  0008               	return
  7677  05D9                     __end_of_ChargeDetect_IntrHandler:	
  7678  05D9                     __ptext1712:	
  7679 ;; =============== function _LED_DisplayRunLimit ends ============
  7680                           
  7681                           
  7682 ;; *************** function _ADC_IntrHandler *****************
  7683 ;; Defined at:
  7684 ;;		line 159 in file "ms83fxx02_pwr.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;		None               void
  7691 ;; Registers used:
  7692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 20/40
  7695 ;;		On exit  : 40/0
  7696 ;;		Unchanged: FFE9F/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7698 ;;      Params:         0       0       0       0
  7699 ;;      Locals:         0       0       0       0
  7700 ;;      Temps:          0       0       0       0
  7701 ;;      Totals:         0       0       0       0
  7702 ;;Total ram usage:        0 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    1
  7705 ;; This function calls:
  7706 ;;		_ADC_ReadData
  7707 ;; This function is called by:
  7708 ;;		_ISR
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711  05D9                     _ADC_IntrHandler:	
  7712                           
  7713                           ;ms83fxx02_pwr.c: 160: if(ADIE && ADIF)
  7714                           
  7715                           ; Regs used in _ADC_IntrHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7716  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  7717  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  7718  05DB  1C8D               	btfss	13,1
  7719  05DC  0008               	return
  7720  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  7721  05DE  1C8D               	btfss	13,1
  7722  05DF  0008               	return
  7723                           
  7724                           ;ms83fxx02_pwr.c: 161: {
  7725                           ;ms83fxx02_pwr.c: 162: battery_value[battery_sample_count++] = ADC_ReadData();
  7726  05E0  25F6  118A         	fcall	_ADC_ReadData
  7727  05E2  1003               	clrc
  7728  05E3  0D39               	rlf	_battery_sample_count,w	;volatile
  7729  05E4  3E20               	addlw	_battery_value& (0+255)
  7730  05E5  0084               	movwf	4
  7731  05E6  0870               	movf	?_ADC_ReadData,w
  7732  05E7  1383               	bcf	3,7	;select IRP bank0
  7733  05E8  0080               	movwf	0
  7734  05E9  0A84               	incf	4,f
  7735  05EA  0871               	movf	?_ADC_ReadData+1,w
  7736  05EB  0080               	movwf	0
  7737  05EC  0AB9               	incf	_battery_sample_count,f	;volatile
  7738                           
  7739                           ;ms83fxx02_pwr.c: 164: if(battery_sample_count >= 10)
  7740  05ED  300A               	movlw	10
  7741  05EE  0239               	subwf	_battery_sample_count,w	;volatile
  7742  05EF  1C03               	skipc
  7743  05F0  2DF4               	goto	i1l14656
  7744                           
  7745                           ;ms83fxx02_pwr.c: 165: {
  7746                           ;ms83fxx02_pwr.c: 166: battery_sample_count = 0;
  7747  05F1  01B9               	clrf	_battery_sample_count	;volatile
  7748                           
  7749                           ;ms83fxx02_pwr.c: 167: battery_handle_flag = 1;
  7750  05F2  01B8               	clrf	_battery_handle_flag	;volatile
  7751  05F3  0AB8               	incf	_battery_handle_flag,f	;volatile
  7752  05F4                     i1l14656:	
  7753                           
  7754                           ;ms83fxx02_pwr.c: 168: }
  7755                           ;ms83fxx02_pwr.c: 169: ADIF = 0;
  7756  05F4  108D               	bcf	13,1
  7757  05F5  0008               	return
  7758  05F6                     __end_of_ADC_IntrHandler:	
  7759  05F6                     __ptext1724:	
  7760 ;; =============== function ___lbmod ends ============
  7761                           
  7762                           
  7763 ;; *************** function _ADC_ReadData *****************
  7764 ;; Defined at:
  7765 ;;		line 141 in file "ms83fxx02_pwr.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;		None
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  battery_valu    2    3[COMMON] unsigned short 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  2    0[COMMON] unsigned short 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2
  7774 ;; Tracked objects:
  7775 ;;		On entry : 60/0
  7776 ;;		On exit  : 60/0
  7777 ;;		Unchanged: FFF9F/0
  7778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7779 ;;      Params:         2       0       0       0
  7780 ;;      Locals:         2       0       0       0
  7781 ;;      Temps:          1       0       0       0
  7782 ;;      Totals:         5       0       0       0
  7783 ;;Total ram usage:        5 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_ADC_IntrHandler
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791  05F6                     _ADC_ReadData:	
  7792                           
  7793                           ;ms83fxx02_pwr.c: 144: battery_value = ADRESH & 0x03;
  7794                           
  7795                           ; Regs used in _ADC_ReadData: [wreg+status,2]
  7796  05F6  081E               	movf	30,w
  7797  05F7  3903               	andlw	3
  7798  05F8  00F3               	movwf	ADC_ReadData@battery_value
  7799  05F9  01F4               	clrf	ADC_ReadData@battery_value+1
  7800                           
  7801                           ;ms83fxx02_pwr.c: 145: battery_value = (battery_value << 8) | ADRESL;
  7802  05FA  00F2               	movwf	??_ADC_ReadData
  7803  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  7804  05FC  081E               	movf	30,w	;volatile
  7805  05FD  00F3               	movwf	ADC_ReadData@battery_value
  7806  05FE  0872               	movf	??_ADC_ReadData,w
  7807  05FF  00F4               	movwf	ADC_ReadData@battery_value+1
  7808                           
  7809                           ;ms83fxx02_pwr.c: 148: ADON = 0;
  7810  0600  1283               	bcf	3,5	;RP0=0, select bank0
  7811  0601  101F               	bcf	31,0
  7812                           
  7813                           ;ms83fxx02_pwr.c: 149: return battery_value;
  7814  0602  0874               	movf	ADC_ReadData@battery_value+1,w
  7815  0603  00F1               	movwf	?_ADC_ReadData+1
  7816  0604  0873               	movf	ADC_ReadData@battery_value,w
  7817  0605  00F0               	movwf	?_ADC_ReadData
  7818  0606  0008               	return
  7819  0607                     __end_of_ADC_ReadData:	
  7820  0607                     __ptext1726:	
  7821 ;; =============== function _ADC_Enable ends ============
  7822                           
  7823                           
  7824 ;; *************** function _TIM1_Init *****************
  7825 ;; Defined at:
  7826 ;;		line 38 in file "MS83FXX02_KEY.C"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;		None
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, status,2
  7835 ;; Tracked objects:
  7836 ;;		On entry : 60/0
  7837 ;;		On exit  : 60/20
  7838 ;;		Unchanged: FFF9F/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7840 ;;      Params:         0       0       0       0
  7841 ;;      Locals:         0       0       0       0
  7842 ;;      Temps:          0       0       0       0
  7843 ;;      Totals:         0       0       0       0
  7844 ;;Total ram usage:        0 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_KEY_IntrHandler
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852  0607                     _TIM1_Init:	
  7853  0607                     i1l14742:	
  7854                           ; Regs used in _TIM1_Init: [wreg+status,2]
  7855                           
  7856  0607  30F0               	movlw	240
  7857                           
  7858                           ;MS83FXX02_KEY.C: 39: TMR1ON = 0;
  7859  0608  1010               	bcf	16,0
  7860                           
  7861                           ;MS83FXX02_KEY.C: 44: TMR1L = 0xF0;
  7862  0609  008E               	movwf	14	;volatile
  7863                           
  7864                           ;MS83FXX02_KEY.C: 45: TMR1H = 0xD8;
  7865  060A  30D8               	movlw	216
  7866  060B  008F               	movwf	15	;volatile
  7867                           
  7868                           ;MS83FXX02_KEY.C: 48: T1CON = 0b00000000;
  7869  060C  0190               	clrf	16	;volatile
  7870                           
  7871                           ;MS83FXX02_KEY.C: 49: TMR1IF = 0;
  7872  060D  100C               	bcf	12,0
  7873                           
  7874                           ;MS83FXX02_KEY.C: 51: TMR1ON = 1;
  7875  060E  1410               	bsf	16,0
  7876                           
  7877                           ;MS83FXX02_KEY.C: 53: TMR1IE = 1;
  7878  060F  1683               	bsf	3,5	;RP0=1, select bank1
  7879  0610  140C               	bsf	12,0
  7880                           
  7881                           ;MS83FXX02_KEY.C: 54: PEIE = 1;
  7882  0611  170B               	bsf	11,6
  7883                           
  7884                           ;MS83FXX02_KEY.C: 55: GIE = 1;
  7885  0612  178B               	bsf	11,7
  7886  0613  0008               	return
  7887  0614                     __end_of_TIM1_Init:	
  7888  0614                     __ptext1725:	
  7889 ;; =============== function _ADC_ReadData ends ============
  7890                           
  7891                           
  7892 ;; *************** function _ADC_Enable *****************
  7893 ;; Defined at:
  7894 ;;		line 124 in file "ms83fxx02_pwr.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  channel         1    wreg     unsigned char 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  channel         1    1[COMMON] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;		None               void
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0
  7903 ;; Tracked objects:
  7904 ;;		On entry : 60/0
  7905 ;;		On exit  : 60/0
  7906 ;;		Unchanged: FFE00/0
  7907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7908 ;;      Params:         0       0       0       0
  7909 ;;      Locals:         1       0       0       0
  7910 ;;      Temps:          1       0       0       0
  7911 ;;      Totals:         2       0       0       0
  7912 ;;Total ram usage:        2 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; This function calls:
  7915 ;;		Nothing
  7916 ;; This function is called by:
  7917 ;;		_LEDTimer_IntrHandler
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920  0614                     _ADC_Enable:	
  7921                           
  7922                           ; Regs used in _ADC_Enable: [wreg+status,2+status,0]
  7923                           ;ADC_Enable@channel stored from wreg
  7924  0614  00F1               	movwf	ADC_Enable@channel
  7925                           
  7926                           ;ms83fxx02_pwr.c: 125: ADCON0 |= (channel << 2);
  7927  0615  00F0               	movwf	??_ADC_Enable
  7928  0616  1003               	clrc
  7929  0617  0DF0               	rlf	??_ADC_Enable,f
  7930  0618  1003               	clrc
  7931  0619  0D70               	rlf	??_ADC_Enable,w
  7932  061A  049F               	iorwf	31,f	;volatile
  7933                           
  7934                           ;ms83fxx02_pwr.c: 127: ADON = 1;
  7935  061B  141F               	bsf	31,0
  7936  061C  0000               	nop	;#
  7937  061D  0000               	nop	;#
  7938                           
  7939                           ;ms83fxx02_pwr.c: 132: GO_DONE = 1;
  7940  061E  1283               	bcf	3,5	;RP0=0, select bank0
  7941  061F  1303               	bcf	3,6	;RP1=0, select bank0
  7942  0620  149F               	bsf	31,1
  7943  0621  0008               	return
  7944  0622                     __end_of_ADC_Enable:	
  7945                           
  7946                           	psect	intentry
  7947  0004                     __pintentry:	
  7948                           ; Regs used in _ISR: [allreg]
  7949                           
  7950  0004                     interrupt_function:	
  7951  007E                     saved_w	set	btemp
  7952  0004  00FE               	movwf	btemp
  7953  0005  0E03               	swapf	3,w
  7954  0006  00F7               	movwf	??_ISR
  7955  0007  0804               	movf	4,w
  7956  0008  00F8               	movwf	??_ISR+1
  7957  0009  080A               	movf	10,w
  7958  000A  00F9               	movwf	??_ISR+2
  7959  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7960  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7961  000D  087F               	movf	btemp+1,w
  7962  000E  00FA               	movwf	??_ISR+3
  7963  000F  118A  2C0D         	ljmp	_ISR
  7964                           
  7965                           	psect	text1729
  7966  0000                     __ptext1729:	
  7967 ;; =============== function _SwitchModeTimer_IntrHandler ends ============
  7968                           
  7969  007E                     btemp	set	126	;btemp
  7970  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Oct 29 20:18:23 2017

               __size_of_GPIO_WriteBit 0016                  i1_Motor_CheckRunLimit 049A  
                    ??i1_GPIO_WriteBit 0075                                     _RD 04E0  
                                   _WR 04E8                                     fsr 0004  
                  __size_of_ADC_Enable 000E        i1GPIO_ReadInputDataBit@GPIO_Pin 0070  
                                  _GIE 005F                                    _PC4 003C  
              __size_of_EEPROM_GetFlag 0002                                    _PR2 0092  
                                  _ISR 040D                                    _WPD 0089  
        ?_SwitchModeTimer_GetINTStatus 0070                                    fsr0 0004  
                                  indf 0000                      SetDeviceMode@mode 0044  
                       _GPIO_INTConfig 06D5           i1GPIO_ReadInputDataBit@GPIOx 0072  
               ??_LEDTimer_IntrHandler 0077                __size_of_EEPROM_SetFlag 0004  
             __size_of_Motor_GetStatus 0002                        ?_Battery_Detect 0070  
                        ??_Driver_Init 0049                                   ?_ISR 0070  
                                 l1140 0000                                   l1137 0000  
                                 l2250 0000                                   l2253 0000  
                                 l2247 0000                                   l2256 0000  
                                 l3341 03D4                                   l3335 0000  
                                 l3344 0000                                   l3338 0000  
                                 l4432 0000                                   l4439 06F8  
                                 l5523 0000                            ?_KEY_DeInit 0070  
                                 l5526 0000                                   _ADIE 0469  
                                 l6616 0000                                   _ADIF 0069  
                                 l6625 0000                                   l6619 0000  
                                 l6628 0000                                   l7707 006C  
                                 l7708 0066                                   _ADON 00F8  
                                 l8831 033C                                   l8921 0000  
                                 l8842 0000                                   l8915 0211  
                                 l8845 0000                                   l8837 033E  
                                 l8918 0000                                   l8854 0000  
                                 l8857 0000                                   l8868 0000  
                                 u1304 0042                                   u1305 0040  
                                 _IOCA 0096                                   _PAIE 005B  
                                 _PAIF 0058                                   _PIE1 008C  
                                 _PIE2 008D                                   u1925 035B  
                                 _PEIE 005E                                   _INTE 005C  
                                 _INTF 0059                                   _PCON 008E  
                                 _PIR1 000C                                   _PR3L 010E  
                                 _PIR2 000D                                   _PR4L 0114  
                                 _PR5L 011A                                   _TMR2 0011  
             __size_of_KEY_IntrHandler 000E                                   _WPUA 0095  
                __end_of_GetDeviceMode 0304                                   _main 0622  
        __size_of_ChargeTimer_GetCount 0006                                   btemp 007E  
                     __end_of_ADC_Init 0051                                   start 0011  
                   __size_of_GPIO_Init 0028                             _Board_Init 071E  
            KEY_DeInit@GPIO_InitStruct 0046                                  ??_ISR 0077  
                    i1_Motor_SetStatus 04F2          __size_of_KEY_GetReleaseStatus 0007  
                 __end_of_EEPROM_Write 03DC               __size_of_ChargeCtrl_Init 0010  
                        ?_LEDTimer_Cmd 0044                       __end_of_LED_Init 0141  
                   ?i1_Motor_SetStatus 0070              _SwitchModeTimer_INTConfig 02AB  
                                l10021 0000                                  l10030 0000  
                                l10018 0000                                  l10050 0000  
                                l10044 0000                                  l10053 0000  
                                l10047 0000                                  l10059 0000  
                                l12234 0000                                  l12237 0000  
                                l15100 0000                                  l15110 0000  
                                l15102 0000                                  l15104 0000  
                                l15120 0000                                  l15112 0000  
                                l15200 0000                                  l15106 0000  
                                l15114 0000                                  l15122 076C  
                                l15130 0000                                  l15202 0000  
                                l15210 0000                                  l14420 0000  
                                l14412 0000                                  l14500 0000  
                                l15108 0000                                  l15116 0000  
                                l15124 0000                                  l15132 0000  
                                l15140 0000                                  l15204 0000  
                                l15212 0000                                  l15300 0172  
                __size_of_ADC_ReadData 0011                                  l14422 0000  
                                l14414 0000                                  l14430 0000  
                                l14502 02E8                                  l14510 0000  
                                l15118 0000                                  l15126 0000  
                                l15134 0000                                  l15206 0000  
                                l15214 00AA                                  l15310 0181  
                                l14424 0000                                  l14416 0000  
                                l14432 0000                                  l14440 0000  
                                l14512 0000                                  l14504 0000  
                                l14520 0000                                  l15144 0000  
                                l15160 0000                                  l15208 0000  
                                l15232 0000                                  l15224 0000  
                                l15216 0000                                  l15320 0195  
                                l15304 0000                                  l15400 0000  
                                l14426 0000                                  l14418 0000  
                                l14434 0000                                  l14450 0000  
                                l14442 0000                                  l14514 0000  
                                l14506 0000                                  l14522 0000  
                                l15090 0000                                  l15162 0000  
                                l15154 0000                                  l15170 0000  
                                l15250 0000                                  l15242 0000  
                                l15234 0000                                  l15226 0000  
                                l15322 0000                                  l15314 0185  
                                l15306 0000                                  l15402 0000  
                                l14428 0000                                  l14436 0000  
                                l14452 0000                                  l14516 0000  
                                l14508 0000                                  l14524 0000  
                                l14700 06E5                                  l15092 0000  
                                l15084 0000                                  l15148 06A6  
                                l15164 0000                                  l15156 0000  
                                l15172 0000                                  l15180 0000  
                                l15252 0000                                  l15244 00E2  
                                l15236 0000                                  l15260 0000  
                                l15340 0000                                  l15324 0000  
                                l15308 0000                                  l15412 068E  
                                l15404 0000                                  l14438 0000  
                                l14454 0000                                  l14446 0000  
                                l14470 0000                                  l14518 0000  
                                l14710 0000                                  l14702 0000  
                                l15094 0000                                  l15086 0000  
                                l15166 0000                                  l15158 0000  
                                l15174 021D                                  l15182 0000  
                                l15190 0000                                  l15246 0000  
                                l15238 00D6                                  l15254 00F2  
                                l15262 0256                                  l15270 0268  
                                l15342 01C5                                  l15334 01B5  
                                l15326 0000                                  l15350 01DF  
                                l15414 0000                                  l15406 0000  
                                l14456 0000                                  l14480 0233  
                                l14712 0000                                  l14720 0000  
                                l14800 0000                                  l15096 0000  
                                l15088 0000                                  l15168 0000  
                                l15176 0000                                  l15192 0000  
                                l15184 0000                                  l15256 0000  
                                l15264 025C                                  l15272 0273  
                                l15280 0000                                  l15360 0000  
                                l15352 0000                                  l15336 0000  
                                l15328 01A5                                  l15408 0678  
                                l14466 0000                                  l14482 0236  
                                l14474 0000                                  l14714 0000  
                                l14706 0000                                  l14722 0000  
                                l14730 0000                                  l14810 0000  
                                l14802 0000                                  l15098 0000  
                                l15186 0000                                  l15194 074D  
                                l15266 0262                                  l15282 0000  
                                l15274 0000                                  l15362 0204  
                                l15338 0000                                  l15418 0692  
                                l15370 0000                                  l14468 0000  
                                l14484 0000                                  l14492 0000  
                                l14708 0000                                  l14724 0000  
                                l14716 0000                                  l14732 0000  
                                l14812 0000                                  l14804 0000  
                                l15188 0000                                  l15196 0000  
                                l15276 0000                                  l15292 0094  
                                l15284 0000                                  l15356 0000  
                                l15348 01D0                                  l15380 0638  
                                l15372 0000                                  l14486 023C  
                                l14478 0000                                  l14494 0000  
                                l14670 0163                                  l14662 0000  
                                l14726 0000                                  l14718 0000  
                                l14734 0000                                  l14830 0000  
                                l14822 0329                                  l14806 0000  
                                l15198 0000                                  l15278 0000  
                                l15286 0000                                  l15366 0000  
                                l15358 01EB                                  l15390 0000  
                                l14488 0000                                  l14496 0000  
                                l14664 0151                                  l14680 06CD  
                                l14672 0000                                  l14736 0000  
                                l14728 0000                                  l14760 0000  
                                l14832 0000                                  l14808 0000  
                                l14840 0000             __size_of_ChargeCtrl_Output 0008  
                                l15368 0210                                  l15296 0000  
                                l15392 0000                                  l15384 0000  
                                l15376 0632                                  l14498 0000  
                                l14666 0157                                  l14658 0000  
                                l14682 0000                                  l14674 0000  
                                l14690 0000                                  l14738 0000  
                                l14762 0000                                  l14770 0000  
                                l14826 0332                                  l14818 0323  
                                l14850 0000                                  l14842 0000  
                                l14930 0368                                  l14914 0000  
                                l15394 0000                                  l15386 064C  
                                l15378 0000                                  l14668 0000  
                                l14772 0000                                  l14844 0000  
                                l14836 0000                                  l14852 0000  
                                l14932 0000                                  l14916 0000  
                                l15396 0000                                  l15388 0650  
                                l14678 06CA                                  l14686 06D3  
                                l14694 0000                                  l14758 0000  
                                l14774 0000                                  l14846 0000  
                                l14838 0000                                  l14854 0000  
                                l14870 0000                                  l14934 0000  
                                l14918 0000                                  l15398 0000  
                                l14696 0000                                  l14784 0000  
                                l14848 0000                                  l14856 0000  
                                l14880 0000                                  l14872 02C4  
                                l14928 0000                                  l14698 06E2  
                                l14786 0000                                  l14890 0000  
                                l14882 0000                                  l14866 0000  
                                l14938 0000                                  l14788 0310  
                                l14884 0000                                  l14876 02CF  
                                l14868 0000                                  l14892 0000  
                                l14886 0000                                  l14878 0000  
                                l14894 0000                                  l14888 0000  
                                l14896 0000              ??_EEPROM_RestoreMotorData 0046  
                                ?_main 0070                                  _EEADR 009B  
                                _EEDAT 009A                        __end_of___lbmod 04BF  
             __size_of_Motor_SetStatus 0004                                  _ANSEL 0091  
               __end_of_GPIO_INTConfig 06FA                                  _T1CON 0010  
                                _T2CON 0012                     __size_of_TIM1_Init 000D  
                     __end_of_KEY_Init 007F                                  _TMR1H 000F  
                                _TMR3H 010D                                  _TMR1L 000E  
                                _TMR4H 0113                                  _TMR5H 0119  
                                _TMR3L 010C                                  _TMR4L 0112  
                                _TMR5L 0118                                  _PORTA 0005  
                                _PORTC 0007                 ?_ChargeTimer_INTConfig 0070  
                                _TRISA 0085                                  _TRISC 0087  
                                _WREN1 04E2                                  _WREN2 04E4  
                                _WREN3 04E5                            _Charge_Init 03EC  
          __end_of_SwitchModeTimer_Cmd 02AB                     _LEDTimer_INTConfig 03EF  
                  ??i1_Motor_SetStatus 0070        __size_of_ChargeTimer_ResetCount 0003  
      __size_of_LED_UnderVoltageOutput 0008                          _GPIO_WriteBit 0229  
                      _ADC_IntrHandler 05D9        __size_of_ChargeDetect_GetStatus 0020  
                  ?_LEDTimer_INTConfig 0070                    _LED_DisplayRunLimit 0524  
                                pclath 000A                         _charge_control 007F  
                                status 0003                                  wtemp0 007E  
             __size_of_ChargeTimer_Cmd 0017                ?_LED_DisplayMotorStatus 0047  
                     EEPROM_Write@addr 0045                    __end_of_Driver_Init 003B  
                     EEPROM_Write@data 0044       __size_of_ChargeTimer_IntrHandler 000B  
                 _run_limit_display_en 0041                   __size_of_EEPROM_Init 000C  
                 __size_of_EEPROM_Read 000D              __end_ofi1_Motor_SetStatus 04F5  
               ?i1_Motor_CheckRunLimit 0070                           _ADC_ReadData 05F6  
                  _current_period_type 0058                           __end_of_main 06A1  
                 ??_LEDTimer_INTConfig 0044                         ??_LEDTimer_Cmd 0045  
                 ?_LED_DisplayRunLimit 0070                      _motor_oper_record 0036  
                  __size_of_KEY_DeInit 000F                                 ??_main 0058  
                      ?_GPIO_INTConfig 0044                     i1Motor_Init@status 0070  
        LED_VoltageChargeOutput@BitVal 0047          __size_of_EEPROM_StoreModeData 0005  
                    __end_of_GPIO_Init 0169             ??i1_LED_UnderVoltageOutput 0076  
                       ?_GPIO_WriteBit 0044               ?i1_GPIO_ReadInputDataBit 0070  
                               _ADCON0 001F                                 _ADCON1 009F  
              Battery_HandleData@temp1 0050                Battery_HandleData@temp2 004C  
       ??_SwitchModeTimer_GetINTStatus 0044                 __end_of_charge_control 00A4  
                               _ADRESH 001E                                 _ADRESL 009E  
                               _CCPR1L 0013                                 _EECON1 009C  
                               _CMCON0 0019                                 _ANSEL5 048D  
              _LED_VoltageChargeOutput 03E5             __end_of_KEY_GetPressStatus 0309  
                         ??_ADC_Enable 0070                                 i1l1172 0000  
                               i1l4432 0000                                 i1l5520 0000  
                               i1l6622 0000                                 _INTEDG 040E  
                               i1l6628 0000                                 i1l7731 0509  
                               i1l8831 04EA                                 _INTCON 000B  
                               i1l8842 0000                                 i1l8837 04ED  
                               i1l8857 0000                                 i1l8881 0461  
                               i1l8868 0000                    GPIO_INTConfig@GPIOx 0046  
              ??_GPIO_ReadInputDataBit 0045                                 _OSCCON 008F  
       __end_of_LED_DisplayMotorStatus 0294                                 _TMR1IE 0460  
                               _TMR1IF 0060                                 _TMR2IF 0061  
                               _TMR3IE 0881                                 _TMR3IF 0880  
                               _TMR4IE 08B1                                 _TMR4IF 08B0  
                               _TMR5IE 08E1                                 _TMR5IF 08E0  
                               _TMR1ON 0080                                 _TMR2ON 0092  
                               _TMR3ON 0882                                 _TMR4ON 08B2  
                               _TMR5ON 08E2                                 _WDTCON 0018  
                               _TRISC4 043C                      ??_Motor_GetStatus 0044  
                    __end_of_TIM1_Init 0614                        ADC_Init@channel 0045  
                   GPIO_WriteBit@GPIOx 0046                            ?_Board_Init 0070  
     __end_of_MotorOperationTimer_Init 02E1                      ??_KEY_IntrHandler 0070  
         ??i1_MotorOperationTimer_Init 0070       __end_of_MotorOperationTimer_Stop 0229  
               _ChargeTimer_ResetCount 0798                 _LED_UnderVoltageOutput 02F8  
         ??i1_MotorOperationTimer_Stop 0070                             _Motor_Init 0312  
           ??_ChargeDetect_IntrHandler 0073                             _Motor_Stop 023F  
                        ??_Motor_Start 0049                   _battery_sample_count 0039  
                            ??___lbmod 0071                 _ChargeDetect_GetStatus 06A1  
                ??_LED_DisplayRunLimit 0076           ??_MotorOperTimer_IntrHandler 0076  
                       _EEPROM_GetFlag 06FA                                 clrloop 0785  
                   __end_of_ADC_Enable 0622                __end_of_ADC_IntrHandler 05F6  
                         __pdataCOMMON 007B      __size_of_LEDTimer_DispRunLimitCmd 0009  
                    ??_ChargeCtrl_Init 0047                   _key_press_time_count 003F  
            ?_LEDTimer_DispRunLimitCmd 0070                              ?_ADC_Init 0070  
                               saved_w 007E                         _EEPROM_SetFlag 03DC  
               __size_of_SetDeviceMode 0004                      ??_Motor_SetStatus 0044  
                      ?_charge_control 0070                            _Driver_Init 0028  
                      ___lbmod@divisor 0070                        i1_GPIO_WriteBit 055C  
                      ___lbmod@counter 0073                        _charge_time_out 0034  
                            ?_LED_Init 0070                  __size_of_EEPROM_Write 0017  
              LEDTimer_Cmd@period_type 0045                              ?_KEY_Init 0070  
              LED_Init@GPIO_InitStruct 0047             __size_ofi1_Motor_SetStatus 0003  
                       __pcstackCOMMON 0070                           __pidataBANK0 0000  
                    ??_ChargeTimer_Cmd 0044               __size_ofi1_GetDeviceMode 0004  
               __end_of_EEPROM_GetFlag 06FC    __end_of_Motor_HandleStatusChangeEvt 0212  
          _Motor_HandleStatusChangeEvt 0169                  _EEPROM_StoreMotorData 03AE  
                  __end_of_Motor_Start 027B        __end_ofi1_GPIO_ReadInputDataBit 055C  
                     ??_Battery_Detect 0053                 __end_of_EEPROM_SetFlag 03E0  
                      ??_GPIO_WriteBit 0046             __end_of_Battery_HandleData 039F  
                           ??_ADC_Init 0044              ??_LED_VoltageChargeOutput 0047  
                  __size_of_Board_Init 0018     __size_of_SwitchModeTimer_INTConfig 000C  
         __size_of_Motor_CheckRunLimit 0009                           ??_KEY_DeInit 0046  
                         _EEPROM_Write 03C5                             __pbssBANK0 0020  
                 __end_of_LEDTimer_Cmd 006F                _ChargeTimer_IntrHandler 058A  
                           ??_LED_Init 0047                             ??_KEY_Init 0047  
                           __pmaintext 0622                            ?_Motor_Init 0070  
                        _SetDeviceMode 0794                            ?_Motor_Stop 0070  
    SwitchModeTimer_INTConfig@NewState 0044                             __pintentry 0004  
             _MotorOperationTimer_Init 02B7                                _CCP1CON 0015  
                      ?_EEPROM_GetFlag 0070                             __ptext1700 00A4  
                           __ptext1701 03EF                             __ptext1710 0576  
                           __ptext1702 0051               _MotorOperationTimer_Stop 021D  
                           __ptext1711 0524                             __ptext1703 003B  
                           __ptext1720 04BF                             __ptext1712 05D9  
                           __ptext1704 071E                             __ptext1721 0546  
                           __ptext1713 05CB                             __ptext1705 040D  
                           __ptext1722 055C                             __ptext1714 05A7  
                           __ptext1706 04F5                             __ptext1723 04A3  
                           __ptext1715 0599                             __ptext1707 042E  
                           __ptext1651 0169                             __ptext1724 05F6  
                           __ptext1716 0595                             __ptext1708 048E  
                           __ptext1660 02F8                             __ptext1652 007F  
                           __ptext1725 0614                             __ptext1717 0467  
                           __ptext1709 050E                             __ptext1661 027B  
                           __ptext1653 0028                             __ptext1726 0607  
                           __ptext1718 049A                             __ptext1670 06FC  
                           __ptext1662 074D                             __ptext1654 0254  
                           __ptext1727 058A                             __ptext1719 04F2  
                           __ptext1671 06FA                             __ptext1663 0013  
                           __ptext1655 00AA                             __ptext1728 057E  
                           __ptext1680 02AB                             __ptext1672 03E5  
                           __ptext1664 078C                             __ptext1656 03EC  
                           __ptext1729 0000                             __ptext1681 0294  
                           __ptext1673 076C                             __ptext1665 021D  
                           __ptext1657 03E0                             __ptext1690 0141  
                           __ptext1682 0312                             __ptext1674 006F  
                           __ptext1666 023F                             __ptext1658 03DC  
                           __ptext1691 0300                             __ptext1683 0309  
                           __ptext1675 0101                             __ptext1667 039F  
                           __ptext1659 03AE                             __ptext1692 0778  
                           __ptext1684 0304                             __ptext1676 0343  
                           __ptext1668 06A1                             __ptext1693 0736  
                           __ptext1685 0216                             __ptext1677 02F3  
                           __ptext1669 0700                             __ptext1694 02E1  
                           __ptext1686 0711                             __ptext1678 02B7  
                           __ptext1695 0212                             __ptext1687 03C5  
                           __ptext1679 02EA                             __ptext1696 0794  
                           __ptext1688 06D5                             __ptext1697 0798  
                           __ptext1689 06C1                             __ptext1698 079B  
                           __ptext1699 0229                ??_ChargeTimer_INTConfig 0044  
         __end_of_ChargeTimer_GetCount 00AA                     __end_of_KEY_DeInit 03AE  
                              _T3CKDIV 0111                                _T2CKSRC 00DD  
                              _T4CKDIV 0117                                _T5CKDIV 011D  
                              i1l10033 0000                                i1l10018 0000  
                              i1l10036 0000                                i1l15000 0000  
                              i1l15002 0000                                i1l15020 04DF  
                              i1l15012 04CF                                i1l15004 0000  
                              i1l15006 0000                                i1l15030 0000  
                              i1l15024 0000                                i1l15016 04D5  
                              i1l15032 0000                                i1l15026 0000  
                              i1l15050 0000                                i1l15034 0000  
                              i1l15036 0000                                i1l15060 0000  
                              i1l15052 0473                                i1l15070 0000  
                              i1l15062 0000                                i1l15046 0000  
                              i1l15064 0000                                i1l15056 047D  
                              i1l15048 0000                                i1l15080 0000  
                              i1l15072 0000                                i1l14600 0000  
                              i1l15066 0000                                i1l15058 0000  
                              i1l15074 0000                                i1l14610 0000  
                              i1l14602 0447                                i1l14530 0000  
                              i1l15068 0000                                i1l14612 0000  
                              i1l14620 0464                                i1l14540 0000  
                              i1l14532 0000                                i1l15078 0000  
                              i1l14606 0000                                i1l14614 0457  
                              i1l14630 0504                                i1l14622 0000  
                              i1l14542 0000                                i1l14552 0000  
                              i1l14640 0000                                i1l14616 045D  
                              i1l14608 0000                                i1l14632 0000  
                              i1l14544 0000                                i1l14536 0419  
                              i1l14528 0000                                i1l14554 0000  
                              i1l14546 0000                                i1l14650 0000  
                              i1l14642 0000                                i1l14618 0000  
                              i1l14634 0000                                i1l14538 041B  
                              i1l14572 0000                                i1l14556 0000  
                              i1l14564 0000                                i1l14636 0000  
                              i1l14628 0000                                i1l12949 0000  
                              i1l14750 0000                                i1l14742 0607  
                              i1l14910 0000                                i1l14566 05BF  
                              i1l14558 0000                                i1l14654 0000  
                      ?_EEPROM_SetFlag 0070                                i1l14584 0000  
                              i1l14752 0000                                i1l14744 0000  
                              i1l14568 05C2                                i1l14656 05F4  
                              i1l14648 0000                                i1l14578 0000  
                              i1l14754 0000                                i1l14746 0000  
                              i1l14906 0000                                i1l14594 0000  
                              i1l14586 0000                                i1l14756 0000  
                              i1l14748 0000                                i1l14908 0000  
                              i1l14596 0000                                i1l14790 0000  
                              i1l14950 0000                                i1l14942 0000  
                              i1l14782 0000                                i1l14792 0000  
                              i1l14944 0000                                i1l14960 0000  
                              i1l14794 0000                                i1l14954 04BB  
                              i1l14946 04A7                                i1l14970 0000  
                              i1l14796 0000                                i1l14956 0000  
                              i1l14948 0000                                i1l14972 0572  
                              i1l14964 0000                                i1l14980 0550  
                              i1l14798 0000                                i1l14966 0567  
                              i1l14982 0553                                i1l14974 0000  
                              i1l14968 056B                                i1l14984 0000  
                              i1l14976 0000                                i1l14992 0000  
                              i1l14994 0000                                i1l14988 055A  
                              i1l14996 0000                                i1l14998 0000  
                         ?_Charge_Init 0070                       ?_ADC_IntrHandler 0070  
                              _GO_DONE 00F9                                _MSCKCON 001B  
              __end_ofi1_GPIO_WriteBit 0576                                _PWM3CR0 010F  
                              _PWM3CR1 0110                                _PWM4CR0 0115  
                              _PWM4CR1 0116                                _PWM5CR0 011B  
                              _PWM5CR1 011C                      Motor_Start@status 0049  
         __end_of_KEY_GetReleaseStatus 021D          __size_of_LEDTimer_IntrHandler 0019  
    __end_of_SwitchModeTimer_INTConfig 02B7                ??i1_Motor_CheckRunLimit 0070  
              ChargeDetect_GetStatus@i 0047     __end_ofi1_MotorOperationTimer_Init 048E  
           i1_MotorOperationTimer_Init 0467     __end_ofi1_MotorOperationTimer_Stop 049A  
           i1_MotorOperationTimer_Stop 048E                    _battery_handle_flag 0038  
                       ?_SetDeviceMode 0070                    GPIO_WriteBit@BitVal 0045  
                          _Motor_Start 0254             ?_DebounceTimer_IntrHandler 0070  
                              ___lbmod 04A3     __end_of_MotorOperTimer_IntrHandler 0467  
           _MotorOperTimer_IntrHandler 042E                       ??_GPIO_INTConfig 0046  
              i1GPIO_WriteBit@GPIO_Pin 0073          ChargeTimer_INTConfig@NewState 0044  
               ?_EEPROM_StoreMotorData 0070                             _key_status 007B  
                         __size_of_ISR 0021                 __size_of_GetDeviceMode 0004  
                    ??i1_GetDeviceMode 0070                        _Motor_GetStatus 079B  
                  __size_of_Motor_Init 0031                    __size_of_Motor_Stop 0015  
                            _GPIO_Init 0141                        _KEY_IntrHandler 0599  
                 end_of_initialization 0769              ??_ChargeTimer_IntrHandler 0070  
         __size_of_SwitchModeTimer_Cmd 0017                          ??_EEPROM_Init 0046  
                        ??_EEPROM_Read 0044                 GPIO_INTConfig@GPIO_Pin 0044  
              ?_ChargeTimer_ResetCount 0070                ?_LED_UnderVoltageOutput 0070  
       __size_of_GPIO_ReadInputDataBit 0014          __end_of_GPIO_ReadInputDataBit 06D5  
         __end_of_EEPROM_StoreModeData 03E5     __size_of_LEDTimer_DispUnderVoltCmd 0009  
           ?_LEDTimer_DispUnderVoltCmd 0070                           ??_Board_Init 0044  
              ?_ChargeDetect_GetStatus 0070       __size_ofi1_GPIO_ReadInputDataBit 0016  
            ADC_ReadData@battery_value 0073       __end_of_LEDTimer_DispRunLimitCmd 02EA  
                   _KEY_GetPressStatus 0304                              _TIM1_Init 0607  
                      _ChargeCtrl_Init 074D               ?_EEPROM_RestoreMotorData 0070  
    __end_of_DebounceTimer_IntrHandler 05CB            __size_of_LEDTimer_INTConfig 000C  
                      _Motor_SetStatus 0212                   _switch_mode_time_out 0042  
                  ?_KEY_GetPressStatus 0070                       ??_charge_control 0056  
                     ___lbmod@dividend 0072                    _charge_detect_count 003A  
                __size_of_LEDTimer_Cmd 001E                          ?i1_Motor_Init 0070  
                     ?i1_GPIO_WriteBit 0073                          ?i1_Motor_Stop 0070  
                    __size_of_ADC_Init 0016                     __end_of_Board_Init 0736  
                         ?_Driver_Init 0070                             ?_GPIO_Init 0044  
       __end_of_ChargeTimer_ResetCount 079B         __end_of_LED_UnderVoltageOutput 0300  
                          ___lbmod@rem 0074                        _ChargeTimer_Cmd 0736  
                 ??_KEY_GetPressStatus 0044                   _ChargeTimer_GetCount 00A4  
               GPIO_INTConfig@NewState 0045                          _GetDeviceMode 0300  
       __end_of_ChargeDetect_GetStatus 06C1                        ??_SetDeviceMode 0044  
    __size_ofi1_LED_UnderVoltageOutput 0008            __end_of_LED_DisplayRunLimit 0546  
            ?i1_LED_UnderVoltageOutput 0070                      __size_of_LED_Init 0040  
    __end_of_LEDTimer_DispUnderVoltCmd 0312           MotorOperationTimer_Init@time 0044  
                  __end_of_EEPROM_Init 0778                    __end_of_EEPROM_Read 071E  
                           ?_TIM1_Init 0070                      __size_of_KEY_Init 0010  
                  _Motor_CheckRunLimit 02EA   __end_of_SwitchModeTimer_GetINTStatus 02F8  
__size_of_SwitchModeTimer_GetINTStatus 0005           _SwitchModeTimer_GetINTStatus 02F3  
                 _KEY_GetReleaseStatus 0216                       _motor_intr_count 007D  
                        __pidataCOMMON 0000                __end_of_Motor_GetStatus 079D  
                         _LEDTimer_Cmd 0051                  GPIO_WriteBit@GPIO_Pin 0044  
              __end_of_KEY_IntrHandler 05A7                    start_initialization 075D  
                       ??i1_Motor_Init 0070                            __end_of_ISR 042E  
    __size_of_ChargeDetect_IntrHandler 000E                         ??i1_Motor_Stop 0076  
            ?_ChargeDetect_IntrHandler 0070              _motor_timing_running_flag 0059  
                 __size_of_Charge_Init 0003                   ?_Motor_CheckRunLimit 0070  
       GPIO_ReadInputDataBit@bitstatus 0045   __size_of_Motor_HandleStatusChangeEvt 00A9  
    Motor_HandleStatusChangeEvt@status 004A                  ?_ChargeTimer_GetCount 0044  
                       ?_GetDeviceMode 0070                     _Battery_HandleData 0343  
              __end_of_ChargeCtrl_Init 075D             ??_MotorOperationTimer_Init 0044  
           ??_MotorOperationTimer_Stop 0044        __end_of_EEPROM_RestoreMotorData 0711  
                     ??_EEPROM_GetFlag 0046                __end_of_Motor_SetStatus 0216  
                         ??_Motor_Init 0044                  _under_volt_display_En 0043  
                         ??_Motor_Stop 0047                    ?_Battery_HandleData 0044  
                ?_KEY_GetReleaseStatus 0070                       ??_EEPROM_SetFlag 0046  
                          __pdataBANK0 0058                KEY_Init@GPIO_InitStruct 0047  
             _LEDTimer_DispRunLimitCmd 02E1         Battery_HandleData@average_data 004E  
       __size_of_ChargeTimer_INTConfig 000C          __end_of_ChargeTimer_INTConfig 0784  
       i1LED_UnderVoltageOutput@BitVal 0076                   _EEPROM_StoreModeData 03E0  
                          __pbssCOMMON 007D                          __pcstackBANK0 0044  
                __end_of_GPIO_WriteBit 023F                __end_of_ChargeTimer_Cmd 074D  
           LEDTimer_INTConfig@NewState 0044               ??_LED_DisplayMotorStatus 0048  
                        _battery_value 0020                    Battery_HandleData@i 0052  
                 ??_Battery_HandleData 0046                  ??_Motor_CheckRunLimit 0044  
                          ??_GPIO_Init 0045                         _key_press_flag 003E  
                   __end_of_Motor_Init 0343                     __end_of_Motor_Stop 0254  
                          _EEPROM_Init 076C                            _EEPROM_Read 0711  
              ChargeTimer_Cmd@NewState 0044                i1_GPIO_ReadInputDataBit 0546  
       __size_ofi1_Motor_CheckRunLimit 0009            ?i1_MotorOperationTimer_Init 0070  
        __end_ofi1_Motor_CheckRunLimit 04A3            ?i1_MotorOperationTimer_Stop 0070  
                        ?_ADC_ReadData 0070                            ??_TIM1_Init 0070  
                      i1_GetDeviceMode 0595                ??_EEPROM_StoreMotorData 0046  
         __end_of_LEDTimer_IntrHandler 050E                           ?_Motor_Start 0070  
                             ?___lbmod 0070            ??_DebounceTimer_IntrHandler 0073  
          ?_MotorOperTimer_IntrHandler 0070   __size_of_SwitchModeTimer_IntrHandler 000C  
                  _SwitchModeTimer_Cmd 0294                       ?_Motor_GetStatus 0070  
             ?_LED_VoltageChargeOutput 0070                  ?_EEPROM_StoreModeData 0070  
                     ?_KEY_IntrHandler 0070                               _ADC_Init 003B  
                          _device_mode 003C      LEDTimer_DispUnderVoltCmd@NewState 0044  
                            _key_press 003D                   LEDTimer_Cmd@NewState 0044  
                      ??_GetDeviceMode 0044                 ??_ChargeTimer_GetCount 0046  
                 ?_SwitchModeTimer_Cmd 0070               __size_of_ADC_IntrHandler 001D  
              __size_of_Battery_Detect 0057             ?_SwitchModeTimer_INTConfig 0070  
                 __size_of_Driver_Init 0013                      interrupt_function 0004  
                             _LED_Init 0101                       ?_ChargeCtrl_Init 0070  
                       ??_ADC_ReadData 0072                               _KEY_Init 006F  
          ??_LEDTimer_DispUnderVoltCmd 0044       LEDTimer_DispRunLimitCmd@NewState 0044  
 __end_of_EEPROM_RestoreDeviceModeData 0700  __size_of_EEPROM_RestoreDeviceModeData 0004  
         _EEPROM_RestoreDeviceModeData 06FC                 ??_KEY_GetReleaseStatus 0044  
                     ?_Motor_SetStatus 0070                   __end_ofi1_Motor_Init 04F2  
                 __end_ofi1_Motor_Stop 0524                i1Motor_SetStatus@status 0070  
     __size_of_EEPROM_RestoreMotorData 0011                       ?_ChargeTimer_Cmd 0070  
     __end_ofi1_LED_UnderVoltageOutput 057E        __size_of_LED_DisplayMotorStatus 0019  
            _DebounceTimer_IntrHandler 05A7                  ??_SwitchModeTimer_Cmd 0044  
                           _ADC_Enable 0614              ??i1_GPIO_ReadInputDataBit 0071  
              __end_ofi1_GetDeviceMode 0599                      _ChargeDetect_Init 0013  
                       GPIO_Init@GPIOx 0045                     ?_ChargeDetect_Init 0070  
                _GPIO_ReadInputDataBit 06C1             __end_of_LEDTimer_INTConfig 03FB  
       LED_DisplayMotorStatus@GPIO_Pin 0047          ?_EEPROM_RestoreDeviceModeData 0070  
      __end_of_LED_VoltageChargeOutput 03EC       __end_of_ChargeDetect_IntrHandler 05D9  
                   Battery_Detect@mode 0053                       __size_of___lbmod 001C  
                  ??_ChargeDetect_Init 0047           ?_Motor_HandleStatusChangeEvt 0070  
               ??_EEPROM_StoreModeData 0046                            _key_release 0040  
            _LEDTimer_DispUnderVoltCmd 0309               ?_ChargeTimer_IntrHandler 0070  
              __size_of_GPIO_INTConfig 0025    __size_ofi1_MotorOperationTimer_Init 0027  
           GPIO_ReadInputDataBit@GPIOx 0046    __size_ofi1_MotorOperationTimer_Stop 000C  
              ChargeCtrl_Output@BitVal 0047                          ?_EEPROM_Write 0044  
                 _LEDTimer_IntrHandler 04F5              __end_of_ChargeDetect_Init 0028  
         LED_UnderVoltageOutput@BitVal 0047    __size_of_MotorOperTimer_IntrHandler 0039  
          __size_of_KEY_GetPressStatus 0005                          __size_of_main 007F  
             __size_ofi1_GPIO_WriteBit 001A            LED_DisplayMotorStatus@GPIOx 0048  
          SwitchModeTimer_Cmd@NewState 0044                               clear_ram 0784  
           ??_LEDTimer_DispRunLimitCmd 0044                  i1GPIO_WriteBit@BitVal 0074  
                __end_of_SetDeviceMode 0798                      ??_ADC_IntrHandler 0075  
               _LED_DisplayMotorStatus 027B       i1GPIO_ReadInputDataBit@bitstatus 0071  
        GPIO_ReadInputDataBit@GPIO_Pin 0044                   _detect_under_voltage 003B  
             GPIO_Init@GPIO_InitStruct 0044           __size_of_LED_DisplayRunLimit 0022  
                 __size_of_Motor_Start 0027                          ??_Charge_Init 0049  
                Motor_SetStatus@status 0044          ??_Motor_HandleStatusChangeEvt 004A  
                    _ChargeCtrl_Output 078C                   __end_of_ADC_ReadData 0607  
                   ?_ChargeCtrl_Output 0070         i1MotorOperationTimer_Init@time 0070  
                       ??_EEPROM_Write 0045                  ?_LEDTimer_IntrHandler 0070  
                           _KEY_DeInit 039F                         _Battery_Detect 00AA  
                             intlevel1 0000                            ?_ADC_Enable 0070  
                         _motor_status 007C               i1_LED_UnderVoltageOutput 0576  
                  ??_ChargeCtrl_Output 0047                __size_of_charge_control 0025  
                         ?_EEPROM_Init 0070                           ?_EEPROM_Read 0070  
         ?_SwitchModeTimer_IntrHandler 0070                  __size_ofi1_Motor_Init 0033  
                     ?i1_GetDeviceMode 0070                  __size_ofi1_Motor_Stop 0016  
                 i1GPIO_WriteBit@GPIOx 0075                 ?_GPIO_ReadInputDataBit 0044  
               Battery_Detect@adc_data 0054         __size_of_EEPROM_StoreMotorData 0017  
        __end_of_EEPROM_StoreMotorData 03C5             charge_control@charge_count 0056  
      __end_of_ChargeTimer_IntrHandler 0595              __end_of_ChargeCtrl_Output 0794  
       ??_EEPROM_RestoreDeviceModeData 0046                      ADC_Enable@channel 0071  
          __end_of_Motor_CheckRunLimit 02F3      __size_of_MotorOperationTimer_Init 002A  
             _ChargeDetect_IntrHandler 05CB              ?_MotorOperationTimer_Init 0070  
    __size_of_MotorOperationTimer_Stop 000C              ?_MotorOperationTimer_Stop 0070  
              _EEPROM_RestoreMotorData 0700         ChargeCtrl_Init@GPIO_InitStruct 0047  
                _ChargeTimer_INTConfig 0778               ??_ChargeTimer_ResetCount 0044  
             ??_LED_UnderVoltageOutput 0047       ChargeDetect_Init@GPIO_InitStruct 0047  
               __end_of_Battery_Detect 0101                           i1_Motor_Init 04BF  
          __size_of_Battery_HandleData 005C                           i1_Motor_Stop 050E  
  __end_of_SwitchModeTimer_IntrHandler 058A            _SwitchModeTimer_IntrHandler 057E  
                     Motor_Init@status 0044               ??_ChargeDetect_GetStatus 0047  
                  __end_of_Charge_Init 03EF             __size_of_ChargeDetect_Init 0015  
     __size_of_LED_VoltageChargeOutput 0007            ??_SwitchModeTimer_INTConfig 0044  
                      EEPROM_Read@addr 0044                        EEPROM_Read@data 0045  
        ??_SwitchModeTimer_IntrHandler 0070     __size_of_DebounceTimer_IntrHandler 0024  
