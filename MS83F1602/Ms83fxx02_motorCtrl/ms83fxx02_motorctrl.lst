

HI-TECH Software PIC LITE Macro Assembler V9.83 build 10920 
                                                                                               Sun Nov 12 11:01:15 2017

HI-TECH Software Omniscient Code Generator (Lite mode) build 10920
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code Generator (Lite mode) build 10920"
     2                           
     3                           opt pagewidth 120
     4                           
     5                           	opt lm
     6                           
     7                           	processor	16F685
     8                           clrc	macro
     9                           	bcf	3,0
    10  0000                     	endm
    11                           clrz	macro
    12                           	bcf	3,2
    13  0000                     	endm
    14                           setc	macro
    15                           	bsf	3,0
    16  0000                     	endm
    17                           setz	macro
    18                           	bsf	3,2
    19  0000                     	endm
    20                           skipc	macro
    21                           	btfss	3,0
    22  0000                     	endm
    23                           skipz	macro
    24                           	btfss	3,2
    25  0000                     	endm
    26                           skipnc	macro
    27                           	btfsc	3,0
    28  0000                     	endm
    29                           skipnz	macro
    30                           	btfsc	3,2
    31  0000                     	endm
    32  0000                     indf	equ	0
    33  0000                     indf0	equ	0
    34  0002                     pc	equ	2
    35  0002                     pcl	equ	2
    36  0003                     status	equ	3
    37  0004                     fsr	equ	4
    38  0004                     fsr0	equ	4
    39  0001                     c	equ	1
    40  0000                     z	equ	0
    41  000A                     pclath	equ	10
    42                           	FNCALL	_main,_Board_Init
    43                           	FNCALL	_main,_Driver_Init
    44                           	FNCALL	_main,_Motor_GetStatus
    45                           	FNCALL	_main,_Motor_HandleStatusChangeEvt
    46                           	FNCALL	_main,_LED_Init
    47                           	FNCALL	_main,_KEY_DeInit
    48                           	FNCALL	_main,_Motor_Stop
    49                           	FNCALL	_main,_Motor_SetStatus
    50                           	FNCALL	_main,_MotorOperationTimer_Stop
    51                           	FNCALL	_main,_LEDTimer_DispRunLimitCmd
    52                           	FNCALL	_main,_LEDTimer_Cmd
    53                           	FNCALL	_main,_LEDTimer_INTConfig
    54                           	FNCALL	_main,_ChargeCtrl_Output
    55                           	FNCALL	_main,_LED_VoltageChargeOutput
    56                           	FNCALL	_main,_ADC_Init
    57                           	FNCALL	_main,_ChargeTimer_Cmd
    58                           	FNCALL	_main,_ChargeTimer_INTConfig
    59                           	FNCALL	_main,_SleepLedTimer_Init
    60                           	FNCALL	_main,_charge_control
    61                           	FNCALL	_main,_ChargeDetect_GetStatus
    62                           	FNCALL	_main,_SetDeviceMode
    63                           	FNCALL	_main,_GetDeviceMode
    64                           	FNCALL	_Motor_HandleStatusChangeEvt,_Motor_CheckRunLimit
    65                           	FNCALL	_Motor_HandleStatusChangeEvt,_KEY_GetReleaseStatus
    66                           	FNCALL	_Motor_HandleStatusChangeEvt,_Motor_SetStatus
    67                           	FNCALL	_Motor_HandleStatusChangeEvt,_Motor_Start
    68                           	FNCALL	_Motor_HandleStatusChangeEvt,_MotorOperationTimer_Stop
    69                           	FNCALL	_Motor_HandleStatusChangeEvt,_MotorOperationTimer_Init
    70                           	FNCALL	_Motor_HandleStatusChangeEvt,_SwitchModeTimer_GetINTStatus
    71                           	FNCALL	_Motor_HandleStatusChangeEvt,_Motor_Stop
    72                           	FNCALL	_Motor_HandleStatusChangeEvt,_SwitchModeTimer_INTConfig
    73                           	FNCALL	_Motor_HandleStatusChangeEvt,_SwitchModeTimer_Cmd
    74                           	FNCALL	_Motor_HandleStatusChangeEvt,_LEDTimer_DispRunLimitCmd
    75                           	FNCALL	_Motor_HandleStatusChangeEvt,_KEY_GetPressStatus
    76                           	FNCALL	_Motor_HandleStatusChangeEvt,_GPIO_WriteBit
    77                           	FNCALL	_charge_control,_ChargeTimer_GetCount
    78                           	FNCALL	_charge_control,_Battery_Detect
    79                           	FNCALL	_charge_control,_LED_VoltageChargeOutput
    80                           	FNCALL	_charge_control,_GPIO_WriteBit
    81                           	FNCALL	_Driver_Init,_LED_Init
    82                           	FNCALL	_Driver_Init,_KEY_Init
    83                           	FNCALL	_Driver_Init,_Charge_Init
    84                           	FNCALL	_Driver_Init,_ADC_Init
    85                           	FNCALL	_Driver_Init,_LEDTimer_Cmd
    86                           	FNCALL	_Driver_Init,_LEDTimer_INTConfig
    87                           	FNCALL	_Driver_Init,_EEPROM_Init
    88                           	FNCALL	_Motor_Start,_LED_DisplayMotorStatus
    89                           	FNCALL	_Motor_Start,_Motor_Init
    90                           	FNCALL	_Motor_Start,_SwitchModeTimer_Cmd
    91                           	FNCALL	_Motor_Start,_SwitchModeTimer_INTConfig
    92                           	FNCALL	_Battery_Detect,_Battery_HandleData
    93                           	FNCALL	_Battery_Detect,_GetDeviceMode
    94                           	FNCALL	_Battery_Detect,___lwtoft
    95                           	FNCALL	_Battery_Detect,___ftge
    96                           	FNCALL	_Battery_Detect,_EEPROM_SetFlag
    97                           	FNCALL	_Battery_Detect,_EEPROM_StoreModeData
    98                           	FNCALL	_Battery_Detect,_EEPROM_StoreMotorData
    99                           	FNCALL	_Battery_Detect,_LED_UnderVoltageOutput
   100                           	FNCALL	_Battery_Detect,_LED_Init
   101                           	FNCALL	_Battery_Detect,_KEY_DeInit
   102                           	FNCALL	_Battery_Detect,_Motor_Stop
   103                           	FNCALL	_Battery_Detect,_Motor_SetStatus
   104                           	FNCALL	_Battery_Detect,_MotorOperationTimer_Stop
   105                           	FNCALL	_Battery_Detect,_LEDTimer_DispUnderVoltCmd
   106                           	FNCALL	_Battery_Detect,_GPIO_WriteBit
   107                           	FNCALL	_Charge_Init,_ChargeDetect_Init
   108                           	FNCALL	_Charge_Init,_ChargeCtrl_Init
   109                           	FNCALL	___lwtoft,___ftpack
   110                           	FNCALL	_EEPROM_StoreModeData,_EEPROM_Write
   111                           	FNCALL	_EEPROM_SetFlag,_EEPROM_Write
   112                           	FNCALL	_EEPROM_StoreMotorData,_EEPROM_Write
   113                           	FNCALL	_LED_UnderVoltageOutput,_GPIO_WriteBit
   114                           	FNCALL	_LED_DisplayMotorStatus,_GPIO_WriteBit
   115                           	FNCALL	_ChargeCtrl_Init,_GPIO_Init
   116                           	FNCALL	_ChargeCtrl_Init,_GPIO_WriteBit
   117                           	FNCALL	_ChargeDetect_Init,_GPIO_Init
   118                           	FNCALL	_ChargeDetect_Init,_GPIO_ReadInputDataBit
   119                           	FNCALL	_ChargeDetect_Init,_GPIO_INTConfig
   120                           	FNCALL	_ChargeDetect_GetStatus,_GPIO_ReadInputDataBit
   121                           	FNCALL	_SleepLedTimer_Init,_SleepLed_Init
   122                           	FNCALL	_ChargeCtrl_Output,_GPIO_WriteBit
   123                           	FNCALL	_MotorOperationTimer_Stop,_Motor_CheckRunLimit
   124                           	FNCALL	_Motor_Stop,_GPIO_WriteBit
   125                           	FNCALL	_KEY_DeInit,_GPIO_Init
   126                           	FNCALL	_LED_VoltageChargeOutput,_GPIO_WriteBit
   127                           	FNCALL	_EEPROM_Init,_EEPROM_Write
   128                           	FNCALL	_KEY_Init,_GPIO_Init
   129                           	FNCALL	_KEY_Init,_GPIO_INTConfig
   130                           	FNCALL	_LED_Init,_GPIO_Init
   131                           	FNCALL	_LED_Init,_GPIO_WriteBit
   132                           	FNROOT	_main
   133                           	FNCALL	_ISR,_KEY_IntrHandler
   134                           	FNCALL	_ISR,_DebounceTimer_IntrHandler
   135                           	FNCALL	_ISR,i1_GetDeviceMode
   136                           	FNCALL	_ISR,_SwitchModeTimer_IntrHandler
   137                           	FNCALL	_ISR,_LEDTimer_IntrHandler
   138                           	FNCALL	_ISR,_ChargeTimer_IntrHandler
   139                           	FNCALL	_ISR,_SleepLedTimer_IntrHandler
   140                           	FNCALL	_ISR,_MotorOperTimer_IntrHandler
   141                           	FNCALL	_ISR,_ChargeDetect_IntrHandler
   142                           	FNCALL	_ISR,_ADC_IntrHandler
   143                           	FNCALL	_MotorOperTimer_IntrHandler,i1_Motor_CheckRunLimit
   144                           	FNCALL	_MotorOperTimer_IntrHandler,___awmod
   145                           	FNCALL	_MotorOperTimer_IntrHandler,i1_MotorOperationTimer_Init
   146                           	FNCALL	_MotorOperTimer_IntrHandler,i1_Motor_Stop
   147                           	FNCALL	_MotorOperTimer_IntrHandler,i1_MotorOperationTimer_Stop
   148                           	FNCALL	_MotorOperTimer_IntrHandler,i1_Motor_SetStatus
   149                           	FNCALL	_MotorOperTimer_IntrHandler,i1_Motor_Init
   150                           	FNCALL	_LEDTimer_IntrHandler,i1_GPIO_ReadInputDataBit
   151                           	FNCALL	_LEDTimer_IntrHandler,i1_LED_UnderVoltageOutput
   152                           	FNCALL	_LEDTimer_IntrHandler,_LED_DisplayRunLimit
   153                           	FNCALL	_LEDTimer_IntrHandler,_ADC_Enable
   154                           	FNCALL	i1_MotorOperationTimer_Stop,i1_Motor_CheckRunLimit
   155                           	FNCALL	i1_Motor_Stop,i1_GPIO_WriteBit
   156                           	FNCALL	i1_LED_UnderVoltageOutput,i1_GPIO_WriteBit
   157                           	FNCALL	_LED_DisplayRunLimit,i1_GPIO_ReadInputDataBit
   158                           	FNCALL	_LED_DisplayRunLimit,i1_GPIO_WriteBit
   159                           	FNCALL	_ADC_IntrHandler,_ADC_ReadData
   160                           	FNCALL	_ChargeDetect_IntrHandler,i1_GPIO_ReadInputDataBit
   161                           	FNCALL	_SleepLedTimer_IntrHandler,_SleepLed_ChangeDuty
   162                           	FNCALL	_DebounceTimer_IntrHandler,i1_GPIO_ReadInputDataBit
   163                           	FNCALL	_KEY_IntrHandler,_TIM1_Init
   164                           	FNCALL	intlevel1,_ISR
   165                           	global	intlevel1
   166                           	FNROOT	intlevel1
   167                           	global	_current_period_type
   168                           	global	_motor_timing_running_flag
   169                           	global	_key_status
   170                           	global	_motor_status
   171                           psect	idataBANK0,class=CODE,space=0,delta=2
   172                           global __pidataBANK0
   173  0002                     __pidataBANK0:
   174                           	file	"ms83fxx02_led_timer.c"
   175                           	line	34
   176                           
   177                           ;initializer for _current_period_type
   178  0002  3401               	retlw	01h
   179                           	file	"ms83fxx02_motor.c"
   180                           	line	54
   181                           
   182                           ;initializer for _motor_timing_running_flag
   183  0003  3401               	retlw	01h
   184                           psect	idataCOMMON,class=CODE,space=0,delta=2
   185                           global __pidataCOMMON
   186  09B1                     __pidataCOMMON:
   187                           	file	"MS83FXX02_KEY.C"
   188                           	line	22
   189                           
   190                           ;initializer for _key_status
   191  09B1  3401               	retlw	01h
   192                           	file	"ms83fxx02_motor.c"
   193                           	line	45
   194                           
   195                           ;initializer for _motor_status
   196  09B2  3401               	retlw	01h
   197                           	global	_battery_value
   198                           	global	_charge_time_out
   199                           	global	_motor_oper_record
   200                           	global	_sleep_led_duty
   201                           	global	_battery_handle_flag
   202                           	global	_battery_sample_count
   203                           	global	_charge_detect_count
   204                           	global	_detect_under_voltage
   205                           	global	_device_mode
   206                           	global	_key_press
   207                           	global	_key_press_flag
   208                           	global	_key_press_time_count
   209                           	global	_key_release
   210                           	global	_run_limit_display_en
   211                           	global	_sleep_led_dir
   212                           	global	_switch_mode_time_out
   213                           	global	_under_volt_display_En
   214                           	global	_motor_intr_count
   215                           	global	_ADCON0
   216  001F                     _ADCON0	set	31
   217                           	global	_ADRESH
   218  001E                     _ADRESH	set	30
   219                           	global	_CCP1CON
   220  0015                     _CCP1CON	set	21
   221                           	global	_CCPR1L
   222  0013                     _CCPR1L	set	19
   223                           	global	_CMCON0
   224  0019                     _CMCON0	set	25
   225                           	global	_INTCON
   226  000B                     _INTCON	set	11
   227                           	global	_MSCKCON
   228  001B                     _MSCKCON	set	27
   229                           	global	_PIR1
   230  000C                     _PIR1	set	12
   231                           	global	_PIR2
   232  000D                     _PIR2	set	13
   233                           	global	_PORTA
   234  0005                     _PORTA	set	5
   235                           	global	_PORTC
   236  0007                     _PORTC	set	7
   237                           	global	_PWM1CON
   238  0016                     _PWM1CON	set	22
   239                           	global	_T1CON
   240  0010                     _T1CON	set	16
   241                           	global	_T2CON
   242  0012                     _T2CON	set	18
   243                           	global	_TMR1H
   244  000F                     _TMR1H	set	15
   245                           	global	_TMR1L
   246  000E                     _TMR1L	set	14
   247                           	global	_TMR2
   248  0011                     _TMR2	set	17
   249                           	global	_WDTCON
   250  0018                     _WDTCON	set	24
   251                           	global	_ADIF
   252  0069                     _ADIF	set	105
   253                           	global	_ADON
   254  00F8                     _ADON	set	248
   255                           	global	_CARRY
   256  0018                     _CARRY	set	24
   257                           	global	_GIE
   258  005F                     _GIE	set	95
   259                           	global	_GO_DONE
   260  00F9                     _GO_DONE	set	249
   261                           	global	_INTE
   262  005C                     _INTE	set	92
   263                           	global	_INTF
   264  0059                     _INTF	set	89
   265                           	global	_PAIE
   266  005B                     _PAIE	set	91
   267                           	global	_PAIF
   268  0058                     _PAIF	set	88
   269                           	global	_PEIE
   270  005E                     _PEIE	set	94
   271                           	global	_T2CKSRC
   272  00DD                     _T2CKSRC	set	221
   273                           	global	_TMR1IF
   274  0060                     _TMR1IF	set	96
   275                           	global	_TMR1ON
   276  0080                     _TMR1ON	set	128
   277                           	global	_TMR2IF
   278  0061                     _TMR2IF	set	97
   279                           	global	_TMR2ON
   280  0092                     _TMR2ON	set	146
   281                           	global	_ADCON1
   282  009F                     _ADCON1	set	159
   283                           	global	_ADRESL
   284  009E                     _ADRESL	set	158
   285                           	global	_ANSEL
   286  0091                     _ANSEL	set	145
   287                           	global	_EEADR
   288  009B                     _EEADR	set	155
   289                           	global	_EECON1
   290  009C                     _EECON1	set	156
   291                           	global	_EECON2
   292  009D                     _EECON2	set	157
   293                           	global	_EEDAT
   294  009A                     _EEDAT	set	154
   295                           	global	_EEDATA
   296  009A                     _EEDATA	set	154
   297                           	global	_IOCA
   298  0096                     _IOCA	set	150
   299                           	global	_OSCCON
   300  008F                     _OSCCON	set	143
   301                           	global	_PCON
   302  008E                     _PCON	set	142
   303                           	global	_PIE1
   304  008C                     _PIE1	set	140
   305                           	global	_PIE2
   306  008D                     _PIE2	set	141
   307                           	global	_PR2
   308  0092                     _PR2	set	146
   309                           	global	_TRISA
   310  0085                     _TRISA	set	133
   311                           	global	_TRISC
   312  0087                     _TRISC	set	135
   313                           	global	_WPD
   314  0089                     _WPD	set	137
   315                           	global	_WPUA
   316  0095                     _WPUA	set	149
   317                           	global	_ADIE
   318  0469                     _ADIE	set	1129
   319                           	global	_ANSEL5
   320  048D                     _ANSEL5	set	1165
   321                           	global	_INTEDG
   322  040E                     _INTEDG	set	1038
   323                           	global	_RD
   324  04E0                     _RD	set	1248
   325                           	global	_TMR1IE
   326  0460                     _TMR1IE	set	1120
   327                           	global	_TRISC3
   328  043B                     _TRISC3	set	1083
   329                           	global	_WR
   330  04E8                     _WR	set	1256
   331                           	global	_WREN1
   332  04E2                     _WREN1	set	1250
   333                           	global	_WREN2
   334  04E4                     _WREN2	set	1252
   335                           	global	_WREN3
   336  04E5                     _WREN3	set	1253
   337                           	global	_PR3L
   338  010E                     _PR3L	set	270
   339                           	global	_PR4L
   340  0114                     _PR4L	set	276
   341                           	global	_PR5L
   342  011A                     _PR5L	set	282
   343                           	global	_PWM3CR0
   344  010F                     _PWM3CR0	set	271
   345                           	global	_PWM3CR1
   346  0110                     _PWM3CR1	set	272
   347                           	global	_PWM4CR0
   348  0115                     _PWM4CR0	set	277
   349                           	global	_PWM4CR1
   350  0116                     _PWM4CR1	set	278
   351                           	global	_PWM5CR0
   352  011B                     _PWM5CR0	set	283
   353                           	global	_PWM5CR1
   354  011C                     _PWM5CR1	set	284
   355                           	global	_T3CKDIV
   356  0111                     _T3CKDIV	set	273
   357                           	global	_T4CKDIV
   358  0117                     _T4CKDIV	set	279
   359                           	global	_T5CKDIV
   360  011D                     _T5CKDIV	set	285
   361                           	global	_TMR3H
   362  010D                     _TMR3H	set	269
   363                           	global	_TMR3L
   364  010C                     _TMR3L	set	268
   365                           	global	_TMR4H
   366  0113                     _TMR4H	set	275
   367                           	global	_TMR4L
   368  0112                     _TMR4L	set	274
   369                           	global	_TMR5H
   370  0119                     _TMR5H	set	281
   371                           	global	_TMR5L
   372  0118                     _TMR5L	set	280
   373                           	global	_TMR3IE
   374  0881                     _TMR3IE	set	2177
   375                           	global	_TMR3IF
   376  0880                     _TMR3IF	set	2176
   377                           	global	_TMR3ON
   378  0882                     _TMR3ON	set	2178
   379                           	global	_TMR4IE
   380  08B1                     _TMR4IE	set	2225
   381                           	global	_TMR4IF
   382  08B0                     _TMR4IF	set	2224
   383                           	global	_TMR4ON
   384  08B2                     _TMR4ON	set	2226
   385                           	global	_TMR5IE
   386  08E1                     _TMR5IE	set	2273
   387                           	global	_TMR5IF
   388  08E0                     _TMR5IF	set	2272
   389                           	global	_TMR5ON
   390  08E2                     _TMR5ON	set	2274
   391                           	global	_WREN
   392  0C62                     _WREN	set	3170
   393                           	file	"ms83fxx02_motorctrl.as"
   394                           	line	#
   395                           psect cinit,class=CODE,delta=2
   396                           global start_initialization
   397  0BCB                     start_initialization:
   398                           
   399                           psect	bssCOMMON,class=COMMON,space=1
   400                           global __pbssCOMMON
   401  007D                     __pbssCOMMON:
   402  007D                     _motor_intr_count:
   403  007D                            ds      1
   404                           
   405                           psect	dataCOMMON,class=COMMON,space=1
   406                           global __pdataCOMMON
   407  007B                     __pdataCOMMON:
   408                           	file	"MS83FXX02_KEY.C"
   409                           	line	22
   410  007B                     _key_status:
   411  007B                            ds      1
   412                           
   413                           psect	dataCOMMON
   414                           	file	"ms83fxx02_motor.c"
   415                           	line	45
   416  007C                     _motor_status:
   417  007C                            ds      1
   418                           
   419                           psect	bssBANK0,class=BANK0,space=1
   420                           global __pbssBANK0
   421  0020                     __pbssBANK0:
   422  0020                     _battery_value:
   423  0020                            ds      20
   424                           
   425  0034                     _charge_time_out:
   426  0034                            ds      2
   427                           
   428  0036                     _motor_oper_record:
   429  0036                            ds      2
   430                           
   431  0038                     _sleep_led_duty:
   432  0038                            ds      2
   433                           
   434  003A                     _battery_handle_flag:
   435  003A                            ds      1
   436                           
   437  003B                     _battery_sample_count:
   438  003B                            ds      1
   439                           
   440  003C                     _charge_detect_count:
   441  003C                            ds      1
   442                           
   443  003D                     _detect_under_voltage:
   444  003D                            ds      1
   445                           
   446  003E                     _device_mode:
   447  003E                            ds      1
   448                           
   449  003F                     _key_press:
   450  003F                            ds      1
   451                           
   452  0040                     _key_press_flag:
   453  0040                            ds      1
   454                           
   455  0041                     _key_press_time_count:
   456  0041                            ds      1
   457                           
   458  0042                     _key_release:
   459  0042                            ds      1
   460                           
   461  0043                     _run_limit_display_en:
   462  0043                            ds      1
   463                           
   464  0044                     _sleep_led_dir:
   465  0044                            ds      1
   466                           
   467  0045                     _switch_mode_time_out:
   468  0045                            ds      1
   469                           
   470  0046                     _under_volt_display_En:
   471  0046                            ds      1
   472                           
   473                           psect	dataBANK0,class=BANK0,space=1
   474                           global __pdataBANK0
   475  0069                     __pdataBANK0:
   476                           	file	"ms83fxx02_led_timer.c"
   477                           	line	34
   478  0069                     _current_period_type:
   479  0069                            ds      1
   480                           
   481                           psect	dataBANK0
   482                           	file	"ms83fxx02_motor.c"
   483                           	line	54
   484  006A                     _motor_timing_running_flag:
   485  006A                            ds      1
   486                           
   487                           psect clrtext,class=CODE,delta=2
   488                           global clear_ram
   489                           ;	Called with FSR containing the base address, and
   490                           ;	W with the last address+1
   491  09DD                     clear_ram:
   492  09DD  0064               	clrwdt			;clear the watchdog before getting into this loop
   493  09DE                     clrloop:
   494  09DE  0180               	clrf	indf		;clear RAM location pointed to by FSR
   495  09DF  0A84               	incf	fsr,f		;increment pointer
   496  09E0  0604               	xorwf	fsr,w		;XOR with final address
   497  09E1  1903               	btfsc	status,2	;have we reached the end yet?
   498  09E2  3400               	retlw	0		;all done for this memory range, return
   499  09E3  0604               	xorwf	fsr,w		;XOR again to restore value
   500  09E4  29DE               	goto	clrloop		;do the next byte
   501                           
   502                           ; Clear objects allocated to COMMON
   503                           psect cinit,class=CODE,delta=2
   504  0BCB  01FD               	clrf	((__pbssCOMMON)+0)&07Fh
   505                           ; Clear objects allocated to BANK0
   506                           psect cinit,class=CODE,delta=2
   507  0BCC  1383               	bcf	status, 7	;select IRP bank0
   508  0BCD  3020               	movlw	low(__pbssBANK0)
   509  0BCE  0084               	movwf	fsr
   510  0BCF  3047               	movlw	low((__pbssBANK0)+027h)
   511  0BD0  158A  21DD  158A   	fcall	clear_ram
   512                           ; Initialize objects allocated to BANK0
   513                           	global __pidataBANK0
   514                           psect cinit,class=CODE,delta=2
   515  0BD3  118A  2002  158A   	fcall	__pidataBANK0+0		;fetch initializer
   516  0BD6  00E9               	movwf	__pdataBANK0+0&07fh		
   517  0BD7  118A  2003  158A   	fcall	__pidataBANK0+1		;fetch initializer
   518  0BDA  00EA               	movwf	__pdataBANK0+1&07fh		
   519                           ; Initialize objects allocated to COMMON
   520                           	global __pidataCOMMON
   521                           psect cinit,class=CODE,delta=2
   522  0BDB  158A  21B1  158A   	fcall	__pidataCOMMON+0		;fetch initializer
   523  0BDE  00FB               	movwf	__pdataCOMMON+0&07fh		
   524  0BDF  158A  21B2  158A   	fcall	__pidataCOMMON+1		;fetch initializer
   525  0BE2  00FC               	movwf	__pdataCOMMON+1&07fh		
   526                           psect cinit,class=CODE,delta=2
   527                           global end_of_initialization
   528                           
   529                           ;End of C runtime variable initialization code
   530                           
   531  0BE3                     end_of_initialization:
   532  0BE3  0183               clrf status
   533  0BE4  118A  2AA4         ljmp _main	;jump to C main() function
   534                           psect	cstackCOMMON,class=COMMON,space=1
   535                           global __pcstackCOMMON
   536  0070                     __pcstackCOMMON:
   537                           	global	?_LED_Init
   538  0070                     ?_LED_Init:	; 0 bytes @ 0x0
   539                           	global	?_KEY_Init
   540  0070                     ?_KEY_Init:	; 0 bytes @ 0x0
   541                           	global	?_Charge_Init
   542  0070                     ?_Charge_Init:	; 0 bytes @ 0x0
   543                           	global	?_ADC_Init
   544  0070                     ?_ADC_Init:	; 0 bytes @ 0x0
   545                           	global	?_LEDTimer_INTConfig
   546  0070                     ?_LEDTimer_INTConfig:	; 0 bytes @ 0x0
   547                           	global	?_EEPROM_Init
   548  0070                     ?_EEPROM_Init:	; 0 bytes @ 0x0
   549                           	global	?_Battery_Detect
   550  0070                     ?_Battery_Detect:	; 0 bytes @ 0x0
   551                           	global	?_LED_VoltageChargeOutput
   552  0070                     ?_LED_VoltageChargeOutput:	; 0 bytes @ 0x0
   553                           	global	?_Motor_HandleStatusChangeEvt
   554  0070                     ?_Motor_HandleStatusChangeEvt:	; 0 bytes @ 0x0
   555                           	global	?_KEY_DeInit
   556  0070                     ?_KEY_DeInit:	; 0 bytes @ 0x0
   557                           	global	?_Motor_Stop
   558  0070                     ?_Motor_Stop:	; 0 bytes @ 0x0
   559                           	global	?_Motor_SetStatus
   560  0070                     ?_Motor_SetStatus:	; 0 bytes @ 0x0
   561                           	global	?_MotorOperationTimer_Stop
   562  0070                     ?_MotorOperationTimer_Stop:	; 0 bytes @ 0x0
   563                           	global	?_LEDTimer_DispRunLimitCmd
   564  0070                     ?_LEDTimer_DispRunLimitCmd:	; 0 bytes @ 0x0
   565                           	global	?_ChargeCtrl_Output
   566  0070                     ?_ChargeCtrl_Output:	; 0 bytes @ 0x0
   567                           	global	?_ChargeTimer_Cmd
   568  0070                     ?_ChargeTimer_Cmd:	; 0 bytes @ 0x0
   569                           	global	?_ChargeTimer_INTConfig
   570  0070                     ?_ChargeTimer_INTConfig:	; 0 bytes @ 0x0
   571                           	global	?_SleepLedTimer_Init
   572  0070                     ?_SleepLedTimer_Init:	; 0 bytes @ 0x0
   573                           	global	?_SetDeviceMode
   574  0070                     ?_SetDeviceMode:	; 0 bytes @ 0x0
   575                           	global	?_KEY_IntrHandler
   576  0070                     ?_KEY_IntrHandler:	; 0 bytes @ 0x0
   577                           	global	??_KEY_IntrHandler
   578  0070                     ??_KEY_IntrHandler:	; 0 bytes @ 0x0
   579                           	global	?_DebounceTimer_IntrHandler
   580  0070                     ?_DebounceTimer_IntrHandler:	; 0 bytes @ 0x0
   581                           	global	?_SwitchModeTimer_IntrHandler
   582  0070                     ?_SwitchModeTimer_IntrHandler:	; 0 bytes @ 0x0
   583                           	global	??_SwitchModeTimer_IntrHandler
   584  0070                     ??_SwitchModeTimer_IntrHandler:	; 0 bytes @ 0x0
   585                           	global	?_LEDTimer_IntrHandler
   586  0070                     ?_LEDTimer_IntrHandler:	; 0 bytes @ 0x0
   587                           	global	?_ChargeTimer_IntrHandler
   588  0070                     ?_ChargeTimer_IntrHandler:	; 0 bytes @ 0x0
   589                           	global	??_ChargeTimer_IntrHandler
   590  0070                     ??_ChargeTimer_IntrHandler:	; 0 bytes @ 0x0
   591                           	global	?_SleepLedTimer_IntrHandler
   592  0070                     ?_SleepLedTimer_IntrHandler:	; 0 bytes @ 0x0
   593                           	global	??_SleepLedTimer_IntrHandler
   594  0070                     ??_SleepLedTimer_IntrHandler:	; 0 bytes @ 0x0
   595                           	global	?_MotorOperTimer_IntrHandler
   596  0070                     ?_MotorOperTimer_IntrHandler:	; 0 bytes @ 0x0
   597                           	global	?_ChargeDetect_IntrHandler
   598  0070                     ?_ChargeDetect_IntrHandler:	; 0 bytes @ 0x0
   599                           	global	?_ADC_IntrHandler
   600  0070                     ?_ADC_IntrHandler:	; 0 bytes @ 0x0
   601                           	global	?_ADC_Enable
   602  0070                     ?_ADC_Enable:	; 0 bytes @ 0x0
   603                           	global	??_ADC_Enable
   604  0070                     ??_ADC_Enable:	; 0 bytes @ 0x0
   605                           	global	?_SwitchModeTimer_Cmd
   606  0070                     ?_SwitchModeTimer_Cmd:	; 0 bytes @ 0x0
   607                           	global	?_SwitchModeTimer_INTConfig
   608  0070                     ?_SwitchModeTimer_INTConfig:	; 0 bytes @ 0x0
   609                           	global	?_Board_Init
   610  0070                     ?_Board_Init:	; 0 bytes @ 0x0
   611                           	global	?_Driver_Init
   612  0070                     ?_Driver_Init:	; 0 bytes @ 0x0
   613                           	global	?_charge_control
   614  0070                     ?_charge_control:	; 0 bytes @ 0x0
   615                           	global	?_main
   616  0070                     ?_main:	; 0 bytes @ 0x0
   617                           	global	?_ISR
   618  0070                     ?_ISR:	; 0 bytes @ 0x0
   619                           	global	?_ChargeDetect_Init
   620  0070                     ?_ChargeDetect_Init:	; 0 bytes @ 0x0
   621                           	global	?_ChargeCtrl_Init
   622  0070                     ?_ChargeCtrl_Init:	; 0 bytes @ 0x0
   623                           	global	?_TIM1_Init
   624  0070                     ?_TIM1_Init:	; 0 bytes @ 0x0
   625                           	global	??_TIM1_Init
   626  0070                     ??_TIM1_Init:	; 0 bytes @ 0x0
   627                           	global	?_LED_DisplayRunLimit
   628  0070                     ?_LED_DisplayRunLimit:	; 0 bytes @ 0x0
   629                           	global	?_LED_UnderVoltageOutput
   630  0070                     ?_LED_UnderVoltageOutput:	; 0 bytes @ 0x0
   631                           	global	?_LEDTimer_DispUnderVoltCmd
   632  0070                     ?_LEDTimer_DispUnderVoltCmd:	; 0 bytes @ 0x0
   633                           	global	?_Motor_Init
   634  0070                     ?_Motor_Init:	; 0 bytes @ 0x0
   635                           	global	?_Motor_Start
   636  0070                     ?_Motor_Start:	; 0 bytes @ 0x0
   637                           	global	?_MotorOperationTimer_Init
   638  0070                     ?_MotorOperationTimer_Init:	; 0 bytes @ 0x0
   639                           	global	?_EEPROM_StoreMotorData
   640  0070                     ?_EEPROM_StoreMotorData:	; 0 bytes @ 0x0
   641                           	global	?_EEPROM_SetFlag
   642  0070                     ?_EEPROM_SetFlag:	; 0 bytes @ 0x0
   643                           	global	?_EEPROM_StoreModeData
   644  0070                     ?_EEPROM_StoreModeData:	; 0 bytes @ 0x0
   645                           	global	?_SleepLed_ChangeDuty
   646  0070                     ?_SleepLed_ChangeDuty:	; 0 bytes @ 0x0
   647                           	global	??_SleepLed_ChangeDuty
   648  0070                     ??_SleepLed_ChangeDuty:	; 0 bytes @ 0x0
   649                           	global	?i1_LED_UnderVoltageOutput
   650  0070                     ?i1_LED_UnderVoltageOutput:	; 0 bytes @ 0x0
   651                           	global	?i1_Motor_Init
   652  0070                     ?i1_Motor_Init:	; 0 bytes @ 0x0
   653                           	global	??i1_Motor_Init
   654  0070                     ??i1_Motor_Init:	; 0 bytes @ 0x0
   655                           	global	?i1_Motor_SetStatus
   656  0070                     ?i1_Motor_SetStatus:	; 0 bytes @ 0x0
   657                           	global	??i1_Motor_SetStatus
   658  0070                     ??i1_Motor_SetStatus:	; 0 bytes @ 0x0
   659                           	global	?i1_Motor_Stop
   660  0070                     ?i1_Motor_Stop:	; 0 bytes @ 0x0
   661                           	global	??i1_Motor_CheckRunLimit
   662  0070                     ??i1_Motor_CheckRunLimit:	; 0 bytes @ 0x0
   663                           	global	?i1_MotorOperationTimer_Init
   664  0070                     ?i1_MotorOperationTimer_Init:	; 0 bytes @ 0x0
   665                           	global	??i1_MotorOperationTimer_Init
   666  0070                     ??i1_MotorOperationTimer_Init:	; 0 bytes @ 0x0
   667                           	global	?i1_MotorOperationTimer_Stop
   668  0070                     ?i1_MotorOperationTimer_Stop:	; 0 bytes @ 0x0
   669                           	global	??i1_MotorOperationTimer_Stop
   670  0070                     ??i1_MotorOperationTimer_Stop:	; 0 bytes @ 0x0
   671                           	global	??i1_GetDeviceMode
   672  0070                     ??i1_GetDeviceMode:	; 0 bytes @ 0x0
   673                           	global	?_Motor_GetStatus
   674  0070                     ?_Motor_GetStatus:	; 1 bytes @ 0x0
   675                           	global	?_ChargeDetect_GetStatus
   676  0070                     ?_ChargeDetect_GetStatus:	; 1 bytes @ 0x0
   677                           	global	?_GetDeviceMode
   678  0070                     ?_GetDeviceMode:	; 1 bytes @ 0x0
   679                           	global	?_SwitchModeTimer_GetINTStatus
   680  0070                     ?_SwitchModeTimer_GetINTStatus:	; 1 bytes @ 0x0
   681                           	global	?_KEY_GetReleaseStatus
   682  0070                     ?_KEY_GetReleaseStatus:	; 1 bytes @ 0x0
   683                           	global	?_KEY_GetPressStatus
   684  0070                     ?_KEY_GetPressStatus:	; 1 bytes @ 0x0
   685                           	global	?_Motor_CheckRunLimit
   686  0070                     ?_Motor_CheckRunLimit:	; 1 bytes @ 0x0
   687                           	global	?i1_GPIO_ReadInputDataBit
   688  0070                     ?i1_GPIO_ReadInputDataBit:	; 1 bytes @ 0x0
   689                           	global	?i1_Motor_CheckRunLimit
   690  0070                     ?i1_Motor_CheckRunLimit:	; 1 bytes @ 0x0
   691                           	global	?i1_GetDeviceMode
   692  0070                     ?i1_GetDeviceMode:	; 1 bytes @ 0x0
   693                           	global	?_ADC_ReadData
   694  0070                     ?_ADC_ReadData:	; 2 bytes @ 0x0
   695                           	global	?___awmod
   696  0070                     ?___awmod:	; 2 bytes @ 0x0
   697                           	global	i1GPIO_ReadInputDataBit@GPIO_Pin
   698  0070                     i1GPIO_ReadInputDataBit@GPIO_Pin:	; 1 bytes @ 0x0
   699                           	global	i1MotorOperationTimer_Init@time
   700  0070                     i1MotorOperationTimer_Init@time:	; 1 bytes @ 0x0
   701                           	global	___awmod@divisor
   702  0070                     ___awmod@divisor:	; 2 bytes @ 0x0
   703  0070                     	ds	1
   704                           	global	??i1_GPIO_ReadInputDataBit
   705  0071                     ??i1_GPIO_ReadInputDataBit:	; 0 bytes @ 0x1
   706                           	global	i1GPIO_ReadInputDataBit@bitstatus
   707  0071                     i1GPIO_ReadInputDataBit@bitstatus:	; 1 bytes @ 0x1
   708                           	global	i1Motor_Init@status
   709  0071                     i1Motor_Init@status:	; 1 bytes @ 0x1
   710                           	global	i1Motor_SetStatus@status
   711  0071                     i1Motor_SetStatus@status:	; 1 bytes @ 0x1
   712  0071                     	ds	1
   713                           	global	??_ADC_ReadData
   714  0072                     ??_ADC_ReadData:	; 0 bytes @ 0x2
   715                           	global	ADC_Enable@channel
   716  0072                     ADC_Enable@channel:	; 1 bytes @ 0x2
   717                           	global	i1GPIO_ReadInputDataBit@GPIOx
   718  0072                     i1GPIO_ReadInputDataBit@GPIOx:	; 1 bytes @ 0x2
   719                           	global	___awmod@dividend
   720  0072                     ___awmod@dividend:	; 2 bytes @ 0x2
   721  0072                     	ds	1
   722                           	global	??_DebounceTimer_IntrHandler
   723  0073                     ??_DebounceTimer_IntrHandler:	; 0 bytes @ 0x3
   724                           	global	??_ChargeDetect_IntrHandler
   725  0073                     ??_ChargeDetect_IntrHandler:	; 0 bytes @ 0x3
   726                           	global	?i1_GPIO_WriteBit
   727  0073                     ?i1_GPIO_WriteBit:	; 0 bytes @ 0x3
   728                           	global	i1GPIO_WriteBit@GPIO_Pin
   729  0073                     i1GPIO_WriteBit@GPIO_Pin:	; 1 bytes @ 0x3
   730  0073                     	ds	1
   731                           	global	??___awmod
   732  0074                     ??___awmod:	; 0 bytes @ 0x4
   733                           	global	i1GPIO_WriteBit@BitVal
   734  0074                     i1GPIO_WriteBit@BitVal:	; 1 bytes @ 0x4
   735  0074                     	ds	1
   736                           	global	??i1_GPIO_WriteBit
   737  0075                     ??i1_GPIO_WriteBit:	; 0 bytes @ 0x5
   738                           	global	___awmod@counter
   739  0075                     ___awmod@counter:	; 1 bytes @ 0x5
   740  0075                     	ds	1
   741                           	global	___awmod@sign
   742  0076                     ___awmod@sign:	; 1 bytes @ 0x6
   743                           	global	i1GPIO_WriteBit@GPIOx
   744  0076                     i1GPIO_WriteBit@GPIOx:	; 1 bytes @ 0x6
   745                           	global	ADC_ReadData@battery_value
   746  0076                     ADC_ReadData@battery_value:	; 2 bytes @ 0x6
   747  0076                     	ds	1
   748                           	global	??_LED_DisplayRunLimit
   749  0077                     ??_LED_DisplayRunLimit:	; 0 bytes @ 0x7
   750                           	global	??i1_LED_UnderVoltageOutput
   751  0077                     ??i1_LED_UnderVoltageOutput:	; 0 bytes @ 0x7
   752                           	global	??i1_Motor_Stop
   753  0077                     ??i1_Motor_Stop:	; 0 bytes @ 0x7
   754  0077                     	ds	1
   755                           	global	??_MotorOperTimer_IntrHandler
   756  0078                     ??_MotorOperTimer_IntrHandler:	; 0 bytes @ 0x8
   757                           	global	??_ADC_IntrHandler
   758  0078                     ??_ADC_IntrHandler:	; 0 bytes @ 0x8
   759  0078                     	ds	1
   760                           	global	i1LED_UnderVoltageOutput@BitVal
   761  0079                     i1LED_UnderVoltageOutput@BitVal:	; 1 bytes @ 0x9
   762  0079                     	ds	1
   763                           	global	??_LEDTimer_IntrHandler
   764  007A                     ??_LEDTimer_IntrHandler:	; 0 bytes @ 0xA
   765  007A                     	ds	1
   766                           psect	cstackBANK0,class=BANK0,space=1
   767                           global __pcstackBANK0
   768  0047                     __pcstackBANK0:
   769                           	global	??_ISR
   770  0047                     ??_ISR:	; 0 bytes @ 0x0
   771  0047                     	ds	4
   772                           	global	??_ADC_Init
   773  004B                     ??_ADC_Init:	; 0 bytes @ 0x4
   774                           	global	?_LEDTimer_Cmd
   775  004B                     ?_LEDTimer_Cmd:	; 0 bytes @ 0x4
   776                           	global	??_LEDTimer_INTConfig
   777  004B                     ??_LEDTimer_INTConfig:	; 0 bytes @ 0x4
   778                           	global	?_GPIO_WriteBit
   779  004B                     ?_GPIO_WriteBit:	; 0 bytes @ 0x4
   780                           	global	??_Motor_GetStatus
   781  004B                     ??_Motor_GetStatus:	; 0 bytes @ 0x4
   782                           	global	??_Motor_SetStatus
   783  004B                     ??_Motor_SetStatus:	; 0 bytes @ 0x4
   784                           	global	??_MotorOperationTimer_Stop
   785  004B                     ??_MotorOperationTimer_Stop:	; 0 bytes @ 0x4
   786                           	global	??_LEDTimer_DispRunLimitCmd
   787  004B                     ??_LEDTimer_DispRunLimitCmd:	; 0 bytes @ 0x4
   788                           	global	??_ChargeTimer_Cmd
   789  004B                     ??_ChargeTimer_Cmd:	; 0 bytes @ 0x4
   790                           	global	??_ChargeTimer_INTConfig
   791  004B                     ??_ChargeTimer_INTConfig:	; 0 bytes @ 0x4
   792                           	global	??_SetDeviceMode
   793  004B                     ??_SetDeviceMode:	; 0 bytes @ 0x4
   794                           	global	??_GetDeviceMode
   795  004B                     ??_GetDeviceMode:	; 0 bytes @ 0x4
   796                           	global	?_GPIO_Init
   797  004B                     ?_GPIO_Init:	; 0 bytes @ 0x4
   798                           	global	?_GPIO_INTConfig
   799  004B                     ?_GPIO_INTConfig:	; 0 bytes @ 0x4
   800                           	global	?_EEPROM_Write
   801  004B                     ?_EEPROM_Write:	; 0 bytes @ 0x4
   802                           	global	??_SwitchModeTimer_Cmd
   803  004B                     ??_SwitchModeTimer_Cmd:	; 0 bytes @ 0x4
   804                           	global	??_SwitchModeTimer_INTConfig
   805  004B                     ??_SwitchModeTimer_INTConfig:	; 0 bytes @ 0x4
   806                           	global	??_SwitchModeTimer_GetINTStatus
   807  004B                     ??_SwitchModeTimer_GetINTStatus:	; 0 bytes @ 0x4
   808                           	global	??_Board_Init
   809  004B                     ??_Board_Init:	; 0 bytes @ 0x4
   810                           	global	??_KEY_GetReleaseStatus
   811  004B                     ??_KEY_GetReleaseStatus:	; 0 bytes @ 0x4
   812                           	global	??_KEY_GetPressStatus
   813  004B                     ??_KEY_GetPressStatus:	; 0 bytes @ 0x4
   814                           	global	??_LEDTimer_DispUnderVoltCmd
   815  004B                     ??_LEDTimer_DispUnderVoltCmd:	; 0 bytes @ 0x4
   816                           	global	??_Motor_Init
   817  004B                     ??_Motor_Init:	; 0 bytes @ 0x4
   818                           	global	??_Motor_CheckRunLimit
   819  004B                     ??_Motor_CheckRunLimit:	; 0 bytes @ 0x4
   820                           	global	??_MotorOperationTimer_Init
   821  004B                     ??_MotorOperationTimer_Init:	; 0 bytes @ 0x4
   822                           	global	?_SleepLed_Init
   823  004B                     ?_SleepLed_Init:	; 0 bytes @ 0x4
   824                           	global	?_GPIO_ReadInputDataBit
   825  004B                     ?_GPIO_ReadInputDataBit:	; 1 bytes @ 0x4
   826                           	global	?_ChargeTimer_GetCount
   827  004B                     ?_ChargeTimer_GetCount:	; 2 bytes @ 0x4
   828                           	global	?_Battery_HandleData
   829  004B                     ?_Battery_HandleData:	; 2 bytes @ 0x4
   830                           	global	?___ftpack
   831  004B                     ?___ftpack:	; 3 bytes @ 0x4
   832                           	global	EEPROM_Write@data
   833  004B                     EEPROM_Write@data:	; 1 bytes @ 0x4
   834                           	global	GPIO_Init@GPIO_InitStruct
   835  004B                     GPIO_Init@GPIO_InitStruct:	; 1 bytes @ 0x4
   836                           	global	GPIO_WriteBit@GPIO_Pin
   837  004B                     GPIO_WriteBit@GPIO_Pin:	; 1 bytes @ 0x4
   838                           	global	GPIO_ReadInputDataBit@GPIO_Pin
   839  004B                     GPIO_ReadInputDataBit@GPIO_Pin:	; 1 bytes @ 0x4
   840                           	global	GPIO_INTConfig@GPIO_Pin
   841  004B                     GPIO_INTConfig@GPIO_Pin:	; 1 bytes @ 0x4
   842                           	global	LEDTimer_Cmd@NewState
   843  004B                     LEDTimer_Cmd@NewState:	; 1 bytes @ 0x4
   844                           	global	LEDTimer_INTConfig@NewState
   845  004B                     LEDTimer_INTConfig@NewState:	; 1 bytes @ 0x4
   846                           	global	LEDTimer_DispUnderVoltCmd@NewState
   847  004B                     LEDTimer_DispUnderVoltCmd@NewState:	; 1 bytes @ 0x4
   848                           	global	LEDTimer_DispRunLimitCmd@NewState
   849  004B                     LEDTimer_DispRunLimitCmd@NewState:	; 1 bytes @ 0x4
   850                           	global	MotorOperationTimer_Init@time
   851  004B                     MotorOperationTimer_Init@time:	; 1 bytes @ 0x4
   852                           	global	SwitchModeTimer_Cmd@NewState
   853  004B                     SwitchModeTimer_Cmd@NewState:	; 1 bytes @ 0x4
   854                           	global	SwitchModeTimer_INTConfig@NewState
   855  004B                     SwitchModeTimer_INTConfig@NewState:	; 1 bytes @ 0x4
   856                           	global	ChargeTimer_Cmd@NewState
   857  004B                     ChargeTimer_Cmd@NewState:	; 1 bytes @ 0x4
   858                           	global	ChargeTimer_INTConfig@NewState
   859  004B                     ChargeTimer_INTConfig@NewState:	; 1 bytes @ 0x4
   860                           	global	SleepLed_Init@duty
   861  004B                     SleepLed_Init@duty:	; 2 bytes @ 0x4
   862                           	global	___ftpack@arg
   863  004B                     ___ftpack@arg:	; 3 bytes @ 0x4
   864  004B                     	ds	1
   865                           	global	??_LEDTimer_Cmd
   866  004C                     ??_LEDTimer_Cmd:	; 0 bytes @ 0x5
   867                           	global	??_GPIO_Init
   868  004C                     ??_GPIO_Init:	; 0 bytes @ 0x5
   869                           	global	??_GPIO_ReadInputDataBit
   870  004C                     ??_GPIO_ReadInputDataBit:	; 0 bytes @ 0x5
   871                           	global	??_EEPROM_Write
   872  004C                     ??_EEPROM_Write:	; 0 bytes @ 0x5
   873                           	global	EEPROM_Write@addr
   874  004C                     EEPROM_Write@addr:	; 1 bytes @ 0x5
   875                           	global	GPIO_WriteBit@BitVal
   876  004C                     GPIO_WriteBit@BitVal:	; 1 bytes @ 0x5
   877                           	global	GPIO_ReadInputDataBit@bitstatus
   878  004C                     GPIO_ReadInputDataBit@bitstatus:	; 1 bytes @ 0x5
   879                           	global	GPIO_INTConfig@NewState
   880  004C                     GPIO_INTConfig@NewState:	; 1 bytes @ 0x5
   881                           	global	Motor_Init@status
   882  004C                     Motor_Init@status:	; 1 bytes @ 0x5
   883                           	global	Motor_SetStatus@status
   884  004C                     Motor_SetStatus@status:	; 1 bytes @ 0x5
   885                           	global	SetDeviceMode@mode
   886  004C                     SetDeviceMode@mode:	; 1 bytes @ 0x5
   887  004C                     	ds	1
   888                           	global	??_EEPROM_Init
   889  004D                     ??_EEPROM_Init:	; 0 bytes @ 0x6
   890                           	global	??_ChargeTimer_GetCount
   891  004D                     ??_ChargeTimer_GetCount:	; 0 bytes @ 0x6
   892                           	global	??_GPIO_WriteBit
   893  004D                     ??_GPIO_WriteBit:	; 0 bytes @ 0x6
   894                           	global	??_SleepLedTimer_Init
   895  004D                     ??_SleepLedTimer_Init:	; 0 bytes @ 0x6
   896                           	global	??_GPIO_INTConfig
   897  004D                     ??_GPIO_INTConfig:	; 0 bytes @ 0x6
   898                           	global	??_EEPROM_StoreMotorData
   899  004D                     ??_EEPROM_StoreMotorData:	; 0 bytes @ 0x6
   900                           	global	??_EEPROM_SetFlag
   901  004D                     ??_EEPROM_SetFlag:	; 0 bytes @ 0x6
   902                           	global	??_EEPROM_StoreModeData
   903  004D                     ??_EEPROM_StoreModeData:	; 0 bytes @ 0x6
   904                           	global	??_Battery_HandleData
   905  004D                     ??_Battery_HandleData:	; 0 bytes @ 0x6
   906                           	global	??_SleepLed_Init
   907  004D                     ??_SleepLed_Init:	; 0 bytes @ 0x6
   908                           	global	GPIO_Init@GPIOx
   909  004D                     GPIO_Init@GPIOx:	; 1 bytes @ 0x6
   910                           	global	GPIO_ReadInputDataBit@GPIOx
   911  004D                     GPIO_ReadInputDataBit@GPIOx:	; 1 bytes @ 0x6
   912                           	global	LEDTimer_Cmd@period_type
   913  004D                     LEDTimer_Cmd@period_type:	; 1 bytes @ 0x6
   914                           	global	ADC_Init@channel
   915  004D                     ADC_Init@channel:	; 1 bytes @ 0x6
   916  004D                     	ds	1
   917                           	global	??_KEY_DeInit
   918  004E                     ??_KEY_DeInit:	; 0 bytes @ 0x7
   919                           	global	??_ChargeDetect_GetStatus
   920  004E                     ??_ChargeDetect_GetStatus:	; 0 bytes @ 0x7
   921                           	global	GPIO_WriteBit@GPIOx
   922  004E                     GPIO_WriteBit@GPIOx:	; 1 bytes @ 0x7
   923                           	global	GPIO_INTConfig@GPIOx
   924  004E                     GPIO_INTConfig@GPIOx:	; 1 bytes @ 0x7
   925                           	global	___ftpack@exp
   926  004E                     ___ftpack@exp:	; 1 bytes @ 0x7
   927  004E                     	ds	1
   928                           	global	??_LED_Init
   929  004F                     ??_LED_Init:	; 0 bytes @ 0x8
   930                           	global	??_KEY_Init
   931  004F                     ??_KEY_Init:	; 0 bytes @ 0x8
   932                           	global	??_LED_VoltageChargeOutput
   933  004F                     ??_LED_VoltageChargeOutput:	; 0 bytes @ 0x8
   934                           	global	??_Motor_Stop
   935  004F                     ??_Motor_Stop:	; 0 bytes @ 0x8
   936                           	global	??_ChargeCtrl_Output
   937  004F                     ??_ChargeCtrl_Output:	; 0 bytes @ 0x8
   938                           	global	??_ChargeDetect_Init
   939  004F                     ??_ChargeDetect_Init:	; 0 bytes @ 0x8
   940                           	global	??_ChargeCtrl_Init
   941  004F                     ??_ChargeCtrl_Init:	; 0 bytes @ 0x8
   942                           	global	?_LED_DisplayMotorStatus
   943  004F                     ?_LED_DisplayMotorStatus:	; 0 bytes @ 0x8
   944                           	global	??_LED_UnderVoltageOutput
   945  004F                     ??_LED_UnderVoltageOutput:	; 0 bytes @ 0x8
   946                           	global	LED_DisplayMotorStatus@GPIO_Pin
   947  004F                     LED_DisplayMotorStatus@GPIO_Pin:	; 1 bytes @ 0x8
   948                           	global	___ftpack@sign
   949  004F                     ___ftpack@sign:	; 1 bytes @ 0x8
   950                           	global	ChargeDetect_GetStatus@i
   951  004F                     ChargeDetect_GetStatus@i:	; 2 bytes @ 0x8
   952                           	global	KEY_DeInit@GPIO_InitStruct
   953  004F                     KEY_DeInit@GPIO_InitStruct:	; 2 bytes @ 0x8
   954  004F                     	ds	1
   955                           	global	??___ftpack
   956  0050                     ??___ftpack:	; 0 bytes @ 0x9
   957                           	global	??_LED_DisplayMotorStatus
   958  0050                     ??_LED_DisplayMotorStatus:	; 0 bytes @ 0x9
   959                           	global	ChargeDetect_Init@GPIO_InitStruct
   960  0050                     ChargeDetect_Init@GPIO_InitStruct:	; 2 bytes @ 0x9
   961                           	global	ChargeCtrl_Init@GPIO_InitStruct
   962  0050                     ChargeCtrl_Init@GPIO_InitStruct:	; 2 bytes @ 0x9
   963                           	global	KEY_Init@GPIO_InitStruct
   964  0050                     KEY_Init@GPIO_InitStruct:	; 2 bytes @ 0x9
   965                           	global	LED_Init@GPIO_InitStruct
   966  0050                     LED_Init@GPIO_InitStruct:	; 2 bytes @ 0x9
   967  0050                     	ds	1
   968                           	global	ChargeCtrl_Output@BitVal
   969  0051                     ChargeCtrl_Output@BitVal:	; 1 bytes @ 0xA
   970                           	global	LED_DisplayMotorStatus@GPIOx
   971  0051                     LED_DisplayMotorStatus@GPIOx:	; 1 bytes @ 0xA
   972                           	global	LED_VoltageChargeOutput@BitVal
   973  0051                     LED_VoltageChargeOutput@BitVal:	; 1 bytes @ 0xA
   974                           	global	LED_UnderVoltageOutput@BitVal
   975  0051                     LED_UnderVoltageOutput@BitVal:	; 1 bytes @ 0xA
   976                           	global	Battery_HandleData@temp2
   977  0051                     Battery_HandleData@temp2:	; 2 bytes @ 0xA
   978  0051                     	ds	1
   979                           	global	??_Charge_Init
   980  0052                     ??_Charge_Init:	; 0 bytes @ 0xB
   981                           	global	??_Driver_Init
   982  0052                     ??_Driver_Init:	; 0 bytes @ 0xB
   983                           	global	??_Motor_Start
   984  0052                     ??_Motor_Start:	; 0 bytes @ 0xB
   985  0052                     	ds	1
   986                           	global	?___ftge
   987  0053                     ?___ftge:	; 1 bit 
   988                           	global	Motor_Start@status
   989  0053                     Motor_Start@status:	; 1 bytes @ 0xC
   990                           	global	Battery_HandleData@average_data
   991  0053                     Battery_HandleData@average_data:	; 2 bytes @ 0xC
   992                           	global	___ftge@ff1
   993  0053                     ___ftge@ff1:	; 3 bytes @ 0xC
   994  0053                     	ds	1
   995                           	global	??_Motor_HandleStatusChangeEvt
   996  0054                     ??_Motor_HandleStatusChangeEvt:	; 0 bytes @ 0xD
   997  0054                     	ds	1
   998                           	global	Motor_HandleStatusChangeEvt@status
   999  0055                     Motor_HandleStatusChangeEvt@status:	; 1 bytes @ 0xE
  1000                           	global	Battery_HandleData@temp1
  1001  0055                     Battery_HandleData@temp1:	; 2 bytes @ 0xE
  1002  0055                     	ds	1
  1003                           	global	___ftge@ff2
  1004  0056                     ___ftge@ff2:	; 3 bytes @ 0xF
  1005  0056                     	ds	1
  1006                           	global	Battery_HandleData@i
  1007  0057                     Battery_HandleData@i:	; 1 bytes @ 0x10
  1008  0057                     	ds	2
  1009                           	global	??___ftge
  1010  0059                     ??___ftge:	; 0 bytes @ 0x12
  1011  0059                     	ds	6
  1012                           	global	?___lwtoft
  1013  005F                     ?___lwtoft:	; 3 bytes @ 0x18
  1014                           	global	___lwtoft@c
  1015  005F                     ___lwtoft@c:	; 2 bytes @ 0x18
  1016  005F                     	ds	3
  1017                           	global	??___lwtoft
  1018  0062                     ??___lwtoft:	; 0 bytes @ 0x1B
  1019  0062                     	ds	1
  1020                           	global	??_Battery_Detect
  1021  0063                     ??_Battery_Detect:	; 0 bytes @ 0x1C
  1022  0063                     	ds	1
  1023                           	global	Battery_Detect@mode
  1024  0064                     Battery_Detect@mode:	; 1 bytes @ 0x1D
  1025  0064                     	ds	1
  1026                           	global	Battery_Detect@adc_data
  1027  0065                     Battery_Detect@adc_data:	; 2 bytes @ 0x1E
  1028  0065                     	ds	2
  1029                           	global	??_charge_control
  1030  0067                     ??_charge_control:	; 0 bytes @ 0x20
  1031                           	global	charge_control@charge_count
  1032  0067                     charge_control@charge_count:	; 2 bytes @ 0x20
  1033  0067                     	ds	2
  1034                           	global	??_main
  1035  0069                     ??_main:	; 0 bytes @ 0x22
  1036 ;;Data sizes: Strings 0, constant 0, data 4, bss 40, persistent 0 stack 0
  1037 ;;Auto spaces:   Size  Autos    Used
  1038 ;; COMMON          14     11      14
  1039 ;; BANK0           80     34      75
  1040 ;; BANK1           80      0       0
  1041 ;; BANK2           80      0       0
  1042                           
  1043 ;;
  1044 ;; Pointer list with targets:
  1045                           
  1046 ;; ?___ftpack	float  size(1) Largest target is 0
  1047 ;;
  1048 ;; ?_ChargeTimer_GetCount	unsigned int  size(1) Largest target is 0
  1049 ;;
  1050 ;; ?___lwtoft	float  size(1) Largest target is 0
  1051 ;;
  1052 ;; ?_Battery_HandleData	unsigned int  size(1) Largest target is 0
  1053 ;;
  1054 ;; ?_ADC_ReadData	unsigned short  size(1) Largest target is 0
  1055 ;;
  1056 ;; ?___awmod	int  size(1) Largest target is 0
  1057 ;;
  1058 ;; GPIO_Init@GPIO_InitStruct	PTR struct . size(1) Largest target is 2
  1059 ;;		 -> LED_Init@GPIO_InitStruct(BANK0[2]), KEY_Init@GPIO_InitStruct(BANK0[2]), KEY_DeInit@GPIO_InitStruct(BANK0[2]), Ch
       argeCtrl_Init@GPIO_InitStruct(BANK0[2]), 
  1060 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(BANK0[2]), 
  1061 ;;
  1062                           
  1063                           
  1064 ;;
  1065 ;; Critical Paths under _main in COMMON
  1066 ;;
  1067 ;;   None.
  1068 ;;
  1069 ;; Critical Paths under _ISR in COMMON
  1070 ;;
  1071 ;;   _ISR->_LEDTimer_IntrHandler
  1072 ;;   _MotorOperTimer_IntrHandler->i1_Motor_Stop
  1073 ;;   _LEDTimer_IntrHandler->i1_LED_UnderVoltageOutput
  1074 ;;   _LEDTimer_IntrHandler->_LED_DisplayRunLimit
  1075 ;;   i1_Motor_Stop->i1_GPIO_WriteBit
  1076 ;;   i1_LED_UnderVoltageOutput->i1_GPIO_WriteBit
  1077 ;;   _LED_DisplayRunLimit->i1_GPIO_WriteBit
  1078 ;;   _ADC_IntrHandler->_ADC_ReadData
  1079 ;;   _ChargeDetect_IntrHandler->i1_GPIO_ReadInputDataBit
  1080 ;;   _DebounceTimer_IntrHandler->i1_GPIO_ReadInputDataBit
  1081 ;;   i1_GPIO_WriteBit->i1_GPIO_ReadInputDataBit
  1082 ;;
  1083 ;; Critical Paths under _main in BANK0
  1084 ;;
  1085 ;;   _main->_charge_control
  1086 ;;   _Motor_HandleStatusChangeEvt->_Motor_Start
  1087 ;;   _charge_control->_Battery_Detect
  1088 ;;   _Driver_Init->_LED_Init
  1089 ;;   _Driver_Init->_KEY_Init
  1090 ;;   _Motor_Start->_LED_DisplayMotorStatus
  1091 ;;   _Battery_Detect->___lwtoft
  1092 ;;   _Charge_Init->_ChargeDetect_Init
  1093 ;;   _Charge_Init->_ChargeCtrl_Init
  1094 ;;   ___lwtoft->___ftge
  1095 ;;   _EEPROM_StoreModeData->_EEPROM_Write
  1096 ;;   _EEPROM_SetFlag->_EEPROM_Write
  1097 ;;   _EEPROM_StoreMotorData->_EEPROM_Write
  1098 ;;   _LED_UnderVoltageOutput->_GPIO_WriteBit
  1099 ;;   _LED_DisplayMotorStatus->_GPIO_WriteBit
  1100 ;;   _ChargeCtrl_Init->_GPIO_WriteBit
  1101 ;;   _ChargeDetect_Init->_GPIO_INTConfig
  1102 ;;   _ChargeDetect_GetStatus->_GPIO_ReadInputDataBit
  1103 ;;   _SleepLedTimer_Init->_SleepLed_Init
  1104 ;;   _ChargeCtrl_Output->_GPIO_WriteBit
  1105 ;;   _Motor_Stop->_GPIO_WriteBit
  1106 ;;   _KEY_DeInit->_GPIO_Init
  1107 ;;   _LED_VoltageChargeOutput->_GPIO_WriteBit
  1108 ;;   _EEPROM_Init->_EEPROM_Write
  1109 ;;   _KEY_Init->_GPIO_INTConfig
  1110 ;;   _LED_Init->_GPIO_WriteBit
  1111 ;;   ___ftge->___ftpack
  1112 ;;
  1113 ;; Critical Paths under _ISR in BANK0
  1114 ;;
  1115 ;;   None.
  1116 ;;
  1117 ;; Critical Paths under _main in BANK1
  1118 ;;
  1119 ;;   None.
  1120 ;;
  1121 ;; Critical Paths under _ISR in BANK1
  1122 ;;
  1123 ;;   None.
  1124 ;;
  1125 ;; Critical Paths under _main in BANK2
  1126 ;;
  1127 ;;   None.
  1128 ;;
  1129 ;; Critical Paths under _ISR in BANK2
  1130 ;;
  1131 ;;   None.
  1132                           
  1133 ;;
  1134 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1135 ;;
  1136                           
  1137 ;;
  1138 ;;Call Graph Tables:
  1139 ;;
  1140 ;; ---------------------------------------------------------------------------------
  1141 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1142 ;; ---------------------------------------------------------------------------------
  1143 ;; (0) _main                                                 0     0      0    6758
  1144 ;;                         _Board_Init
  1145 ;;                        _Driver_Init
  1146 ;;                    _Motor_GetStatus
  1147 ;;        _Motor_HandleStatusChangeEvt
  1148 ;;                           _LED_Init
  1149 ;;                         _KEY_DeInit
  1150 ;;                         _Motor_Stop
  1151 ;;                    _Motor_SetStatus
  1152 ;;           _MotorOperationTimer_Stop
  1153 ;;           _LEDTimer_DispRunLimitCmd
  1154 ;;                       _LEDTimer_Cmd
  1155 ;;                 _LEDTimer_INTConfig
  1156 ;;                  _ChargeCtrl_Output
  1157 ;;            _LED_VoltageChargeOutput
  1158 ;;                           _ADC_Init
  1159 ;;                    _ChargeTimer_Cmd
  1160 ;;              _ChargeTimer_INTConfig
  1161 ;;                 _SleepLedTimer_Init
  1162 ;;                     _charge_control
  1163 ;;             _ChargeDetect_GetStatus
  1164 ;;                      _SetDeviceMode
  1165 ;;                      _GetDeviceMode
  1166 ;; ---------------------------------------------------------------------------------
  1167 ;; (1) _Motor_HandleStatusChangeEvt                          2     2      0     814
  1168 ;;                                             13 BANK0      2     2      0
  1169 ;;                _Motor_CheckRunLimit
  1170 ;;               _KEY_GetReleaseStatus
  1171 ;;                    _Motor_SetStatus
  1172 ;;                        _Motor_Start
  1173 ;;           _MotorOperationTimer_Stop
  1174 ;;           _MotorOperationTimer_Init
  1175 ;;       _SwitchModeTimer_GetINTStatus
  1176 ;;                         _Motor_Stop
  1177 ;;          _SwitchModeTimer_INTConfig
  1178 ;;                _SwitchModeTimer_Cmd
  1179 ;;           _LEDTimer_DispRunLimitCmd
  1180 ;;                 _KEY_GetPressStatus
  1181 ;;                      _GPIO_WriteBit
  1182 ;; ---------------------------------------------------------------------------------
  1183 ;; (1) _charge_control                                       2     2      0    2521
  1184 ;;                                             32 BANK0      2     2      0
  1185 ;;               _ChargeTimer_GetCount
  1186 ;;                     _Battery_Detect
  1187 ;;            _LED_VoltageChargeOutput
  1188 ;;                      _GPIO_WriteBit
  1189 ;; ---------------------------------------------------------------------------------
  1190 ;; (1) _Driver_Init                                          0     0      0    1830
  1191 ;;                           _LED_Init
  1192 ;;                           _KEY_Init
  1193 ;;                        _Charge_Init
  1194 ;;                           _ADC_Init
  1195 ;;                       _LEDTimer_Cmd
  1196 ;;                 _LEDTimer_INTConfig
  1197 ;;                        _EEPROM_Init
  1198 ;; ---------------------------------------------------------------------------------
  1199 ;; (2) _Motor_Start                                          2     2      0     352
  1200 ;;                                             11 BANK0      2     2      0
  1201 ;;             _LED_DisplayMotorStatus
  1202 ;;                         _Motor_Init
  1203 ;;                _SwitchModeTimer_Cmd
  1204 ;;          _SwitchModeTimer_INTConfig
  1205 ;; ---------------------------------------------------------------------------------
  1206 ;; (2) _Battery_Detect                                       4     4      0    2124
  1207 ;;                                             28 BANK0      4     4      0
  1208 ;;                 _Battery_HandleData
  1209 ;;                      _GetDeviceMode
  1210 ;;                           ___lwtoft
  1211 ;;                             ___ftge
  1212 ;;                     _EEPROM_SetFlag
  1213 ;;               _EEPROM_StoreModeData
  1214 ;;              _EEPROM_StoreMotorData
  1215 ;;             _LED_UnderVoltageOutput
  1216 ;;                           _LED_Init
  1217 ;;                         _KEY_DeInit
  1218 ;;                         _Motor_Stop
  1219 ;;                    _Motor_SetStatus
  1220 ;;           _MotorOperationTimer_Stop
  1221 ;;          _LEDTimer_DispUnderVoltCmd
  1222 ;;                      _GPIO_WriteBit
  1223 ;; ---------------------------------------------------------------------------------
  1224 ;; (2) _Charge_Init                                          0     0      0     835
  1225 ;;                  _ChargeDetect_Init
  1226 ;;                    _ChargeCtrl_Init
  1227 ;; ---------------------------------------------------------------------------------
  1228 ;; (3) ___lwtoft                                             4     1      3     231
  1229 ;;                                             24 BANK0      4     1      3
  1230 ;;                           ___ftpack
  1231 ;;                             ___ftge (ARG)
  1232 ;; ---------------------------------------------------------------------------------
  1233 ;; (3) _EEPROM_StoreModeData                                 1     1      0      44
  1234 ;;                                              6 BANK0      1     1      0
  1235 ;;                       _EEPROM_Write
  1236 ;; ---------------------------------------------------------------------------------
  1237 ;; (3) _EEPROM_SetFlag                                       0     0      0      44
  1238 ;;                       _EEPROM_Write
  1239 ;; ---------------------------------------------------------------------------------
  1240 ;; (3) _EEPROM_StoreMotorData                                1     1      0      44
  1241 ;;                                              6 BANK0      1     1      0
  1242 ;;                       _EEPROM_Write
  1243 ;; ---------------------------------------------------------------------------------
  1244 ;; (3) _LED_UnderVoltageOutput                               3     3      0     176
  1245 ;;                                              8 BANK0      3     3      0
  1246 ;;                      _GPIO_WriteBit
  1247 ;; ---------------------------------------------------------------------------------
  1248 ;; (3) _LED_DisplayMotorStatus                               3     2      1     198
  1249 ;;                                              8 BANK0      3     2      1
  1250 ;;                      _GPIO_WriteBit
  1251 ;; ---------------------------------------------------------------------------------
  1252 ;; (3) _ChargeCtrl_Init                                      3     3      0     361
  1253 ;;                                              8 BANK0      3     3      0
  1254 ;;                          _GPIO_Init
  1255 ;;                      _GPIO_WriteBit
  1256 ;; ---------------------------------------------------------------------------------
  1257 ;; (3) _ChargeDetect_Init                                    3     3      0     474
  1258 ;;                                              8 BANK0      3     3      0
  1259 ;;                          _GPIO_Init
  1260 ;;              _GPIO_ReadInputDataBit
  1261 ;;                     _GPIO_INTConfig
  1262 ;; ---------------------------------------------------------------------------------
  1263 ;; (1) _ChargeDetect_GetStatus                               3     3      0     136
  1264 ;;                                              7 BANK0      3     3      0
  1265 ;;              _GPIO_ReadInputDataBit
  1266 ;; ---------------------------------------------------------------------------------
  1267 ;; (1) _SleepLedTimer_Init                                   0     0      0      44
  1268 ;;                      _SleepLed_Init
  1269 ;; ---------------------------------------------------------------------------------
  1270 ;; (1) _ChargeCtrl_Output                                    3     3      0     176
  1271 ;;                                              8 BANK0      3     3      0
  1272 ;;                      _GPIO_WriteBit
  1273 ;; ---------------------------------------------------------------------------------
  1274 ;; (3) _MotorOperationTimer_Stop                             0     0      0       0
  1275 ;;                _Motor_CheckRunLimit
  1276 ;; ---------------------------------------------------------------------------------
  1277 ;; (3) _Motor_Stop                                           1     1      0     154
  1278 ;;                                              8 BANK0      1     1      0
  1279 ;;                      _GPIO_WriteBit
  1280 ;; ---------------------------------------------------------------------------------
  1281 ;; (3) _KEY_DeInit                                           3     3      0     207
  1282 ;;                                              7 BANK0      3     3      0
  1283 ;;                          _GPIO_Init
  1284 ;; ---------------------------------------------------------------------------------
  1285 ;; (2) _LED_VoltageChargeOutput                              3     3      0     176
  1286 ;;                                              8 BANK0      3     3      0
  1287 ;;                      _GPIO_WriteBit
  1288 ;; ---------------------------------------------------------------------------------
  1289 ;; (2) _EEPROM_Init                                          1     1      0      44
  1290 ;;                                              6 BANK0      1     1      0
  1291 ;;                       _EEPROM_Write
  1292 ;; ---------------------------------------------------------------------------------
  1293 ;; (2) _KEY_Init                                             3     3      0     361
  1294 ;;                                              8 BANK0      3     3      0
  1295 ;;                          _GPIO_Init
  1296 ;;                     _GPIO_INTConfig
  1297 ;; ---------------------------------------------------------------------------------
  1298 ;; (3) _LED_Init                                             3     3      0     502
  1299 ;;                                              8 BANK0      3     3      0
  1300 ;;                          _GPIO_Init
  1301 ;;                      _GPIO_WriteBit
  1302 ;; ---------------------------------------------------------------------------------
  1303 ;; (3) ___ftge                                              12     6      6     136
  1304 ;;                                             12 BANK0     12     6      6
  1305 ;;                           ___ftpack (ARG)
  1306 ;; ---------------------------------------------------------------------------------
  1307 ;; (4) ___ftpack                                             8     3      5     209
  1308 ;;                                              4 BANK0      8     3      5
  1309 ;; ---------------------------------------------------------------------------------
  1310 ;; (2) _SleepLed_Init                                        2     0      2      44
  1311 ;;                                              4 BANK0      2     0      2
  1312 ;; ---------------------------------------------------------------------------------
  1313 ;; (3) _Battery_HandleData                                  13    11      2     252
  1314 ;;                                              4 BANK0     13    11      2
  1315 ;; ---------------------------------------------------------------------------------
  1316 ;; (2) _SwitchModeTimer_GetINTStatus                         0     0      0       0
  1317 ;; ---------------------------------------------------------------------------------
  1318 ;; (2) _MotorOperationTimer_Init                             1     1      0      44
  1319 ;;                                              4 BANK0      1     1      0
  1320 ;; ---------------------------------------------------------------------------------
  1321 ;; (4) _Motor_CheckRunLimit                                  0     0      0       0
  1322 ;; ---------------------------------------------------------------------------------
  1323 ;; (2) _SwitchModeTimer_INTConfig                            1     1      0      22
  1324 ;;                                              4 BANK0      1     1      0
  1325 ;; ---------------------------------------------------------------------------------
  1326 ;; (2) _SwitchModeTimer_Cmd                                  1     1      0      22
  1327 ;;                                              4 BANK0      1     1      0
  1328 ;; ---------------------------------------------------------------------------------
  1329 ;; (3) _Motor_Init                                           2     2      0      66
  1330 ;;                                              4 BANK0      2     2      0
  1331 ;; ---------------------------------------------------------------------------------
  1332 ;; (3) _LEDTimer_DispUnderVoltCmd                            1     1      0      22
  1333 ;;                                              4 BANK0      1     1      0
  1334 ;; ---------------------------------------------------------------------------------
  1335 ;; (2) _KEY_GetPressStatus                                   0     0      0       0
  1336 ;; ---------------------------------------------------------------------------------
  1337 ;; (2) _KEY_GetReleaseStatus                                 0     0      0       0
  1338 ;; ---------------------------------------------------------------------------------
  1339 ;; (4) _EEPROM_Write                                         2     1      1      44
  1340 ;;                                              4 BANK0      2     1      1
  1341 ;; ---------------------------------------------------------------------------------
  1342 ;; (4) _GPIO_INTConfig                                       4     2      2     154
  1343 ;;                                              4 BANK0      4     2      2
  1344 ;; ---------------------------------------------------------------------------------
  1345 ;; (2) _GPIO_ReadInputDataBit                                3     2      1     113
  1346 ;;                                              4 BANK0      3     2      1
  1347 ;; ---------------------------------------------------------------------------------
  1348 ;; (4) _GPIO_Init                                            3     2      1     154
  1349 ;;                                              4 BANK0      3     2      1
  1350 ;; ---------------------------------------------------------------------------------
  1351 ;; (1) _GetDeviceMode                                        0     0      0       0
  1352 ;; ---------------------------------------------------------------------------------
  1353 ;; (1) _SetDeviceMode                                        2     2      0      22
  1354 ;;                                              4 BANK0      2     2      0
  1355 ;; ---------------------------------------------------------------------------------
  1356 ;; (1) _ChargeTimer_INTConfig                                1     1      0      22
  1357 ;;                                              4 BANK0      1     1      0
  1358 ;; ---------------------------------------------------------------------------------
  1359 ;; (1) _ChargeTimer_Cmd                                      1     1      0      22
  1360 ;;                                              4 BANK0      1     1      0
  1361 ;; ---------------------------------------------------------------------------------
  1362 ;; (1) _LEDTimer_DispRunLimitCmd                             1     1      0      22
  1363 ;;                                              4 BANK0      1     1      0
  1364 ;; ---------------------------------------------------------------------------------
  1365 ;; (3) _Motor_SetStatus                                      2     2      0      22
  1366 ;;                                              4 BANK0      2     2      0
  1367 ;; ---------------------------------------------------------------------------------
  1368 ;; (1) _Motor_GetStatus                                      0     0      0       0
  1369 ;; ---------------------------------------------------------------------------------
  1370 ;; (2) _GPIO_WriteBit                                        4     2      2     154
  1371 ;;                                              4 BANK0      4     2      2
  1372 ;; ---------------------------------------------------------------------------------
  1373 ;; (2) _ChargeTimer_GetCount                                 2     0      2       0
  1374 ;;                                              4 BANK0      2     0      2
  1375 ;; ---------------------------------------------------------------------------------
  1376 ;; (1) _LEDTimer_INTConfig                                   1     1      0      22
  1377 ;;                                              4 BANK0      1     1      0
  1378 ;; ---------------------------------------------------------------------------------
  1379 ;; (1) _LEDTimer_Cmd                                         3     2      1      44
  1380 ;;                                              4 BANK0      3     2      1
  1381 ;; ---------------------------------------------------------------------------------
  1382 ;; (1) _ADC_Init                                             3     3      0      22
  1383 ;;                                              4 BANK0      3     3      0
  1384 ;; ---------------------------------------------------------------------------------
  1385 ;; (1) _Board_Init                                           0     0      0       0
  1386 ;; ---------------------------------------------------------------------------------
  1387 ;; Estimated maximum stack depth 4
  1388 ;; ---------------------------------------------------------------------------------
  1389 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1390 ;; ---------------------------------------------------------------------------------
  1391 ;; (5) _ISR                                                  4     4      0    3893
  1392 ;;                                              0 BANK0      4     4      0
  1393 ;;                    _KEY_IntrHandler
  1394 ;;          _DebounceTimer_IntrHandler
  1395 ;;                    i1_GetDeviceMode
  1396 ;;        _SwitchModeTimer_IntrHandler
  1397 ;;               _LEDTimer_IntrHandler
  1398 ;;            _ChargeTimer_IntrHandler
  1399 ;;          _SleepLedTimer_IntrHandler
  1400 ;;         _MotorOperTimer_IntrHandler
  1401 ;;           _ChargeDetect_IntrHandler
  1402 ;;                    _ADC_IntrHandler
  1403 ;; ---------------------------------------------------------------------------------
  1404 ;; (6) _MotorOperTimer_IntrHandler                           2     2      0    1245
  1405 ;;                                              8 COMMON     2     2      0
  1406 ;;              i1_Motor_CheckRunLimit
  1407 ;;                            ___awmod
  1408 ;;         i1_MotorOperationTimer_Init
  1409 ;;                       i1_Motor_Stop
  1410 ;;         i1_MotorOperationTimer_Stop
  1411 ;;                  i1_Motor_SetStatus
  1412 ;;                       i1_Motor_Init
  1413 ;; ---------------------------------------------------------------------------------
  1414 ;; (6) _LEDTimer_IntrHandler                                 1     1      0    1859
  1415 ;;                                             10 COMMON     1     1      0
  1416 ;;            i1_GPIO_ReadInputDataBit
  1417 ;;           i1_LED_UnderVoltageOutput
  1418 ;;                _LED_DisplayRunLimit
  1419 ;;                         _ADC_Enable
  1420 ;; ---------------------------------------------------------------------------------
  1421 ;; (7) i1_MotorOperationTimer_Stop                           0     0      0       0
  1422 ;;              i1_Motor_CheckRunLimit
  1423 ;; ---------------------------------------------------------------------------------
  1424 ;; (7) i1_Motor_Stop                                         1     1      0     511
  1425 ;;                                              7 COMMON     1     1      0
  1426 ;;                    i1_GPIO_WriteBit
  1427 ;; ---------------------------------------------------------------------------------
  1428 ;; (7) i1_LED_UnderVoltageOutput                             3     3      0     584
  1429 ;;                                              7 COMMON     3     3      0
  1430 ;;                    i1_GPIO_WriteBit
  1431 ;; ---------------------------------------------------------------------------------
  1432 ;; (7) _LED_DisplayRunLimit                                  3     3      0     882
  1433 ;;                                              7 COMMON     3     3      0
  1434 ;;            i1_GPIO_ReadInputDataBit
  1435 ;;                    i1_GPIO_WriteBit
  1436 ;; ---------------------------------------------------------------------------------
  1437 ;; (6) _ADC_IntrHandler                                      1     1      0      47
  1438 ;;                                              8 COMMON     1     1      0
  1439 ;;                       _ADC_ReadData
  1440 ;; ---------------------------------------------------------------------------------
  1441 ;; (6) _ChargeDetect_IntrHandler                             1     1      0     371
  1442 ;;                                              3 COMMON     1     1      0
  1443 ;;            i1_GPIO_ReadInputDataBit
  1444 ;; ---------------------------------------------------------------------------------
  1445 ;; (6) _SleepLedTimer_IntrHandler                            0     0      0       0
  1446 ;;                _SleepLed_ChangeDuty
  1447 ;; ---------------------------------------------------------------------------------
  1448 ;; (6) _DebounceTimer_IntrHandler                            1     1      0     371
  1449 ;;                                              3 COMMON     1     1      0
  1450 ;;            i1_GPIO_ReadInputDataBit
  1451 ;; ---------------------------------------------------------------------------------
  1452 ;; (6) _KEY_IntrHandler                                      1     1      0       0
  1453 ;;                                              0 COMMON     1     1      0
  1454 ;;                          _TIM1_Init
  1455 ;; ---------------------------------------------------------------------------------
  1456 ;; (6) i1_GetDeviceMode                                      0     0      0       0
  1457 ;; ---------------------------------------------------------------------------------
  1458 ;; (7) i1_MotorOperationTimer_Init                           1     1      0     146
  1459 ;;                                              0 COMMON     1     1      0
  1460 ;; ---------------------------------------------------------------------------------
  1461 ;; (8) i1_Motor_CheckRunLimit                                0     0      0       0
  1462 ;; ---------------------------------------------------------------------------------
  1463 ;; (7) i1_Motor_SetStatus                                    2     2      0      73
  1464 ;;                                              0 COMMON     2     2      0
  1465 ;; ---------------------------------------------------------------------------------
  1466 ;; (7) i1_Motor_Init                                         2     2      0     219
  1467 ;;                                              0 COMMON     2     2      0
  1468 ;; ---------------------------------------------------------------------------------
  1469 ;; (7) i1_GPIO_ReadInputDataBit                              3     2      1     371
  1470 ;;                                              0 COMMON     3     2      1
  1471 ;; ---------------------------------------------------------------------------------
  1472 ;; (8) i1_GPIO_WriteBit                                      4     2      2     511
  1473 ;;                                              3 COMMON     4     2      2
  1474 ;;            i1_GPIO_ReadInputDataBit (ARG)
  1475 ;; ---------------------------------------------------------------------------------
  1476 ;; (7) ___awmod                                              7     3      4     296
  1477 ;;                                              0 COMMON     7     3      4
  1478 ;; ---------------------------------------------------------------------------------
  1479 ;; (7) _SleepLed_ChangeDuty                                  0     0      0       0
  1480 ;; ---------------------------------------------------------------------------------
  1481 ;; (7) _ADC_ReadData                                         8     6      2      47
  1482 ;;                                              0 COMMON     8     6      2
  1483 ;; ---------------------------------------------------------------------------------
  1484 ;; (7) _ADC_Enable                                           3     3      0      22
  1485 ;;                                              0 COMMON     3     3      0
  1486 ;; ---------------------------------------------------------------------------------
  1487 ;; (7) _TIM1_Init                                            0     0      0       0
  1488 ;; ---------------------------------------------------------------------------------
  1489 ;; (6) _ChargeTimer_IntrHandler                              0     0      0       0
  1490 ;; ---------------------------------------------------------------------------------
  1491 ;; (6) _SwitchModeTimer_IntrHandler                          0     0      0       0
  1492 ;; ---------------------------------------------------------------------------------
  1493 ;; Estimated maximum stack depth 8
  1494 ;; ---------------------------------------------------------------------------------
  1495                           
  1496 ;; Call Graph Graphs:
  1497                           
  1498 ;; _main (ROOT)
  1499 ;;   _Board_Init
  1500 ;;   _Driver_Init
  1501 ;;     _LED_Init
  1502 ;;       _GPIO_Init
  1503 ;;       _GPIO_WriteBit
  1504 ;;     _KEY_Init
  1505 ;;       _GPIO_Init
  1506 ;;       _GPIO_INTConfig
  1507 ;;     _Charge_Init
  1508 ;;       _ChargeDetect_Init
  1509 ;;         _GPIO_Init
  1510 ;;         _GPIO_ReadInputDataBit
  1511 ;;         _GPIO_INTConfig
  1512 ;;       _ChargeCtrl_Init
  1513 ;;         _GPIO_Init
  1514 ;;         _GPIO_WriteBit
  1515 ;;     _ADC_Init
  1516 ;;     _LEDTimer_Cmd
  1517 ;;     _LEDTimer_INTConfig
  1518 ;;     _EEPROM_Init
  1519 ;;       _EEPROM_Write
  1520 ;;   _Motor_GetStatus
  1521 ;;   _Motor_HandleStatusChangeEvt
  1522 ;;     _Motor_CheckRunLimit
  1523 ;;     _KEY_GetReleaseStatus
  1524 ;;     _Motor_SetStatus
  1525 ;;     _Motor_Start
  1526 ;;       _LED_DisplayMotorStatus
  1527 ;;         _GPIO_WriteBit
  1528 ;;       _Motor_Init
  1529 ;;       _SwitchModeTimer_Cmd
  1530 ;;       _SwitchModeTimer_INTConfig
  1531 ;;     _MotorOperationTimer_Stop
  1532 ;;       _Motor_CheckRunLimit
  1533 ;;     _MotorOperationTimer_Init
  1534 ;;     _SwitchModeTimer_GetINTStatus
  1535 ;;     _Motor_Stop
  1536 ;;       _GPIO_WriteBit
  1537 ;;     _SwitchModeTimer_INTConfig
  1538 ;;     _SwitchModeTimer_Cmd
  1539 ;;     _LEDTimer_DispRunLimitCmd
  1540 ;;     _KEY_GetPressStatus
  1541 ;;     _GPIO_WriteBit
  1542 ;;   _LED_Init
  1543 ;;     _GPIO_Init
  1544 ;;     _GPIO_WriteBit
  1545 ;;   _KEY_DeInit
  1546 ;;     _GPIO_Init
  1547 ;;   _Motor_Stop
  1548 ;;     _GPIO_WriteBit
  1549 ;;   _Motor_SetStatus
  1550 ;;   _MotorOperationTimer_Stop
  1551 ;;     _Motor_CheckRunLimit
  1552 ;;   _LEDTimer_DispRunLimitCmd
  1553 ;;   _LEDTimer_Cmd
  1554 ;;   _LEDTimer_INTConfig
  1555 ;;   _ChargeCtrl_Output
  1556 ;;     _GPIO_WriteBit
  1557 ;;   _LED_VoltageChargeOutput
  1558 ;;     _GPIO_WriteBit
  1559 ;;   _ADC_Init
  1560 ;;   _ChargeTimer_Cmd
  1561 ;;   _ChargeTimer_INTConfig
  1562 ;;   _SleepLedTimer_Init
  1563 ;;     _SleepLed_Init
  1564 ;;   _charge_control
  1565 ;;     _ChargeTimer_GetCount
  1566 ;;     _Battery_Detect
  1567 ;;       _Battery_HandleData
  1568 ;;       _GetDeviceMode
  1569 ;;       ___lwtoft
  1570 ;;         ___ftpack
  1571 ;;         ___ftge (ARG)
  1572 ;;           ___ftpack (ARG)
  1573 ;;       ___ftge
  1574 ;;         ___ftpack (ARG)
  1575 ;;       _EEPROM_SetFlag
  1576 ;;         _EEPROM_Write
  1577 ;;       _EEPROM_StoreModeData
  1578 ;;         _EEPROM_Write
  1579 ;;       _EEPROM_StoreMotorData
  1580 ;;         _EEPROM_Write
  1581 ;;       _LED_UnderVoltageOutput
  1582 ;;         _GPIO_WriteBit
  1583 ;;       _LED_Init
  1584 ;;         _GPIO_Init
  1585 ;;         _GPIO_WriteBit
  1586 ;;       _KEY_DeInit
  1587 ;;         _GPIO_Init
  1588 ;;       _Motor_Stop
  1589 ;;         _GPIO_WriteBit
  1590 ;;       _Motor_SetStatus
  1591 ;;       _MotorOperationTimer_Stop
  1592 ;;         _Motor_CheckRunLimit
  1593 ;;       _LEDTimer_DispUnderVoltCmd
  1594 ;;       _GPIO_WriteBit
  1595 ;;     _LED_VoltageChargeOutput
  1596 ;;       _GPIO_WriteBit
  1597 ;;     _GPIO_WriteBit
  1598 ;;   _ChargeDetect_GetStatus
  1599 ;;     _GPIO_ReadInputDataBit
  1600 ;;   _SetDeviceMode
  1601 ;;   _GetDeviceMode
  1602 ;;
  1603 ;; _ISR (ROOT)
  1604 ;;   _KEY_IntrHandler
  1605 ;;     _TIM1_Init
  1606 ;;   _DebounceTimer_IntrHandler
  1607 ;;     i1_GPIO_ReadInputDataBit
  1608 ;;   i1_GetDeviceMode
  1609 ;;   _SwitchModeTimer_IntrHandler
  1610 ;;   _LEDTimer_IntrHandler
  1611 ;;     i1_GPIO_ReadInputDataBit
  1612 ;;     i1_LED_UnderVoltageOutput
  1613 ;;       i1_GPIO_WriteBit
  1614 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1615 ;;     _LED_DisplayRunLimit
  1616 ;;       i1_GPIO_ReadInputDataBit
  1617 ;;       i1_GPIO_WriteBit
  1618 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1619 ;;     _ADC_Enable
  1620 ;;   _ChargeTimer_IntrHandler
  1621 ;;   _SleepLedTimer_IntrHandler
  1622 ;;     _SleepLed_ChangeDuty
  1623 ;;   _MotorOperTimer_IntrHandler
  1624 ;;     i1_Motor_CheckRunLimit
  1625 ;;     ___awmod
  1626 ;;     i1_MotorOperationTimer_Init
  1627 ;;     i1_Motor_Stop
  1628 ;;       i1_GPIO_WriteBit
  1629 ;;         i1_GPIO_ReadInputDataBit (ARG)
  1630 ;;     i1_MotorOperationTimer_Stop
  1631 ;;       i1_Motor_CheckRunLimit
  1632 ;;     i1_Motor_SetStatus
  1633 ;;     i1_Motor_Init
  1634 ;;   _ChargeDetect_IntrHandler
  1635 ;;     i1_GPIO_ReadInputDataBit
  1636 ;;   _ADC_IntrHandler
  1637 ;;     _ADC_ReadData
  1638 ;;
  1639                           
  1640 ;; Address spaces:
  1641                           
  1642 ;;Name               Size   Autos  Total    Cost      Usage
  1643 ;;SFR3                 0      0       0       4        0.0%
  1644 ;;BITSFR3              0      0       0       4        0.0%
  1645 ;;BANK2               50      0       0       7        0.0%
  1646 ;;BITBANK2            50      0       0       6        0.0%
  1647 ;;SFR2                 0      0       0       5        0.0%
  1648 ;;BITSFR2              0      0       0       5        0.0%
  1649 ;;SFR1                 0      0       0       2        0.0%
  1650 ;;BITSFR1              0      0       0       2        0.0%
  1651 ;;BANK1               50      0       0       5        0.0%
  1652 ;;BITBANK1            50      0       0       4        0.0%
  1653 ;;CODE                 0      0       0       0        0.0%
  1654 ;;DATA                 0      0      65      10        0.0%
  1655 ;;ABS                  0      0      59       8        0.0%
  1656 ;;NULL                 0      0       0       0        0.0%
  1657 ;;STACK                0      0       C       2        0.0%
  1658 ;;BANK0               50     22      4B       3       93.8%
  1659 ;;BITBANK0            50      0       0       9        0.0%
  1660 ;;SFR0                 0      0       0       1        0.0%
  1661 ;;BITSFR0              0      0       0       1        0.0%
  1662 ;;COMMON               E      B       E       1      100.0%
  1663 ;;BITCOMMON            E      0       0       0        0.0%
  1664 ;;EEDATA             100      0       0       0        0.0%
  1665                           
  1666                           	global	_main
  1667                           psect	maintext,global,class=CODE,delta=2
  1668                           global __pmaintext
  1669  02A4                     __pmaintext:
  1670                           
  1671 ;; *************** function _main *****************
  1672 ;; Defined at:
  1673 ;;		line 109 in file "main.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;		None               void
  1680 ;; Registers used:
  1681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 17F/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1687 ;;      Params:         0       0       0       0
  1688 ;;      Locals:         0       0       0       0
  1689 ;;      Temps:          0       0       0       0
  1690 ;;      Totals:         0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels required when called:    8
  1693 ;; This function calls:
  1694 ;;		_Board_Init
  1695 ;;		_Driver_Init
  1696 ;;		_Motor_GetStatus
  1697 ;;		_Motor_HandleStatusChangeEvt
  1698 ;;		_LED_Init
  1699 ;;		_KEY_DeInit
  1700 ;;		_Motor_Stop
  1701 ;;		_Motor_SetStatus
  1702 ;;		_MotorOperationTimer_Stop
  1703 ;;		_LEDTimer_DispRunLimitCmd
  1704 ;;		_LEDTimer_Cmd
  1705 ;;		_LEDTimer_INTConfig
  1706 ;;		_ChargeCtrl_Output
  1707 ;;		_LED_VoltageChargeOutput
  1708 ;;		_ADC_Init
  1709 ;;		_ChargeTimer_Cmd
  1710 ;;		_ChargeTimer_INTConfig
  1711 ;;		_SleepLedTimer_Init
  1712 ;;		_charge_control
  1713 ;;		_ChargeDetect_GetStatus
  1714 ;;		_SetDeviceMode
  1715 ;;		_GetDeviceMode
  1716 ;; This function is called by:
  1717 ;;		Startup code after reset
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           psect	maintext
  1721                           	file	"main.c"
  1722                           	line	109
  1723                           	global	__size_of_main
  1724  007D                     	__size_of_main	equ	__end_of_main-_main
  1725                           	
  1726  02A4                     _main:	
  1727                           	opt	stack 0
  1728                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1729                           	line	122
  1730                           ;main.c: 122: while(1)
  1731                           	
  1732  02A4                     l1145:	
  1733                           	line	124
  1734                           ;main.c: 123: {
  1735                           ;main.c: 124: switch(GetDeviceMode())
  1736  02A4  2B10               	goto	l17963
  1737                           	line	126
  1738                           ;main.c: 125: {
  1739                           ;main.c: 126: case RUN_MODE:
  1740                           	
  1741  02A5                     l1147:	
  1742                           	line	128
  1743                           	
  1744  02A5                     l17919:	
  1745                           ;main.c: 127: {
  1746                           ;main.c: 128: Board_Init();
  1747  02A5  158A  2402  118A   	fcall	_Board_Init
  1748                           	line	129
  1749                           	
  1750  02A8                     l17921:	
  1751                           ;main.c: 129: Driver_Init();
  1752  02A8  158A  2494  118A   	fcall	_Driver_Init
  1753  02AB  2AAC               	goto	l17923
  1754                           	line	131
  1755                           ;main.c: 131: while(1)
  1756                           	
  1757  02AC                     l1148:	
  1758                           	line	133
  1759                           	
  1760  02AC                     l17923:	
  1761                           ;main.c: 132: {
  1762                           ;main.c: 133: Motor_HandleStatusChangeEvt(Motor_GetStatus());
  1763  02AC  158A  21B3  118A   	fcall	_Motor_GetStatus
  1764  02AF  118A  2013  118A   	fcall	_Motor_HandleStatusChangeEvt
  1765  02B2  2AAC               	goto	l17923
  1766                           	line	146
  1767                           	
  1768  02B3                     l1149:	
  1769                           	line	131
  1770  02B3  2AAC               	goto	l17923
  1771                           	
  1772  02B4                     l1150:	
  1773                           	line	147
  1774                           ;main.c: 146: }
  1775                           ;main.c: 147: break;
  1776  02B4  2AA4               	goto	l1145
  1777                           	line	149
  1778                           ;main.c: 148: }
  1779                           ;main.c: 149: case CHARGE_MODE:
  1780                           	
  1781  02B5                     l1152:	
  1782                           	line	152
  1783                           	
  1784  02B5                     l17925:	
  1785                           ;main.c: 150: {
  1786                           ;main.c: 152: LED_Init();
  1787  02B5  118A  240F  118A   	fcall	_LED_Init
  1788                           	line	153
  1789                           ;main.c: 153: KEY_DeInit();
  1790  02B8  158A  2399  118A   	fcall	_KEY_DeInit
  1791                           	line	154
  1792                           	
  1793  02BB                     l17927:	
  1794                           ;main.c: 154: Motor_Stop();
  1795  02BB  158A  261C  118A   	fcall	_Motor_Stop
  1796                           	line	155
  1797                           	
  1798  02BE                     l17929:	
  1799                           ;main.c: 155: Motor_SetStatus(MOTOR_MODE_STOP);
  1800  02BE  3001               	movlw	(01h)
  1801  02BF  158A  21CD  118A   	fcall	_Motor_SetStatus
  1802                           	line	156
  1803                           	
  1804  02C2                     l17931:	
  1805                           ;main.c: 156: MotorOperationTimer_Stop();
  1806  02C2  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  1807                           	line	157
  1808                           	
  1809  02C5                     l17933:	
  1810                           ;main.c: 157: LEDTimer_DispRunLimitCmd(DISABLE);
  1811  02C5  3000               	movlw	(0)
  1812  02C6  158A  221F  118A   	fcall	_LEDTimer_DispRunLimitCmd
  1813                           	line	159
  1814                           	
  1815  02C9                     l17935:	
  1816                           ;main.c: 159: LEDTimer_Cmd(TIM_PERIOD_0_33ms, DISABLE);
  1817  02C9  1283               	bcf	status, 5	;RP0=0, select bank0
  1818  02CA  1303               	bcf	status, 6	;RP1=0, select bank0
  1819  02CB  01CB               	clrf	(?_LEDTimer_Cmd)
  1820  02CC  3002               	movlw	(02h)
  1821  02CD  118A  274B  118A   	fcall	_LEDTimer_Cmd
  1822                           	line	160
  1823                           	
  1824  02D0                     l17937:	
  1825                           ;main.c: 160: LEDTimer_INTConfig(DISABLE);
  1826  02D0  3000               	movlw	(0)
  1827  02D1  158A  22CD  118A   	fcall	_LEDTimer_INTConfig
  1828                           	line	162
  1829                           	
  1830  02D4                     l17939:	
  1831                           ;main.c: 162: ChargeCtrl_Output(Bit_SET);
  1832  02D4  3001               	movlw	(01h)
  1833  02D5  158A  2279  118A   	fcall	_ChargeCtrl_Output
  1834                           	line	163
  1835                           	
  1836  02D8                     l17941:	
  1837                           ;main.c: 163: LED_VoltageChargeOutput(Bit_SET);
  1838  02D8  3001               	movlw	(01h)
  1839  02D9  158A  2269  118A   	fcall	_LED_VoltageChargeOutput
  1840                           	line	165
  1841                           	
  1842  02DC                     l17943:	
  1843                           ;main.c: 165: ADC_Init((0x06));
  1844  02DC  3006               	movlw	(06h)
  1845  02DD  158A  241F  118A   	fcall	_ADC_Init
  1846                           	line	167
  1847                           	
  1848  02E0                     l17945:	
  1849                           ;main.c: 167: ChargeTimer_Cmd(ENABLE);
  1850  02E0  3001               	movlw	(01h)
  1851  02E1  158A  24B2  118A   	fcall	_ChargeTimer_Cmd
  1852                           	line	168
  1853                           	
  1854  02E4                     l17947:	
  1855                           ;main.c: 168: ChargeTimer_INTConfig(ENABLE);
  1856  02E4  3001               	movlw	(01h)
  1857  02E5  158A  22DF  118A   	fcall	_ChargeTimer_INTConfig
  1858                           	line	170
  1859                           	
  1860  02E8                     l17949:	
  1861                           ;main.c: 170: SleepLedTimer_Init();
  1862  02E8  158A  243C  118A   	fcall	_SleepLedTimer_Init
  1863  02EB  2AEC               	goto	l1154
  1864                           	line	171
  1865                           ;main.c: 171: while(1);
  1866                           	
  1867  02EC                     l1153:	
  1868                           	
  1869  02EC                     l1154:	
  1870  02EC  2AEC               	goto	l1154
  1871                           	
  1872  02ED                     l1155:	
  1873  02ED  2AEE               	goto	l17951
  1874                           	line	173
  1875                           ;main.c: 173: while(1)
  1876                           	
  1877  02EE                     l1156:	
  1878                           	line	175
  1879                           	
  1880  02EE                     l17951:	
  1881                           ;main.c: 174: {
  1882                           ;main.c: 175: charge_control();
  1883  02EE  118A  2788  118A   	fcall	_charge_control
  1884                           	line	178
  1885                           	
  1886  02F1                     l17953:	
  1887                           ;main.c: 178: if(!ChargeDetect_GetStatus())
  1888  02F1  118A  27C4  118A   	fcall	_ChargeDetect_GetStatus
  1889  02F4  3800               	iorlw	0
  1890  02F5  1D03               	skipz
  1891  02F6  2AF8               	goto	u5491
  1892  02F7  2AF9               	goto	u5490
  1893  02F8                     u5491:
  1894  02F8  2AEE               	goto	l17951
  1895  02F9                     u5490:
  1896                           	line	181
  1897                           	
  1898  02F9                     l17955:	
  1899                           ;main.c: 179: {
  1900                           ;main.c: 181: ChargeTimer_Cmd(DISABLE);
  1901  02F9  3000               	movlw	(0)
  1902  02FA  158A  24B2  118A   	fcall	_ChargeTimer_Cmd
  1903                           	line	182
  1904                           ;main.c: 182: ChargeTimer_INTConfig(DISABLE);
  1905  02FD  3000               	movlw	(0)
  1906  02FE  158A  22DF  118A   	fcall	_ChargeTimer_INTConfig
  1907                           	line	184
  1908                           ;main.c: 184: SetDeviceMode(RUN_MODE);
  1909  0301  3000               	movlw	(0)
  1910  0302  158A  21D5  118A   	fcall	_SetDeviceMode
  1911                           	line	185
  1912                           ;main.c: 185: break;
  1913  0305  2AA4               	goto	l1145
  1914                           	line	186
  1915                           	
  1916  0306                     l1157:	
  1917  0306  2AEE               	goto	l17951
  1918                           	line	187
  1919                           	
  1920  0307                     l1159:	
  1921                           	line	173
  1922  0307  2AEE               	goto	l17951
  1923                           	
  1924  0308                     l1158:	
  1925                           	line	189
  1926                           ;main.c: 186: }
  1927                           ;main.c: 187: }
  1928                           ;main.c: 189: break;
  1929  0308  2AA4               	goto	l1145
  1930                           	line	191
  1931                           ;main.c: 190: }
  1932                           ;main.c: 191: case SLEEP_MODE:
  1933                           	
  1934  0309                     l1160:	
  1935                           	line	194
  1936                           	
  1937  0309                     l17957:	
  1938                           ;main.c: 192: {
  1939                           ;main.c: 194: LED_Init();
  1940  0309  118A  240F  118A   	fcall	_LED_Init
  1941                           	line	195
  1942                           	
  1943  030C                     l17959:	
  1944                           # 195 "main.c"
  1945  030C  0063               SLEEP ;#
  1946                           psect	maintext
  1947                           	line	197
  1948                           ;main.c: 197: break;
  1949  030D  2AA4               	goto	l1145
  1950                           	line	199
  1951                           ;main.c: 198: }
  1952                           ;main.c: 199: default:
  1953                           	
  1954  030E                     l1161:	
  1955                           	line	201
  1956                           ;main.c: 200: {
  1957                           ;main.c: 201: break;
  1958  030E  2AA4               	goto	l1145
  1959                           	line	203
  1960                           	
  1961  030F                     l17961:	
  1962                           ;main.c: 202: }
  1963                           ;main.c: 203: }
  1964  030F  2AA4               	goto	l1145
  1965                           	line	124
  1966                           	
  1967  0310                     l1146:	
  1968                           	
  1969  0310                     l17963:	
  1970  0310  158A  21BB  118A   	fcall	_GetDeviceMode
  1971                           	; Switch size 1, requested type "space"
  1972                           ; Number of cases is 3, Range of values is 0 to 2
  1973                           ; switch strategies available:
  1974                           ; Name         Instructions Cycles
  1975                           ; simple_byte           10     6 (average)
  1976                           ; direct_byte           13     7 (fixed)
  1977                           ; jumptable            260     6 (fixed)
  1978                           ; rangetable             7     6 (fixed)
  1979                           ; spacedrange           12     9 (fixed)
  1980                           ; locatedrange           3     3 (fixed)
  1981                           ;	Chosen strategy is simple_byte
  1982                           
  1983                           	opt asmopt_off
  1984  0313  3A00               	xorlw	0^0	; case 0
  1985  0314  1903               	skipnz
  1986  0315  2AA5               	goto	l17919
  1987  0316  3A01               	xorlw	1^0	; case 1
  1988  0317  1903               	skipnz
  1989  0318  2AB5               	goto	l17925
  1990  0319  3A03               	xorlw	2^1	; case 2
  1991  031A  1903               	skipnz
  1992  031B  2B09               	goto	l17957
  1993  031C  2AA4               	goto	l1145
  1994                           	opt asmopt_on
  1995                           
  1996                           	line	203
  1997                           	
  1998  031D                     l1151:	
  1999  031D  2AA4               	goto	l1145
  2000                           	line	204
  2001                           	
  2002  031E                     l1162:	
  2003                           	line	122
  2004  031E  2AA4               	goto	l1145
  2005                           	
  2006  031F                     l1163:	
  2007                           	line	205
  2008                           	
  2009  031F                     l1164:	
  2010                           	global	start
  2011  031F  118A  2811         	ljmp	start
  2012                           	opt stack 0
  2013                           GLOBAL	__end_of_main
  2014  0321                     	__end_of_main:
  2015 ;; =============== function _main ends ============
  2016                           
  2017                           	signat	_main,88
  2018                           	global	_Motor_HandleStatusChangeEvt
  2019                           psect	text1776,local,class=CODE,delta=2
  2020                           global __ptext1776
  2021  0013                     __ptext1776:
  2022                           
  2023 ;; *************** function _Motor_HandleStatusChangeEvt *****************
  2024 ;; Defined at:
  2025 ;;		line 373 in file "ms83fxx02_motor.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  status          1    wreg     enum E1552
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  status          1   14[BANK0 ] enum E1552
  2030 ;; Return value:  Size  Location     Type
  2031 ;;		None               void
  2032 ;; Registers used:
  2033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2039 ;;      Params:         0       0       0       0
  2040 ;;      Locals:         0       1       0       0
  2041 ;;      Temps:          0       1       0       0
  2042 ;;      Totals:         0       2       0       0
  2043 ;;Total ram usage:        2 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    7
  2046 ;; This function calls:
  2047 ;;		_Motor_CheckRunLimit
  2048 ;;		_KEY_GetReleaseStatus
  2049 ;;		_Motor_SetStatus
  2050 ;;		_Motor_Start
  2051 ;;		_MotorOperationTimer_Stop
  2052 ;;		_MotorOperationTimer_Init
  2053 ;;		_SwitchModeTimer_GetINTStatus
  2054 ;;		_Motor_Stop
  2055 ;;		_SwitchModeTimer_INTConfig
  2056 ;;		_SwitchModeTimer_Cmd
  2057 ;;		_LEDTimer_DispRunLimitCmd
  2058 ;;		_KEY_GetPressStatus
  2059 ;;		_GPIO_WriteBit
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           psect	text1776
  2065                           	file	"ms83fxx02_motor.c"
  2066                           	line	373
  2067                           	global	__size_of_Motor_HandleStatusChangeEvt
  2068  0117                     	__size_of_Motor_HandleStatusChangeEvt	equ	__end_of_Motor_HandleStatusChangeEvt-_Motor_H
                                 andleStatusChangeEvt
  2069                           	
  2070  0013                     _Motor_HandleStatusChangeEvt:	
  2071                           	opt	stack 0
  2072                           ; Regs used in _Motor_HandleStatusChangeEvt: [wreg-fsr0h+status,2+status,0+pclath+cstack
                                 ]
  2073                           ;Motor_HandleStatusChangeEvt@status stored from wreg
  2074  0013  1283               	bcf	status, 5	;RP0=0, select bank0
  2075  0014  1303               	bcf	status, 6	;RP1=0, select bank0
  2076  0015  00D5               	movwf	(Motor_HandleStatusChangeEvt@status)
  2077                           	line	374
  2078                           	
  2079  0016                     l17843:	
  2080                           ;ms83fxx02_motor.c: 374: if(!Motor_CheckRunLimit())
  2081  0016  158A  22AA  118A   	fcall	_Motor_CheckRunLimit
  2082  0019  3800               	iorlw	0
  2083  001A  1D03               	skipz
  2084  001B  281D               	goto	u5371
  2085  001C  281E               	goto	u5370
  2086  001D                     u5371:
  2087  001D  28D4               	goto	l17897
  2088  001E                     u5370:
  2089  001E  28C3               	goto	l17895
  2090                           	line	376
  2091                           	
  2092  001F                     l17845:	
  2093                           ;ms83fxx02_motor.c: 375: {
  2094                           ;ms83fxx02_motor.c: 376: switch(status)
  2095  001F  28C3               	goto	l17895
  2096                           	line	378
  2097                           ;ms83fxx02_motor.c: 377: {
  2098                           ;ms83fxx02_motor.c: 378: case MOTOR_MODE_STOP:
  2099                           	
  2100  0020                     l8889:	
  2101                           	line	380
  2102                           	
  2103  0020                     l17847:	
  2104                           ;ms83fxx02_motor.c: 379: {
  2105                           ;ms83fxx02_motor.c: 380: if(KEY_GetReleaseStatus())
  2106  0020  158A  223B  118A   	fcall	_KEY_GetReleaseStatus
  2107  0023  3A00               	xorlw	0
  2108  0024  1903               	skipnz
  2109  0025  2827               	goto	u5381
  2110  0026  2828               	goto	u5380
  2111  0027                     u5381:
  2112  0027  2838               	goto	l17857
  2113  0028                     u5380:
  2114                           	line	382
  2115                           	
  2116  0028                     l17849:	
  2117                           ;ms83fxx02_motor.c: 381: {
  2118                           ;ms83fxx02_motor.c: 382: Motor_SetStatus(MOTOR_MODE_1);
  2119  0028  3002               	movlw	(02h)
  2120  0029  158A  21CD  118A   	fcall	_Motor_SetStatus
  2121                           	line	383
  2122                           	
  2123  002C                     l17851:	
  2124                           ;ms83fxx02_motor.c: 383: Motor_Start(MOTOR_MODE_1);
  2125  002C  3002               	movlw	(02h)
  2126  002D  118A  268D  118A   	fcall	_Motor_Start
  2127                           	line	386
  2128                           	
  2129  0030                     l17853:	
  2130                           ;ms83fxx02_motor.c: 386: MotorOperationTimer_Stop();
  2131  0030  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2132                           	line	387
  2133                           	
  2134  0033                     l17855:	
  2135                           ;ms83fxx02_motor.c: 387: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2136  0033  3001               	movlw	(01h)
  2137  0034  158A  27C5  118A   	fcall	_MotorOperationTimer_Init
  2138                           	line	388
  2139                           ;ms83fxx02_motor.c: 388: }
  2140  0037  2929               	goto	l8911
  2141                           	line	389
  2142                           	
  2143  0038                     l8890:	
  2144                           	line	391
  2145                           	
  2146  0038                     l17857:	
  2147                           ;ms83fxx02_motor.c: 389: else
  2148                           ;ms83fxx02_motor.c: 390: {
  2149                           ;ms83fxx02_motor.c: 391: if(!key_press_flag)
  2150  0038  1283               	bcf	status, 5	;RP0=0, select bank0
  2151  0039  1303               	bcf	status, 6	;RP1=0, select bank0
  2152  003A  08C0               	movf	(_key_press_flag),f
  2153  003B  1D03               	skipz	;volatile
  2154  003C  283E               	goto	u5391
  2155  003D  283F               	goto	u5390
  2156  003E                     u5391:
  2157  003E  2929               	goto	l8911
  2158  003F                     u5390:
  2159                           	line	394
  2160                           	
  2161  003F                     l17859:	
  2162                           # 394 "ms83fxx02_motor.c"
  2163  003F  0063               SLEEP ;#
  2164                           psect	text1776
  2165  0040  2929               	goto	l8911
  2166                           	line	395
  2167                           	
  2168  0041                     l8892:	
  2169  0041  2929               	goto	l8911
  2170                           	line	396
  2171                           	
  2172  0042                     l8891:	
  2173                           	line	397
  2174                           ;ms83fxx02_motor.c: 395: }
  2175                           ;ms83fxx02_motor.c: 396: }
  2176                           ;ms83fxx02_motor.c: 397: break;
  2177  0042  2929               	goto	l8911
  2178                           	line	399
  2179                           ;ms83fxx02_motor.c: 398: }
  2180                           ;ms83fxx02_motor.c: 399: case MOTOR_MODE_1:
  2181                           	
  2182  0043                     l8894:	
  2183                           	line	401
  2184                           	
  2185  0043                     l17861:	
  2186                           ;ms83fxx02_motor.c: 400: {
  2187                           ;ms83fxx02_motor.c: 401: if(KEY_GetReleaseStatus())
  2188  0043  158A  223B  118A   	fcall	_KEY_GetReleaseStatus
  2189  0046  3A00               	xorlw	0
  2190  0047  1903               	skipnz
  2191  0048  284A               	goto	u5401
  2192  0049  284B               	goto	u5400
  2193  004A                     u5401:
  2194  004A  2929               	goto	l8911
  2195  004B                     u5400:
  2196                           	line	404
  2197                           	
  2198  004B                     l17863:	
  2199                           ;ms83fxx02_motor.c: 402: {
  2200                           ;ms83fxx02_motor.c: 404: if(SwitchModeTimer_GetINTStatus())
  2201  004B  158A  224A  118A   	fcall	_SwitchModeTimer_GetINTStatus
  2202  004E  3A00               	xorlw	0
  2203  004F  1903               	skipnz
  2204  0050  2852               	goto	u5411
  2205  0051  2853               	goto	u5410
  2206  0052                     u5411:
  2207  0052  285E               	goto	l17867
  2208  0053                     u5410:
  2209                           	line	406
  2210                           	
  2211  0053                     l17865:	
  2212                           ;ms83fxx02_motor.c: 405: {
  2213                           ;ms83fxx02_motor.c: 406: Motor_Stop();
  2214  0053  158A  261C  118A   	fcall	_Motor_Stop
  2215                           	line	407
  2216                           ;ms83fxx02_motor.c: 407: Motor_SetStatus(MOTOR_MODE_STOP);
  2217  0056  3001               	movlw	(01h)
  2218  0057  158A  21CD  118A   	fcall	_Motor_SetStatus
  2219                           	line	408
  2220                           ;ms83fxx02_motor.c: 408: MotorOperationTimer_Stop();
  2221  005A  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2222                           	line	409
  2223                           ;ms83fxx02_motor.c: 409: }
  2224  005D  2929               	goto	l8911
  2225                           	line	410
  2226                           	
  2227  005E                     l8896:	
  2228                           	line	413
  2229                           	
  2230  005E                     l17867:	
  2231                           ;ms83fxx02_motor.c: 410: else
  2232                           ;ms83fxx02_motor.c: 411: {
  2233                           ;ms83fxx02_motor.c: 413: SwitchModeTimer_INTConfig(DISABLE);
  2234  005E  3000               	movlw	(0)
  2235  005F  158A  22F1  118A   	fcall	_SwitchModeTimer_INTConfig
  2236                           	line	414
  2237                           ;ms83fxx02_motor.c: 414: SwitchModeTimer_Cmd(DISABLE);
  2238  0062  3000               	movlw	(0)
  2239  0063  158A  2476  118A   	fcall	_SwitchModeTimer_Cmd
  2240                           	line	416
  2241                           ;ms83fxx02_motor.c: 416: Motor_SetStatus(MOTOR_MODE_2);
  2242  0066  3003               	movlw	(03h)
  2243  0067  158A  21CD  118A   	fcall	_Motor_SetStatus
  2244                           	line	417
  2245                           	
  2246  006A                     l17869:	
  2247                           ;ms83fxx02_motor.c: 417: Motor_Start(MOTOR_MODE_2);
  2248  006A  3003               	movlw	(03h)
  2249  006B  118A  268D  118A   	fcall	_Motor_Start
  2250                           	line	420
  2251                           	
  2252  006E                     l17871:	
  2253                           ;ms83fxx02_motor.c: 420: MotorOperationTimer_Stop();
  2254  006E  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2255                           	line	421
  2256                           	
  2257  0071                     l17873:	
  2258                           ;ms83fxx02_motor.c: 421: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2259  0071  3001               	movlw	(01h)
  2260  0072  158A  27C5  118A   	fcall	_MotorOperationTimer_Init
  2261  0075  2929               	goto	l8911
  2262                           	line	422
  2263                           	
  2264  0076                     l8897:	
  2265  0076  2929               	goto	l8911
  2266                           	line	423
  2267                           	
  2268  0077                     l8895:	
  2269                           	line	424
  2270                           ;ms83fxx02_motor.c: 422: }
  2271                           ;ms83fxx02_motor.c: 423: }
  2272                           ;ms83fxx02_motor.c: 424: break;
  2273  0077  2929               	goto	l8911
  2274                           	line	426
  2275                           ;ms83fxx02_motor.c: 425: }
  2276                           ;ms83fxx02_motor.c: 426: case MOTOR_MODE_2:
  2277                           	
  2278  0078                     l8898:	
  2279                           	line	428
  2280                           	
  2281  0078                     l17875:	
  2282                           ;ms83fxx02_motor.c: 427: {
  2283                           ;ms83fxx02_motor.c: 428: if(KEY_GetReleaseStatus())
  2284  0078  158A  223B  118A   	fcall	_KEY_GetReleaseStatus
  2285  007B  3A00               	xorlw	0
  2286  007C  1903               	skipnz
  2287  007D  287F               	goto	u5421
  2288  007E  2880               	goto	u5420
  2289  007F                     u5421:
  2290  007F  2929               	goto	l8911
  2291  0080                     u5420:
  2292                           	line	431
  2293                           	
  2294  0080                     l17877:	
  2295                           ;ms83fxx02_motor.c: 429: {
  2296                           ;ms83fxx02_motor.c: 431: if(SwitchModeTimer_GetINTStatus())
  2297  0080  158A  224A  118A   	fcall	_SwitchModeTimer_GetINTStatus
  2298  0083  3A00               	xorlw	0
  2299  0084  1903               	skipnz
  2300  0085  2887               	goto	u5431
  2301  0086  2888               	goto	u5430
  2302  0087                     u5431:
  2303  0087  2893               	goto	l17881
  2304  0088                     u5430:
  2305                           	line	433
  2306                           	
  2307  0088                     l17879:	
  2308                           ;ms83fxx02_motor.c: 432: {
  2309                           ;ms83fxx02_motor.c: 433: Motor_Stop();
  2310  0088  158A  261C  118A   	fcall	_Motor_Stop
  2311                           	line	434
  2312                           ;ms83fxx02_motor.c: 434: Motor_SetStatus(MOTOR_MODE_STOP);
  2313  008B  3001               	movlw	(01h)
  2314  008C  158A  21CD  118A   	fcall	_Motor_SetStatus
  2315                           	line	435
  2316                           ;ms83fxx02_motor.c: 435: MotorOperationTimer_Stop();
  2317  008F  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2318                           	line	436
  2319                           ;ms83fxx02_motor.c: 436: }
  2320  0092  2929               	goto	l8911
  2321                           	line	437
  2322                           	
  2323  0093                     l8900:	
  2324                           	line	440
  2325                           	
  2326  0093                     l17881:	
  2327                           ;ms83fxx02_motor.c: 437: else
  2328                           ;ms83fxx02_motor.c: 438: {
  2329                           ;ms83fxx02_motor.c: 440: SwitchModeTimer_Cmd(DISABLE);
  2330  0093  3000               	movlw	(0)
  2331  0094  158A  2476  118A   	fcall	_SwitchModeTimer_Cmd
  2332                           	line	441
  2333                           ;ms83fxx02_motor.c: 441: SwitchModeTimer_INTConfig(DISABLE);
  2334  0097  3000               	movlw	(0)
  2335  0098  158A  22F1  118A   	fcall	_SwitchModeTimer_INTConfig
  2336                           	line	443
  2337                           ;ms83fxx02_motor.c: 443: Motor_SetStatus(MOTOR_MODE_3);
  2338  009B  3004               	movlw	(04h)
  2339  009C  158A  21CD  118A   	fcall	_Motor_SetStatus
  2340                           	line	444
  2341                           	
  2342  009F                     l17883:	
  2343                           ;ms83fxx02_motor.c: 444: Motor_Start(MOTOR_MODE_3);
  2344  009F  3004               	movlw	(04h)
  2345  00A0  118A  268D  118A   	fcall	_Motor_Start
  2346                           	line	447
  2347                           	
  2348  00A3                     l17885:	
  2349                           ;ms83fxx02_motor.c: 447: MotorOperationTimer_Stop();
  2350  00A3  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2351                           	line	448
  2352                           	
  2353  00A6                     l17887:	
  2354                           ;ms83fxx02_motor.c: 448: MotorOperationTimer_Init(MotorOperationTimer_30s);
  2355  00A6  3001               	movlw	(01h)
  2356  00A7  158A  27C5  118A   	fcall	_MotorOperationTimer_Init
  2357  00AA  2929               	goto	l8911
  2358                           	line	449
  2359                           	
  2360  00AB                     l8901:	
  2361  00AB  2929               	goto	l8911
  2362                           	line	450
  2363                           	
  2364  00AC                     l8899:	
  2365                           	line	451
  2366                           ;ms83fxx02_motor.c: 449: }
  2367                           ;ms83fxx02_motor.c: 450: }
  2368                           ;ms83fxx02_motor.c: 451: break;
  2369  00AC  2929               	goto	l8911
  2370                           	line	453
  2371                           ;ms83fxx02_motor.c: 452: }
  2372                           ;ms83fxx02_motor.c: 453: case MOTOR_MODE_3:
  2373                           	
  2374  00AD                     l8902:	
  2375                           	line	455
  2376                           	
  2377  00AD                     l17889:	
  2378                           ;ms83fxx02_motor.c: 454: {
  2379                           ;ms83fxx02_motor.c: 455: if(KEY_GetReleaseStatus())
  2380  00AD  158A  223B  118A   	fcall	_KEY_GetReleaseStatus
  2381  00B0  3A00               	xorlw	0
  2382  00B1  1903               	skipnz
  2383  00B2  28B4               	goto	u5441
  2384  00B3  28B5               	goto	u5440
  2385  00B4                     u5441:
  2386  00B4  2929               	goto	l8911
  2387  00B5                     u5440:
  2388                           	line	457
  2389                           	
  2390  00B5                     l17891:	
  2391                           ;ms83fxx02_motor.c: 456: {
  2392                           ;ms83fxx02_motor.c: 457: Motor_Stop();
  2393  00B5  158A  261C  118A   	fcall	_Motor_Stop
  2394                           	line	458
  2395                           ;ms83fxx02_motor.c: 458: Motor_SetStatus(MOTOR_MODE_STOP);
  2396  00B8  3001               	movlw	(01h)
  2397  00B9  158A  21CD  118A   	fcall	_Motor_SetStatus
  2398                           	line	459
  2399                           ;ms83fxx02_motor.c: 459: MotorOperationTimer_Stop();
  2400  00BC  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2401  00BF  2929               	goto	l8911
  2402                           	line	460
  2403                           	
  2404  00C0                     l8903:	
  2405                           	line	461
  2406                           ;ms83fxx02_motor.c: 460: }
  2407                           ;ms83fxx02_motor.c: 461: break;
  2408  00C0  2929               	goto	l8911
  2409                           	line	463
  2410                           ;ms83fxx02_motor.c: 462: }
  2411                           ;ms83fxx02_motor.c: 463: default:
  2412                           	
  2413  00C1                     l8904:	
  2414                           	line	465
  2415                           ;ms83fxx02_motor.c: 464: {
  2416                           ;ms83fxx02_motor.c: 465: break;
  2417  00C1  2929               	goto	l8911
  2418                           	line	467
  2419                           	
  2420  00C2                     l17893:	
  2421                           ;ms83fxx02_motor.c: 466: }
  2422                           ;ms83fxx02_motor.c: 467: }
  2423  00C2  2929               	goto	l8911
  2424                           	line	376
  2425                           	
  2426  00C3                     l8888:	
  2427                           	
  2428  00C3                     l17895:	
  2429  00C3  1283               	bcf	status, 5	;RP0=0, select bank0
  2430  00C4  1303               	bcf	status, 6	;RP1=0, select bank0
  2431  00C5  0855               	movf	(Motor_HandleStatusChangeEvt@status),w
  2432                           	; Switch size 1, requested type "space"
  2433                           ; Number of cases is 4, Range of values is 1 to 4
  2434                           ; switch strategies available:
  2435                           ; Name         Instructions Cycles
  2436                           ; simple_byte           13     7 (average)
  2437                           ; direct_byte           18    10 (fixed)
  2438                           ; jumptable            263     9 (fixed)
  2439                           ;	Chosen strategy is simple_byte
  2440                           
  2441                           	opt asmopt_off
  2442  00C6  3A01               	xorlw	1^0	; case 1
  2443  00C7  1903               	skipnz
  2444  00C8  2820               	goto	l17847
  2445  00C9  3A03               	xorlw	2^1	; case 2
  2446  00CA  1903               	skipnz
  2447  00CB  2843               	goto	l17861
  2448  00CC  3A01               	xorlw	3^2	; case 3
  2449  00CD  1903               	skipnz
  2450  00CE  2878               	goto	l17875
  2451  00CF  3A07               	xorlw	4^3	; case 4
  2452  00D0  1903               	skipnz
  2453  00D1  28AD               	goto	l17889
  2454  00D2  2929               	goto	l8911
  2455                           	opt asmopt_on
  2456                           
  2457                           	line	467
  2458                           	
  2459  00D3                     l8893:	
  2460                           	line	468
  2461                           ;ms83fxx02_motor.c: 468: }
  2462  00D3  2929               	goto	l8911
  2463                           	line	469
  2464                           	
  2465  00D4                     l8887:	
  2466                           	line	472
  2467                           	
  2468  00D4                     l17897:	
  2469                           ;ms83fxx02_motor.c: 469: else
  2470                           ;ms83fxx02_motor.c: 470: {
  2471                           ;ms83fxx02_motor.c: 472: LEDTimer_DispRunLimitCmd(ENABLE);
  2472  00D4  3001               	movlw	(01h)
  2473  00D5  158A  221F  118A   	fcall	_LEDTimer_DispRunLimitCmd
  2474                           	line	475
  2475                           	
  2476  00D8                     l17899:	
  2477                           ;ms83fxx02_motor.c: 475: if(KEY_GetPressStatus())
  2478  00D8  158A  2204  118A   	fcall	_KEY_GetPressStatus
  2479  00DB  3A00               	xorlw	0
  2480  00DC  1903               	skipnz
  2481  00DD  28DF               	goto	u5451
  2482  00DE  28E0               	goto	u5450
  2483  00DF                     u5451:
  2484  00DF  28E8               	goto	l17905
  2485  00E0                     u5450:
  2486                           	line	477
  2487                           	
  2488  00E0                     l17901:	
  2489                           ;ms83fxx02_motor.c: 476: {
  2490                           ;ms83fxx02_motor.c: 477: key_press_time_count = 0;
  2491  00E0  1283               	bcf	status, 5	;RP0=0, select bank0
  2492  00E1  1303               	bcf	status, 6	;RP1=0, select bank0
  2493  00E2  01C1               	clrf	(_key_press_time_count)	;volatile
  2494                           	line	479
  2495                           	
  2496  00E3                     l17903:	
  2497                           ;ms83fxx02_motor.c: 479: MotorOperationTimer_Init(MotorOperationTimer_8s);
  2498  00E3  3003               	movlw	(03h)
  2499  00E4  158A  27C5  118A   	fcall	_MotorOperationTimer_Init
  2500  00E7  28E8               	goto	l17905
  2501                           	line	480
  2502                           	
  2503  00E8                     l8906:	
  2504                           	line	482
  2505                           	
  2506  00E8                     l17905:	
  2507                           ;ms83fxx02_motor.c: 480: }
  2508                           ;ms83fxx02_motor.c: 482: if(key_press_time_count)
  2509  00E8  1283               	bcf	status, 5	;RP0=0, select bank0
  2510  00E9  1303               	bcf	status, 6	;RP1=0, select bank0
  2511  00EA  0841               	movf	(_key_press_time_count),w	;volatile
  2512  00EB  1D03               	skipz
  2513  00EC  28EE               	goto	u5460
  2514  00ED  2911               	goto	l17909
  2515  00EE                     u5460:
  2516                           	line	486
  2517                           	
  2518  00EE                     l17907:	
  2519                           ;ms83fxx02_motor.c: 483: {
  2520                           ;ms83fxx02_motor.c: 486: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  2521  00EE  3004               	movlw	(04h)
  2522  00EF  00D4               	movwf	(??_Motor_HandleStatusChangeEvt+0)+0
  2523  00F0  0854               	movf	(??_Motor_HandleStatusChangeEvt+0)+0,w
  2524  00F1  00CB               	movwf	(?_GPIO_WriteBit)
  2525  00F2  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  2526  00F3  3000               	movlw	(0)
  2527  00F4  158A  257C  118A   	fcall	_GPIO_WriteBit
  2528                           	line	487
  2529                           ;ms83fxx02_motor.c: 487: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  2530  00F7  3008               	movlw	(08h)
  2531  00F8  1283               	bcf	status, 5	;RP0=0, select bank0
  2532  00F9  1303               	bcf	status, 6	;RP1=0, select bank0
  2533  00FA  00D4               	movwf	(??_Motor_HandleStatusChangeEvt+0)+0
  2534  00FB  0854               	movf	(??_Motor_HandleStatusChangeEvt+0)+0,w
  2535  00FC  00CB               	movwf	(?_GPIO_WriteBit)
  2536  00FD  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  2537  00FE  3000               	movlw	(0)
  2538  00FF  158A  257C  118A   	fcall	_GPIO_WriteBit
  2539                           	line	488
  2540                           ;ms83fxx02_motor.c: 488: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  2541  0102  1283               	bcf	status, 5	;RP0=0, select bank0
  2542  0103  1303               	bcf	status, 6	;RP1=0, select bank0
  2543  0104  01CB               	clrf	(?_GPIO_WriteBit)
  2544  0105  1403               	bsf	status,0
  2545  0106  0DCB               	rlf	(?_GPIO_WriteBit),f
  2546  0107  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  2547  0108  3001               	movlw	(01h)
  2548  0109  158A  257C  118A   	fcall	_GPIO_WriteBit
  2549                           	line	491
  2550                           ;ms83fxx02_motor.c: 491: LEDTimer_DispRunLimitCmd(DISABLE);
  2551  010C  3000               	movlw	(0)
  2552  010D  158A  221F  118A   	fcall	_LEDTimer_DispRunLimitCmd
  2553  0110  2911               	goto	l17909
  2554                           	line	492
  2555                           	
  2556  0111                     l8907:	
  2557                           	line	494
  2558                           	
  2559  0111                     l17909:	
  2560                           ;ms83fxx02_motor.c: 492: }
  2561                           ;ms83fxx02_motor.c: 494: if(KEY_GetReleaseStatus())
  2562  0111  158A  223B  118A   	fcall	_KEY_GetReleaseStatus
  2563  0114  3A00               	xorlw	0
  2564  0115  1903               	skipnz
  2565  0116  2918               	goto	u5471
  2566  0117  2919               	goto	u5470
  2567  0118                     u5471:
  2568  0118  2929               	goto	l8911
  2569  0119                     u5470:
  2570                           	line	496
  2571                           	
  2572  0119                     l17911:	
  2573                           ;ms83fxx02_motor.c: 495: {
  2574                           ;ms83fxx02_motor.c: 496: if(key_press_time_count)
  2575  0119  1283               	bcf	status, 5	;RP0=0, select bank0
  2576  011A  1303               	bcf	status, 6	;RP1=0, select bank0
  2577  011B  0841               	movf	(_key_press_time_count),w	;volatile
  2578  011C  1D03               	skipz
  2579  011D  291F               	goto	u5480
  2580  011E  2923               	goto	l17917
  2581  011F                     u5480:
  2582                           	line	499
  2583                           	
  2584  011F                     l17913:	
  2585                           ;ms83fxx02_motor.c: 497: {
  2586                           ;ms83fxx02_motor.c: 499: motor_oper_record = 0;
  2587  011F  01B6               	clrf	(_motor_oper_record)	;volatile
  2588  0120  01B7               	clrf	(_motor_oper_record+1)	;volatile
  2589                           	line	500
  2590                           	
  2591  0121                     l17915:	
  2592                           ;ms83fxx02_motor.c: 500: key_press_time_count = 0;
  2593  0121  01C1               	clrf	(_key_press_time_count)	;volatile
  2594                           	line	501
  2595                           ;ms83fxx02_motor.c: 501: }
  2596  0122  2929               	goto	l8911
  2597                           	line	502
  2598                           	
  2599  0123                     l8909:	
  2600                           	line	504
  2601                           	
  2602  0123                     l17917:	
  2603                           ;ms83fxx02_motor.c: 502: else
  2604                           ;ms83fxx02_motor.c: 503: {
  2605                           ;ms83fxx02_motor.c: 504: MotorOperationTimer_Stop();
  2606  0123  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  2607  0126  2929               	goto	l8911
  2608                           	line	505
  2609                           	
  2610  0127                     l8910:	
  2611  0127  2929               	goto	l8911
  2612                           	line	506
  2613                           	
  2614  0128                     l8908:	
  2615  0128  2929               	goto	l8911
  2616                           	line	507
  2617                           	
  2618  0129                     l8905:	
  2619                           	line	508
  2620                           	
  2621  0129                     l8911:	
  2622  0129  0008               	return
  2623                           	opt stack 0
  2624                           GLOBAL	__end_of_Motor_HandleStatusChangeEvt
  2625  012A                     	__end_of_Motor_HandleStatusChangeEvt:
  2626 ;; =============== function _Motor_HandleStatusChangeEvt ends ============
  2627                           
  2628                           	signat	_Motor_HandleStatusChangeEvt,4216
  2629                           	global	_charge_control
  2630                           psect	text1777,local,class=CODE,delta=2
  2631                           global __ptext1777
  2632  0788                     __ptext1777:
  2633                           
  2634 ;; *************** function _charge_control *****************
  2635 ;; Defined at:
  2636 ;;		line 84 in file "main.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  charge_count    2   32[BANK0 ] unsigned int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;		None               void
  2643 ;; Registers used:
  2644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2650 ;;      Params:         0       0       0       0
  2651 ;;      Locals:         0       2       0       0
  2652 ;;      Temps:          0       0       0       0
  2653 ;;      Totals:         0       2       0       0
  2654 ;;Total ram usage:        2 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    7
  2657 ;; This function calls:
  2658 ;;		_ChargeTimer_GetCount
  2659 ;;		_Battery_Detect
  2660 ;;		_LED_VoltageChargeOutput
  2661 ;;		_GPIO_WriteBit
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           psect	text1777
  2667                           	file	"main.c"
  2668                           	line	84
  2669                           	global	__size_of_charge_control
  2670  003C                     	__size_of_charge_control	equ	__end_of_charge_control-_charge_control
  2671                           	
  2672  0788                     _charge_control:	
  2673                           	opt	stack 0
  2674                           ; Regs used in _charge_control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2675                           	line	85
  2676                           	
  2677  0788                     l17831:	
  2678                           ;main.c: 85: uint32_t charge_count = ChargeTimer_GetCount();
  2679  0788  158A  21E5  118A   	fcall	_ChargeTimer_GetCount
  2680  078B  1283               	bcf	status, 5	;RP0=0, select bank0
  2681  078C  1303               	bcf	status, 6	;RP1=0, select bank0
  2682  078D  084C               	movf	(1+(?_ChargeTimer_GetCount)),w
  2683  078E  01E8               	clrf	(charge_control@charge_count+1)
  2684  078F  07E8               	addwf	(charge_control@charge_count+1)
  2685  0790  084B               	movf	(0+(?_ChargeTimer_GetCount)),w
  2686  0791  01E7               	clrf	(charge_control@charge_count)
  2687  0792  07E7               	addwf	(charge_control@charge_count)
  2688                           
  2689                           	line	88
  2690                           	
  2691  0793                     l17833:	
  2692                           ;main.c: 88: if((charge_count >= 1) && (charge_count < 5760))
  2693  0793  0868               	movf	(charge_control@charge_count+1),w
  2694  0794  0467               	iorwf	(charge_control@charge_count),w
  2695  0795  1903               	skipnz
  2696  0796  2F98               	goto	u5341
  2697  0797  2F99               	goto	u5340
  2698  0798                     u5341:
  2699  0798  2FA6               	goto	l17839
  2700  0799                     u5340:
  2701                           	
  2702  0799                     l17835:	
  2703  0799  3016               	movlw	high(01680h)
  2704  079A  0268               	subwf	(charge_control@charge_count+1),w
  2705  079B  3080               	movlw	low(01680h)
  2706  079C  1903               	skipnz
  2707  079D  0267               	subwf	(charge_control@charge_count),w
  2708  079E  1803               	skipnc
  2709  079F  2FA1               	goto	u5351
  2710  07A0  2FA2               	goto	u5350
  2711  07A1                     u5351:
  2712  07A1  2FA6               	goto	l17839
  2713  07A2                     u5350:
  2714                           	line	90
  2715                           	
  2716  07A2                     l17837:	
  2717                           ;main.c: 89: {
  2718                           ;main.c: 90: Battery_Detect();
  2719  07A2  118A  212A  118A   	fcall	_Battery_Detect
  2720                           	line	91
  2721                           ;main.c: 91: }
  2722  07A5  2FC3               	goto	l1142
  2723                           	line	92
  2724                           	
  2725  07A6                     l1139:	
  2726                           	line	94
  2727                           	
  2728  07A6                     l17839:	
  2729                           ;main.c: 92: else
  2730                           ;main.c: 93: {
  2731                           ;main.c: 94: if(charge_count >= 5760)
  2732  07A6  3016               	movlw	high(01680h)
  2733  07A7  1283               	bcf	status, 5	;RP0=0, select bank0
  2734  07A8  1303               	bcf	status, 6	;RP1=0, select bank0
  2735  07A9  0268               	subwf	(charge_control@charge_count+1),w
  2736  07AA  3080               	movlw	low(01680h)
  2737  07AB  1903               	skipnz
  2738  07AC  0267               	subwf	(charge_control@charge_count),w
  2739  07AD  1C03               	skipc
  2740  07AE  2FB0               	goto	u5361
  2741  07AF  2FB1               	goto	u5360
  2742  07B0                     u5361:
  2743  07B0  2FC3               	goto	l1142
  2744  07B1                     u5360:
  2745                           	line	96
  2746                           	
  2747  07B1                     l17841:	
  2748                           ;main.c: 95: {
  2749                           ;main.c: 96: LED_VoltageChargeOutput(Bit_RESET);
  2750  07B1  3000               	movlw	(0)
  2751  07B2  158A  2269  118A   	fcall	_LED_VoltageChargeOutput
  2752                           	line	98
  2753                           ;main.c: 98: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), SET);
  2754  07B5  1283               	bcf	status, 5	;RP0=0, select bank0
  2755  07B6  1303               	bcf	status, 6	;RP1=0, select bank0
  2756  07B7  01CB               	clrf	(?_GPIO_WriteBit)
  2757  07B8  1403               	bsf	status,0
  2758  07B9  0DCB               	rlf	(?_GPIO_WriteBit),f
  2759  07BA  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  2760  07BB  1403               	bsf	status,0
  2761  07BC  0DCC               	rlf	0+(?_GPIO_WriteBit)+01h,f
  2762  07BD  3001               	movlw	(01h)
  2763  07BE  158A  257C  118A   	fcall	_GPIO_WriteBit
  2764  07C1  2FC3               	goto	l1142
  2765                           	line	99
  2766                           	
  2767  07C2                     l1141:	
  2768  07C2  2FC3               	goto	l1142
  2769                           	line	100
  2770                           	
  2771  07C3                     l1140:	
  2772                           	line	101
  2773                           	
  2774  07C3                     l1142:	
  2775  07C3  0008               	return
  2776                           	opt stack 0
  2777                           GLOBAL	__end_of_charge_control
  2778  07C4                     	__end_of_charge_control:
  2779 ;; =============== function _charge_control ends ============
  2780                           
  2781                           	signat	_charge_control,88
  2782                           	global	_Driver_Init
  2783                           psect	text1778,local,class=CODE,delta=2
  2784                           global __ptext1778
  2785  0C94                     __ptext1778:
  2786                           
  2787 ;; *************** function _Driver_Init *****************
  2788 ;; Defined at:
  2789 ;;		line 58 in file "main.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;		None               void
  2796 ;; Registers used:
  2797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2803 ;;      Params:         0       0       0       0
  2804 ;;      Locals:         0       0       0       0
  2805 ;;      Temps:          0       0       0       0
  2806 ;;      Totals:         0       0       0       0
  2807 ;;Total ram usage:        0 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    7
  2810 ;; This function calls:
  2811 ;;		_LED_Init
  2812 ;;		_KEY_Init
  2813 ;;		_Charge_Init
  2814 ;;		_ADC_Init
  2815 ;;		_LEDTimer_Cmd
  2816 ;;		_LEDTimer_INTConfig
  2817 ;;		_EEPROM_Init
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           psect	text1778
  2823                           	file	"main.c"
  2824                           	line	58
  2825                           	global	__size_of_Driver_Init
  2826  001E                     	__size_of_Driver_Init	equ	__end_of_Driver_Init-_Driver_Init
  2827                           	
  2828  0C94                     _Driver_Init:	
  2829                           	opt	stack 0
  2830                           ; Regs used in _Driver_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2831                           	line	60
  2832                           	
  2833  0C94                     l17821:	
  2834                           ;main.c: 60: LED_Init();
  2835  0C94  118A  240F  158A   	fcall	_LED_Init
  2836                           	line	63
  2837                           ;main.c: 63: KEY_Init();
  2838  0C97  158A  24F0  158A   	fcall	_KEY_Init
  2839                           	line	66
  2840                           ;main.c: 66: Charge_Init();
  2841  0C9A  158A  21C6  158A   	fcall	_Charge_Init
  2842                           	line	69
  2843                           	
  2844  0C9D                     l17823:	
  2845                           ;main.c: 69: ADC_Init((0x06));
  2846  0C9D  3006               	movlw	(06h)
  2847  0C9E  158A  241F  158A   	fcall	_ADC_Init
  2848                           	line	71
  2849                           	
  2850  0CA1                     l17825:	
  2851                           ;main.c: 71: LEDTimer_Cmd(TIM_PERIOD_0_33ms, ENABLE);
  2852  0CA1  1283               	bcf	status, 5	;RP0=0, select bank0
  2853  0CA2  1303               	bcf	status, 6	;RP1=0, select bank0
  2854  0CA3  01CB               	clrf	(?_LEDTimer_Cmd)
  2855  0CA4  1403               	bsf	status,0
  2856  0CA5  0DCB               	rlf	(?_LEDTimer_Cmd),f
  2857  0CA6  3002               	movlw	(02h)
  2858  0CA7  118A  274B  158A   	fcall	_LEDTimer_Cmd
  2859                           	line	72
  2860                           	
  2861  0CAA                     l17827:	
  2862                           ;main.c: 72: LEDTimer_INTConfig(ENABLE);
  2863  0CAA  3001               	movlw	(01h)
  2864  0CAB  158A  22CD  158A   	fcall	_LEDTimer_INTConfig
  2865                           	line	75
  2866                           	
  2867  0CAE                     l17829:	
  2868                           ;main.c: 75: EEPROM_Init();
  2869  0CAE  158A  2340  158A   	fcall	_EEPROM_Init
  2870                           	line	76
  2871                           	
  2872  0CB1                     l1136:	
  2873  0CB1  0008               	return
  2874                           	opt stack 0
  2875                           GLOBAL	__end_of_Driver_Init
  2876  0CB2                     	__end_of_Driver_Init:
  2877 ;; =============== function _Driver_Init ends ============
  2878                           
  2879                           	signat	_Driver_Init,88
  2880                           	global	_Motor_Start
  2881                           psect	text1779,local,class=CODE,delta=2
  2882                           global __ptext1779
  2883  068D                     __ptext1779:
  2884                           
  2885 ;; *************** function _Motor_Start *****************
  2886 ;; Defined at:
  2887 ;;		line 143 in file "ms83fxx02_motor.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  status          1    wreg     enum E1552
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  status          1   12[BANK0 ] enum E1552
  2892 ;; Return value:  Size  Location     Type
  2893 ;;		None               void
  2894 ;; Registers used:
  2895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2901 ;;      Params:         0       0       0       0
  2902 ;;      Locals:         0       1       0       0
  2903 ;;      Temps:          0       1       0       0
  2904 ;;      Totals:         0       2       0       0
  2905 ;;Total ram usage:        2 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    6
  2908 ;; This function calls:
  2909 ;;		_LED_DisplayMotorStatus
  2910 ;;		_Motor_Init
  2911 ;;		_SwitchModeTimer_Cmd
  2912 ;;		_SwitchModeTimer_INTConfig
  2913 ;; This function is called by:
  2914 ;;		_Motor_HandleStatusChangeEvt
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           psect	text1779
  2918                           	file	"ms83fxx02_motor.c"
  2919                           	line	143
  2920                           	global	__size_of_Motor_Start
  2921  0040                     	__size_of_Motor_Start	equ	__end_of_Motor_Start-_Motor_Start
  2922                           	
  2923  068D                     _Motor_Start:	
  2924                           	opt	stack 0
  2925                           ; Regs used in _Motor_Start: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2926                           ;Motor_Start@status stored from wreg
  2927  068D  1283               	bcf	status, 5	;RP0=0, select bank0
  2928  068E  1303               	bcf	status, 6	;RP1=0, select bank0
  2929  068F  00D3               	movwf	(Motor_Start@status)
  2930                           	line	145
  2931                           	
  2932  0690                     l17807:	
  2933                           ;ms83fxx02_motor.c: 145: switch(status)
  2934  0690  2EB1               	goto	l17817
  2935                           	line	147
  2936                           ;ms83fxx02_motor.c: 146: {
  2937                           ;ms83fxx02_motor.c: 147: case MOTOR_MODE_1:
  2938                           	
  2939  0691                     l8845:	
  2940                           	line	149
  2941                           	
  2942  0691                     l17809:	
  2943                           ;ms83fxx02_motor.c: 148: {
  2944                           ;ms83fxx02_motor.c: 149: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000004));
  2945  0691  3004               	movlw	(04h)
  2946  0692  00D2               	movwf	(??_Motor_Start+0)+0
  2947  0693  0852               	movf	(??_Motor_Start+0)+0,w
  2948  0694  00CF               	movwf	(?_LED_DisplayMotorStatus)
  2949  0695  3000               	movlw	(0)
  2950  0696  158A  26CC  118A   	fcall	_LED_DisplayMotorStatus
  2951                           	line	150
  2952                           ;ms83fxx02_motor.c: 150: break;
  2953  0699  2EBE               	goto	l17819
  2954                           	line	152
  2955                           ;ms83fxx02_motor.c: 151: }
  2956                           ;ms83fxx02_motor.c: 152: case MOTOR_MODE_2:
  2957                           	
  2958  069A                     l8847:	
  2959                           	line	154
  2960                           	
  2961  069A                     l17811:	
  2962                           ;ms83fxx02_motor.c: 153: {
  2963                           ;ms83fxx02_motor.c: 154: LED_DisplayMotorStatus(GPIOA, ((uint8_t)0x00000008));
  2964  069A  3008               	movlw	(08h)
  2965  069B  1283               	bcf	status, 5	;RP0=0, select bank0
  2966  069C  1303               	bcf	status, 6	;RP1=0, select bank0
  2967  069D  00D2               	movwf	(??_Motor_Start+0)+0
  2968  069E  0852               	movf	(??_Motor_Start+0)+0,w
  2969  069F  00CF               	movwf	(?_LED_DisplayMotorStatus)
  2970  06A0  3000               	movlw	(0)
  2971  06A1  158A  26CC  118A   	fcall	_LED_DisplayMotorStatus
  2972                           	line	155
  2973                           ;ms83fxx02_motor.c: 155: break;
  2974  06A4  2EBE               	goto	l17819
  2975                           	line	157
  2976                           ;ms83fxx02_motor.c: 156: }
  2977                           ;ms83fxx02_motor.c: 157: case MOTOR_MODE_3:
  2978                           	
  2979  06A5                     l8848:	
  2980                           	line	159
  2981                           	
  2982  06A5                     l17813:	
  2983                           ;ms83fxx02_motor.c: 158: {
  2984                           ;ms83fxx02_motor.c: 159: LED_DisplayMotorStatus(GPIOC, ((uint8_t)0x00000001));
  2985  06A5  1283               	bcf	status, 5	;RP0=0, select bank0
  2986  06A6  1303               	bcf	status, 6	;RP1=0, select bank0
  2987  06A7  01CF               	clrf	(?_LED_DisplayMotorStatus)
  2988  06A8  1403               	bsf	status,0
  2989  06A9  0DCF               	rlf	(?_LED_DisplayMotorStatus),f
  2990  06AA  3001               	movlw	(01h)
  2991  06AB  158A  26CC  118A   	fcall	_LED_DisplayMotorStatus
  2992                           	line	160
  2993                           ;ms83fxx02_motor.c: 160: break;
  2994  06AE  2EBE               	goto	l17819
  2995                           	line	162
  2996                           ;ms83fxx02_motor.c: 161: }
  2997                           ;ms83fxx02_motor.c: 162: default:
  2998                           	
  2999  06AF                     l8849:	
  3000                           	line	164
  3001                           ;ms83fxx02_motor.c: 163: {
  3002                           ;ms83fxx02_motor.c: 164: break;
  3003  06AF  2EBE               	goto	l17819
  3004                           	line	166
  3005                           	
  3006  06B0                     l17815:	
  3007                           ;ms83fxx02_motor.c: 165: }
  3008                           ;ms83fxx02_motor.c: 166: }
  3009  06B0  2EBE               	goto	l17819
  3010                           	line	145
  3011                           	
  3012  06B1                     l8844:	
  3013                           	
  3014  06B1                     l17817:	
  3015  06B1  1283               	bcf	status, 5	;RP0=0, select bank0
  3016  06B2  1303               	bcf	status, 6	;RP1=0, select bank0
  3017  06B3  0853               	movf	(Motor_Start@status),w
  3018                           	; Switch size 1, requested type "space"
  3019                           ; Number of cases is 3, Range of values is 2 to 4
  3020                           ; switch strategies available:
  3021                           ; Name         Instructions Cycles
  3022                           ; simple_byte           10     6 (average)
  3023                           ; direct_byte           16    10 (fixed)
  3024                           ; jumptable            263     9 (fixed)
  3025                           ;	Chosen strategy is simple_byte
  3026                           
  3027                           	opt asmopt_off
  3028  06B4  3A02               	xorlw	2^0	; case 2
  3029  06B5  1903               	skipnz
  3030  06B6  2E91               	goto	l17809
  3031  06B7  3A01               	xorlw	3^2	; case 3
  3032  06B8  1903               	skipnz
  3033  06B9  2E9A               	goto	l17811
  3034  06BA  3A07               	xorlw	4^3	; case 4
  3035  06BB  1903               	skipnz
  3036  06BC  2EA5               	goto	l17813
  3037  06BD  2EBE               	goto	l17819
  3038                           	opt asmopt_on
  3039                           
  3040                           	line	166
  3041                           	
  3042  06BE                     l8846:	
  3043                           	line	168
  3044                           	
  3045  06BE                     l17819:	
  3046                           ;ms83fxx02_motor.c: 168: Motor_Init(status);
  3047  06BE  1283               	bcf	status, 5	;RP0=0, select bank0
  3048  06BF  1303               	bcf	status, 6	;RP1=0, select bank0
  3049  06C0  0853               	movf	(Motor_Start@status),w
  3050  06C1  118A  2552  118A   	fcall	_Motor_Init
  3051                           	line	171
  3052                           ;ms83fxx02_motor.c: 171: SwitchModeTimer_Cmd(ENABLE);
  3053  06C4  3001               	movlw	(01h)
  3054  06C5  158A  2476  118A   	fcall	_SwitchModeTimer_Cmd
  3055                           	line	172
  3056                           ;ms83fxx02_motor.c: 172: SwitchModeTimer_INTConfig(ENABLE);
  3057  06C8  3001               	movlw	(01h)
  3058  06C9  158A  22F1  118A   	fcall	_SwitchModeTimer_INTConfig
  3059                           	line	177
  3060                           	
  3061  06CC                     l8850:	
  3062  06CC  0008               	return
  3063                           	opt stack 0
  3064                           GLOBAL	__end_of_Motor_Start
  3065  06CD                     	__end_of_Motor_Start:
  3066 ;; =============== function _Motor_Start ends ============
  3067                           
  3068                           	signat	_Motor_Start,4216
  3069                           	global	_Battery_Detect
  3070                           psect	text1780,local,class=CODE,delta=2
  3071                           global __ptext1780
  3072  012A                     __ptext1780:
  3073                           
  3074 ;; *************** function _Battery_Detect *****************
  3075 ;; Defined at:
  3076 ;;		line 216 in file "ms83fxx02_pwr.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;		None
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  adc_data        2   30[BANK0 ] unsigned int 
  3081 ;;  mode            1   29[BANK0 ] enum E1521
  3082 ;; Return value:  Size  Location     Type
  3083 ;;		None               void
  3084 ;; Registers used:
  3085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3091 ;;      Params:         0       0       0       0
  3092 ;;      Locals:         0       3       0       0
  3093 ;;      Temps:          0       1       0       0
  3094 ;;      Totals:         0       4       0       0
  3095 ;;Total ram usage:        4 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    6
  3098 ;; This function calls:
  3099 ;;		_Battery_HandleData
  3100 ;;		_GetDeviceMode
  3101 ;;		___lwtoft
  3102 ;;		___ftge
  3103 ;;		_EEPROM_SetFlag
  3104 ;;		_EEPROM_StoreModeData
  3105 ;;		_EEPROM_StoreMotorData
  3106 ;;		_LED_UnderVoltageOutput
  3107 ;;		_LED_Init
  3108 ;;		_KEY_DeInit
  3109 ;;		_Motor_Stop
  3110 ;;		_Motor_SetStatus
  3111 ;;		_MotorOperationTimer_Stop
  3112 ;;		_LEDTimer_DispUnderVoltCmd
  3113 ;;		_GPIO_WriteBit
  3114 ;; This function is called by:
  3115 ;;		_charge_control
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           psect	text1780
  3119                           	file	"ms83fxx02_pwr.c"
  3120                           	line	216
  3121                           	global	__size_of_Battery_Detect
  3122  00F7                     	__size_of_Battery_Detect	equ	__end_of_Battery_Detect-_Battery_Detect
  3123                           	
  3124  012A                     _Battery_Detect:	
  3125                           	opt	stack 0
  3126                           ; Regs used in _Battery_Detect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3127                           	line	217
  3128                           	
  3129  012A                     l17761:	
  3130                           ;ms83fxx02_pwr.c: 217: uint32_t adc_data = 0;
  3131  012A  1283               	bcf	status, 5	;RP0=0, select bank0
  3132  012B  1303               	bcf	status, 6	;RP1=0, select bank0
  3133  012C  01E5               	clrf	(Battery_Detect@adc_data)
  3134  012D  01E6               	clrf	(Battery_Detect@adc_data+1)
  3135                           	line	218
  3136                           	
  3137  012E                     l17763:	
  3138                           ;ms83fxx02_pwr.c: 218: DEVICE_MODE_Type mode = RUN_MODE;
  3139  012E  01E4               	clrf	(Battery_Detect@mode)
  3140                           	line	220
  3141                           	
  3142  012F                     l17765:	
  3143                           ;ms83fxx02_pwr.c: 220: if(!battery_handle_flag)
  3144  012F  08BA               	movf	(_battery_handle_flag),f
  3145  0130  1D03               	skipz	;volatile
  3146  0131  2933               	goto	u5261
  3147  0132  2934               	goto	u5260
  3148  0133                     u5261:
  3149  0133  2937               	goto	l17771
  3150  0134                     u5260:
  3151  0134  2A20               	goto	l10059
  3152                           	line	222
  3153                           	
  3154  0135                     l17767:	
  3155                           ;ms83fxx02_pwr.c: 221: {
  3156                           ;ms83fxx02_pwr.c: 222: return;
  3157  0135  2A20               	goto	l10059
  3158                           	line	223
  3159                           	
  3160  0136                     l17769:	
  3161                           ;ms83fxx02_pwr.c: 223: }
  3162  0136  2943               	goto	l17773
  3163                           	line	224
  3164                           	
  3165  0137                     l10058:	
  3166                           	line	226
  3167                           	
  3168  0137                     l17771:	
  3169                           ;ms83fxx02_pwr.c: 224: else
  3170                           ;ms83fxx02_pwr.c: 225: {
  3171                           ;ms83fxx02_pwr.c: 226: adc_data = Battery_HandleData();
  3172  0137  118A  2221  118A   	fcall	_Battery_HandleData
  3173  013A  1283               	bcf	status, 5	;RP0=0, select bank0
  3174  013B  1303               	bcf	status, 6	;RP1=0, select bank0
  3175  013C  084C               	movf	(1+(?_Battery_HandleData)),w
  3176  013D  01E6               	clrf	(Battery_Detect@adc_data+1)
  3177  013E  07E6               	addwf	(Battery_Detect@adc_data+1)
  3178  013F  084B               	movf	(0+(?_Battery_HandleData)),w
  3179  0140  01E5               	clrf	(Battery_Detect@adc_data)
  3180  0141  07E5               	addwf	(Battery_Detect@adc_data)
  3181                           
  3182  0142  2943               	goto	l17773
  3183                           	line	227
  3184                           	
  3185  0143                     l10060:	
  3186                           	line	229
  3187                           	
  3188  0143                     l17773:	
  3189                           ;ms83fxx02_pwr.c: 227: }
  3190                           ;ms83fxx02_pwr.c: 229: mode = GetDeviceMode();
  3191  0143  158A  21BB  118A   	fcall	_GetDeviceMode
  3192  0146  1283               	bcf	status, 5	;RP0=0, select bank0
  3193  0147  1303               	bcf	status, 6	;RP1=0, select bank0
  3194  0148  00E3               	movwf	(??_Battery_Detect+0)+0
  3195  0149  0863               	movf	(??_Battery_Detect+0)+0,w
  3196  014A  00E4               	movwf	(Battery_Detect@mode)
  3197                           	line	231
  3198                           	
  3199  014B                     l17775:	
  3200                           ;ms83fxx02_pwr.c: 231: if(mode == RUN_MODE)
  3201  014B  08E4               	movf	(Battery_Detect@mode),f
  3202  014C  1D03               	skipz
  3203  014D  294F               	goto	u5271
  3204  014E  2950               	goto	u5270
  3205  014F                     u5271:
  3206  014F  29EB               	goto	l17801
  3207  0150                     u5270:
  3208                           	line	234
  3209                           	
  3210  0150                     l17777:	
  3211                           ;ms83fxx02_pwr.c: 232: {
  3212                           ;ms83fxx02_pwr.c: 234: if(adc_data < ((uint16_t)(1024*2.8)/((float)3.7)))
  3213  0150  0866               	movf	(Battery_Detect@adc_data+1),w
  3214  0151  01E0               	clrf	(?___lwtoft+1)
  3215  0152  07E0               	addwf	(?___lwtoft+1)
  3216  0153  0865               	movf	(Battery_Detect@adc_data),w
  3217  0154  01DF               	clrf	(?___lwtoft)
  3218  0155  07DF               	addwf	(?___lwtoft)
  3219                           
  3220  0156  158A  23B2  118A   	fcall	___lwtoft
  3221  0159  1283               	bcf	status, 5	;RP0=0, select bank0
  3222  015A  1303               	bcf	status, 6	;RP1=0, select bank0
  3223  015B  085F               	movf	(0+(?___lwtoft)),w
  3224  015C  00D3               	movwf	(?___ftge)
  3225  015D  0860               	movf	(1+(?___lwtoft)),w
  3226  015E  00D4               	movwf	(?___ftge+1)
  3227  015F  0861               	movf	(2+(?___lwtoft)),w
  3228  0160  00D5               	movwf	(?___ftge+2)
  3229  0161  30B7               	movlw	0xb7
  3230  0162  00D6               	movwf	0+(?___ftge)+03h
  3231  0163  3041               	movlw	0x41
  3232  0164  00D7               	movwf	1+(?___ftge)+03h
  3233  0165  3044               	movlw	0x44
  3234  0166  00D8               	movwf	2+(?___ftge)+03h
  3235  0167  118A  247E  118A   	fcall	___ftge
  3236  016A  1803               	btfsc	status,0
  3237  016B  296D               	goto	u5281
  3238  016C  296E               	goto	u5280
  3239  016D                     u5281:
  3240  016D  298D               	goto	l17787
  3241  016E                     u5280:
  3242                           	line	238
  3243                           	
  3244  016E                     l17779:	
  3245                           ;ms83fxx02_pwr.c: 235: {
  3246                           ;ms83fxx02_pwr.c: 238: EEPROM_SetFlag();
  3247  016E  158A  21EF  118A   	fcall	_EEPROM_SetFlag
  3248                           	line	239
  3249                           ;ms83fxx02_pwr.c: 239: EEPROM_StoreModeData();
  3250  0171  158A  21F9  118A   	fcall	_EEPROM_StoreModeData
  3251                           	line	240
  3252                           ;ms83fxx02_pwr.c: 240: EEPROM_StoreMotorData();
  3253  0174  158A  25F3  118A   	fcall	_EEPROM_StoreMotorData
  3254                           	line	241
  3255                           ;ms83fxx02_pwr.c: 241: LED_UnderVoltageOutput(Bit_RESET);
  3256  0177  3000               	movlw	(0)
  3257  0178  158A  2289  118A   	fcall	_LED_UnderVoltageOutput
  3258                           	line	244
  3259                           	
  3260  017B                     l17781:	
  3261                           ;ms83fxx02_pwr.c: 244: LED_Init();
  3262  017B  118A  240F  118A   	fcall	_LED_Init
  3263                           	line	245
  3264                           	
  3265  017E                     l17783:	
  3266                           ;ms83fxx02_pwr.c: 245: KEY_DeInit();
  3267  017E  158A  2399  118A   	fcall	_KEY_DeInit
  3268                           	line	246
  3269                           ;ms83fxx02_pwr.c: 246: Motor_Stop();
  3270  0181  158A  261C  118A   	fcall	_Motor_Stop
  3271                           	line	247
  3272                           ;ms83fxx02_pwr.c: 247: Motor_SetStatus(MOTOR_MODE_STOP);
  3273  0184  3001               	movlw	(01h)
  3274  0185  158A  21CD  118A   	fcall	_Motor_SetStatus
  3275                           	line	248
  3276                           ;ms83fxx02_pwr.c: 248: MotorOperationTimer_Stop();
  3277  0188  158A  2317  118A   	fcall	_MotorOperationTimer_Stop
  3278                           	line	253
  3279                           	
  3280  018B                     l17785:	
  3281                           # 253 "ms83fxx02_pwr.c"
  3282  018B  0063               SLEEP ;#
  3283                           psect	text1780
  3284                           	line	255
  3285                           ;ms83fxx02_pwr.c: 255: }
  3286  018C  2A20               	goto	l10059
  3287                           	line	257
  3288                           	
  3289  018D                     l10062:	
  3290                           	
  3291  018D                     l17787:	
  3292                           ;ms83fxx02_pwr.c: 257: else if(adc_data < ((uint16_t)(1024*3.1)/((float)3.7)))
  3293  018D  1283               	bcf	status, 5	;RP0=0, select bank0
  3294  018E  1303               	bcf	status, 6	;RP1=0, select bank0
  3295  018F  0866               	movf	(Battery_Detect@adc_data+1),w
  3296  0190  01E0               	clrf	(?___lwtoft+1)
  3297  0191  07E0               	addwf	(?___lwtoft+1)
  3298  0192  0865               	movf	(Battery_Detect@adc_data),w
  3299  0193  01DF               	clrf	(?___lwtoft)
  3300  0194  07DF               	addwf	(?___lwtoft)
  3301                           
  3302  0195  158A  23B2  118A   	fcall	___lwtoft
  3303  0198  1283               	bcf	status, 5	;RP0=0, select bank0
  3304  0199  1303               	bcf	status, 6	;RP1=0, select bank0
  3305  019A  085F               	movf	(0+(?___lwtoft)),w
  3306  019B  00D3               	movwf	(?___ftge)
  3307  019C  0860               	movf	(1+(?___lwtoft)),w
  3308  019D  00D4               	movwf	(?___ftge+1)
  3309  019E  0861               	movf	(2+(?___lwtoft)),w
  3310  019F  00D5               	movwf	(?___ftge+2)
  3311  01A0  3076               	movlw	0x76
  3312  01A1  00D6               	movwf	0+(?___ftge)+03h
  3313  01A2  3056               	movlw	0x56
  3314  01A3  00D7               	movwf	1+(?___ftge)+03h
  3315  01A4  3044               	movlw	0x44
  3316  01A5  00D8               	movwf	2+(?___ftge)+03h
  3317  01A6  118A  247E  118A   	fcall	___ftge
  3318  01A9  1803               	btfsc	status,0
  3319  01AA  29AC               	goto	u5291
  3320  01AB  29AD               	goto	u5290
  3321  01AC                     u5291:
  3322  01AC  29B7               	goto	l17793
  3323  01AD                     u5290:
  3324                           	line	260
  3325                           	
  3326  01AD                     l17789:	
  3327                           ;ms83fxx02_pwr.c: 258: {
  3328                           ;ms83fxx02_pwr.c: 260: LEDTimer_DispUnderVoltCmd(ENABLE);
  3329  01AD  3001               	movlw	(01h)
  3330  01AE  158A  222D  118A   	fcall	_LEDTimer_DispUnderVoltCmd
  3331                           	line	261
  3332                           	
  3333  01B1                     l17791:	
  3334                           ;ms83fxx02_pwr.c: 261: detect_under_voltage = 1;
  3335  01B1  1283               	bcf	status, 5	;RP0=0, select bank0
  3336  01B2  1303               	bcf	status, 6	;RP1=0, select bank0
  3337  01B3  01BD               	clrf	(_detect_under_voltage)
  3338  01B4  1403               	bsf	status,0
  3339  01B5  0DBD               	rlf	(_detect_under_voltage),f
  3340                           	line	263
  3341                           ;ms83fxx02_pwr.c: 263: }
  3342  01B6  2A20               	goto	l10059
  3343                           	line	265
  3344                           	
  3345  01B7                     l10064:	
  3346                           	line	267
  3347                           	
  3348  01B7                     l17793:	
  3349                           ;ms83fxx02_pwr.c: 265: else
  3350                           ;ms83fxx02_pwr.c: 266: {
  3351                           ;ms83fxx02_pwr.c: 267: if(detect_under_voltage)
  3352  01B7  1283               	bcf	status, 5	;RP0=0, select bank0
  3353  01B8  1303               	bcf	status, 6	;RP1=0, select bank0
  3354  01B9  083D               	movf	(_detect_under_voltage),w
  3355  01BA  1D03               	skipz
  3356  01BB  29BD               	goto	u5300
  3357  01BC  2A20               	goto	l10059
  3358  01BD                     u5300:
  3359                           	line	269
  3360                           	
  3361  01BD                     l17795:	
  3362                           ;ms83fxx02_pwr.c: 268: {
  3363                           ;ms83fxx02_pwr.c: 269: if(adc_data > ((uint16_t)(1024*3.2)/((float)3.7)))
  3364  01BD  305A               	movlw	0x5a
  3365  01BE  00D3               	movwf	(?___ftge)
  3366  01BF  305D               	movlw	0x5d
  3367  01C0  00D4               	movwf	(?___ftge+1)
  3368  01C1  3044               	movlw	0x44
  3369  01C2  00D5               	movwf	(?___ftge+2)
  3370  01C3  0866               	movf	(Battery_Detect@adc_data+1),w
  3371  01C4  01E0               	clrf	(?___lwtoft+1)
  3372  01C5  07E0               	addwf	(?___lwtoft+1)
  3373  01C6  0865               	movf	(Battery_Detect@adc_data),w
  3374  01C7  01DF               	clrf	(?___lwtoft)
  3375  01C8  07DF               	addwf	(?___lwtoft)
  3376                           
  3377  01C9  158A  23B2  118A   	fcall	___lwtoft
  3378  01CC  1283               	bcf	status, 5	;RP0=0, select bank0
  3379  01CD  1303               	bcf	status, 6	;RP1=0, select bank0
  3380  01CE  085F               	movf	(0+(?___lwtoft)),w
  3381  01CF  00D6               	movwf	0+(?___ftge)+03h
  3382  01D0  0860               	movf	(1+(?___lwtoft)),w
  3383  01D1  00D7               	movwf	1+(?___ftge)+03h
  3384  01D2  0861               	movf	(2+(?___lwtoft)),w
  3385  01D3  00D8               	movwf	2+(?___ftge)+03h
  3386  01D4  118A  247E  118A   	fcall	___ftge
  3387  01D7  1803               	btfsc	status,0
  3388  01D8  29DA               	goto	u5311
  3389  01D9  29DB               	goto	u5310
  3390  01DA                     u5311:
  3391  01DA  2A20               	goto	l10059
  3392  01DB                     u5310:
  3393                           	line	271
  3394                           	
  3395  01DB                     l17797:	
  3396                           ;ms83fxx02_pwr.c: 270: {
  3397                           ;ms83fxx02_pwr.c: 271: detect_under_voltage = 0;
  3398  01DB  1283               	bcf	status, 5	;RP0=0, select bank0
  3399  01DC  1303               	bcf	status, 6	;RP1=0, select bank0
  3400  01DD  01BD               	clrf	(_detect_under_voltage)
  3401                           	line	272
  3402                           	
  3403  01DE                     l17799:	
  3404                           ;ms83fxx02_pwr.c: 272: LED_UnderVoltageOutput(Bit_RESET);
  3405  01DE  3000               	movlw	(0)
  3406  01DF  158A  2289  118A   	fcall	_LED_UnderVoltageOutput
  3407                           	line	274
  3408                           ;ms83fxx02_pwr.c: 274: LEDTimer_DispUnderVoltCmd(DISABLE);
  3409  01E2  3000               	movlw	(0)
  3410  01E3  158A  222D  118A   	fcall	_LEDTimer_DispUnderVoltCmd
  3411  01E6  2A20               	goto	l10059
  3412                           	line	275
  3413                           	
  3414  01E7                     l10067:	
  3415  01E7  2A20               	goto	l10059
  3416                           	line	276
  3417                           	
  3418  01E8                     l10066:	
  3419  01E8  2A20               	goto	l10059
  3420                           	line	277
  3421                           	
  3422  01E9                     l10065:	
  3423  01E9  2A20               	goto	l10059
  3424                           	
  3425  01EA                     l10063:	
  3426                           	line	279
  3427                           ;ms83fxx02_pwr.c: 275: }
  3428                           ;ms83fxx02_pwr.c: 276: }
  3429                           ;ms83fxx02_pwr.c: 277: }
  3430                           ;ms83fxx02_pwr.c: 279: }
  3431  01EA  2A20               	goto	l10059
  3432                           	line	280
  3433                           	
  3434  01EB                     l10061:	
  3435                           	line	282
  3436                           	
  3437  01EB                     l17801:	
  3438                           ;ms83fxx02_pwr.c: 280: else
  3439                           ;ms83fxx02_pwr.c: 281: {
  3440                           ;ms83fxx02_pwr.c: 282: if(mode == CHARGE_MODE)
  3441  01EB  1283               	bcf	status, 5	;RP0=0, select bank0
  3442  01EC  1303               	bcf	status, 6	;RP1=0, select bank0
  3443  01ED  0864               	movf	(Battery_Detect@mode),w
  3444  01EE  3A01               	xorlw	01h
  3445  01EF  1D03               	skipz
  3446  01F0  29F2               	goto	u5321
  3447  01F1  29F3               	goto	u5320
  3448  01F2                     u5321:
  3449  01F2  2A20               	goto	l10059
  3450  01F3                     u5320:
  3451                           	line	285
  3452                           	
  3453  01F3                     l17803:	
  3454                           ;ms83fxx02_pwr.c: 283: {
  3455                           ;ms83fxx02_pwr.c: 285: if(adc_data > ((uint16_t)(1024*3.4)/((float)3.7)))
  3456  01F3  3034               	movlw	0x34
  3457  01F4  00D3               	movwf	(?___ftge)
  3458  01F5  306B               	movlw	0x6b
  3459  01F6  00D4               	movwf	(?___ftge+1)
  3460  01F7  3044               	movlw	0x44
  3461  01F8  00D5               	movwf	(?___ftge+2)
  3462  01F9  0866               	movf	(Battery_Detect@adc_data+1),w
  3463  01FA  01E0               	clrf	(?___lwtoft+1)
  3464  01FB  07E0               	addwf	(?___lwtoft+1)
  3465  01FC  0865               	movf	(Battery_Detect@adc_data),w
  3466  01FD  01DF               	clrf	(?___lwtoft)
  3467  01FE  07DF               	addwf	(?___lwtoft)
  3468                           
  3469  01FF  158A  23B2  118A   	fcall	___lwtoft
  3470  0202  1283               	bcf	status, 5	;RP0=0, select bank0
  3471  0203  1303               	bcf	status, 6	;RP1=0, select bank0
  3472  0204  085F               	movf	(0+(?___lwtoft)),w
  3473  0205  00D6               	movwf	0+(?___ftge)+03h
  3474  0206  0860               	movf	(1+(?___lwtoft)),w
  3475  0207  00D7               	movwf	1+(?___ftge)+03h
  3476  0208  0861               	movf	(2+(?___lwtoft)),w
  3477  0209  00D8               	movwf	2+(?___ftge)+03h
  3478  020A  118A  247E  118A   	fcall	___ftge
  3479  020D  1803               	btfsc	status,0
  3480  020E  2A10               	goto	u5331
  3481  020F  2A11               	goto	u5330
  3482  0210                     u5331:
  3483  0210  2A20               	goto	l10059
  3484  0211                     u5330:
  3485                           	line	288
  3486                           	
  3487  0211                     l17805:	
  3488                           ;ms83fxx02_pwr.c: 286: {
  3489                           ;ms83fxx02_pwr.c: 288: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_SET);
  3490  0211  1283               	bcf	status, 5	;RP0=0, select bank0
  3491  0212  1303               	bcf	status, 6	;RP1=0, select bank0
  3492  0213  01CB               	clrf	(?_GPIO_WriteBit)
  3493  0214  1403               	bsf	status,0
  3494  0215  0DCB               	rlf	(?_GPIO_WriteBit),f
  3495  0216  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  3496  0217  1403               	bsf	status,0
  3497  0218  0DCC               	rlf	0+(?_GPIO_WriteBit)+01h,f
  3498  0219  3001               	movlw	(01h)
  3499  021A  158A  257C  118A   	fcall	_GPIO_WriteBit
  3500  021D  2A20               	goto	l10059
  3501                           	line	289
  3502                           	
  3503  021E                     l10070:	
  3504  021E  2A20               	goto	l10059
  3505                           	line	290
  3506                           	
  3507  021F                     l10069:	
  3508  021F  2A20               	goto	l10059
  3509                           	line	291
  3510                           	
  3511  0220                     l10068:	
  3512                           	line	292
  3513                           	
  3514  0220                     l10059:	
  3515  0220  0008               	return
  3516                           	opt stack 0
  3517                           GLOBAL	__end_of_Battery_Detect
  3518  0221                     	__end_of_Battery_Detect:
  3519 ;; =============== function _Battery_Detect ends ============
  3520                           
  3521                           	signat	_Battery_Detect,88
  3522                           	global	_Charge_Init
  3523                           psect	text1781,local,class=CODE,delta=2
  3524                           global __ptext1781
  3525  09C6                     __ptext1781:
  3526                           
  3527 ;; *************** function _Charge_Init *****************
  3528 ;; Defined at:
  3529 ;;		line 49 in file "ms83fxx02_charge.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;		None               void
  3536 ;; Registers used:
  3537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3543 ;;      Params:         0       0       0       0
  3544 ;;      Locals:         0       0       0       0
  3545 ;;      Temps:          0       0       0       0
  3546 ;;      Totals:         0       0       0       0
  3547 ;;Total ram usage:        0 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    6
  3550 ;; This function calls:
  3551 ;;		_ChargeDetect_Init
  3552 ;;		_ChargeCtrl_Init
  3553 ;; This function is called by:
  3554 ;;		_Driver_Init
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           psect	text1781
  3558                           	file	"ms83fxx02_charge.c"
  3559                           	line	49
  3560                           	global	__size_of_Charge_Init
  3561  0007                     	__size_of_Charge_Init	equ	__end_of_Charge_Init-_Charge_Init
  3562                           	
  3563  09C6                     _Charge_Init:	
  3564                           	opt	stack 0
  3565                           ; Regs used in _Charge_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3566                           	line	50
  3567                           	
  3568  09C6                     l17759:	
  3569                           ;ms83fxx02_charge.c: 50: ChargeDetect_Init();
  3570  09C6  158A  25A3  158A   	fcall	_ChargeDetect_Init
  3571                           	line	51
  3572                           ;ms83fxx02_charge.c: 51: ChargeCtrl_Init();
  3573  09C9  158A  2459  158A   	fcall	_ChargeCtrl_Init
  3574                           	line	52
  3575                           	
  3576  09CC                     l2250:	
  3577  09CC  0008               	return
  3578                           	opt stack 0
  3579                           GLOBAL	__end_of_Charge_Init
  3580  09CD                     	__end_of_Charge_Init:
  3581 ;; =============== function _Charge_Init ends ============
  3582                           
  3583                           	signat	_Charge_Init,88
  3584                           	global	___lwtoft
  3585                           psect	text1782,local,class=CODE,delta=2
  3586                           global __ptext1782
  3587  0BB2                     __ptext1782:
  3588                           
  3589 ;; *************** function ___lwtoft *****************
  3590 ;; Defined at:
  3591 ;;		line 29 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwtoft.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  c               2   24[BANK0 ] unsigned int 
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  3   24[BANK0 ] float 
  3598 ;; Registers used:
  3599 ;;		wreg, status,2, status,0, pclath, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3605 ;;      Params:         0       3       0       0
  3606 ;;      Locals:         0       0       0       0
  3607 ;;      Temps:          0       1       0       0
  3608 ;;      Totals:         0       4       0       0
  3609 ;;Total ram usage:        4 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    5
  3612 ;; This function calls:
  3613 ;;		___ftpack
  3614 ;; This function is called by:
  3615 ;;		_Battery_Detect
  3616 ;; This function uses a non-reentrant model
  3617 ;;
  3618                           psect	text1782
  3619                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwtoft.c"
  3620                           	line	29
  3621                           	global	__size_of___lwtoft
  3622  0019                     	__size_of___lwtoft	equ	__end_of___lwtoft-___lwtoft
  3623                           	
  3624  0BB2                     ___lwtoft:	
  3625                           	opt	stack 0
  3626                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3627                           	line	30
  3628                           	
  3629  0BB2                     l17755:	
  3630  0BB2  1283               	bcf	status, 5	;RP0=0, select bank0
  3631  0BB3  1303               	bcf	status, 6	;RP1=0, select bank0
  3632  0BB4  085F               	movf	(___lwtoft@c),w
  3633  0BB5  00CB               	movwf	(?___ftpack)
  3634  0BB6  0860               	movf	(___lwtoft@c+1),w
  3635  0BB7  00CC               	movwf	(?___ftpack+1)
  3636  0BB8  01CD               	clrf	(?___ftpack+2)
  3637  0BB9  308E               	movlw	(08Eh)
  3638  0BBA  00E2               	movwf	(??___lwtoft+0)+0
  3639  0BBB  0862               	movf	(??___lwtoft+0)+0,w
  3640  0BBC  00CE               	movwf	0+(?___ftpack)+03h
  3641  0BBD  01CF               	clrf	0+(?___ftpack)+04h
  3642  0BBE  118A  2321  158A   	fcall	___ftpack
  3643  0BC1  1283               	bcf	status, 5	;RP0=0, select bank0
  3644  0BC2  1303               	bcf	status, 6	;RP1=0, select bank0
  3645  0BC3  084B               	movf	(0+(?___ftpack)),w
  3646  0BC4  00DF               	movwf	(?___lwtoft)
  3647  0BC5  084C               	movf	(1+(?___ftpack)),w
  3648  0BC6  00E0               	movwf	(?___lwtoft+1)
  3649  0BC7  084D               	movf	(2+(?___ftpack)),w
  3650  0BC8  00E1               	movwf	(?___lwtoft+2)
  3651  0BC9  2BCA               	goto	l14226
  3652                           	
  3653  0BCA                     l17757:	
  3654                           	line	31
  3655                           	
  3656  0BCA                     l14226:	
  3657  0BCA  0008               	return
  3658                           	opt stack 0
  3659                           GLOBAL	__end_of___lwtoft
  3660  0BCB                     	__end_of___lwtoft:
  3661 ;; =============== function ___lwtoft ends ============
  3662                           
  3663                           	signat	___lwtoft,4219
  3664                           	global	_EEPROM_StoreModeData
  3665                           psect	text1783,local,class=CODE,delta=2
  3666                           global __ptext1783
  3667  09F9                     __ptext1783:
  3668                           
  3669 ;; *************** function _EEPROM_StoreModeData *****************
  3670 ;; Defined at:
  3671 ;;		line 184 in file "ms83fxx02_pwr.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;		None               void
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, pclath, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3685 ;;      Params:         0       0       0       0
  3686 ;;      Locals:         0       0       0       0
  3687 ;;      Temps:          0       1       0       0
  3688 ;;      Totals:         0       1       0       0
  3689 ;;Total ram usage:        1 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    5
  3692 ;; This function calls:
  3693 ;;		_EEPROM_Write
  3694 ;; This function is called by:
  3695 ;;		_Battery_Detect
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           psect	text1783
  3699                           	file	"ms83fxx02_pwr.c"
  3700                           	line	184
  3701                           	global	__size_of_EEPROM_StoreModeData
  3702  000B                     	__size_of_EEPROM_StoreModeData	equ	__end_of_EEPROM_StoreModeData-_EEPROM_StoreModeData
  3703                           	
  3704  09F9                     _EEPROM_StoreModeData:	
  3705                           	opt	stack 0
  3706                           ; Regs used in _EEPROM_StoreModeData: [wreg+status,2+status,0+pclath+cstack]
  3707                           	line	185
  3708                           	
  3709  09F9                     l17753:	
  3710                           ;ms83fxx02_pwr.c: 185: EEPROM_Write(0x11, device_mode);
  3711  09F9  1283               	bcf	status, 5	;RP0=0, select bank0
  3712  09FA  1303               	bcf	status, 6	;RP1=0, select bank0
  3713  09FB  083E               	movf	(_device_mode),w	;volatile
  3714  09FC  00CD               	movwf	(??_EEPROM_StoreModeData+0)+0
  3715  09FD  084D               	movf	(??_EEPROM_StoreModeData+0)+0,w
  3716  09FE  00CB               	movwf	(?_EEPROM_Write)
  3717  09FF  3011               	movlw	(011h)
  3718  0A00  158A  24D1  158A   	fcall	_EEPROM_Write
  3719                           	line	186
  3720                           	
  3721  0A03                     l10046:	
  3722  0A03  0008               	return
  3723                           	opt stack 0
  3724                           GLOBAL	__end_of_EEPROM_StoreModeData
  3725  0A04                     	__end_of_EEPROM_StoreModeData:
  3726 ;; =============== function _EEPROM_StoreModeData ends ============
  3727                           
  3728                           	signat	_EEPROM_StoreModeData,88
  3729                           	global	_EEPROM_SetFlag
  3730                           psect	text1784,local,class=CODE,delta=2
  3731                           global __ptext1784
  3732  09EF                     __ptext1784:
  3733                           
  3734 ;; *************** function _EEPROM_SetFlag *****************
  3735 ;; Defined at:
  3736 ;;		line 174 in file "ms83fxx02_pwr.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;		None               void
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, pclath, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3750 ;;      Params:         0       0       0       0
  3751 ;;      Locals:         0       0       0       0
  3752 ;;      Temps:          0       0       0       0
  3753 ;;      Totals:         0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    5
  3757 ;; This function calls:
  3758 ;;		_EEPROM_Write
  3759 ;; This function is called by:
  3760 ;;		_Battery_Detect
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           psect	text1784
  3764                           	file	"ms83fxx02_pwr.c"
  3765                           	line	174
  3766                           	global	__size_of_EEPROM_SetFlag
  3767  000A                     	__size_of_EEPROM_SetFlag	equ	__end_of_EEPROM_SetFlag-_EEPROM_SetFlag
  3768                           	
  3769  09EF                     _EEPROM_SetFlag:	
  3770                           	opt	stack 0
  3771                           ; Regs used in _EEPROM_SetFlag: [wreg+status,2+status,0+pclath+cstack]
  3772                           	line	175
  3773                           	
  3774  09EF                     l17751:	
  3775                           ;ms83fxx02_pwr.c: 175: EEPROM_Write(0x16, 0x01);
  3776  09EF  1283               	bcf	status, 5	;RP0=0, select bank0
  3777  09F0  1303               	bcf	status, 6	;RP1=0, select bank0
  3778  09F1  01CB               	clrf	(?_EEPROM_Write)
  3779  09F2  1403               	bsf	status,0
  3780  09F3  0DCB               	rlf	(?_EEPROM_Write),f
  3781  09F4  3016               	movlw	(016h)
  3782  09F5  158A  24D1  158A   	fcall	_EEPROM_Write
  3783                           	line	176
  3784                           	
  3785  09F8                     l10040:	
  3786  09F8  0008               	return
  3787                           	opt stack 0
  3788                           GLOBAL	__end_of_EEPROM_SetFlag
  3789  09F9                     	__end_of_EEPROM_SetFlag:
  3790 ;; =============== function _EEPROM_SetFlag ends ============
  3791                           
  3792                           	signat	_EEPROM_SetFlag,88
  3793                           	global	_EEPROM_StoreMotorData
  3794                           psect	text1785,local,class=CODE,delta=2
  3795                           global __ptext1785
  3796  0DF3                     __ptext1785:
  3797                           
  3798 ;; *************** function _EEPROM_StoreMotorData *****************
  3799 ;; Defined at:
  3800 ;;		line 511 in file "ms83fxx02_motor.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;		None
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;		None
  3805 ;; Return value:  Size  Location     Type
  3806 ;;		None               void
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, pclath, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3814 ;;      Params:         0       0       0       0
  3815 ;;      Locals:         0       0       0       0
  3816 ;;      Temps:          0       1       0       0
  3817 ;;      Totals:         0       1       0       0
  3818 ;;Total ram usage:        1 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    5
  3821 ;; This function calls:
  3822 ;;		_EEPROM_Write
  3823 ;; This function is called by:
  3824 ;;		_Battery_Detect
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           psect	text1785
  3828                           	file	"ms83fxx02_motor.c"
  3829                           	line	511
  3830                           	global	__size_of_EEPROM_StoreMotorData
  3831  0029                     	__size_of_EEPROM_StoreMotorData	equ	__end_of_EEPROM_StoreMotorData-_EEPROM_StoreMotorDa
                                 ta
  3832                           	
  3833  0DF3                     _EEPROM_StoreMotorData:	
  3834                           	opt	stack 0
  3835                           ; Regs used in _EEPROM_StoreMotorData: [wreg+status,2+status,0+pclath+cstack]
  3836                           	line	512
  3837                           	
  3838  0DF3                     l17749:	
  3839                           ;ms83fxx02_motor.c: 512: EEPROM_Write(0x12, motor_status);
  3840  0DF3  087C               	movf	(_motor_status),w	;volatile
  3841  0DF4  1283               	bcf	status, 5	;RP0=0, select bank0
  3842  0DF5  1303               	bcf	status, 6	;RP1=0, select bank0
  3843  0DF6  00CD               	movwf	(??_EEPROM_StoreMotorData+0)+0
  3844  0DF7  084D               	movf	(??_EEPROM_StoreMotorData+0)+0,w
  3845  0DF8  00CB               	movwf	(?_EEPROM_Write)
  3846  0DF9  3012               	movlw	(012h)
  3847  0DFA  158A  24D1  158A   	fcall	_EEPROM_Write
  3848                           	line	513
  3849                           ;ms83fxx02_motor.c: 513: EEPROM_Write(0x13, motor_intr_count);
  3850  0DFD  087D               	movf	(_motor_intr_count),w	;volatile
  3851  0DFE  1283               	bcf	status, 5	;RP0=0, select bank0
  3852  0DFF  1303               	bcf	status, 6	;RP1=0, select bank0
  3853  0E00  00CD               	movwf	(??_EEPROM_StoreMotorData+0)+0
  3854  0E01  084D               	movf	(??_EEPROM_StoreMotorData+0)+0,w
  3855  0E02  00CB               	movwf	(?_EEPROM_Write)
  3856  0E03  3013               	movlw	(013h)
  3857  0E04  158A  24D1  158A   	fcall	_EEPROM_Write
  3858                           	line	514
  3859                           ;ms83fxx02_motor.c: 514: EEPROM_Write(0x14, motor_oper_record);
  3860  0E07  1283               	bcf	status, 5	;RP0=0, select bank0
  3861  0E08  1303               	bcf	status, 6	;RP1=0, select bank0
  3862  0E09  0836               	movf	(_motor_oper_record),w	;volatile
  3863  0E0A  00CD               	movwf	(??_EEPROM_StoreMotorData+0)+0
  3864  0E0B  084D               	movf	(??_EEPROM_StoreMotorData+0)+0,w
  3865  0E0C  00CB               	movwf	(?_EEPROM_Write)
  3866  0E0D  3014               	movlw	(014h)
  3867  0E0E  158A  24D1  158A   	fcall	_EEPROM_Write
  3868                           	line	515
  3869                           ;ms83fxx02_motor.c: 515: EEPROM_Write(0x15, motor_timing_running_flag);
  3870  0E11  1283               	bcf	status, 5	;RP0=0, select bank0
  3871  0E12  1303               	bcf	status, 6	;RP1=0, select bank0
  3872  0E13  086A               	movf	(_motor_timing_running_flag),w
  3873  0E14  00CD               	movwf	(??_EEPROM_StoreMotorData+0)+0
  3874  0E15  084D               	movf	(??_EEPROM_StoreMotorData+0)+0,w
  3875  0E16  00CB               	movwf	(?_EEPROM_Write)
  3876  0E17  3015               	movlw	(015h)
  3877  0E18  158A  24D1  158A   	fcall	_EEPROM_Write
  3878                           	line	516
  3879                           	
  3880  0E1B                     l8914:	
  3881  0E1B  0008               	return
  3882                           	opt stack 0
  3883                           GLOBAL	__end_of_EEPROM_StoreMotorData
  3884  0E1C                     	__end_of_EEPROM_StoreMotorData:
  3885 ;; =============== function _EEPROM_StoreMotorData ends ============
  3886                           
  3887                           	signat	_EEPROM_StoreMotorData,88
  3888                           	global	_LED_UnderVoltageOutput
  3889                           psect	text1786,local,class=CODE,delta=2
  3890                           global __ptext1786
  3891  0A89                     __ptext1786:
  3892                           
  3893 ;; *************** function _LED_UnderVoltageOutput *****************
  3894 ;; Defined at:
  3895 ;;		line 85 in file "ms83fxx02_led.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  BitVal          1    wreg     enum E1499
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  BitVal          1   10[BANK0 ] enum E1499
  3900 ;; Return value:  Size  Location     Type
  3901 ;;		None               void
  3902 ;; Registers used:
  3903 ;;		wreg, status,2, status,0, pclath, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3909 ;;      Params:         0       0       0       0
  3910 ;;      Locals:         0       1       0       0
  3911 ;;      Temps:          0       2       0       0
  3912 ;;      Totals:         0       3       0       0
  3913 ;;Total ram usage:        3 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    5
  3916 ;; This function calls:
  3917 ;;		_GPIO_WriteBit
  3918 ;; This function is called by:
  3919 ;;		_Battery_Detect
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           psect	text1786
  3923                           	file	"ms83fxx02_led.c"
  3924                           	line	85
  3925                           	global	__size_of_LED_UnderVoltageOutput
  3926  0010                     	__size_of_LED_UnderVoltageOutput	equ	__end_of_LED_UnderVoltageOutput-_LED_UnderVoltageO
                                 utput
  3927                           	
  3928  0A89                     _LED_UnderVoltageOutput:	
  3929                           	opt	stack 0
  3930                           ; Regs used in _LED_UnderVoltageOutput: [wreg+status,2+status,0+pclath+cstack]
  3931                           ;LED_UnderVoltageOutput@BitVal stored from wreg
  3932  0A89  1283               	bcf	status, 5	;RP0=0, select bank0
  3933  0A8A  1303               	bcf	status, 6	;RP1=0, select bank0
  3934  0A8B  00D1               	movwf	(LED_UnderVoltageOutput@BitVal)
  3935                           	line	86
  3936                           	
  3937  0A8C                     l17747:	
  3938                           ;ms83fxx02_led.c: 86: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000040), BitVal);
  3939  0A8C  3040               	movlw	(040h)
  3940  0A8D  00CF               	movwf	(??_LED_UnderVoltageOutput+0)+0
  3941  0A8E  084F               	movf	(??_LED_UnderVoltageOutput+0)+0,w
  3942  0A8F  00CB               	movwf	(?_GPIO_WriteBit)
  3943  0A90  0851               	movf	(LED_UnderVoltageOutput@BitVal),w
  3944  0A91  00D0               	movwf	(??_LED_UnderVoltageOutput+1)+0
  3945  0A92  0850               	movf	(??_LED_UnderVoltageOutput+1)+0,w
  3946  0A93  00CC               	movwf	0+(?_GPIO_WriteBit)+01h
  3947  0A94  3000               	movlw	(0)
  3948  0A95  158A  257C  158A   	fcall	_GPIO_WriteBit
  3949                           	line	87
  3950                           	
  3951  0A98                     l6625:	
  3952  0A98  0008               	return
  3953                           	opt stack 0
  3954                           GLOBAL	__end_of_LED_UnderVoltageOutput
  3955  0A99                     	__end_of_LED_UnderVoltageOutput:
  3956 ;; =============== function _LED_UnderVoltageOutput ends ============
  3957                           
  3958                           	signat	_LED_UnderVoltageOutput,4216
  3959                           	global	_LED_DisplayMotorStatus
  3960                           psect	text1787,local,class=CODE,delta=2
  3961                           global __ptext1787
  3962  0ECC                     __ptext1787:
  3963                           
  3964 ;; *************** function _LED_DisplayMotorStatus *****************
  3965 ;; Defined at:
  3966 ;;		line 56 in file "ms83fxx02_led.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  GPIOx           1    wreg     enum E1491
  3969 ;;  GPIO_Pin        1    8[BANK0 ] unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  GPIOx           1   10[BANK0 ] enum E1491
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3981 ;;      Params:         0       1       0       0
  3982 ;;      Locals:         0       1       0       0
  3983 ;;      Temps:          0       1       0       0
  3984 ;;      Totals:         0       3       0       0
  3985 ;;Total ram usage:        3 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    5
  3988 ;; This function calls:
  3989 ;;		_GPIO_WriteBit
  3990 ;; This function is called by:
  3991 ;;		_Motor_Start
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           psect	text1787
  3995                           	file	"ms83fxx02_led.c"
  3996                           	line	56
  3997                           	global	__size_of_LED_DisplayMotorStatus
  3998  002F                     	__size_of_LED_DisplayMotorStatus	equ	__end_of_LED_DisplayMotorStatus-_LED_DisplayMotorS
                                 tatus
  3999                           	
  4000  0ECC                     _LED_DisplayMotorStatus:	
  4001                           	opt	stack 0
  4002                           ; Regs used in _LED_DisplayMotorStatus: [wreg+status,2+status,0+pclath+cstack]
  4003                           ;LED_DisplayMotorStatus@GPIOx stored from wreg
  4004  0ECC  1283               	bcf	status, 5	;RP0=0, select bank0
  4005  0ECD  1303               	bcf	status, 6	;RP1=0, select bank0
  4006  0ECE  00D1               	movwf	(LED_DisplayMotorStatus@GPIOx)
  4007                           	line	57
  4008                           	
  4009  0ECF                     l17745:	
  4010                           ;ms83fxx02_led.c: 57: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  4011  0ECF  3004               	movlw	(04h)
  4012  0ED0  00D0               	movwf	(??_LED_DisplayMotorStatus+0)+0
  4013  0ED1  0850               	movf	(??_LED_DisplayMotorStatus+0)+0,w
  4014  0ED2  00CB               	movwf	(?_GPIO_WriteBit)
  4015  0ED3  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4016  0ED4  3000               	movlw	(0)
  4017  0ED5  158A  257C  158A   	fcall	_GPIO_WriteBit
  4018                           	line	58
  4019                           ;ms83fxx02_led.c: 58: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  4020  0ED8  3008               	movlw	(08h)
  4021  0ED9  1283               	bcf	status, 5	;RP0=0, select bank0
  4022  0EDA  1303               	bcf	status, 6	;RP1=0, select bank0
  4023  0EDB  00D0               	movwf	(??_LED_DisplayMotorStatus+0)+0
  4024  0EDC  0850               	movf	(??_LED_DisplayMotorStatus+0)+0,w
  4025  0EDD  00CB               	movwf	(?_GPIO_WriteBit)
  4026  0EDE  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4027  0EDF  3000               	movlw	(0)
  4028  0EE0  158A  257C  158A   	fcall	_GPIO_WriteBit
  4029                           	line	59
  4030                           ;ms83fxx02_led.c: 59: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  4031  0EE3  1283               	bcf	status, 5	;RP0=0, select bank0
  4032  0EE4  1303               	bcf	status, 6	;RP1=0, select bank0
  4033  0EE5  01CB               	clrf	(?_GPIO_WriteBit)
  4034  0EE6  1403               	bsf	status,0
  4035  0EE7  0DCB               	rlf	(?_GPIO_WriteBit),f
  4036  0EE8  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4037  0EE9  3001               	movlw	(01h)
  4038  0EEA  158A  257C  158A   	fcall	_GPIO_WriteBit
  4039                           	line	60
  4040                           ;ms83fxx02_led.c: 60: GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);
  4041  0EED  1283               	bcf	status, 5	;RP0=0, select bank0
  4042  0EEE  1303               	bcf	status, 6	;RP1=0, select bank0
  4043  0EEF  084F               	movf	(LED_DisplayMotorStatus@GPIO_Pin),w
  4044  0EF0  00D0               	movwf	(??_LED_DisplayMotorStatus+0)+0
  4045  0EF1  0850               	movf	(??_LED_DisplayMotorStatus+0)+0,w
  4046  0EF2  00CB               	movwf	(?_GPIO_WriteBit)
  4047  0EF3  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4048  0EF4  1403               	bsf	status,0
  4049  0EF5  0DCC               	rlf	0+(?_GPIO_WriteBit)+01h,f
  4050  0EF6  0851               	movf	(LED_DisplayMotorStatus@GPIOx),w
  4051  0EF7  158A  257C  158A   	fcall	_GPIO_WriteBit
  4052                           	line	61
  4053                           	
  4054  0EFA                     l6616:	
  4055  0EFA  0008               	return
  4056                           	opt stack 0
  4057                           GLOBAL	__end_of_LED_DisplayMotorStatus
  4058  0EFB                     	__end_of_LED_DisplayMotorStatus:
  4059 ;; =============== function _LED_DisplayMotorStatus ends ============
  4060                           
  4061                           	signat	_LED_DisplayMotorStatus,8312
  4062                           	global	_ChargeCtrl_Init
  4063                           psect	text1788,local,class=CODE,delta=2
  4064                           global __ptext1788
  4065  0C59                     __ptext1788:
  4066                           
  4067 ;; *************** function _ChargeCtrl_Init *****************
  4068 ;; Defined at:
  4069 ;;		line 39 in file "ms83fxx02_charge.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  GPIO_InitStr    2    9[BANK0 ] struct .
  4074 ;; Return value:  Size  Location     Type
  4075 ;;		None               void
  4076 ;; Registers used:
  4077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4083 ;;      Params:         0       0       0       0
  4084 ;;      Locals:         0       2       0       0
  4085 ;;      Temps:          0       1       0       0
  4086 ;;      Totals:         0       3       0       0
  4087 ;;Total ram usage:        3 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    5
  4090 ;; This function calls:
  4091 ;;		_GPIO_Init
  4092 ;;		_GPIO_WriteBit
  4093 ;; This function is called by:
  4094 ;;		_Charge_Init
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           psect	text1788
  4098                           	file	"ms83fxx02_charge.c"
  4099                           	line	39
  4100                           	global	__size_of_ChargeCtrl_Init
  4101  001D                     	__size_of_ChargeCtrl_Init	equ	__end_of_ChargeCtrl_Init-_ChargeCtrl_Init
  4102                           	
  4103  0C59                     _ChargeCtrl_Init:	
  4104                           	opt	stack 0
  4105                           ; Regs used in _ChargeCtrl_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4106                           	line	42
  4107                           	
  4108  0C59                     l17737:	
  4109                           ;ms83fxx02_charge.c: 40: GPIO_InitTypeDef GPIO_InitStruct;
  4110                           ;ms83fxx02_charge.c: 42: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  4111  0C59  1283               	bcf	status, 5	;RP0=0, select bank0
  4112  0C5A  1303               	bcf	status, 6	;RP1=0, select bank0
  4113  0C5B  01D1               	clrf	0+(ChargeCtrl_Init@GPIO_InitStruct)+01h
  4114  0C5C  1403               	bsf	status,0
  4115  0C5D  0DD1               	rlf	0+(ChargeCtrl_Init@GPIO_InitStruct)+01h,f
  4116                           	line	43
  4117                           	
  4118  0C5E                     l17739:	
  4119                           ;ms83fxx02_charge.c: 43: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000080);
  4120  0C5E  3080               	movlw	(080h)
  4121  0C5F  00CF               	movwf	(??_ChargeCtrl_Init+0)+0
  4122  0C60  084F               	movf	(??_ChargeCtrl_Init+0)+0,w
  4123  0C61  00D0               	movwf	(ChargeCtrl_Init@GPIO_InitStruct)
  4124                           	line	44
  4125                           	
  4126  0C62                     l17741:	
  4127                           ;ms83fxx02_charge.c: 44: GPIO_Init(GPIOA, &GPIO_InitStruct);
  4128  0C62  3050               	movlw	(ChargeCtrl_Init@GPIO_InitStruct)&0ffh
  4129  0C63  00CF               	movwf	(??_ChargeCtrl_Init+0)+0
  4130  0C64  084F               	movf	(??_ChargeCtrl_Init+0)+0,w
  4131  0C65  00CB               	movwf	(?_GPIO_Init)
  4132  0C66  3000               	movlw	(0)
  4133  0C67  118A  2606  158A   	fcall	_GPIO_Init
  4134                           	line	45
  4135                           	
  4136  0C6A                     l17743:	
  4137                           ;ms83fxx02_charge.c: 45: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), Bit_RESET);
  4138  0C6A  3080               	movlw	(080h)
  4139  0C6B  1283               	bcf	status, 5	;RP0=0, select bank0
  4140  0C6C  1303               	bcf	status, 6	;RP1=0, select bank0
  4141  0C6D  00CF               	movwf	(??_ChargeCtrl_Init+0)+0
  4142  0C6E  084F               	movf	(??_ChargeCtrl_Init+0)+0,w
  4143  0C6F  00CB               	movwf	(?_GPIO_WriteBit)
  4144  0C70  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4145  0C71  3000               	movlw	(0)
  4146  0C72  158A  257C  158A   	fcall	_GPIO_WriteBit
  4147                           	line	46
  4148                           	
  4149  0C75                     l2247:	
  4150  0C75  0008               	return
  4151                           	opt stack 0
  4152                           GLOBAL	__end_of_ChargeCtrl_Init
  4153  0C76                     	__end_of_ChargeCtrl_Init:
  4154 ;; =============== function _ChargeCtrl_Init ends ============
  4155                           
  4156                           	signat	_ChargeCtrl_Init,88
  4157                           	global	_ChargeDetect_Init
  4158                           psect	text1789,local,class=CODE,delta=2
  4159                           global __ptext1789
  4160  0DA3                     __ptext1789:
  4161                           
  4162 ;; *************** function _ChargeDetect_Init *****************
  4163 ;; Defined at:
  4164 ;;		line 27 in file "ms83fxx02_charge.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  GPIO_InitStr    2    9[BANK0 ] struct .
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4178 ;;      Params:         0       0       0       0
  4179 ;;      Locals:         0       2       0       0
  4180 ;;      Temps:          0       1       0       0
  4181 ;;      Totals:         0       3       0       0
  4182 ;;Total ram usage:        3 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    5
  4185 ;; This function calls:
  4186 ;;		_GPIO_Init
  4187 ;;		_GPIO_ReadInputDataBit
  4188 ;;		_GPIO_INTConfig
  4189 ;; This function is called by:
  4190 ;;		_Charge_Init
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           psect	text1789
  4194                           	file	"ms83fxx02_charge.c"
  4195                           	line	27
  4196                           	global	__size_of_ChargeDetect_Init
  4197  0027                     	__size_of_ChargeDetect_Init	equ	__end_of_ChargeDetect_Init-_ChargeDetect_Init
  4198                           	
  4199  0DA3                     _ChargeDetect_Init:	
  4200                           	opt	stack 0
  4201                           ; Regs used in _ChargeDetect_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4202                           	line	30
  4203                           	
  4204  0DA3                     l17727:	
  4205                           ;ms83fxx02_charge.c: 28: GPIO_InitTypeDef GPIO_InitStruct;
  4206                           ;ms83fxx02_charge.c: 30: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  4207  0DA3  1283               	bcf	status, 5	;RP0=0, select bank0
  4208  0DA4  1303               	bcf	status, 6	;RP1=0, select bank0
  4209  0DA5  01D1               	clrf	0+(ChargeDetect_Init@GPIO_InitStruct)+01h
  4210                           	line	31
  4211                           	
  4212  0DA6                     l17729:	
  4213                           ;ms83fxx02_charge.c: 31: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000010);
  4214  0DA6  3010               	movlw	(010h)
  4215  0DA7  00CF               	movwf	(??_ChargeDetect_Init+0)+0
  4216  0DA8  084F               	movf	(??_ChargeDetect_Init+0)+0,w
  4217  0DA9  00D0               	movwf	(ChargeDetect_Init@GPIO_InitStruct)
  4218                           	line	32
  4219                           	
  4220  0DAA                     l17731:	
  4221                           ;ms83fxx02_charge.c: 32: GPIO_Init(GPIOA, &GPIO_InitStruct);
  4222  0DAA  3050               	movlw	(ChargeDetect_Init@GPIO_InitStruct)&0ffh
  4223  0DAB  00CF               	movwf	(??_ChargeDetect_Init+0)+0
  4224  0DAC  084F               	movf	(??_ChargeDetect_Init+0)+0,w
  4225  0DAD  00CB               	movwf	(?_GPIO_Init)
  4226  0DAE  3000               	movlw	(0)
  4227  0DAF  118A  2606  158A   	fcall	_GPIO_Init
  4228                           	line	34
  4229                           	
  4230  0DB2                     l17733:	
  4231                           ;ms83fxx02_charge.c: 34: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
  4232  0DB2  3010               	movlw	(010h)
  4233  0DB3  1283               	bcf	status, 5	;RP0=0, select bank0
  4234  0DB4  1303               	bcf	status, 6	;RP1=0, select bank0
  4235  0DB5  00CF               	movwf	(??_ChargeDetect_Init+0)+0
  4236  0DB6  084F               	movf	(??_ChargeDetect_Init+0)+0,w
  4237  0DB7  00CB               	movwf	(?_GPIO_ReadInputDataBit)
  4238  0DB8  3000               	movlw	(0)
  4239  0DB9  158A  25CA  158A   	fcall	_GPIO_ReadInputDataBit
  4240                           	line	35
  4241                           	
  4242  0DBC                     l17735:	
  4243                           ;ms83fxx02_charge.c: 35: GPIO_INTConfig(GPIOA, ((uint8_t)0x00000010), ENABLE);
  4244  0DBC  3010               	movlw	(010h)
  4245  0DBD  1283               	bcf	status, 5	;RP0=0, select bank0
  4246  0DBE  1303               	bcf	status, 6	;RP1=0, select bank0
  4247  0DBF  00CF               	movwf	(??_ChargeDetect_Init+0)+0
  4248  0DC0  084F               	movf	(??_ChargeDetect_Init+0)+0,w
  4249  0DC1  00CB               	movwf	(?_GPIO_INTConfig)
  4250  0DC2  01CC               	clrf	0+(?_GPIO_INTConfig)+01h
  4251  0DC3  1403               	bsf	status,0
  4252  0DC4  0DCC               	rlf	0+(?_GPIO_INTConfig)+01h,f
  4253  0DC5  3000               	movlw	(0)
  4254  0DC6  118A  26CD  158A   	fcall	_GPIO_INTConfig
  4255                           	line	36
  4256                           	
  4257  0DC9                     l2244:	
  4258  0DC9  0008               	return
  4259                           	opt stack 0
  4260                           GLOBAL	__end_of_ChargeDetect_Init
  4261  0DCA                     	__end_of_ChargeDetect_Init:
  4262 ;; =============== function _ChargeDetect_Init ends ============
  4263                           
  4264                           	signat	_ChargeDetect_Init,88
  4265                           	global	_ChargeDetect_GetStatus
  4266                           psect	text1790,local,class=CODE,delta=2
  4267                           global __ptext1790
  4268  07C4                     __ptext1790:
  4269                           
  4270 ;; *************** function _ChargeDetect_GetStatus *****************
  4271 ;; Defined at:
  4272 ;;		line 60 in file "ms83fxx02_charge.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  i               2    8[BANK0 ] unsigned int 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      unsigned char 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4286 ;;      Params:         0       0       0       0
  4287 ;;      Locals:         0       2       0       0
  4288 ;;      Temps:          0       1       0       0
  4289 ;;      Totals:         0       3       0       0
  4290 ;;Total ram usage:        3 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    5
  4293 ;; This function calls:
  4294 ;;		_GPIO_ReadInputDataBit
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           psect	text1790
  4300                           	file	"ms83fxx02_charge.c"
  4301                           	line	60
  4302                           	global	__size_of_ChargeDetect_GetStatus
  4303  003C                     	__size_of_ChargeDetect_GetStatus	equ	__end_of_ChargeDetect_GetStatus-_ChargeDetect_GetS
                                 tatus
  4304                           	
  4305  07C4                     _ChargeDetect_GetStatus:	
  4306                           	opt	stack 2
  4307                           ; Regs used in _ChargeDetect_GetStatus: [wreg+status,2+status,0+pclath+cstack]
  4308                           	line	61
  4309                           	
  4310  07C4                     l17707:	
  4311                           ;ms83fxx02_charge.c: 61: uint32_t i = 50;
  4312  07C4  3032               	movlw	low(032h)
  4313  07C5  1283               	bcf	status, 5	;RP0=0, select bank0
  4314  07C6  1303               	bcf	status, 6	;RP1=0, select bank0
  4315  07C7  00CF               	movwf	(ChargeDetect_GetStatus@i)
  4316  07C8  3000               	movlw	high(032h)
  4317  07C9  00D0               	movwf	((ChargeDetect_GetStatus@i))+1
  4318                           	line	63
  4319                           ;ms83fxx02_charge.c: 63: while(i--)
  4320  07CA  2FEA               	goto	l17721
  4321                           	
  4322  07CB                     l2257:	
  4323                           	line	65
  4324                           	
  4325  07CB                     l17709:	
  4326                           ;ms83fxx02_charge.c: 64: {
  4327                           ;ms83fxx02_charge.c: 65: if(1 == GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010)))
  4328  07CB  3010               	movlw	(010h)
  4329  07CC  00CE               	movwf	(??_ChargeDetect_GetStatus+0)+0
  4330  07CD  084E               	movf	(??_ChargeDetect_GetStatus+0)+0,w
  4331  07CE  00CB               	movwf	(?_GPIO_ReadInputDataBit)
  4332  07CF  3000               	movlw	(0)
  4333  07D0  158A  25CA  118A   	fcall	_GPIO_ReadInputDataBit
  4334  07D3  3A01               	xorlw	01h
  4335  07D4  1D03               	skipz
  4336  07D5  2FD7               	goto	u5231
  4337  07D6  2FD8               	goto	u5230
  4338  07D7                     u5231:
  4339  07D7  2FEA               	goto	l17721
  4340  07D8                     u5230:
  4341                           	line	67
  4342                           	
  4343  07D8                     l17711:	
  4344                           ;ms83fxx02_charge.c: 66: {
  4345                           ;ms83fxx02_charge.c: 67: charge_detect_count++;
  4346  07D8  3001               	movlw	(01h)
  4347  07D9  1283               	bcf	status, 5	;RP0=0, select bank0
  4348  07DA  1303               	bcf	status, 6	;RP1=0, select bank0
  4349  07DB  00CE               	movwf	(??_ChargeDetect_GetStatus+0)+0
  4350  07DC  084E               	movf	(??_ChargeDetect_GetStatus+0)+0,w
  4351  07DD  07BC               	addwf	(_charge_detect_count),f
  4352                           	line	68
  4353                           	
  4354  07DE                     l17713:	
  4355                           ;ms83fxx02_charge.c: 68: if(charge_detect_count >= 30)
  4356  07DE  301E               	movlw	(01Eh)
  4357  07DF  023C               	subwf	(_charge_detect_count),w
  4358  07E0  1C03               	skipc
  4359  07E1  2FE3               	goto	u5241
  4360  07E2  2FE4               	goto	u5240
  4361  07E3                     u5241:
  4362  07E3  2FEA               	goto	l17721
  4363  07E4                     u5240:
  4364                           	line	70
  4365                           	
  4366  07E4                     l17715:	
  4367                           ;ms83fxx02_charge.c: 69: {
  4368                           ;ms83fxx02_charge.c: 70: charge_detect_count = 0;
  4369  07E4  01BC               	clrf	(_charge_detect_count)
  4370                           	line	71
  4371                           	
  4372  07E5                     l17717:	
  4373                           ;ms83fxx02_charge.c: 71: return 1;
  4374  07E5  3001               	movlw	(01h)
  4375  07E6  2FFF               	goto	l2260
  4376                           	
  4377  07E7                     l17719:	
  4378  07E7  2FFF               	goto	l2260
  4379                           	line	72
  4380                           	
  4381  07E8                     l2259:	
  4382  07E8  2FEA               	goto	l17721
  4383                           	line	73
  4384                           	
  4385  07E9                     l2258:	
  4386  07E9  2FEA               	goto	l17721
  4387                           	line	74
  4388                           	
  4389  07EA                     l2256:	
  4390                           	line	63
  4391                           	
  4392  07EA                     l17721:	
  4393  07EA  3001               	movlw	low(01h)
  4394  07EB  1283               	bcf	status, 5	;RP0=0, select bank0
  4395  07EC  1303               	bcf	status, 6	;RP1=0, select bank0
  4396  07ED  02CF               	subwf	(ChargeDetect_GetStatus@i),f
  4397  07EE  3000               	movlw	high(01h)
  4398  07EF  1C03               	skipc
  4399  07F0  03D0               	decf	(ChargeDetect_GetStatus@i+1),f
  4400  07F1  02D0               	subwf	(ChargeDetect_GetStatus@i+1),f
  4401  07F2  30FF               	movlw	high(0FFFFh)
  4402  07F3  0650               	xorwf	((ChargeDetect_GetStatus@i+1)),w
  4403  07F4  1D03               	skipz
  4404  07F5  2FF8               	goto	u5255
  4405  07F6  30FF               	movlw	low(0FFFFh)
  4406  07F7  064F               	xorwf	((ChargeDetect_GetStatus@i)),w
  4407  07F8                     u5255:
  4408                           
  4409  07F8  1D03               	skipz
  4410  07F9  2FFB               	goto	u5251
  4411  07FA  2FFC               	goto	u5250
  4412  07FB                     u5251:
  4413  07FB  2FCB               	goto	l17709
  4414  07FC                     u5250:
  4415  07FC  2FFD               	goto	l17723
  4416                           	
  4417  07FD                     l2261:	
  4418                           	line	76
  4419                           	
  4420  07FD                     l17723:	
  4421                           ;ms83fxx02_charge.c: 72: }
  4422                           ;ms83fxx02_charge.c: 73: }
  4423                           ;ms83fxx02_charge.c: 74: }
  4424                           ;ms83fxx02_charge.c: 76: return 0;
  4425  07FD  3000               	movlw	(0)
  4426  07FE  2FFF               	goto	l2260
  4427                           	
  4428  07FF                     l17725:	
  4429                           	line	77
  4430                           	
  4431  07FF                     l2260:	
  4432  07FF  0008               	return
  4433                           	opt stack 0
  4434                           GLOBAL	__end_of_ChargeDetect_GetStatus
  4435  0800                     	__end_of_ChargeDetect_GetStatus:
  4436 ;; =============== function _ChargeDetect_GetStatus ends ============
  4437                           
  4438                           	signat	_ChargeDetect_GetStatus,89
  4439                           	global	_SleepLedTimer_Init
  4440                           psect	text1791,local,class=CODE,delta=2
  4441                           global __ptext1791
  4442  0C3C                     __ptext1791:
  4443                           
  4444 ;; *************** function _SleepLedTimer_Init *****************
  4445 ;; Defined at:
  4446 ;;		line 141 in file "ms83fxx02_sleepled.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;		None               void
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, pclath, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4460 ;;      Params:         0       0       0       0
  4461 ;;      Locals:         0       0       0       0
  4462 ;;      Temps:          0       0       0       0
  4463 ;;      Totals:         0       0       0       0
  4464 ;;Total ram usage:        0 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    5
  4467 ;; This function calls:
  4468 ;;		_SleepLed_Init
  4469 ;; This function is called by:
  4470 ;;		_main
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           psect	text1791
  4474                           	file	"ms83fxx02_sleepled.c"
  4475                           	line	141
  4476                           	global	__size_of_SleepLedTimer_Init
  4477  001D                     	__size_of_SleepLedTimer_Init	equ	__end_of_SleepLedTimer_Init-_SleepLedTimer_Init
  4478                           	
  4479  0C3C                     _SleepLedTimer_Init:	
  4480                           	opt	stack 2
  4481                           ; Regs used in _SleepLedTimer_Init: [wreg+status,2+status,0+pclath+cstack]
  4482                           	line	143
  4483                           	
  4484  0C3C                     l17687:	
  4485                           ;ms83fxx02_sleepled.c: 143: TMR3ON = 0;
  4486  0C3C  1283               	bcf	status, 5	;RP0=0, select bank2
  4487  0C3D  1703               	bsf	status, 6	;RP1=1, select bank2
  4488  0C3E  1110               	bcf	(2178/8)^0100h,(2178)&7
  4489                           	line	146
  4490                           	
  4491  0C3F                     l17689:	
  4492                           ;ms83fxx02_sleepled.c: 146: PWM3CR0 = 0b01100010;
  4493  0C3F  3062               	movlw	(062h)
  4494  0C40  008F               	movwf	(271)^0100h	;volatile
  4495                           	line	148
  4496                           ;ms83fxx02_sleepled.c: 148: PWM3CR1 = 0b00011000;
  4497  0C41  3018               	movlw	(018h)
  4498  0C42  0090               	movwf	(272)^0100h	;volatile
  4499                           	line	151
  4500                           ;ms83fxx02_sleepled.c: 151: T3CKDIV = 17;
  4501  0C43  3011               	movlw	(011h)
  4502  0C44  0091               	movwf	(273)^0100h	;volatile
  4503                           	line	153
  4504                           ;ms83fxx02_sleepled.c: 153: TMR3H = 0x0F;
  4505  0C45  300F               	movlw	(0Fh)
  4506  0C46  008D               	movwf	(269)^0100h	;volatile
  4507                           	line	154
  4508                           	
  4509  0C47                     l17691:	
  4510                           ;ms83fxx02_sleepled.c: 154: TMR3L = 0;
  4511  0C47  018C               	clrf	(268)^0100h	;volatile
  4512                           	line	155
  4513                           	
  4514  0C48                     l17693:	
  4515                           ;ms83fxx02_sleepled.c: 155: PR3L = 0xFF;
  4516  0C48  30FF               	movlw	(0FFh)
  4517  0C49  008E               	movwf	(270)^0100h	;volatile
  4518                           	line	158
  4519                           	
  4520  0C4A                     l17695:	
  4521                           ;ms83fxx02_sleepled.c: 158: TMR3IF = 0;
  4522  0C4A  1010               	bcf	(2176/8)^0100h,(2176)&7
  4523                           	line	161
  4524                           	
  4525  0C4B                     l17697:	
  4526                           ;ms83fxx02_sleepled.c: 161: TMR3ON = 1;
  4527  0C4B  1510               	bsf	(2178/8)^0100h,(2178)&7
  4528                           	line	164
  4529                           	
  4530  0C4C                     l17699:	
  4531                           ;ms83fxx02_sleepled.c: 164: TMR3IE = 1;
  4532  0C4C  1490               	bsf	(2177/8)^0100h,(2177)&7
  4533                           	line	165
  4534                           	
  4535  0C4D                     l17701:	
  4536                           ;ms83fxx02_sleepled.c: 165: PEIE = 1;
  4537  0C4D  170B               	bsf	(94/8),(94)&7
  4538                           	line	166
  4539                           	
  4540  0C4E                     l17703:	
  4541                           ;ms83fxx02_sleepled.c: 166: GIE = 1;
  4542  0C4E  178B               	bsf	(95/8),(95)&7
  4543                           	line	168
  4544                           	
  4545  0C4F                     l17705:	
  4546                           ;ms83fxx02_sleepled.c: 168: SleepLed_Init((0xFFF/100));
  4547  0C4F  3028               	movlw	low(028h)
  4548  0C50  1283               	bcf	status, 5	;RP0=0, select bank0
  4549  0C51  1303               	bcf	status, 6	;RP1=0, select bank0
  4550  0C52  00CB               	movwf	(?_SleepLed_Init)
  4551  0C53  3000               	movlw	high(028h)
  4552  0C54  00CC               	movwf	((?_SleepLed_Init))+1
  4553  0C55  158A  2510  158A   	fcall	_SleepLed_Init
  4554                           	line	169
  4555                           	
  4556  0C58                     l13322:	
  4557  0C58  0008               	return
  4558                           	opt stack 0
  4559                           GLOBAL	__end_of_SleepLedTimer_Init
  4560  0C59                     	__end_of_SleepLedTimer_Init:
  4561 ;; =============== function _SleepLedTimer_Init ends ============
  4562                           
  4563                           	signat	_SleepLedTimer_Init,88
  4564                           	global	_ChargeCtrl_Output
  4565                           psect	text1792,local,class=CODE,delta=2
  4566                           global __ptext1792
  4567  0A79                     __ptext1792:
  4568                           
  4569 ;; *************** function _ChargeCtrl_Output *****************
  4570 ;; Defined at:
  4571 ;;		line 55 in file "ms83fxx02_charge.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  BitVal          1    wreg     enum E1499
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  BitVal          1   10[BANK0 ] enum E1499
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4585 ;;      Params:         0       0       0       0
  4586 ;;      Locals:         0       1       0       0
  4587 ;;      Temps:          0       2       0       0
  4588 ;;      Totals:         0       3       0       0
  4589 ;;Total ram usage:        3 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    5
  4592 ;; This function calls:
  4593 ;;		_GPIO_WriteBit
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           psect	text1792
  4599                           	file	"ms83fxx02_charge.c"
  4600                           	line	55
  4601                           	global	__size_of_ChargeCtrl_Output
  4602  0010                     	__size_of_ChargeCtrl_Output	equ	__end_of_ChargeCtrl_Output-_ChargeCtrl_Output
  4603                           	
  4604  0A79                     _ChargeCtrl_Output:	
  4605                           	opt	stack 2
  4606                           ; Regs used in _ChargeCtrl_Output: [wreg+status,2+status,0+pclath+cstack]
  4607                           ;ChargeCtrl_Output@BitVal stored from wreg
  4608  0A79  1283               	bcf	status, 5	;RP0=0, select bank0
  4609  0A7A  1303               	bcf	status, 6	;RP1=0, select bank0
  4610  0A7B  00D1               	movwf	(ChargeCtrl_Output@BitVal)
  4611                           	line	56
  4612                           	
  4613  0A7C                     l17685:	
  4614                           ;ms83fxx02_charge.c: 56: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000080), BitVal);
  4615  0A7C  3080               	movlw	(080h)
  4616  0A7D  00CF               	movwf	(??_ChargeCtrl_Output+0)+0
  4617  0A7E  084F               	movf	(??_ChargeCtrl_Output+0)+0,w
  4618  0A7F  00CB               	movwf	(?_GPIO_WriteBit)
  4619  0A80  0851               	movf	(ChargeCtrl_Output@BitVal),w
  4620  0A81  00D0               	movwf	(??_ChargeCtrl_Output+1)+0
  4621  0A82  0850               	movf	(??_ChargeCtrl_Output+1)+0,w
  4622  0A83  00CC               	movwf	0+(?_GPIO_WriteBit)+01h
  4623  0A84  3000               	movlw	(0)
  4624  0A85  158A  257C  158A   	fcall	_GPIO_WriteBit
  4625                           	line	57
  4626                           	
  4627  0A88                     l2253:	
  4628  0A88  0008               	return
  4629                           	opt stack 0
  4630                           GLOBAL	__end_of_ChargeCtrl_Output
  4631  0A89                     	__end_of_ChargeCtrl_Output:
  4632 ;; =============== function _ChargeCtrl_Output ends ============
  4633                           
  4634                           	signat	_ChargeCtrl_Output,4216
  4635                           	global	_MotorOperationTimer_Stop
  4636                           psect	text1793,local,class=CODE,delta=2
  4637                           global __ptext1793
  4638  0B17                     __ptext1793:
  4639                           
  4640 ;; *************** function _MotorOperationTimer_Stop *****************
  4641 ;; Defined at:
  4642 ;;		line 283 in file "ms83fxx02_motor.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;		None
  4647 ;; Return value:  Size  Location     Type
  4648 ;;		None               void
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4656 ;;      Params:         0       0       0       0
  4657 ;;      Locals:         0       0       0       0
  4658 ;;      Temps:          0       0       0       0
  4659 ;;      Totals:         0       0       0       0
  4660 ;;Total ram usage:        0 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    5
  4663 ;; This function calls:
  4664 ;;		_Motor_CheckRunLimit
  4665 ;; This function is called by:
  4666 ;;		_main
  4667 ;;		_Motor_HandleStatusChangeEvt
  4668 ;;		_Battery_Detect
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           psect	text1793
  4672                           	file	"ms83fxx02_motor.c"
  4673                           	line	283
  4674                           	global	__size_of_MotorOperationTimer_Stop
  4675  0014                     	__size_of_MotorOperationTimer_Stop	equ	__end_of_MotorOperationTimer_Stop-_MotorOperatio
                                 nTimer_Stop
  4676                           	
  4677  0B17                     _MotorOperationTimer_Stop:	
  4678                           	opt	stack 0
  4679                           ; Regs used in _MotorOperationTimer_Stop: [wreg+status,2+status,0+pclath+cstack]
  4680                           	line	285
  4681                           	
  4682  0B17                     l17677:	
  4683                           ;ms83fxx02_motor.c: 285: TMR4ON = 0;
  4684  0B17  1283               	bcf	status, 5	;RP0=0, select bank2
  4685  0B18  1703               	bsf	status, 6	;RP1=1, select bank2
  4686  0B19  1116               	bcf	(2226/8)^0100h,(2226)&7
  4687                           	line	287
  4688                           ;ms83fxx02_motor.c: 287: TMR4IE = 0;
  4689  0B1A  1096               	bcf	(2225/8)^0100h,(2225)&7
  4690                           	line	289
  4691                           	
  4692  0B1B                     l17679:	
  4693                           ;ms83fxx02_motor.c: 289: if(!Motor_CheckRunLimit())
  4694  0B1B  158A  22AA  158A   	fcall	_Motor_CheckRunLimit
  4695  0B1E  3800               	iorlw	0
  4696  0B1F  1D03               	skipz
  4697  0B20  2B22               	goto	u5221
  4698  0B21  2B23               	goto	u5220
  4699  0B22                     u5221:
  4700  0B22  2B2A               	goto	l8868
  4701  0B23                     u5220:
  4702                           	line	292
  4703                           	
  4704  0B23                     l17681:	
  4705                           ;ms83fxx02_motor.c: 290: {
  4706                           ;ms83fxx02_motor.c: 292: motor_timing_running_flag = 1;
  4707  0B23  1283               	bcf	status, 5	;RP0=0, select bank0
  4708  0B24  1303               	bcf	status, 6	;RP1=0, select bank0
  4709  0B25  01EA               	clrf	(_motor_timing_running_flag)
  4710  0B26  1403               	bsf	status,0
  4711  0B27  0DEA               	rlf	(_motor_timing_running_flag),f
  4712                           	line	293
  4713                           	
  4714  0B28                     l17683:	
  4715                           ;ms83fxx02_motor.c: 293: motor_intr_count = 0;
  4716  0B28  01FD               	clrf	(_motor_intr_count)	;volatile
  4717  0B29  2B2A               	goto	l8868
  4718                           	line	294
  4719                           	
  4720  0B2A                     l8867:	
  4721                           	line	295
  4722                           	
  4723  0B2A                     l8868:	
  4724  0B2A  0008               	return
  4725                           	opt stack 0
  4726                           GLOBAL	__end_of_MotorOperationTimer_Stop
  4727  0B2B                     	__end_of_MotorOperationTimer_Stop:
  4728 ;; =============== function _MotorOperationTimer_Stop ends ============
  4729                           
  4730                           	signat	_MotorOperationTimer_Stop,88
  4731                           	global	_Motor_Stop
  4732                           psect	text1794,local,class=CODE,delta=2
  4733                           global __ptext1794
  4734  0E1C                     __ptext1794:
  4735                           
  4736 ;; *************** function _Motor_Stop *****************
  4737 ;; Defined at:
  4738 ;;		line 185 in file "ms83fxx02_motor.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;		None               void
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0, pclath, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4752 ;;      Params:         0       0       0       0
  4753 ;;      Locals:         0       0       0       0
  4754 ;;      Temps:          0       1       0       0
  4755 ;;      Totals:         0       1       0       0
  4756 ;;Total ram usage:        1 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    5
  4759 ;; This function calls:
  4760 ;;		_GPIO_WriteBit
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;;		_Motor_HandleStatusChangeEvt
  4764 ;;		_Battery_Detect
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           psect	text1794
  4768                           	file	"ms83fxx02_motor.c"
  4769                           	line	185
  4770                           	global	__size_of_Motor_Stop
  4771  002A                     	__size_of_Motor_Stop	equ	__end_of_Motor_Stop-_Motor_Stop
  4772                           	
  4773  0E1C                     _Motor_Stop:	
  4774                           	opt	stack 0
  4775                           ; Regs used in _Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  4776                           	line	190
  4777                           	
  4778  0E1C                     l17667:	
  4779                           ;ms83fxx02_motor.c: 190: TRISC |= (0x03 << 4);
  4780  0E1C  3030               	movlw	(030h)
  4781  0E1D  1283               	bcf	status, 5	;RP0=0, select bank0
  4782  0E1E  1303               	bcf	status, 6	;RP1=0, select bank0
  4783  0E1F  00CF               	movwf	(??_Motor_Stop+0)+0
  4784  0E20  084F               	movf	(??_Motor_Stop+0)+0,w
  4785  0E21  1683               	bsf	status, 5	;RP0=1, select bank1
  4786  0E22  1303               	bcf	status, 6	;RP1=0, select bank1
  4787  0E23  0487               	iorwf	(135)^080h,f	;volatile
  4788                           	line	192
  4789                           	
  4790  0E24                     l17669:	
  4791                           ;ms83fxx02_motor.c: 192: TMR2ON = 0;
  4792  0E24  1283               	bcf	status, 5	;RP0=0, select bank0
  4793  0E25  1303               	bcf	status, 6	;RP1=0, select bank0
  4794  0E26  1112               	bcf	(146/8),(146)&7
  4795                           	line	196
  4796                           	
  4797  0E27                     l17671:	
  4798                           ;ms83fxx02_motor.c: 196: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  4799  0E27  3004               	movlw	(04h)
  4800  0E28  00CF               	movwf	(??_Motor_Stop+0)+0
  4801  0E29  084F               	movf	(??_Motor_Stop+0)+0,w
  4802  0E2A  00CB               	movwf	(?_GPIO_WriteBit)
  4803  0E2B  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4804  0E2C  3000               	movlw	(0)
  4805  0E2D  158A  257C  158A   	fcall	_GPIO_WriteBit
  4806                           	line	197
  4807                           	
  4808  0E30                     l17673:	
  4809                           ;ms83fxx02_motor.c: 197: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  4810  0E30  3008               	movlw	(08h)
  4811  0E31  1283               	bcf	status, 5	;RP0=0, select bank0
  4812  0E32  1303               	bcf	status, 6	;RP1=0, select bank0
  4813  0E33  00CF               	movwf	(??_Motor_Stop+0)+0
  4814  0E34  084F               	movf	(??_Motor_Stop+0)+0,w
  4815  0E35  00CB               	movwf	(?_GPIO_WriteBit)
  4816  0E36  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4817  0E37  3000               	movlw	(0)
  4818  0E38  158A  257C  158A   	fcall	_GPIO_WriteBit
  4819                           	line	198
  4820                           	
  4821  0E3B                     l17675:	
  4822                           ;ms83fxx02_motor.c: 198: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  4823  0E3B  1283               	bcf	status, 5	;RP0=0, select bank0
  4824  0E3C  1303               	bcf	status, 6	;RP1=0, select bank0
  4825  0E3D  01CB               	clrf	(?_GPIO_WriteBit)
  4826  0E3E  1403               	bsf	status,0
  4827  0E3F  0DCB               	rlf	(?_GPIO_WriteBit),f
  4828  0E40  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  4829  0E41  3001               	movlw	(01h)
  4830  0E42  158A  257C  158A   	fcall	_GPIO_WriteBit
  4831                           	line	199
  4832                           	
  4833  0E45                     l8853:	
  4834  0E45  0008               	return
  4835                           	opt stack 0
  4836                           GLOBAL	__end_of_Motor_Stop
  4837  0E46                     	__end_of_Motor_Stop:
  4838 ;; =============== function _Motor_Stop ends ============
  4839                           
  4840                           	signat	_Motor_Stop,88
  4841                           	global	_KEY_DeInit
  4842                           psect	text1795,local,class=CODE,delta=2
  4843                           global __ptext1795
  4844  0B99                     __ptext1795:
  4845                           
  4846 ;; *************** function _KEY_DeInit *****************
  4847 ;; Defined at:
  4848 ;;		line 59 in file "MS83FXX02_KEY.C"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  GPIO_InitStr    2    8[BANK0 ] struct .
  4853 ;; Return value:  Size  Location     Type
  4854 ;;		None               void
  4855 ;; Registers used:
  4856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4862 ;;      Params:         0       0       0       0
  4863 ;;      Locals:         0       2       0       0
  4864 ;;      Temps:          0       1       0       0
  4865 ;;      Totals:         0       3       0       0
  4866 ;;Total ram usage:        3 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    5
  4869 ;; This function calls:
  4870 ;;		_GPIO_Init
  4871 ;; This function is called by:
  4872 ;;		_main
  4873 ;;		_Battery_Detect
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           psect	text1795
  4877                           	file	"MS83FXX02_KEY.C"
  4878                           	line	59
  4879                           	global	__size_of_KEY_DeInit
  4880  0019                     	__size_of_KEY_DeInit	equ	__end_of_KEY_DeInit-_KEY_DeInit
  4881                           	
  4882  0B99                     _KEY_DeInit:	
  4883                           	opt	stack 0
  4884                           ; Regs used in _KEY_DeInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4885                           	line	61
  4886                           	
  4887  0B99                     l17651:	
  4888                           ;MS83FXX02_KEY.C: 60: GPIO_InitTypeDef GPIO_InitStruct;
  4889                           ;MS83FXX02_KEY.C: 61: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  4890  0B99  1283               	bcf	status, 5	;RP0=0, select bank0
  4891  0B9A  1303               	bcf	status, 6	;RP1=0, select bank0
  4892  0B9B  01D0               	clrf	0+(KEY_DeInit@GPIO_InitStruct)+01h
  4893                           	line	62
  4894                           	
  4895  0B9C                     l17653:	
  4896                           ;MS83FXX02_KEY.C: 62: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  4897  0B9C  3002               	movlw	(02h)
  4898  0B9D  00CE               	movwf	(??_KEY_DeInit+0)+0
  4899  0B9E  084E               	movf	(??_KEY_DeInit+0)+0,w
  4900  0B9F  00CF               	movwf	(KEY_DeInit@GPIO_InitStruct)
  4901                           	line	63
  4902                           	
  4903  0BA0                     l17655:	
  4904                           ;MS83FXX02_KEY.C: 63: GPIO_Init(GPIOC, &GPIO_InitStruct);
  4905  0BA0  304F               	movlw	(KEY_DeInit@GPIO_InitStruct)&0ffh
  4906  0BA1  00CE               	movwf	(??_KEY_DeInit+0)+0
  4907  0BA2  084E               	movf	(??_KEY_DeInit+0)+0,w
  4908  0BA3  00CB               	movwf	(?_GPIO_Init)
  4909  0BA4  3001               	movlw	(01h)
  4910  0BA5  118A  2606  158A   	fcall	_GPIO_Init
  4911                           	line	65
  4912                           	
  4913  0BA8                     l17657:	
  4914                           ;MS83FXX02_KEY.C: 65: INTE = 0;
  4915  0BA8  120B               	bcf	(92/8),(92)&7
  4916                           	line	66
  4917                           	
  4918  0BA9                     l17659:	
  4919                           ;MS83FXX02_KEY.C: 66: key_status = 1;
  4920  0BA9  01FB               	clrf	(_key_status)	;volatile
  4921  0BAA  1403               	bsf	status,0
  4922  0BAB  0DFB               	rlf	(_key_status),f	;volatile
  4923                           	line	67
  4924                           	
  4925  0BAC                     l17661:	
  4926                           ;MS83FXX02_KEY.C: 67: key_press = 0;
  4927  0BAC  1283               	bcf	status, 5	;RP0=0, select bank0
  4928  0BAD  1303               	bcf	status, 6	;RP1=0, select bank0
  4929  0BAE  01BF               	clrf	(_key_press)	;volatile
  4930                           	line	68
  4931                           	
  4932  0BAF                     l17663:	
  4933                           ;MS83FXX02_KEY.C: 68: key_release = 0;
  4934  0BAF  01C2               	clrf	(_key_release)	;volatile
  4935                           	line	69
  4936                           	
  4937  0BB0                     l17665:	
  4938                           ;MS83FXX02_KEY.C: 69: key_press_flag = 0;
  4939  0BB0  01C0               	clrf	(_key_press_flag)	;volatile
  4940                           	line	70
  4941                           	
  4942  0BB1                     l5520:	
  4943  0BB1  0008               	return
  4944                           	opt stack 0
  4945                           GLOBAL	__end_of_KEY_DeInit
  4946  0BB2                     	__end_of_KEY_DeInit:
  4947 ;; =============== function _KEY_DeInit ends ============
  4948                           
  4949                           	signat	_KEY_DeInit,88
  4950                           	global	_LED_VoltageChargeOutput
  4951                           psect	text1796,local,class=CODE,delta=2
  4952                           global __ptext1796
  4953  0A69                     __ptext1796:
  4954                           
  4955 ;; *************** function _LED_VoltageChargeOutput *****************
  4956 ;; Defined at:
  4957 ;;		line 80 in file "ms83fxx02_led.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  BitVal          1    wreg     enum E1499
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  BitVal          1   10[BANK0 ] enum E1499
  4962 ;; Return value:  Size  Location     Type
  4963 ;;		None               void
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4971 ;;      Params:         0       0       0       0
  4972 ;;      Locals:         0       1       0       0
  4973 ;;      Temps:          0       2       0       0
  4974 ;;      Totals:         0       3       0       0
  4975 ;;Total ram usage:        3 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    5
  4978 ;; This function calls:
  4979 ;;		_GPIO_WriteBit
  4980 ;; This function is called by:
  4981 ;;		_charge_control
  4982 ;;		_main
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           psect	text1796
  4986                           	file	"ms83fxx02_led.c"
  4987                           	line	80
  4988                           	global	__size_of_LED_VoltageChargeOutput
  4989  0010                     	__size_of_LED_VoltageChargeOutput	equ	__end_of_LED_VoltageChargeOutput-_LED_VoltageChar
                                 geOutput
  4990                           	
  4991  0A69                     _LED_VoltageChargeOutput:	
  4992                           	opt	stack 1
  4993                           ; Regs used in _LED_VoltageChargeOutput: [wreg+status,2+status,0+pclath+cstack]
  4994                           ;LED_VoltageChargeOutput@BitVal stored from wreg
  4995  0A69  1283               	bcf	status, 5	;RP0=0, select bank0
  4996  0A6A  1303               	bcf	status, 6	;RP1=0, select bank0
  4997  0A6B  00D1               	movwf	(LED_VoltageChargeOutput@BitVal)
  4998                           	line	81
  4999                           	
  5000  0A6C                     l17649:	
  5001                           ;ms83fxx02_led.c: 81: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000040), BitVal);
  5002  0A6C  3040               	movlw	(040h)
  5003  0A6D  00CF               	movwf	(??_LED_VoltageChargeOutput+0)+0
  5004  0A6E  084F               	movf	(??_LED_VoltageChargeOutput+0)+0,w
  5005  0A6F  00CB               	movwf	(?_GPIO_WriteBit)
  5006  0A70  0851               	movf	(LED_VoltageChargeOutput@BitVal),w
  5007  0A71  00D0               	movwf	(??_LED_VoltageChargeOutput+1)+0
  5008  0A72  0850               	movf	(??_LED_VoltageChargeOutput+1)+0,w
  5009  0A73  00CC               	movwf	0+(?_GPIO_WriteBit)+01h
  5010  0A74  3000               	movlw	(0)
  5011  0A75  158A  257C  158A   	fcall	_GPIO_WriteBit
  5012                           	line	82
  5013                           	
  5014  0A78                     l6622:	
  5015  0A78  0008               	return
  5016                           	opt stack 0
  5017                           GLOBAL	__end_of_LED_VoltageChargeOutput
  5018  0A79                     	__end_of_LED_VoltageChargeOutput:
  5019 ;; =============== function _LED_VoltageChargeOutput ends ============
  5020                           
  5021                           	signat	_LED_VoltageChargeOutput,4216
  5022                           	global	_EEPROM_Init
  5023                           psect	text1797,local,class=CODE,delta=2
  5024                           global __ptext1797
  5025  0B40                     __ptext1797:
  5026                           
  5027 ;; *************** function _EEPROM_Init *****************
  5028 ;; Defined at:
  5029 ;;		line 23 in file "ms83fxx02_eeprom.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;		None
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;		None
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, pclath, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5043 ;;      Params:         0       0       0       0
  5044 ;;      Locals:         0       0       0       0
  5045 ;;      Temps:          0       1       0       0
  5046 ;;      Totals:         0       1       0       0
  5047 ;;Total ram usage:        1 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    5
  5050 ;; This function calls:
  5051 ;;		_EEPROM_Write
  5052 ;; This function is called by:
  5053 ;;		_Driver_Init
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           psect	text1797
  5057                           	file	"ms83fxx02_eeprom.c"
  5058                           	line	23
  5059                           	global	__size_of_EEPROM_Init
  5060  0015                     	__size_of_EEPROM_Init	equ	__end_of_EEPROM_Init-_EEPROM_Init
  5061                           	
  5062  0B40                     _EEPROM_Init:	
  5063                           	opt	stack 1
  5064                           ; Regs used in _EEPROM_Init: [wreg+status,2+status,0+pclath+cstack]
  5065                           	line	24
  5066                           	
  5067  0B40                     l17647:	
  5068                           ;ms83fxx02_eeprom.c: 24: EEPROM_Write(0x55, 0xAA);
  5069  0B40  30AA               	movlw	(0AAh)
  5070  0B41  1283               	bcf	status, 5	;RP0=0, select bank0
  5071  0B42  1303               	bcf	status, 6	;RP1=0, select bank0
  5072  0B43  00CD               	movwf	(??_EEPROM_Init+0)+0
  5073  0B44  084D               	movf	(??_EEPROM_Init+0)+0,w
  5074  0B45  00CB               	movwf	(?_EEPROM_Write)
  5075  0B46  3055               	movlw	(055h)
  5076  0B47  158A  24D1  158A   	fcall	_EEPROM_Write
  5077                           	line	25
  5078                           ;ms83fxx02_eeprom.c: 25: EEPROM_Write(0x55, 0xAA);
  5079  0B4A  30AA               	movlw	(0AAh)
  5080  0B4B  1283               	bcf	status, 5	;RP0=0, select bank0
  5081  0B4C  1303               	bcf	status, 6	;RP1=0, select bank0
  5082  0B4D  00CD               	movwf	(??_EEPROM_Init+0)+0
  5083  0B4E  084D               	movf	(??_EEPROM_Init+0)+0,w
  5084  0B4F  00CB               	movwf	(?_EEPROM_Write)
  5085  0B50  3055               	movlw	(055h)
  5086  0B51  158A  24D1  158A   	fcall	_EEPROM_Write
  5087                           	line	26
  5088                           	
  5089  0B54                     l3332:	
  5090  0B54  0008               	return
  5091                           	opt stack 0
  5092                           GLOBAL	__end_of_EEPROM_Init
  5093  0B55                     	__end_of_EEPROM_Init:
  5094 ;; =============== function _EEPROM_Init ends ============
  5095                           
  5096                           	signat	_EEPROM_Init,88
  5097                           	global	_KEY_Init
  5098                           psect	text1798,local,class=CODE,delta=2
  5099                           global __ptext1798
  5100  0CF0                     __ptext1798:
  5101                           
  5102 ;; *************** function _KEY_Init *****************
  5103 ;; Defined at:
  5104 ;;		line 73 in file "MS83FXX02_KEY.C"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  GPIO_InitStr    2    9[BANK0 ] struct .
  5109 ;; Return value:  Size  Location     Type
  5110 ;;		None               void
  5111 ;; Registers used:
  5112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5118 ;;      Params:         0       0       0       0
  5119 ;;      Locals:         0       2       0       0
  5120 ;;      Temps:          0       1       0       0
  5121 ;;      Totals:         0       3       0       0
  5122 ;;Total ram usage:        3 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    5
  5125 ;; This function calls:
  5126 ;;		_GPIO_Init
  5127 ;;		_GPIO_INTConfig
  5128 ;; This function is called by:
  5129 ;;		_Driver_Init
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           psect	text1798
  5133                           	file	"MS83FXX02_KEY.C"
  5134                           	line	73
  5135                           	global	__size_of_KEY_Init
  5136  0020                     	__size_of_KEY_Init	equ	__end_of_KEY_Init-_KEY_Init
  5137                           	
  5138  0CF0                     _KEY_Init:	
  5139                           	opt	stack 1
  5140                           ; Regs used in _KEY_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5141                           	line	75
  5142                           	
  5143  0CF0                     l17637:	
  5144                           ;MS83FXX02_KEY.C: 74: GPIO_InitTypeDef GPIO_InitStruct;
  5145                           ;MS83FXX02_KEY.C: 75: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  5146  0CF0  1283               	bcf	status, 5	;RP0=0, select bank0
  5147  0CF1  1303               	bcf	status, 6	;RP1=0, select bank0
  5148  0CF2  01D1               	clrf	0+(KEY_Init@GPIO_InitStruct)+01h
  5149                           	line	76
  5150                           	
  5151  0CF3                     l17639:	
  5152                           ;MS83FXX02_KEY.C: 76: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000002);
  5153  0CF3  3002               	movlw	(02h)
  5154  0CF4  00CF               	movwf	(??_KEY_Init+0)+0
  5155  0CF5  084F               	movf	(??_KEY_Init+0)+0,w
  5156  0CF6  00D0               	movwf	(KEY_Init@GPIO_InitStruct)
  5157                           	line	77
  5158                           	
  5159  0CF7                     l17641:	
  5160                           ;MS83FXX02_KEY.C: 77: GPIO_Init(GPIOC, &GPIO_InitStruct);
  5161  0CF7  3050               	movlw	(KEY_Init@GPIO_InitStruct)&0ffh
  5162  0CF8  00CF               	movwf	(??_KEY_Init+0)+0
  5163  0CF9  084F               	movf	(??_KEY_Init+0)+0,w
  5164  0CFA  00CB               	movwf	(?_GPIO_Init)
  5165  0CFB  3001               	movlw	(01h)
  5166  0CFC  118A  2606  158A   	fcall	_GPIO_Init
  5167                           	line	80
  5168                           	
  5169  0CFF                     l17643:	
  5170                           ;MS83FXX02_KEY.C: 80: INTEDG = 0;
  5171  0CFF  1683               	bsf	status, 5	;RP0=1, select bank1
  5172  0D00  1303               	bcf	status, 6	;RP1=0, select bank1
  5173  0D01  1301               	bcf	(1038/8)^080h,(1038)&7
  5174                           	line	81
  5175                           	
  5176  0D02                     l17645:	
  5177                           ;MS83FXX02_KEY.C: 81: GPIO_INTConfig(GPIOC, ((uint8_t)0x00000002), ENABLE);
  5178  0D02  3002               	movlw	(02h)
  5179  0D03  1283               	bcf	status, 5	;RP0=0, select bank0
  5180  0D04  1303               	bcf	status, 6	;RP1=0, select bank0
  5181  0D05  00CF               	movwf	(??_KEY_Init+0)+0
  5182  0D06  084F               	movf	(??_KEY_Init+0)+0,w
  5183  0D07  00CB               	movwf	(?_GPIO_INTConfig)
  5184  0D08  01CC               	clrf	0+(?_GPIO_INTConfig)+01h
  5185  0D09  1403               	bsf	status,0
  5186  0D0A  0DCC               	rlf	0+(?_GPIO_INTConfig)+01h,f
  5187  0D0B  3001               	movlw	(01h)
  5188  0D0C  118A  26CD  158A   	fcall	_GPIO_INTConfig
  5189                           	line	82
  5190                           	
  5191  0D0F                     l5523:	
  5192  0D0F  0008               	return
  5193                           	opt stack 0
  5194                           GLOBAL	__end_of_KEY_Init
  5195  0D10                     	__end_of_KEY_Init:
  5196 ;; =============== function _KEY_Init ends ============
  5197                           
  5198                           	signat	_KEY_Init,88
  5199                           	global	_LED_Init
  5200                           psect	text1799,local,class=CODE,delta=2
  5201                           global __ptext1799
  5202  040F                     __ptext1799:
  5203                           
  5204 ;; *************** function _LED_Init *****************
  5205 ;; Defined at:
  5206 ;;		line 24 in file "ms83fxx02_led.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  GPIO_InitStr    2    9[BANK0 ] struct .
  5211 ;; Return value:  Size  Location     Type
  5212 ;;		None               void
  5213 ;; Registers used:
  5214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5220 ;;      Params:         0       0       0       0
  5221 ;;      Locals:         0       2       0       0
  5222 ;;      Temps:          0       1       0       0
  5223 ;;      Totals:         0       3       0       0
  5224 ;;Total ram usage:        3 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    5
  5227 ;; This function calls:
  5228 ;;		_GPIO_Init
  5229 ;;		_GPIO_WriteBit
  5230 ;; This function is called by:
  5231 ;;		_Driver_Init
  5232 ;;		_main
  5233 ;;		_Battery_Detect
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           psect	text1799
  5237                           	file	"ms83fxx02_led.c"
  5238                           	line	24
  5239                           	global	__size_of_LED_Init
  5240  006F                     	__size_of_LED_Init	equ	__end_of_LED_Init-_LED_Init
  5241                           	
  5242  040F                     _LED_Init:	
  5243                           	opt	stack 0
  5244                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5245                           	line	27
  5246                           	
  5247  040F                     l17609:	
  5248                           ;ms83fxx02_led.c: 25: GPIO_InitTypeDef GPIO_InitStruct;
  5249                           ;ms83fxx02_led.c: 27: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  5250  040F  1283               	bcf	status, 5	;RP0=0, select bank0
  5251  0410  1303               	bcf	status, 6	;RP1=0, select bank0
  5252  0411  01D1               	clrf	0+(LED_Init@GPIO_InitStruct)+01h
  5253  0412  1403               	bsf	status,0
  5254  0413  0DD1               	rlf	0+(LED_Init@GPIO_InitStruct)+01h,f
  5255                           	line	28
  5256                           	
  5257  0414                     l17611:	
  5258                           ;ms83fxx02_led.c: 28: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000004);
  5259  0414  3004               	movlw	(04h)
  5260  0415  00CF               	movwf	(??_LED_Init+0)+0
  5261  0416  084F               	movf	(??_LED_Init+0)+0,w
  5262  0417  00D0               	movwf	(LED_Init@GPIO_InitStruct)
  5263                           	line	29
  5264                           	
  5265  0418                     l17613:	
  5266                           ;ms83fxx02_led.c: 29: GPIO_Init(GPIOA, &GPIO_InitStruct);
  5267  0418  3050               	movlw	(LED_Init@GPIO_InitStruct)&0ffh
  5268  0419  00CF               	movwf	(??_LED_Init+0)+0
  5269  041A  084F               	movf	(??_LED_Init+0)+0,w
  5270  041B  00CB               	movwf	(?_GPIO_Init)
  5271  041C  3000               	movlw	(0)
  5272  041D  118A  2606  118A   	fcall	_GPIO_Init
  5273                           	line	31
  5274                           	
  5275  0420                     l17615:	
  5276                           ;ms83fxx02_led.c: 31: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  5277  0420  1283               	bcf	status, 5	;RP0=0, select bank0
  5278  0421  1303               	bcf	status, 6	;RP1=0, select bank0
  5279  0422  01D1               	clrf	0+(LED_Init@GPIO_InitStruct)+01h
  5280  0423  1403               	bsf	status,0
  5281  0424  0DD1               	rlf	0+(LED_Init@GPIO_InitStruct)+01h,f
  5282                           	line	32
  5283                           	
  5284  0425                     l17617:	
  5285                           ;ms83fxx02_led.c: 32: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000008);
  5286  0425  3008               	movlw	(08h)
  5287  0426  00CF               	movwf	(??_LED_Init+0)+0
  5288  0427  084F               	movf	(??_LED_Init+0)+0,w
  5289  0428  00D0               	movwf	(LED_Init@GPIO_InitStruct)
  5290                           	line	33
  5291                           ;ms83fxx02_led.c: 33: GPIO_Init(GPIOA, &GPIO_InitStruct);
  5292  0429  3050               	movlw	(LED_Init@GPIO_InitStruct)&0ffh
  5293  042A  00CF               	movwf	(??_LED_Init+0)+0
  5294  042B  084F               	movf	(??_LED_Init+0)+0,w
  5295  042C  00CB               	movwf	(?_GPIO_Init)
  5296  042D  3000               	movlw	(0)
  5297  042E  118A  2606  118A   	fcall	_GPIO_Init
  5298                           	line	35
  5299                           	
  5300  0431                     l17619:	
  5301                           ;ms83fxx02_led.c: 35: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  5302  0431  1283               	bcf	status, 5	;RP0=0, select bank0
  5303  0432  1303               	bcf	status, 6	;RP1=0, select bank0
  5304  0433  01D1               	clrf	0+(LED_Init@GPIO_InitStruct)+01h
  5305  0434  1403               	bsf	status,0
  5306  0435  0DD1               	rlf	0+(LED_Init@GPIO_InitStruct)+01h,f
  5307                           	line	36
  5308                           	
  5309  0436                     l17621:	
  5310                           ;ms83fxx02_led.c: 36: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000001);
  5311  0436  01D0               	clrf	(LED_Init@GPIO_InitStruct)
  5312  0437  1403               	bsf	status,0
  5313  0438  0DD0               	rlf	(LED_Init@GPIO_InitStruct),f
  5314                           	line	37
  5315                           ;ms83fxx02_led.c: 37: GPIO_Init(GPIOC, &GPIO_InitStruct);
  5316  0439  3050               	movlw	(LED_Init@GPIO_InitStruct)&0ffh
  5317  043A  00CF               	movwf	(??_LED_Init+0)+0
  5318  043B  084F               	movf	(??_LED_Init+0)+0,w
  5319  043C  00CB               	movwf	(?_GPIO_Init)
  5320  043D  3001               	movlw	(01h)
  5321  043E  118A  2606  118A   	fcall	_GPIO_Init
  5322                           	line	43
  5323                           	
  5324  0441                     l17623:	
  5325                           ;ms83fxx02_led.c: 43: GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  5326  0441  1283               	bcf	status, 5	;RP0=0, select bank0
  5327  0442  1303               	bcf	status, 6	;RP1=0, select bank0
  5328  0443  01D1               	clrf	0+(LED_Init@GPIO_InitStruct)+01h
  5329  0444  1403               	bsf	status,0
  5330  0445  0DD1               	rlf	0+(LED_Init@GPIO_InitStruct)+01h,f
  5331                           	line	44
  5332                           	
  5333  0446                     l17625:	
  5334                           ;ms83fxx02_led.c: 44: GPIO_InitStruct.GPIO_Pin = ((uint8_t)0x00000040);
  5335  0446  3040               	movlw	(040h)
  5336  0447  00CF               	movwf	(??_LED_Init+0)+0
  5337  0448  084F               	movf	(??_LED_Init+0)+0,w
  5338  0449  00D0               	movwf	(LED_Init@GPIO_InitStruct)
  5339                           	line	45
  5340                           	
  5341  044A                     l17627:	
  5342                           ;ms83fxx02_led.c: 45: GPIO_Init(GPIOA, &GPIO_InitStruct);
  5343  044A  3050               	movlw	(LED_Init@GPIO_InitStruct)&0ffh
  5344  044B  00CF               	movwf	(??_LED_Init+0)+0
  5345  044C  084F               	movf	(??_LED_Init+0)+0,w
  5346  044D  00CB               	movwf	(?_GPIO_Init)
  5347  044E  3000               	movlw	(0)
  5348  044F  118A  2606  118A   	fcall	_GPIO_Init
  5349                           	line	47
  5350                           	
  5351  0452                     l17629:	
  5352                           ;ms83fxx02_led.c: 47: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
  5353  0452  3004               	movlw	(04h)
  5354  0453  1283               	bcf	status, 5	;RP0=0, select bank0
  5355  0454  1303               	bcf	status, 6	;RP1=0, select bank0
  5356  0455  00CF               	movwf	(??_LED_Init+0)+0
  5357  0456  084F               	movf	(??_LED_Init+0)+0,w
  5358  0457  00CB               	movwf	(?_GPIO_WriteBit)
  5359  0458  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  5360  0459  3000               	movlw	(0)
  5361  045A  158A  257C  118A   	fcall	_GPIO_WriteBit
  5362                           	line	48
  5363                           	
  5364  045D                     l17631:	
  5365                           ;ms83fxx02_led.c: 48: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
  5366  045D  3008               	movlw	(08h)
  5367  045E  1283               	bcf	status, 5	;RP0=0, select bank0
  5368  045F  1303               	bcf	status, 6	;RP1=0, select bank0
  5369  0460  00CF               	movwf	(??_LED_Init+0)+0
  5370  0461  084F               	movf	(??_LED_Init+0)+0,w
  5371  0462  00CB               	movwf	(?_GPIO_WriteBit)
  5372  0463  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  5373  0464  3000               	movlw	(0)
  5374  0465  158A  257C  118A   	fcall	_GPIO_WriteBit
  5375                           	line	49
  5376                           	
  5377  0468                     l17633:	
  5378                           ;ms83fxx02_led.c: 49: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
  5379  0468  1283               	bcf	status, 5	;RP0=0, select bank0
  5380  0469  1303               	bcf	status, 6	;RP1=0, select bank0
  5381  046A  01CB               	clrf	(?_GPIO_WriteBit)
  5382  046B  1403               	bsf	status,0
  5383  046C  0DCB               	rlf	(?_GPIO_WriteBit),f
  5384  046D  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  5385  046E  3001               	movlw	(01h)
  5386  046F  158A  257C  118A   	fcall	_GPIO_WriteBit
  5387                           	line	52
  5388                           	
  5389  0472                     l17635:	
  5390                           ;ms83fxx02_led.c: 52: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000040), Bit_RESET);
  5391  0472  3040               	movlw	(040h)
  5392  0473  1283               	bcf	status, 5	;RP0=0, select bank0
  5393  0474  1303               	bcf	status, 6	;RP1=0, select bank0
  5394  0475  00CF               	movwf	(??_LED_Init+0)+0
  5395  0476  084F               	movf	(??_LED_Init+0)+0,w
  5396  0477  00CB               	movwf	(?_GPIO_WriteBit)
  5397  0478  01CC               	clrf	0+(?_GPIO_WriteBit)+01h
  5398  0479  3000               	movlw	(0)
  5399  047A  158A  257C  118A   	fcall	_GPIO_WriteBit
  5400                           	line	53
  5401                           	
  5402  047D                     l6613:	
  5403  047D  0008               	return
  5404                           	opt stack 0
  5405                           GLOBAL	__end_of_LED_Init
  5406  047E                     	__end_of_LED_Init:
  5407 ;; =============== function _LED_Init ends ============
  5408                           
  5409                           	signat	_LED_Init,88
  5410                           	global	___ftge
  5411                           psect	text1800,local,class=CODE,delta=2
  5412                           global __ptext1800
  5413  047E                     __ptext1800:
  5414                           
  5415 ;; *************** function ___ftge *****************
  5416 ;; Defined at:
  5417 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\ftge.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  ff1             3   12[BANK0 ] float 
  5420 ;;  ff2             3   15[BANK0 ] float 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;		None
  5423 ;; Return value:  Size  Location     Type
  5424 ;;		None               void
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5432 ;;      Params:         0       6       0       0
  5433 ;;      Locals:         0       0       0       0
  5434 ;;      Temps:          0       6       0       0
  5435 ;;      Totals:         0      12       0       0
  5436 ;;Total ram usage:       12 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    4
  5439 ;; This function calls:
  5440 ;;		Nothing
  5441 ;; This function is called by:
  5442 ;;		_Battery_Detect
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           psect	text1800
  5446                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\ftge.c"
  5447                           	line	5
  5448                           	global	__size_of___ftge
  5449  006E                     	__size_of___ftge	equ	__end_of___ftge-___ftge
  5450                           	
  5451  047E                     ___ftge:	
  5452                           	opt	stack 1
  5453                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5454                           	line	6
  5455                           	
  5456  047E                     l17389:	
  5457  047E  1283               	bcf	status, 5	;RP0=0, select bank0
  5458  047F  1303               	bcf	status, 6	;RP1=0, select bank0
  5459  0480  1FD5               	btfss	(___ftge@ff1+2),(23)&7
  5460  0481  2C83               	goto	u4871
  5461  0482  2C84               	goto	u4870
  5462  0483                     u4871:
  5463  0483  2CAA               	goto	l17393
  5464  0484                     u4870:
  5465                           	line	7
  5466                           	
  5467  0484                     l17391:	
  5468  0484  3000               	movlw	0
  5469  0485  00D9               	movwf	((??___ftge+0)+0)
  5470  0486  3000               	movlw	0
  5471  0487  00DA               	movwf	((??___ftge+0)+0+1)
  5472  0488  3080               	movlw	080h
  5473  0489  00DB               	movwf	((??___ftge+0)+0+2)
  5474  048A  0953               	comf	(___ftge@ff1),w
  5475  048B  00DC               	movwf	(??___ftge+3)+0
  5476  048C  0954               	comf	(___ftge@ff1+1),w
  5477  048D  00DD               	movwf	((??___ftge+3)+0+1)
  5478  048E  0955               	comf	(___ftge@ff1+2),w
  5479  048F  00DE               	movwf	((??___ftge+3)+0+2)
  5480  0490  0ADC               	incf	(??___ftge+3)+0,f
  5481  0491  1903               	skipnz
  5482  0492  0ADD               	incf	((??___ftge+3)+0+1),f
  5483  0493  1903               	skipnz
  5484  0494  0ADE               	incf	((??___ftge+3)+0+2),f
  5485  0495  085C               	movf	0+(??___ftge+3)+0,w
  5486  0496  07D9               	addwf	(??___ftge+0)+0,f
  5487  0497  085D               	movf	1+(??___ftge+3)+0,w
  5488  0498  1803               	skipnc
  5489  0499  0F5D               	incfsz	1+(??___ftge+3)+0,w
  5490  049A  2C9C               	goto	u4881
  5491  049B  2C9D               	goto	u4882
  5492  049C                     u4881:
  5493  049C  07DA               	addwf	(??___ftge+0)+1,f
  5494                           	
  5495  049D                     u4882:
  5496  049D  085E               	movf	2+(??___ftge+3)+0,w
  5497  049E  1803               	skipnc
  5498  049F  0F5E               	incfsz	2+(??___ftge+3)+0,w
  5499  04A0  2CA2               	goto	u4883
  5500  04A1  2CA3               	goto	u4884
  5501  04A2                     u4883:
  5502  04A2  07DB               	addwf	(??___ftge+0)+2,f
  5503                           	
  5504  04A3                     u4884:
  5505  04A3  0859               	movf	0+(??___ftge+0)+0,w
  5506  04A4  00D3               	movwf	(___ftge@ff1)
  5507  04A5  085A               	movf	1+(??___ftge+0)+0,w
  5508  04A6  00D4               	movwf	(___ftge@ff1+1)
  5509  04A7  085B               	movf	2+(??___ftge+0)+0,w
  5510  04A8  00D5               	movwf	(___ftge@ff1+2)
  5511  04A9  2CAA               	goto	l17393
  5512                           	
  5513  04AA                     l14170:	
  5514                           	line	8
  5515                           	
  5516  04AA                     l17393:	
  5517  04AA  1FD8               	btfss	(___ftge@ff2+2),(23)&7
  5518  04AB  2CAD               	goto	u4891
  5519  04AC  2CAE               	goto	u4890
  5520  04AD                     u4891:
  5521  04AD  2CD4               	goto	l17397
  5522  04AE                     u4890:
  5523                           	line	9
  5524                           	
  5525  04AE                     l17395:	
  5526  04AE  3000               	movlw	0
  5527  04AF  00D9               	movwf	((??___ftge+0)+0)
  5528  04B0  3000               	movlw	0
  5529  04B1  00DA               	movwf	((??___ftge+0)+0+1)
  5530  04B2  3080               	movlw	080h
  5531  04B3  00DB               	movwf	((??___ftge+0)+0+2)
  5532  04B4  0956               	comf	(___ftge@ff2),w
  5533  04B5  00DC               	movwf	(??___ftge+3)+0
  5534  04B6  0957               	comf	(___ftge@ff2+1),w
  5535  04B7  00DD               	movwf	((??___ftge+3)+0+1)
  5536  04B8  0958               	comf	(___ftge@ff2+2),w
  5537  04B9  00DE               	movwf	((??___ftge+3)+0+2)
  5538  04BA  0ADC               	incf	(??___ftge+3)+0,f
  5539  04BB  1903               	skipnz
  5540  04BC  0ADD               	incf	((??___ftge+3)+0+1),f
  5541  04BD  1903               	skipnz
  5542  04BE  0ADE               	incf	((??___ftge+3)+0+2),f
  5543  04BF  085C               	movf	0+(??___ftge+3)+0,w
  5544  04C0  07D9               	addwf	(??___ftge+0)+0,f
  5545  04C1  085D               	movf	1+(??___ftge+3)+0,w
  5546  04C2  1803               	skipnc
  5547  04C3  0F5D               	incfsz	1+(??___ftge+3)+0,w
  5548  04C4  2CC6               	goto	u4901
  5549  04C5  2CC7               	goto	u4902
  5550  04C6                     u4901:
  5551  04C6  07DA               	addwf	(??___ftge+0)+1,f
  5552                           	
  5553  04C7                     u4902:
  5554  04C7  085E               	movf	2+(??___ftge+3)+0,w
  5555  04C8  1803               	skipnc
  5556  04C9  0F5E               	incfsz	2+(??___ftge+3)+0,w
  5557  04CA  2CCC               	goto	u4903
  5558  04CB  2CCD               	goto	u4904
  5559  04CC                     u4903:
  5560  04CC  07DB               	addwf	(??___ftge+0)+2,f
  5561                           	
  5562  04CD                     u4904:
  5563  04CD  0859               	movf	0+(??___ftge+0)+0,w
  5564  04CE  00D6               	movwf	(___ftge@ff2)
  5565  04CF  085A               	movf	1+(??___ftge+0)+0,w
  5566  04D0  00D7               	movwf	(___ftge@ff2+1)
  5567  04D1  085B               	movf	2+(??___ftge+0)+0,w
  5568  04D2  00D8               	movwf	(___ftge@ff2+2)
  5569  04D3  2CD4               	goto	l17397
  5570                           	
  5571  04D4                     l14171:	
  5572                           	line	10
  5573                           	
  5574  04D4                     l17397:	
  5575  04D4  3080               	movlw	080h
  5576  04D5  06D5               	xorwf	(___ftge@ff1+2),f
  5577                           	line	11
  5578                           	
  5579  04D6                     l17399:	
  5580  04D6  3080               	movlw	080h
  5581  04D7  06D8               	xorwf	(___ftge@ff2+2),f
  5582                           	line	12
  5583                           	
  5584  04D8                     l17401:	
  5585  04D8  0858               	movf	(___ftge@ff2+2),w
  5586  04D9  0255               	subwf	(___ftge@ff1+2),w
  5587  04DA  1D03               	skipz
  5588  04DB  2CE2               	goto	u4915
  5589  04DC  0857               	movf	(___ftge@ff2+1),w
  5590  04DD  0254               	subwf	(___ftge@ff1+1),w
  5591  04DE  1D03               	skipz
  5592  04DF  2CE2               	goto	u4915
  5593  04E0  0856               	movf	(___ftge@ff2),w
  5594  04E1  0253               	subwf	(___ftge@ff1),w
  5595  04E2                     u4915:
  5596  04E2  1803               	skipnc
  5597  04E3  2CE5               	goto	u4911
  5598  04E4  2CE6               	goto	u4910
  5599  04E5                     u4911:
  5600  04E5  2CE8               	goto	l17405
  5601  04E6                     u4910:
  5602                           	
  5603  04E6                     l17403:	
  5604  04E6  1003               	clrc
  5605                           	
  5606  04E7  2CEB               	goto	l14172
  5607                           	
  5608  04E8                     l16585:	
  5609                           	
  5610  04E8                     l17405:	
  5611  04E8  1403               	setc
  5612                           	
  5613  04E9  2CEB               	goto	l14172
  5614                           	
  5615  04EA                     l16587:	
  5616  04EA  2CEB               	goto	l14172
  5617                           	
  5618  04EB                     l17407:	
  5619                           	line	13
  5620                           	
  5621  04EB                     l14172:	
  5622  04EB  0008               	return
  5623                           	opt stack 0
  5624                           GLOBAL	__end_of___ftge
  5625  04EC                     	__end_of___ftge:
  5626 ;; =============== function ___ftge ends ============
  5627                           
  5628                           	signat	___ftge,8312
  5629                           	global	___ftpack
  5630                           psect	text1801,local,class=CODE,delta=2
  5631                           global __ptext1801
  5632  0321                     __ptext1801:
  5633                           
  5634 ;; *************** function ___ftpack *****************
  5635 ;; Defined at:
  5636 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\float.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  arg             3    4[BANK0 ] unsigned um
  5639 ;;  exp             1    7[BANK0 ] unsigned char 
  5640 ;;  sign            1    8[BANK0 ] unsigned char 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  3    4[BANK0 ] float 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5652 ;;      Params:         0       5       0       0
  5653 ;;      Locals:         0       0       0       0
  5654 ;;      Temps:          0       3       0       0
  5655 ;;      Totals:         0       8       0       0
  5656 ;;Total ram usage:        8 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    4
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		___lwtoft
  5663 ;;		___ftadd
  5664 ;;		___ftdiv
  5665 ;;		___ftmul
  5666 ;;		___lbtoft
  5667 ;;		___abtoft
  5668 ;;		___awtoft
  5669 ;;		___altoft
  5670 ;;		___lltoft
  5671 ;;		___attoft
  5672 ;;		___lttoft
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           psect	text1801
  5676                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\float.c"
  5677                           	line	63
  5678                           	global	__size_of___ftpack
  5679  007D                     	__size_of___ftpack	equ	__end_of___ftpack-___ftpack
  5680                           	
  5681  0321                     ___ftpack:	
  5682                           	opt	stack 0
  5683                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5684                           	line	64
  5685                           	
  5686  0321                     l17249:	
  5687  0321  1283               	bcf	status, 5	;RP0=0, select bank0
  5688  0322  1303               	bcf	status, 6	;RP1=0, select bank0
  5689  0323  084E               	movf	(___ftpack@exp),w
  5690  0324  1D03               	skipz
  5691  0325  2B27               	goto	u4520
  5692  0326  2B2F               	goto	l17253
  5693  0327                     u4520:
  5694                           	
  5695  0327                     l17251:	
  5696  0327  084D               	movf	(___ftpack@arg+2),w
  5697  0328  044C               	iorwf	(___ftpack@arg+1),w
  5698  0329  044B               	iorwf	(___ftpack@arg),w
  5699  032A  1D03               	skipz
  5700  032B  2B2D               	goto	u4531
  5701  032C  2B2E               	goto	u4530
  5702  032D                     u4531:
  5703  032D  2B45               	goto	l17259
  5704  032E                     u4530:
  5705  032E  2B2F               	goto	l17253
  5706                           	
  5707  032F                     l14337:	
  5708                           	line	65
  5709                           	
  5710  032F                     l17253:	
  5711  032F  3000               	movlw	0x0
  5712  0330  00CB               	movwf	(?___ftpack)
  5713  0331  3000               	movlw	0x0
  5714  0332  00CC               	movwf	(?___ftpack+1)
  5715  0333  3000               	movlw	0x0
  5716  0334  00CD               	movwf	(?___ftpack+2)
  5717  0335  2B9D               	goto	l14338
  5718                           	
  5719  0336                     l17255:	
  5720  0336  2B9D               	goto	l14338
  5721                           	
  5722  0337                     l14335:	
  5723                           	line	66
  5724  0337  2B45               	goto	l17259
  5725                           	
  5726  0338                     l14340:	
  5727                           	line	67
  5728                           	
  5729  0338                     l17257:	
  5730  0338  3001               	movlw	(01h)
  5731  0339  00D0               	movwf	(??___ftpack+0)+0
  5732  033A  0850               	movf	(??___ftpack+0)+0,w
  5733  033B  07CE               	addwf	(___ftpack@exp),f
  5734                           	line	68
  5735  033C  3001               	movlw	01h
  5736  033D                     u4545:
  5737  033D  1003               	clrc
  5738  033E  0CCD               	rrf	(___ftpack@arg+2),f
  5739  033F  0CCC               	rrf	(___ftpack@arg+1),f
  5740  0340  0CCB               	rrf	(___ftpack@arg),f
  5741  0341  3EFF               	addlw	-1
  5742  0342  1D03               	skipz
  5743  0343  2B3D               	goto	u4545
  5744                           
  5745  0344  2B45               	goto	l17259
  5746                           	line	69
  5747                           	
  5748  0345                     l14339:	
  5749                           	line	66
  5750                           	
  5751  0345                     l17259:	
  5752  0345  30FE               	movlw	low highword(0FE0000h)
  5753  0346  054D               	andwf	(___ftpack@arg+2),w
  5754  0347  1D03               	btfss	status,2
  5755  0348  2B4A               	goto	u4551
  5756  0349  2B4B               	goto	u4550
  5757  034A                     u4551:
  5758  034A  2B38               	goto	l17257
  5759  034B                     u4550:
  5760  034B  2B63               	goto	l14342
  5761                           	
  5762  034C                     l14341:	
  5763                           	line	70
  5764  034C  2B63               	goto	l14342
  5765                           	
  5766  034D                     l14343:	
  5767                           	line	71
  5768                           	
  5769  034D                     l17261:	
  5770  034D  3001               	movlw	(01h)
  5771  034E  00D0               	movwf	(??___ftpack+0)+0
  5772  034F  0850               	movf	(??___ftpack+0)+0,w
  5773  0350  07CE               	addwf	(___ftpack@exp),f
  5774                           	line	72
  5775                           	
  5776  0351                     l17263:	
  5777  0351  3001               	movlw	01h
  5778  0352  07CB               	addwf	(___ftpack@arg),f
  5779  0353  3000               	movlw	0
  5780  0354  1803               	skipnc
  5781  0355  3001               movlw 1
  5782  0356  07CC               	addwf	(___ftpack@arg+1),f
  5783  0357  3000               	movlw	0
  5784  0358  1803               	skipnc
  5785  0359  3001               movlw 1
  5786  035A  07CD               	addwf	(___ftpack@arg+2),f
  5787                           	line	73
  5788                           	
  5789  035B                     l17265:	
  5790  035B  3001               	movlw	01h
  5791  035C                     u4565:
  5792  035C  1003               	clrc
  5793  035D  0CCD               	rrf	(___ftpack@arg+2),f
  5794  035E  0CCC               	rrf	(___ftpack@arg+1),f
  5795  035F  0CCB               	rrf	(___ftpack@arg),f
  5796  0360  3EFF               	addlw	-1
  5797  0361  1D03               	skipz
  5798  0362  2B5C               	goto	u4565
  5799                           
  5800                           	line	74
  5801                           	
  5802  0363                     l14342:	
  5803                           	line	70
  5804  0363  30FF               	movlw	low highword(0FF0000h)
  5805  0364  054D               	andwf	(___ftpack@arg+2),w
  5806  0365  1D03               	btfss	status,2
  5807  0366  2B68               	goto	u4571
  5808  0367  2B69               	goto	u4570
  5809  0368                     u4571:
  5810  0368  2B4D               	goto	l17261
  5811  0369                     u4570:
  5812  0369  2B76               	goto	l17269
  5813                           	
  5814  036A                     l14344:	
  5815                           	line	75
  5816  036A  2B76               	goto	l17269
  5817                           	
  5818  036B                     l14346:	
  5819                           	line	76
  5820                           	
  5821  036B                     l17267:	
  5822  036B  3001               	movlw	low(01h)
  5823  036C  02CE               	subwf	(___ftpack@exp),f
  5824                           	line	77
  5825  036D  3001               	movlw	01h
  5826  036E                     u4585:
  5827  036E  1003               	clrc
  5828  036F  0DCB               	rlf	(___ftpack@arg),f
  5829  0370  0DCC               	rlf	(___ftpack@arg+1),f
  5830  0371  0DCD               	rlf	(___ftpack@arg+2),f
  5831  0372  3EFF               	addlw	-1
  5832  0373  1D03               	skipz
  5833  0374  2B6E               	goto	u4585
  5834  0375  2B76               	goto	l17269
  5835                           	line	78
  5836                           	
  5837  0376                     l14345:	
  5838                           	line	75
  5839                           	
  5840  0376                     l17269:	
  5841  0376  1FCC               	btfss	(___ftpack@arg+1),(15)&7
  5842  0377  2B79               	goto	u4591
  5843  0378  2B7A               	goto	u4590
  5844  0379                     u4591:
  5845  0379  2B6B               	goto	l17267
  5846  037A                     u4590:
  5847                           	
  5848  037A                     l14347:	
  5849                           	line	79
  5850  037A  184E               	btfsc	(___ftpack@exp),(0)&7
  5851  037B  2B7D               	goto	u4601
  5852  037C  2B7E               	goto	u4600
  5853  037D                     u4601:
  5854  037D  2B84               	goto	l14348
  5855  037E                     u4600:
  5856                           	line	80
  5857                           	
  5858  037E                     l17271:	
  5859  037E  30FF               	movlw	0FFh
  5860  037F  05CB               	andwf	(___ftpack@arg),f
  5861  0380  307F               	movlw	07Fh
  5862  0381  05CC               	andwf	(___ftpack@arg+1),f
  5863  0382  30FF               	movlw	0FFh
  5864  0383  05CD               	andwf	(___ftpack@arg+2),f
  5865                           	
  5866  0384                     l14348:	
  5867                           	line	81
  5868  0384  1003               	clrc
  5869  0385  0CCE               	rrf	(___ftpack@exp),f
  5870                           
  5871                           	line	82
  5872                           	
  5873  0386                     l17273:	
  5874  0386  084E               	movf	(___ftpack@exp),w
  5875  0387  00D0               	movwf	((??___ftpack+0)+0)
  5876  0388  01D1               	clrf	((??___ftpack+0)+0+1)
  5877  0389  01D2               	clrf	((??___ftpack+0)+0+2)
  5878  038A  3010               	movlw	010h
  5879  038B                     u4615:
  5880  038B  1003               	clrc
  5881  038C  0DD0               	rlf	(??___ftpack+0)+0,f
  5882  038D  0DD1               	rlf	(??___ftpack+0)+1,f
  5883  038E  0DD2               	rlf	(??___ftpack+0)+2,f
  5884  038F                     u4610:
  5885  038F  3EFF               	addlw	-1
  5886  0390  1D03               	skipz
  5887  0391  2B8B               	goto	u4615
  5888  0392  0850               	movf	0+(??___ftpack+0)+0,w
  5889  0393  04CB               	iorwf	(___ftpack@arg),f
  5890  0394  0851               	movf	1+(??___ftpack+0)+0,w
  5891  0395  04CC               	iorwf	(___ftpack@arg+1),f
  5892  0396  0852               	movf	2+(??___ftpack+0)+0,w
  5893  0397  04CD               	iorwf	(___ftpack@arg+2),f
  5894                           	line	83
  5895                           	
  5896  0398                     l17275:	
  5897  0398  084F               	movf	(___ftpack@sign),w
  5898  0399  1D03               	skipz
  5899  039A  2B9C               	goto	u4620
  5900  039B  2B9D               	goto	l14349
  5901  039C                     u4620:
  5902                           	line	84
  5903                           	
  5904  039C                     l17277:	
  5905  039C  17CD               	bsf	(___ftpack@arg)+(23/8),(23)&7
  5906                           	
  5907  039D                     l14349:	
  5908                           	line	85
  5909                           	line	86
  5910                           	
  5911  039D                     l14338:	
  5912  039D  0008               	return
  5913                           	opt stack 0
  5914                           GLOBAL	__end_of___ftpack
  5915  039E                     	__end_of___ftpack:
  5916 ;; =============== function ___ftpack ends ============
  5917                           
  5918                           	signat	___ftpack,12411
  5919                           	global	_SleepLed_Init
  5920                           psect	text1802,local,class=CODE,delta=2
  5921                           global __ptext1802
  5922  0D10                     __ptext1802:
  5923                           
  5924 ;; *************** function _SleepLed_Init *****************
  5925 ;; Defined at:
  5926 ;;		line 55 in file "ms83fxx02_sleepled.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  duty            2    4[BANK0 ] unsigned short 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;		None
  5931 ;; Return value:  Size  Location     Type
  5932 ;;		None               void
  5933 ;; Registers used:
  5934 ;;		wreg, status,2
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5940 ;;      Params:         0       2       0       0
  5941 ;;      Locals:         0       0       0       0
  5942 ;;      Temps:          0       0       0       0
  5943 ;;      Totals:         0       2       0       0
  5944 ;;Total ram usage:        2 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    4
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_SleepLedTimer_Init
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           psect	text1802
  5954                           	file	"ms83fxx02_sleepled.c"
  5955                           	line	55
  5956                           	global	__size_of_SleepLed_Init
  5957  0023                     	__size_of_SleepLed_Init	equ	__end_of_SleepLed_Init-_SleepLed_Init
  5958                           	
  5959  0D10                     _SleepLed_Init:	
  5960                           	opt	stack 2
  5961                           ; Regs used in _SleepLed_Init: [wreg+status,2]
  5962                           	line	57
  5963                           	
  5964  0D10                     l17151:	
  5965                           ;ms83fxx02_sleepled.c: 57: TRISC3 = 1;
  5966  0D10  1683               	bsf	status, 5	;RP0=1, select bank1
  5967  0D11  1303               	bcf	status, 6	;RP1=0, select bank1
  5968  0D12  1587               	bsf	(1083/8)^080h,(1083)&7
  5969                           	line	60
  5970                           	
  5971  0D13                     l17153:	
  5972                           ;ms83fxx02_sleepled.c: 60: PWM4CR0 = 0b11100010;
  5973  0D13  30E2               	movlw	(0E2h)
  5974  0D14  1283               	bcf	status, 5	;RP0=0, select bank2
  5975  0D15  1703               	bsf	status, 6	;RP1=1, select bank2
  5976  0D16  0095               	movwf	(277)^0100h	;volatile
  5977                           	line	63
  5978                           ;ms83fxx02_sleepled.c: 63: PWM4CR1 = 0b10000000;
  5979  0D17  3080               	movlw	(080h)
  5980  0D18  0096               	movwf	(278)^0100h	;volatile
  5981                           	line	66
  5982                           ;ms83fxx02_sleepled.c: 66: T4CKDIV = 77;
  5983  0D19  304D               	movlw	(04Dh)
  5984  0D1A  0097               	movwf	(279)^0100h	;volatile
  5985                           	line	68
  5986                           	
  5987  0D1B                     l17155:	
  5988                           ;ms83fxx02_sleepled.c: 68: TMR4H = (duty >> 8) & 0xFF;
  5989  0D1B  1283               	bcf	status, 5	;RP0=0, select bank0
  5990  0D1C  1303               	bcf	status, 6	;RP1=0, select bank0
  5991  0D1D  084C               	movf	(SleepLed_Init@duty+1),w
  5992  0D1E  1283               	bcf	status, 5	;RP0=0, select bank2
  5993  0D1F  1703               	bsf	status, 6	;RP1=1, select bank2
  5994  0D20  0093               	movwf	(275)^0100h	;volatile
  5995                           	line	69
  5996                           ;ms83fxx02_sleepled.c: 69: TMR4L = 0;
  5997  0D21  0192               	clrf	(274)^0100h	;volatile
  5998                           	line	70
  5999                           	
  6000  0D22                     l17157:	
  6001                           ;ms83fxx02_sleepled.c: 70: PR4L = duty & 0xFF;
  6002  0D22  1283               	bcf	status, 5	;RP0=0, select bank0
  6003  0D23  1303               	bcf	status, 6	;RP1=0, select bank0
  6004  0D24  084B               	movf	(SleepLed_Init@duty),w
  6005  0D25  1283               	bcf	status, 5	;RP0=0, select bank2
  6006  0D26  1703               	bsf	status, 6	;RP1=1, select bank2
  6007  0D27  0094               	movwf	(276)^0100h	;volatile
  6008                           	line	81
  6009                           	
  6010  0D28                     l17159:	
  6011                           ;ms83fxx02_sleepled.c: 81: TMR4IF = 0;
  6012  0D28  1016               	bcf	(2224/8)^0100h,(2224)&7
  6013                           	line	84
  6014                           	
  6015  0D29                     l17161:	
  6016                           ;ms83fxx02_sleepled.c: 84: TMR4ON = 1;
  6017  0D29  1516               	bsf	(2226/8)^0100h,(2226)&7
  6018                           	line	86
  6019                           ;ms83fxx02_sleepled.c: 86: while(TMR4IF == 0);
  6020  0D2A  2D2B               	goto	l13306
  6021                           	
  6022  0D2B                     l13307:	
  6023                           	
  6024  0D2B                     l13306:	
  6025  0D2B  1C16               	btfss	(2224/8)^0100h,(2224)&7
  6026  0D2C  2D2E               	goto	u4241
  6027  0D2D  2D2F               	goto	u4240
  6028  0D2E                     u4241:
  6029  0D2E  2D2B               	goto	l13306
  6030  0D2F                     u4240:
  6031                           	
  6032  0D2F                     l13308:	
  6033                           	line	87
  6034                           ;ms83fxx02_sleepled.c: 87: TRISC3 = 0;
  6035  0D2F  1683               	bsf	status, 5	;RP0=1, select bank1
  6036  0D30  1303               	bcf	status, 6	;RP1=0, select bank1
  6037  0D31  1187               	bcf	(1083/8)^080h,(1083)&7
  6038                           	line	88
  6039                           	
  6040  0D32                     l13309:	
  6041  0D32  0008               	return
  6042                           	opt stack 0
  6043                           GLOBAL	__end_of_SleepLed_Init
  6044  0D33                     	__end_of_SleepLed_Init:
  6045 ;; =============== function _SleepLed_Init ends ============
  6046                           
  6047                           	signat	_SleepLed_Init,4216
  6048                           	global	_Battery_HandleData
  6049                           psect	text1803,local,class=CODE,delta=2
  6050                           global __ptext1803
  6051  0221                     __ptext1803:
  6052                           
  6053 ;; *************** function _Battery_HandleData *****************
  6054 ;; Defined at:
  6055 ;;		line 194 in file "ms83fxx02_pwr.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  temp1           2   14[BANK0 ] unsigned short 
  6060 ;;  average_data    2   12[BANK0 ] unsigned int 
  6061 ;;  temp2           2   10[BANK0 ] unsigned short 
  6062 ;;  i               1   16[BANK0 ] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  2    4[BANK0 ] unsigned int 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6072 ;;      Params:         0       2       0       0
  6073 ;;      Locals:         0       7       0       0
  6074 ;;      Temps:          0       4       0       0
  6075 ;;      Totals:         0      13       0       0
  6076 ;;Total ram usage:       13 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		Nothing
  6081 ;; This function is called by:
  6082 ;;		_Battery_Detect
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           psect	text1803
  6086                           	file	"ms83fxx02_pwr.c"
  6087                           	line	194
  6088                           	global	__size_of_Battery_HandleData
  6089  0083                     	__size_of_Battery_HandleData	equ	__end_of_Battery_HandleData-_Battery_HandleData
  6090                           	
  6091  0221                     _Battery_HandleData:	
  6092                           	opt	stack 1
  6093                           ; Regs used in _Battery_HandleData: [wreg-fsr0h+status,2+status,0]
  6094                           	line	195
  6095                           	
  6096  0221                     l17121:	
  6097                           ;ms83fxx02_pwr.c: 195: uint8_t i = 0;
  6098  0221  1283               	bcf	status, 5	;RP0=0, select bank0
  6099  0222  1303               	bcf	status, 6	;RP1=0, select bank0
  6100  0223  01D7               	clrf	(Battery_HandleData@i)
  6101                           	line	196
  6102                           	
  6103  0224                     l17123:	
  6104                           ;ms83fxx02_pwr.c: 196: uint32_t average_data = 0;
  6105  0224  01D3               	clrf	(Battery_HandleData@average_data)
  6106  0225  01D4               	clrf	(Battery_HandleData@average_data+1)
  6107                           	line	197
  6108                           	
  6109  0226                     l17125:	
  6110                           ;ms83fxx02_pwr.c: 197: uint16_t temp1 = battery_value[0];
  6111  0226  0821               	movf	(_battery_value+1),w	;volatile
  6112  0227  01D6               	clrf	(Battery_HandleData@temp1+1)
  6113  0228  07D6               	addwf	(Battery_HandleData@temp1+1)
  6114  0229  0820               	movf	(_battery_value),w	;volatile
  6115  022A  01D5               	clrf	(Battery_HandleData@temp1)
  6116  022B  07D5               	addwf	(Battery_HandleData@temp1)
  6117                           
  6118                           	line	198
  6119                           	
  6120  022C                     l17127:	
  6121                           ;ms83fxx02_pwr.c: 198: uint16_t temp2 = battery_value[0];
  6122  022C  0821               	movf	(_battery_value+1),w	;volatile
  6123  022D  01D2               	clrf	(Battery_HandleData@temp2+1)
  6124  022E  07D2               	addwf	(Battery_HandleData@temp2+1)
  6125  022F  0820               	movf	(_battery_value),w	;volatile
  6126  0230  01D1               	clrf	(Battery_HandleData@temp2)
  6127  0231  07D1               	addwf	(Battery_HandleData@temp2)
  6128                           
  6129                           	line	200
  6130                           	
  6131  0232                     l17129:	
  6132                           ;ms83fxx02_pwr.c: 200: for(i=0; i<10; i++)
  6133  0232  01D7               	clrf	(Battery_HandleData@i)
  6134                           	
  6135  0233                     l17131:	
  6136  0233  300A               	movlw	(0Ah)
  6137  0234  0257               	subwf	(Battery_HandleData@i),w
  6138  0235  1C03               	skipc
  6139  0236  2A38               	goto	u4201
  6140  0237  2A39               	goto	u4200
  6141  0238                     u4201:
  6142  0238  2A3B               	goto	l17135
  6143  0239                     u4200:
  6144  0239  2A7C               	goto	l17145
  6145                           	
  6146  023A                     l17133:	
  6147  023A  2A7C               	goto	l17145
  6148                           	line	201
  6149                           	
  6150  023B                     l10052:	
  6151                           	line	202
  6152                           	
  6153  023B                     l17135:	
  6154                           ;ms83fxx02_pwr.c: 201: {
  6155                           ;ms83fxx02_pwr.c: 202: if(temp1 > battery_value[i])
  6156  023B  0857               	movf	(Battery_HandleData@i),w
  6157  023C  00CD               	movwf	(??_Battery_HandleData+0)+0
  6158  023D  074D               	addwf	(??_Battery_HandleData+0)+0,w
  6159  023E  3E20               	addlw	_battery_value&0ffh
  6160  023F  0084               	movwf	fsr0
  6161  0240  1383               	bcf	status, 7	;select IRP bank0
  6162  0241  0800               	movf	indf,w
  6163  0242  00CE               	movwf	(??_Battery_HandleData+1)+0+0
  6164  0243  0A84               	incf	fsr0,f
  6165  0244  0800               	movf	indf,w
  6166  0245  00CF               	movwf	(??_Battery_HandleData+1)+0+1
  6167  0246  0856               	movf	(Battery_HandleData@temp1+1),w
  6168  0247  024F               	subwf	1+(??_Battery_HandleData+1)+0,w
  6169  0248  1D03               	skipz
  6170  0249  2A4C               	goto	u4215
  6171  024A  0855               	movf	(Battery_HandleData@temp1),w
  6172  024B  024E               	subwf	0+(??_Battery_HandleData+1)+0,w
  6173  024C                     u4215:
  6174  024C  1803               	skipnc
  6175  024D  2A4F               	goto	u4211
  6176  024E  2A50               	goto	u4210
  6177  024F                     u4211:
  6178  024F  2A61               	goto	l17141
  6179  0250                     u4210:
  6180                           	line	204
  6181                           	
  6182  0250                     l17137:	
  6183                           ;ms83fxx02_pwr.c: 203: {
  6184                           ;ms83fxx02_pwr.c: 204: temp2 = temp1;
  6185  0250  0856               	movf	(Battery_HandleData@temp1+1),w
  6186  0251  01D2               	clrf	(Battery_HandleData@temp2+1)
  6187  0252  07D2               	addwf	(Battery_HandleData@temp2+1)
  6188  0253  0855               	movf	(Battery_HandleData@temp1),w
  6189  0254  01D1               	clrf	(Battery_HandleData@temp2)
  6190  0255  07D1               	addwf	(Battery_HandleData@temp2)
  6191                           
  6192                           	line	205
  6193                           	
  6194  0256                     l17139:	
  6195                           ;ms83fxx02_pwr.c: 205: temp1 = battery_value[i];
  6196  0256  0857               	movf	(Battery_HandleData@i),w
  6197  0257  00CD               	movwf	(??_Battery_HandleData+0)+0
  6198  0258  074D               	addwf	(??_Battery_HandleData+0)+0,w
  6199  0259  3E20               	addlw	_battery_value&0ffh
  6200  025A  0084               	movwf	fsr0
  6201  025B  0800               	movf	indf,w
  6202  025C  00D5               	movwf	(Battery_HandleData@temp1)
  6203  025D  0A84               	incf	fsr0,f
  6204  025E  0800               	movf	indf,w
  6205  025F  00D6               	movwf	(Battery_HandleData@temp1+1)
  6206  0260  2A61               	goto	l17141
  6207                           	line	206
  6208                           	
  6209  0261                     l10054:	
  6210                           	line	207
  6211                           	
  6212  0261                     l17141:	
  6213                           ;ms83fxx02_pwr.c: 206: }
  6214                           ;ms83fxx02_pwr.c: 207: average_data += battery_value[i];
  6215  0261  0857               	movf	(Battery_HandleData@i),w
  6216  0262  00CD               	movwf	(??_Battery_HandleData+0)+0
  6217  0263  074D               	addwf	(??_Battery_HandleData+0)+0,w
  6218  0264  3E20               	addlw	_battery_value&0ffh
  6219  0265  0084               	movwf	fsr0
  6220  0266  0800               	movf	indf,w
  6221  0267  00CE               	movwf	(??_Battery_HandleData+1)+0+0
  6222  0268  0A84               	incf	fsr0,f
  6223  0269  0800               	movf	indf,w
  6224  026A  00CF               	movwf	(??_Battery_HandleData+1)+0+1
  6225  026B  084E               	movf	0+(??_Battery_HandleData+1)+0,w
  6226  026C  07D3               	addwf	(Battery_HandleData@average_data),f
  6227  026D  1803               	skipnc
  6228  026E  0AD4               	incf	(Battery_HandleData@average_data+1),f
  6229  026F  084F               	movf	1+(??_Battery_HandleData+1)+0,w
  6230  0270  07D4               	addwf	(Battery_HandleData@average_data+1),f
  6231                           	line	200
  6232  0271  3001               	movlw	(01h)
  6233  0272  00CD               	movwf	(??_Battery_HandleData+0)+0
  6234  0273  084D               	movf	(??_Battery_HandleData+0)+0,w
  6235  0274  07D7               	addwf	(Battery_HandleData@i),f
  6236                           	
  6237  0275                     l17143:	
  6238  0275  300A               	movlw	(0Ah)
  6239  0276  0257               	subwf	(Battery_HandleData@i),w
  6240  0277  1C03               	skipc
  6241  0278  2A7A               	goto	u4221
  6242  0279  2A7B               	goto	u4220
  6243  027A                     u4221:
  6244  027A  2A3B               	goto	l17135
  6245  027B                     u4220:
  6246  027B  2A7C               	goto	l17145
  6247                           	
  6248  027C                     l10053:	
  6249                           	line	210
  6250                           	
  6251  027C                     l17145:	
  6252                           ;ms83fxx02_pwr.c: 208: }
  6253                           ;ms83fxx02_pwr.c: 210: average_data = (average_data - temp1 - temp2) / (10 - 2);
  6254  027C  0851               	movf	(Battery_HandleData@temp2),w
  6255  027D  0755               	addwf	(Battery_HandleData@temp1),w
  6256  027E  00CD               	movwf	(??_Battery_HandleData+0)+0
  6257  027F  0852               	movf	(Battery_HandleData@temp2+1),w
  6258  0280  1803               	skipnc
  6259  0281  0A52               	incf	(Battery_HandleData@temp2+1),w
  6260  0282  0756               	addwf	(Battery_HandleData@temp1+1),w
  6261  0283  00CE               	movwf	1+(??_Battery_HandleData+0)+0
  6262  0284  09CD               	comf	(??_Battery_HandleData+0)+0,f
  6263  0285  09CE               	comf	(??_Battery_HandleData+0)+1,f
  6264  0286  0ACD               	incf	(??_Battery_HandleData+0)+0,f
  6265  0287  1903               	skipnz
  6266  0288  0ACE               	incf	(??_Battery_HandleData+0)+1,f
  6267  0289  0853               	movf	(Battery_HandleData@average_data),w
  6268  028A  074D               	addwf	0+(??_Battery_HandleData+0)+0,w
  6269  028B  00CF               	movwf	(??_Battery_HandleData+2)+0
  6270  028C  0854               	movf	(Battery_HandleData@average_data+1),w
  6271  028D  1803               	skipnc
  6272  028E  0A54               	incf	(Battery_HandleData@average_data+1),w
  6273  028F  074E               	addwf	1+(??_Battery_HandleData+0)+0,w
  6274  0290  00D0               	movwf	1+(??_Battery_HandleData+2)+0
  6275  0291  3003               	movlw	03h
  6276  0292                     u4235:
  6277  0292  1003               	clrc
  6278  0293  0CD0               	rrf	(??_Battery_HandleData+2)+1,f
  6279  0294  0CCF               	rrf	(??_Battery_HandleData+2)+0,f
  6280  0295  3EFF               	addlw	-1
  6281  0296  1D03               	skipz
  6282  0297  2A92               	goto	u4235
  6283  0298  084F               	movf	0+(??_Battery_HandleData+2)+0,w
  6284  0299  00D3               	movwf	(Battery_HandleData@average_data)
  6285  029A  0850               	movf	1+(??_Battery_HandleData+2)+0,w
  6286  029B  00D4               	movwf	(Battery_HandleData@average_data+1)
  6287                           	line	212
  6288                           ;ms83fxx02_pwr.c: 212: return average_data;
  6289  029C  0854               	movf	(Battery_HandleData@average_data+1),w
  6290  029D  01CC               	clrf	(?_Battery_HandleData+1)
  6291  029E  07CC               	addwf	(?_Battery_HandleData+1)
  6292  029F  0853               	movf	(Battery_HandleData@average_data),w
  6293  02A0  01CB               	clrf	(?_Battery_HandleData)
  6294  02A1  07CB               	addwf	(?_Battery_HandleData)
  6295                           
  6296  02A2  2AA3               	goto	l10055
  6297                           	
  6298  02A3                     l17147:	
  6299                           	line	213
  6300                           	
  6301  02A3                     l10055:	
  6302  02A3  0008               	return
  6303                           	opt stack 0
  6304                           GLOBAL	__end_of_Battery_HandleData
  6305  02A4                     	__end_of_Battery_HandleData:
  6306 ;; =============== function _Battery_HandleData ends ============
  6307                           
  6308                           	signat	_Battery_HandleData,90
  6309                           	global	_SwitchModeTimer_GetINTStatus
  6310                           psect	text1804,local,class=CODE,delta=2
  6311                           global __ptext1804
  6312  0A4A                     __ptext1804:
  6313                           
  6314 ;; *************** function _SwitchModeTimer_GetINTStatus *****************
  6315 ;; Defined at:
  6316 ;;		line 100 in file "ms83fxx02_tim.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      enum E1477
  6323 ;; Registers used:
  6324 ;;		wreg
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6330 ;;      Params:         0       0       0       0
  6331 ;;      Locals:         0       0       0       0
  6332 ;;      Temps:          0       0       0       0
  6333 ;;      Totals:         0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    4
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_Motor_HandleStatusChangeEvt
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           psect	text1804
  6344                           	file	"ms83fxx02_tim.c"
  6345                           	line	100
  6346                           	global	__size_of_SwitchModeTimer_GetINTStatus
  6347  000F                     	__size_of_SwitchModeTimer_GetINTStatus	equ	__end_of_SwitchModeTimer_GetINTStatus-_Switc
                                 hModeTimer_GetINTStatus
  6348                           	
  6349  0A4A                     _SwitchModeTimer_GetINTStatus:	
  6350                           	opt	stack 2
  6351                           ; Regs used in _SwitchModeTimer_GetINTStatus: [wreg]
  6352                           	line	101
  6353                           	
  6354  0A4A                     l17089:	
  6355                           ;ms83fxx02_tim.c: 101: if(switch_mode_time_out)
  6356  0A4A  1283               	bcf	status, 5	;RP0=0, select bank0
  6357  0A4B  1303               	bcf	status, 6	;RP1=0, select bank0
  6358  0A4C  0845               	movf	(_switch_mode_time_out),w	;volatile
  6359  0A4D  1D03               	skipz
  6360  0A4E  2A50               	goto	u4190
  6361  0A4F  2A55               	goto	l17099
  6362  0A50                     u4190:
  6363                           	line	103
  6364                           	
  6365  0A50                     l17091:	
  6366                           ;ms83fxx02_tim.c: 102: {
  6367                           ;ms83fxx02_tim.c: 103: switch_mode_time_out = 0;
  6368  0A50  01C5               	clrf	(_switch_mode_time_out)	;volatile
  6369                           	line	105
  6370                           	
  6371  0A51                     l17093:	
  6372                           ;ms83fxx02_tim.c: 105: return SET;
  6373  0A51  3001               	movlw	(01h)
  6374  0A52  2A58               	goto	l11148
  6375                           	
  6376  0A53                     l17095:	
  6377  0A53  2A58               	goto	l11148
  6378                           	line	106
  6379                           	
  6380  0A54                     l17097:	
  6381                           ;ms83fxx02_tim.c: 106: }
  6382  0A54  2A58               	goto	l11148
  6383                           	line	107
  6384                           	
  6385  0A55                     l11147:	
  6386                           	line	109
  6387                           	
  6388  0A55                     l17099:	
  6389                           ;ms83fxx02_tim.c: 107: else
  6390                           ;ms83fxx02_tim.c: 108: {
  6391                           ;ms83fxx02_tim.c: 109: return RESET;
  6392  0A55  3000               	movlw	(0)
  6393  0A56  2A58               	goto	l11148
  6394                           	
  6395  0A57                     l17101:	
  6396  0A57  2A58               	goto	l11148
  6397                           	line	110
  6398                           	
  6399  0A58                     l11149:	
  6400                           	line	111
  6401                           	
  6402  0A58                     l11148:	
  6403  0A58  0008               	return
  6404                           	opt stack 0
  6405                           GLOBAL	__end_of_SwitchModeTimer_GetINTStatus
  6406  0A59                     	__end_of_SwitchModeTimer_GetINTStatus:
  6407 ;; =============== function _SwitchModeTimer_GetINTStatus ends ============
  6408                           
  6409                           	signat	_SwitchModeTimer_GetINTStatus,89
  6410                           	global	_MotorOperationTimer_Init
  6411                           psect	text1805,local,class=CODE,delta=2
  6412                           global __ptext1805
  6413  0FC5                     __ptext1805:
  6414                           
  6415 ;; *************** function _MotorOperationTimer_Init *****************
  6416 ;; Defined at:
  6417 ;;		line 221 in file "ms83fxx02_motor.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  time            1    wreg     enum E1558
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  time            1    4[BANK0 ] enum E1558
  6422 ;; Return value:  Size  Location     Type
  6423 ;;		None               void
  6424 ;; Registers used:
  6425 ;;		wreg, status,2
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6431 ;;      Params:         0       0       0       0
  6432 ;;      Locals:         0       1       0       0
  6433 ;;      Temps:          0       0       0       0
  6434 ;;      Totals:         0       1       0       0
  6435 ;;Total ram usage:        1 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    4
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_Motor_HandleStatusChangeEvt
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           psect	text1805
  6445                           	file	"ms83fxx02_motor.c"
  6446                           	line	221
  6447                           	global	__size_of_MotorOperationTimer_Init
  6448  003B                     	__size_of_MotorOperationTimer_Init	equ	__end_of_MotorOperationTimer_Init-_MotorOperatio
                                 nTimer_Init
  6449                           	
  6450  0FC5                     _MotorOperationTimer_Init:	
  6451                           	opt	stack 2
  6452                           ; Regs used in _MotorOperationTimer_Init: [wreg+status,2]
  6453                           ;MotorOperationTimer_Init@time stored from wreg
  6454                           	line	223
  6455  0FC5  1283               	bcf	status, 5	;RP0=0, select bank0
  6456  0FC6  1303               	bcf	status, 6	;RP1=0, select bank0
  6457  0FC7  00CB               	movwf	(MotorOperationTimer_Init@time)
  6458                           	
  6459  0FC8                     l17063:	
  6460                           ;ms83fxx02_motor.c: 223: TMR4ON = 0;
  6461  0FC8  1283               	bcf	status, 5	;RP0=0, select bank2
  6462  0FC9  1703               	bsf	status, 6	;RP1=1, select bank2
  6463  0FCA  1116               	bcf	(2226/8)^0100h,(2226)&7
  6464                           	line	225
  6465                           	
  6466  0FCB                     l17065:	
  6467                           ;ms83fxx02_motor.c: 225: if(time == MotorOperationTimer_30s)
  6468  0FCB  1283               	bcf	status, 5	;RP0=0, select bank0
  6469  0FCC  1303               	bcf	status, 6	;RP1=0, select bank0
  6470  0FCD  084B               	movf	(MotorOperationTimer_Init@time),w
  6471  0FCE  3A01               	xorlw	01h
  6472  0FCF  1D03               	skipz
  6473  0FD0  2FD2               	goto	u4171
  6474  0FD1  2FD3               	goto	u4170
  6475  0FD2                     u4171:
  6476  0FD2  2FDC               	goto	l17069
  6477  0FD3                     u4170:
  6478                           	line	228
  6479                           	
  6480  0FD3                     l17067:	
  6481                           ;ms83fxx02_motor.c: 226: {
  6482                           ;ms83fxx02_motor.c: 228: PWM4CR0 = 0b01110010;
  6483  0FD3  3072               	movlw	(072h)
  6484  0FD4  1283               	bcf	status, 5	;RP0=0, select bank2
  6485  0FD5  1703               	bsf	status, 6	;RP1=1, select bank2
  6486  0FD6  0095               	movwf	(277)^0100h	;volatile
  6487                           	line	231
  6488                           ;ms83fxx02_motor.c: 231: PWM4CR1 = 0b00111000;
  6489  0FD7  3038               	movlw	(038h)
  6490  0FD8  0096               	movwf	(278)^0100h	;volatile
  6491                           	line	236
  6492                           ;ms83fxx02_motor.c: 236: T4CKDIV = 182;
  6493  0FD9  30B6               	movlw	(0B6h)
  6494  0FDA  0097               	movwf	(279)^0100h	;volatile
  6495                           	line	237
  6496                           ;ms83fxx02_motor.c: 237: }
  6497  0FDB  2FF5               	goto	l8861
  6498                           	line	238
  6499                           	
  6500  0FDC                     l8860:	
  6501                           	
  6502  0FDC                     l17069:	
  6503                           ;ms83fxx02_motor.c: 238: else if(time == MotorOperationTimer_0_3s)
  6504  0FDC  1303               	bcf	status, 6	;RP1=0, select bank0
  6505  0FDD  084B               	movf	(MotorOperationTimer_Init@time),w
  6506  0FDE  3A02               	xorlw	02h
  6507  0FDF  1D03               	skipz
  6508  0FE0  2FE2               	goto	u4181
  6509  0FE1  2FE3               	goto	u4180
  6510  0FE2                     u4181:
  6511  0FE2  2FEC               	goto	l17073
  6512  0FE3                     u4180:
  6513                           	line	241
  6514                           	
  6515  0FE3                     l17071:	
  6516                           ;ms83fxx02_motor.c: 239: {
  6517                           ;ms83fxx02_motor.c: 241: PWM4CR0 = 0b01100010;
  6518  0FE3  3062               	movlw	(062h)
  6519  0FE4  1283               	bcf	status, 5	;RP0=0, select bank2
  6520  0FE5  1703               	bsf	status, 6	;RP1=1, select bank2
  6521  0FE6  0095               	movwf	(277)^0100h	;volatile
  6522                           	line	243
  6523                           ;ms83fxx02_motor.c: 243: PWM4CR1 = 0b00111000;
  6524  0FE7  3038               	movlw	(038h)
  6525  0FE8  0096               	movwf	(278)^0100h	;volatile
  6526                           	line	247
  6527                           ;ms83fxx02_motor.c: 247: T4CKDIV = 8;
  6528  0FE9  3008               	movlw	(08h)
  6529  0FEA  0097               	movwf	(279)^0100h	;volatile
  6530                           	line	248
  6531                           ;ms83fxx02_motor.c: 248: }
  6532  0FEB  2FF5               	goto	l8861
  6533                           	line	249
  6534                           	
  6535  0FEC                     l8862:	
  6536                           	line	252
  6537                           	
  6538  0FEC                     l17073:	
  6539                           ;ms83fxx02_motor.c: 249: else
  6540                           ;ms83fxx02_motor.c: 250: {
  6541                           ;ms83fxx02_motor.c: 252: PWM4CR0 = 0b01110010;
  6542  0FEC  3072               	movlw	(072h)
  6543  0FED  1283               	bcf	status, 5	;RP0=0, select bank2
  6544  0FEE  1703               	bsf	status, 6	;RP1=1, select bank2
  6545  0FEF  0095               	movwf	(277)^0100h	;volatile
  6546                           	line	255
  6547                           ;ms83fxx02_motor.c: 255: PWM4CR1 = 0b00111000;
  6548  0FF0  3038               	movlw	(038h)
  6549  0FF1  0096               	movwf	(278)^0100h	;volatile
  6550                           	line	258
  6551                           ;ms83fxx02_motor.c: 258: T4CKDIV = 243;
  6552  0FF2  30F3               	movlw	(0F3h)
  6553  0FF3  0097               	movwf	(279)^0100h	;volatile
  6554  0FF4  2FF5               	goto	l8861
  6555                           	line	259
  6556                           	
  6557  0FF5                     l8863:	
  6558                           	
  6559  0FF5                     l8861:	
  6560                           	line	261
  6561                           ;ms83fxx02_motor.c: 259: }
  6562                           ;ms83fxx02_motor.c: 261: TMR4H = 0x0F;
  6563  0FF5  300F               	movlw	(0Fh)
  6564  0FF6  0093               	movwf	(275)^0100h	;volatile
  6565                           	line	262
  6566                           	
  6567  0FF7                     l17075:	
  6568                           ;ms83fxx02_motor.c: 262: TMR4L = 0;
  6569  0FF7  0192               	clrf	(274)^0100h	;volatile
  6570                           	line	263
  6571                           	
  6572  0FF8                     l17077:	
  6573                           ;ms83fxx02_motor.c: 263: PR4L = 0xFF;
  6574  0FF8  30FF               	movlw	(0FFh)
  6575  0FF9  0094               	movwf	(276)^0100h	;volatile
  6576                           	line	266
  6577                           	
  6578  0FFA                     l17079:	
  6579                           ;ms83fxx02_motor.c: 266: TMR4IF = 0;
  6580  0FFA  1016               	bcf	(2224/8)^0100h,(2224)&7
  6581                           	line	269
  6582                           	
  6583  0FFB                     l17081:	
  6584                           ;ms83fxx02_motor.c: 269: TMR4ON = 1;
  6585  0FFB  1516               	bsf	(2226/8)^0100h,(2226)&7
  6586                           	line	272
  6587                           	
  6588  0FFC                     l17083:	
  6589                           ;ms83fxx02_motor.c: 272: TMR4IE = 1;
  6590  0FFC  1496               	bsf	(2225/8)^0100h,(2225)&7
  6591                           	line	273
  6592                           	
  6593  0FFD                     l17085:	
  6594                           ;ms83fxx02_motor.c: 273: PEIE = 1;
  6595  0FFD  170B               	bsf	(94/8),(94)&7
  6596                           	line	274
  6597                           	
  6598  0FFE                     l17087:	
  6599                           ;ms83fxx02_motor.c: 274: GIE = 1;
  6600  0FFE  178B               	bsf	(95/8),(95)&7
  6601                           	line	275
  6602                           	
  6603  0FFF                     l8864:	
  6604  0FFF  0008               	return
  6605                           	opt stack 0
  6606                           GLOBAL	__end_of_MotorOperationTimer_Init
  6607  1000                     	__end_of_MotorOperationTimer_Init:
  6608 ;; =============== function _MotorOperationTimer_Init ends ============
  6609                           
  6610                           	signat	_MotorOperationTimer_Init,4216
  6611                           	global	_Motor_CheckRunLimit
  6612                           psect	text1806,local,class=CODE,delta=2
  6613                           global __ptext1806
  6614  0AAA                     __ptext1806:
  6615                           
  6616 ;; *************** function _Motor_CheckRunLimit *****************
  6617 ;; Defined at:
  6618 ;;		line 202 in file "ms83fxx02_motor.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      unsigned char 
  6625 ;; Registers used:
  6626 ;;		wreg
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6632 ;;      Params:         0       0       0       0
  6633 ;;      Locals:         0       0       0       0
  6634 ;;      Temps:          0       0       0       0
  6635 ;;      Totals:         0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    4
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_MotorOperationTimer_Stop
  6643 ;;		_Motor_HandleStatusChangeEvt
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           psect	text1806
  6647                           	file	"ms83fxx02_motor.c"
  6648                           	line	202
  6649                           	global	__size_of_Motor_CheckRunLimit
  6650  0011                     	__size_of_Motor_CheckRunLimit	equ	__end_of_Motor_CheckRunLimit-_Motor_CheckRunLimit
  6651                           	
  6652  0AAA                     _Motor_CheckRunLimit:	
  6653                           	opt	stack 0
  6654                           ; Regs used in _Motor_CheckRunLimit: [wreg]
  6655                           	line	206
  6656                           	
  6657  0AAA                     l17053:	
  6658                           ;ms83fxx02_motor.c: 206: if(motor_oper_record >= 120)
  6659  0AAA  3000               	movlw	high(078h)
  6660  0AAB  1283               	bcf	status, 5	;RP0=0, select bank0
  6661  0AAC  1303               	bcf	status, 6	;RP1=0, select bank0
  6662  0AAD  0237               	subwf	(_motor_oper_record+1),w	;volatile
  6663  0AAE  3078               	movlw	low(078h)
  6664  0AAF  1903               	skipnz
  6665  0AB0  0236               	subwf	(_motor_oper_record),w	;volatile
  6666  0AB1  1C03               	skipc
  6667  0AB2  2AB4               	goto	u4161
  6668  0AB3  2AB5               	goto	u4160
  6669  0AB4                     u4161:
  6670  0AB4  2AB8               	goto	l17059
  6671  0AB5                     u4160:
  6672                           	line	208
  6673                           	
  6674  0AB5                     l17055:	
  6675                           ;ms83fxx02_motor.c: 207: {
  6676                           ;ms83fxx02_motor.c: 208: return 1;
  6677  0AB5  3001               	movlw	(01h)
  6678  0AB6  2ABA               	goto	l8857
  6679                           	
  6680  0AB7                     l17057:	
  6681  0AB7  2ABA               	goto	l8857
  6682                           	line	209
  6683                           	
  6684  0AB8                     l8856:	
  6685                           	line	210
  6686                           	
  6687  0AB8                     l17059:	
  6688                           ;ms83fxx02_motor.c: 209: }
  6689                           ;ms83fxx02_motor.c: 210: return 0;
  6690  0AB8  3000               	movlw	(0)
  6691  0AB9  2ABA               	goto	l8857
  6692                           	
  6693  0ABA                     l17061:	
  6694                           	line	211
  6695                           	
  6696  0ABA                     l8857:	
  6697  0ABA  0008               	return
  6698                           	opt stack 0
  6699                           GLOBAL	__end_of_Motor_CheckRunLimit
  6700  0ABB                     	__end_of_Motor_CheckRunLimit:
  6701 ;; =============== function _Motor_CheckRunLimit ends ============
  6702                           
  6703                           	signat	_Motor_CheckRunLimit,89
  6704                           	global	_SwitchModeTimer_INTConfig
  6705                           psect	text1807,local,class=CODE,delta=2
  6706                           global __ptext1807
  6707  0AF1                     __ptext1807:
  6708                           
  6709 ;; *************** function _SwitchModeTimer_INTConfig *****************
  6710 ;; Defined at:
  6711 ;;		line 79 in file "ms83fxx02_tim.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  NewState        1    wreg     enum E1482
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  NewState        1    4[BANK0 ] enum E1482
  6716 ;; Return value:  Size  Location     Type
  6717 ;;		None               void
  6718 ;; Registers used:
  6719 ;;		wreg
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6725 ;;      Params:         0       0       0       0
  6726 ;;      Locals:         0       1       0       0
  6727 ;;      Temps:          0       0       0       0
  6728 ;;      Totals:         0       1       0       0
  6729 ;;Total ram usage:        1 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    4
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_Motor_Start
  6736 ;;		_Motor_HandleStatusChangeEvt
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           psect	text1807
  6740                           	file	"ms83fxx02_tim.c"
  6741                           	line	79
  6742                           	global	__size_of_SwitchModeTimer_INTConfig
  6743  0012                     	__size_of_SwitchModeTimer_INTConfig	equ	__end_of_SwitchModeTimer_INTConfig-_SwitchModeT
                                 imer_INTConfig
  6744                           	
  6745  0AF1                     _SwitchModeTimer_INTConfig:	
  6746                           	opt	stack 2
  6747                           ; Regs used in _SwitchModeTimer_INTConfig: [wreg]
  6748                           ;SwitchModeTimer_INTConfig@NewState stored from wreg
  6749  0AF1  1283               	bcf	status, 5	;RP0=0, select bank0
  6750  0AF2  1303               	bcf	status, 6	;RP1=0, select bank0
  6751  0AF3  00CB               	movwf	(SwitchModeTimer_INTConfig@NewState)
  6752                           	line	80
  6753                           	
  6754  0AF4                     l17049:	
  6755                           ;ms83fxx02_tim.c: 80: if(NewState != DISABLE)
  6756  0AF4  084B               	movf	(SwitchModeTimer_INTConfig@NewState),w
  6757  0AF5  1D03               	skipz
  6758  0AF6  2AF8               	goto	u4150
  6759  0AF7  2AFE               	goto	l11142
  6760  0AF8                     u4150:
  6761                           	line	83
  6762                           	
  6763  0AF8                     l17051:	
  6764                           ;ms83fxx02_tim.c: 81: {
  6765                           ;ms83fxx02_tim.c: 83: TMR5IE = 1;
  6766  0AF8  1283               	bcf	status, 5	;RP0=0, select bank2
  6767  0AF9  1703               	bsf	status, 6	;RP1=1, select bank2
  6768  0AFA  149C               	bsf	(2273/8)^0100h,(2273)&7
  6769                           	line	84
  6770                           ;ms83fxx02_tim.c: 84: PEIE = 1;
  6771  0AFB  170B               	bsf	(94/8),(94)&7
  6772                           	line	85
  6773                           ;ms83fxx02_tim.c: 85: GIE = 1;
  6774  0AFC  178B               	bsf	(95/8),(95)&7
  6775                           	line	86
  6776                           ;ms83fxx02_tim.c: 86: }
  6777  0AFD  2B02               	goto	l11144
  6778                           	line	87
  6779                           	
  6780  0AFE                     l11142:	
  6781                           	line	90
  6782                           ;ms83fxx02_tim.c: 87: else
  6783                           ;ms83fxx02_tim.c: 88: {
  6784                           ;ms83fxx02_tim.c: 90: TMR5IE = 0;
  6785  0AFE  1283               	bcf	status, 5	;RP0=0, select bank2
  6786  0AFF  1703               	bsf	status, 6	;RP1=1, select bank2
  6787  0B00  109C               	bcf	(2273/8)^0100h,(2273)&7
  6788  0B01  2B02               	goto	l11144
  6789                           	line	91
  6790                           	
  6791  0B02                     l11143:	
  6792                           	line	92
  6793                           	
  6794  0B02                     l11144:	
  6795  0B02  0008               	return
  6796                           	opt stack 0
  6797                           GLOBAL	__end_of_SwitchModeTimer_INTConfig
  6798  0B03                     	__end_of_SwitchModeTimer_INTConfig:
  6799 ;; =============== function _SwitchModeTimer_INTConfig ends ============
  6800                           
  6801                           	signat	_SwitchModeTimer_INTConfig,4216
  6802                           	global	_SwitchModeTimer_Cmd
  6803                           psect	text1808,local,class=CODE,delta=2
  6804                           global __ptext1808
  6805  0C76                     __ptext1808:
  6806                           
  6807 ;; *************** function _SwitchModeTimer_Cmd *****************
  6808 ;; Defined at:
  6809 ;;		line 39 in file "ms83fxx02_tim.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  NewState        1    wreg     enum E1482
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  NewState        1    4[BANK0 ] enum E1482
  6814 ;; Return value:  Size  Location     Type
  6815 ;;		None               void
  6816 ;; Registers used:
  6817 ;;		wreg, status,2
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6823 ;;      Params:         0       0       0       0
  6824 ;;      Locals:         0       1       0       0
  6825 ;;      Temps:          0       0       0       0
  6826 ;;      Totals:         0       1       0       0
  6827 ;;Total ram usage:        1 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    4
  6830 ;; This function calls:
  6831 ;;		Nothing
  6832 ;; This function is called by:
  6833 ;;		_Motor_Start
  6834 ;;		_Motor_HandleStatusChangeEvt
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           psect	text1808
  6838                           	file	"ms83fxx02_tim.c"
  6839                           	line	39
  6840                           	global	__size_of_SwitchModeTimer_Cmd
  6841  001E                     	__size_of_SwitchModeTimer_Cmd	equ	__end_of_SwitchModeTimer_Cmd-_SwitchModeTimer_Cmd
  6842                           	
  6843  0C76                     _SwitchModeTimer_Cmd:	
  6844                           	opt	stack 2
  6845                           ; Regs used in _SwitchModeTimer_Cmd: [wreg+status,2]
  6846                           ;SwitchModeTimer_Cmd@NewState stored from wreg
  6847  0C76  1283               	bcf	status, 5	;RP0=0, select bank0
  6848  0C77  1303               	bcf	status, 6	;RP1=0, select bank0
  6849  0C78  00CB               	movwf	(SwitchModeTimer_Cmd@NewState)
  6850                           	line	40
  6851                           	
  6852  0C79                     l17033:	
  6853                           ;ms83fxx02_tim.c: 40: switch_mode_time_out = 0;
  6854  0C79  01C5               	clrf	(_switch_mode_time_out)	;volatile
  6855                           	line	42
  6856                           	
  6857  0C7A                     l17035:	
  6858                           ;ms83fxx02_tim.c: 42: if(NewState != DISABLE)
  6859  0C7A  084B               	movf	(SwitchModeTimer_Cmd@NewState),w
  6860  0C7B  1D03               	skipz
  6861  0C7C  2C7E               	goto	u4140
  6862  0C7D  2C8F               	goto	l11137
  6863  0C7E                     u4140:
  6864                           	line	45
  6865                           	
  6866  0C7E                     l17037:	
  6867                           ;ms83fxx02_tim.c: 43: {
  6868                           ;ms83fxx02_tim.c: 45: TMR5ON = 0;
  6869  0C7E  1283               	bcf	status, 5	;RP0=0, select bank2
  6870  0C7F  1703               	bsf	status, 6	;RP1=1, select bank2
  6871  0C80  111C               	bcf	(2274/8)^0100h,(2274)&7
  6872                           	line	47
  6873                           	
  6874  0C81                     l17039:	
  6875                           ;ms83fxx02_tim.c: 47: PWM5CR0 = 0b01110010;
  6876  0C81  3072               	movlw	(072h)
  6877  0C82  009B               	movwf	(283)^0100h	;volatile
  6878                           	line	50
  6879                           ;ms83fxx02_tim.c: 50: PWM5CR1 = 0b00111000;
  6880  0C83  3038               	movlw	(038h)
  6881  0C84  009C               	movwf	(284)^0100h	;volatile
  6882                           	line	53
  6883                           ;ms83fxx02_tim.c: 53: T5CKDIV = 151;
  6884  0C85  3097               	movlw	(097h)
  6885  0C86  009D               	movwf	(285)^0100h	;volatile
  6886                           	line	55
  6887                           ;ms83fxx02_tim.c: 55: TMR5H = 0x0F;
  6888  0C87  300F               	movlw	(0Fh)
  6889  0C88  0099               	movwf	(281)^0100h	;volatile
  6890                           	line	56
  6891                           	
  6892  0C89                     l17041:	
  6893                           ;ms83fxx02_tim.c: 56: TMR5L = 0;
  6894  0C89  0198               	clrf	(280)^0100h	;volatile
  6895                           	line	57
  6896                           	
  6897  0C8A                     l17043:	
  6898                           ;ms83fxx02_tim.c: 57: PR5L = 0xFF;
  6899  0C8A  30FF               	movlw	(0FFh)
  6900  0C8B  009A               	movwf	(282)^0100h	;volatile
  6901                           	line	60
  6902                           	
  6903  0C8C                     l17045:	
  6904                           ;ms83fxx02_tim.c: 60: TMR5IF = 0;
  6905  0C8C  101C               	bcf	(2272/8)^0100h,(2272)&7
  6906                           	line	63
  6907                           	
  6908  0C8D                     l17047:	
  6909                           ;ms83fxx02_tim.c: 63: TMR5ON = 1;
  6910  0C8D  151C               	bsf	(2274/8)^0100h,(2274)&7
  6911                           	line	64
  6912                           ;ms83fxx02_tim.c: 64: }
  6913  0C8E  2C93               	goto	l11139
  6914                           	line	65
  6915                           	
  6916  0C8F                     l11137:	
  6917                           	line	68
  6918                           ;ms83fxx02_tim.c: 65: else
  6919                           ;ms83fxx02_tim.c: 66: {
  6920                           ;ms83fxx02_tim.c: 68: TMR5ON = 0;
  6921  0C8F  1283               	bcf	status, 5	;RP0=0, select bank2
  6922  0C90  1703               	bsf	status, 6	;RP1=1, select bank2
  6923  0C91  111C               	bcf	(2274/8)^0100h,(2274)&7
  6924  0C92  2C93               	goto	l11139
  6925                           	line	69
  6926                           	
  6927  0C93                     l11138:	
  6928                           	line	70
  6929                           	
  6930  0C93                     l11139:	
  6931  0C93  0008               	return
  6932                           	opt stack 0
  6933                           GLOBAL	__end_of_SwitchModeTimer_Cmd
  6934  0C94                     	__end_of_SwitchModeTimer_Cmd:
  6935 ;; =============== function _SwitchModeTimer_Cmd ends ============
  6936                           
  6937                           	signat	_SwitchModeTimer_Cmd,4216
  6938                           	global	_Motor_Init
  6939                           psect	text1809,local,class=CODE,delta=2
  6940                           global __ptext1809
  6941  0552                     __ptext1809:
  6942                           
  6943 ;; *************** function _Motor_Init *****************
  6944 ;; Defined at:
  6945 ;;		line 67 in file "ms83fxx02_motor.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  status          1    wreg     enum E1552
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  status          1    5[BANK0 ] enum E1552
  6950 ;; Return value:  Size  Location     Type
  6951 ;;		None               void
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6959 ;;      Params:         0       0       0       0
  6960 ;;      Locals:         0       1       0       0
  6961 ;;      Temps:          0       1       0       0
  6962 ;;      Totals:         0       2       0       0
  6963 ;;Total ram usage:        2 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    4
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_Motor_Start
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           psect	text1809
  6973                           	file	"ms83fxx02_motor.c"
  6974                           	line	67
  6975                           	global	__size_of_Motor_Init
  6976  005B                     	__size_of_Motor_Init	equ	__end_of_Motor_Init-_Motor_Init
  6977                           	
  6978  0552                     _Motor_Init:	
  6979                           	opt	stack 1
  6980                           ; Regs used in _Motor_Init: [wreg+status,2+status,0]
  6981                           ;Motor_Init@status stored from wreg
  6982                           	line	70
  6983  0552  1283               	bcf	status, 5	;RP0=0, select bank0
  6984  0553  1303               	bcf	status, 6	;RP1=0, select bank0
  6985  0554  00CC               	movwf	(Motor_Init@status)
  6986                           	
  6987  0555                     l17003:	
  6988                           ;ms83fxx02_motor.c: 70: TRISC |= 0x03 << 4;
  6989  0555  3030               	movlw	(030h)
  6990  0556  00CB               	movwf	(??_Motor_Init+0)+0
  6991  0557  084B               	movf	(??_Motor_Init+0)+0,w
  6992  0558  1683               	bsf	status, 5	;RP0=1, select bank1
  6993  0559  1303               	bcf	status, 6	;RP1=0, select bank1
  6994  055A  0487               	iorwf	(135)^080h,f	;volatile
  6995                           	line	73
  6996                           ;ms83fxx02_motor.c: 73: CMCON0 |= 0x07;
  6997  055B  3007               	movlw	(07h)
  6998  055C  1283               	bcf	status, 5	;RP0=0, select bank0
  6999  055D  1303               	bcf	status, 6	;RP1=0, select bank0
  7000  055E  00CB               	movwf	(??_Motor_Init+0)+0
  7001  055F  084B               	movf	(??_Motor_Init+0)+0,w
  7002  0560  0499               	iorwf	(25),f	;volatile
  7003                           	line	74
  7004                           	
  7005  0561                     l17005:	
  7006                           ;ms83fxx02_motor.c: 74: T2CKSRC = 0;
  7007  0561  129B               	bcf	(221/8),(221)&7
  7008                           	line	77
  7009                           	
  7010  0562                     l17007:	
  7011                           ;ms83fxx02_motor.c: 77: TMR2 = 0;
  7012  0562  0191               	clrf	(17)	;volatile
  7013                           	line	80
  7014                           	
  7015  0563                     l17009:	
  7016                           ;ms83fxx02_motor.c: 80: T2CON = 0x03;
  7017  0563  3003               	movlw	(03h)
  7018  0564  0092               	movwf	(18)	;volatile
  7019                           	line	82
  7020                           	
  7021  0565                     l17011:	
  7022                           ;ms83fxx02_motor.c: 82: if(status == MOTOR_MODE_STOP)
  7023  0565  084C               	movf	(Motor_Init@status),w
  7024  0566  3A01               	xorlw	01h
  7025  0567  1D03               	skipz
  7026  0568  2D6A               	goto	u4101
  7027  0569  2D6B               	goto	u4100
  7028  056A                     u4101:
  7029  056A  2D6E               	goto	l17017
  7030  056B                     u4100:
  7031  056B  2DAC               	goto	l8827
  7032                           	line	84
  7033                           	
  7034  056C                     l17013:	
  7035                           ;ms83fxx02_motor.c: 83: {
  7036                           ;ms83fxx02_motor.c: 84: return ;
  7037  056C  2DAC               	goto	l8827
  7038                           	line	85
  7039                           	
  7040  056D                     l17015:	
  7041                           ;ms83fxx02_motor.c: 85: }
  7042  056D  2D9C               	goto	l8828
  7043                           	line	86
  7044                           	
  7045  056E                     l8826:	
  7046                           	
  7047  056E                     l17017:	
  7048                           ;ms83fxx02_motor.c: 86: else if(status == MOTOR_MODE_3)
  7049  056E  084C               	movf	(Motor_Init@status),w
  7050  056F  3A04               	xorlw	04h
  7051  0570  1D03               	skipz
  7052  0571  2D73               	goto	u4111
  7053  0572  2D74               	goto	u4110
  7054  0573                     u4111:
  7055  0573  2D7F               	goto	l17021
  7056  0574                     u4110:
  7057                           	line	88
  7058                           	
  7059  0574                     l17019:	
  7060                           ;ms83fxx02_motor.c: 87: {
  7061                           ;ms83fxx02_motor.c: 88: PR2 = 125;
  7062  0574  307D               	movlw	(07Dh)
  7063  0575  1683               	bsf	status, 5	;RP0=1, select bank1
  7064  0576  1303               	bcf	status, 6	;RP1=0, select bank1
  7065  0577  0092               	movwf	(146)^080h	;volatile
  7066                           	line	89
  7067                           ;ms83fxx02_motor.c: 89: CCPR1L = 47;
  7068  0578  302F               	movlw	(02Fh)
  7069  0579  1283               	bcf	status, 5	;RP0=0, select bank0
  7070  057A  1303               	bcf	status, 6	;RP1=0, select bank0
  7071  057B  0093               	movwf	(19)	;volatile
  7072                           	line	90
  7073                           ;ms83fxx02_motor.c: 90: CCP1CON = 0x8C | (0x00 << 4);
  7074  057C  308C               	movlw	(08Ch)
  7075  057D  0095               	movwf	(21)	;volatile
  7076                           	line	91
  7077                           ;ms83fxx02_motor.c: 91: }
  7078  057E  2D9C               	goto	l8828
  7079                           	line	92
  7080                           	
  7081  057F                     l8829:	
  7082                           	
  7083  057F                     l17021:	
  7084                           ;ms83fxx02_motor.c: 92: else if(status == MOTOR_MODE_2)
  7085  057F  084C               	movf	(Motor_Init@status),w
  7086  0580  3A03               	xorlw	03h
  7087  0581  1D03               	skipz
  7088  0582  2D84               	goto	u4121
  7089  0583  2D85               	goto	u4120
  7090  0584                     u4121:
  7091  0584  2D90               	goto	l17025
  7092  0585                     u4120:
  7093                           	line	94
  7094                           	
  7095  0585                     l17023:	
  7096                           ;ms83fxx02_motor.c: 93: {
  7097                           ;ms83fxx02_motor.c: 94: PR2 = 125;
  7098  0585  307D               	movlw	(07Dh)
  7099  0586  1683               	bsf	status, 5	;RP0=1, select bank1
  7100  0587  1303               	bcf	status, 6	;RP1=0, select bank1
  7101  0588  0092               	movwf	(146)^080h	;volatile
  7102                           	line	95
  7103                           ;ms83fxx02_motor.c: 95: CCPR1L = 31;
  7104  0589  301F               	movlw	(01Fh)
  7105  058A  1283               	bcf	status, 5	;RP0=0, select bank0
  7106  058B  1303               	bcf	status, 6	;RP1=0, select bank0
  7107  058C  0093               	movwf	(19)	;volatile
  7108                           	line	96
  7109                           ;ms83fxx02_motor.c: 96: CCP1CON = 0x8C | (0x00 << 4);
  7110  058D  308C               	movlw	(08Ch)
  7111  058E  0095               	movwf	(21)	;volatile
  7112                           	line	97
  7113                           ;ms83fxx02_motor.c: 97: }
  7114  058F  2D9C               	goto	l8828
  7115                           	line	98
  7116                           	
  7117  0590                     l8831:	
  7118                           	line	100
  7119                           	
  7120  0590                     l17025:	
  7121                           ;ms83fxx02_motor.c: 98: else
  7122                           ;ms83fxx02_motor.c: 99: {
  7123                           ;ms83fxx02_motor.c: 100: PR2 = 116;
  7124  0590  3074               	movlw	(074h)
  7125  0591  1683               	bsf	status, 5	;RP0=1, select bank1
  7126  0592  1303               	bcf	status, 6	;RP1=0, select bank1
  7127  0593  0092               	movwf	(146)^080h	;volatile
  7128                           	line	101
  7129                           ;ms83fxx02_motor.c: 101: CCPR1L = 47;
  7130  0594  302F               	movlw	(02Fh)
  7131  0595  1283               	bcf	status, 5	;RP0=0, select bank0
  7132  0596  1303               	bcf	status, 6	;RP1=0, select bank0
  7133  0597  0093               	movwf	(19)	;volatile
  7134                           	line	102
  7135                           ;ms83fxx02_motor.c: 102: CCP1CON = 0x8C | (0x00 << 4);
  7136  0598  308C               	movlw	(08Ch)
  7137  0599  0095               	movwf	(21)	;volatile
  7138  059A  2D9C               	goto	l8828
  7139                           	line	103
  7140                           	
  7141  059B                     l8832:	
  7142  059B  2D9C               	goto	l8828
  7143                           	
  7144  059C                     l8830:	
  7145                           	
  7146  059C                     l8828:	
  7147                           	line	105
  7148                           ;ms83fxx02_motor.c: 103: }
  7149                           ;ms83fxx02_motor.c: 105: PWM1CON = 0x3F;
  7150  059C  303F               	movlw	(03Fh)
  7151  059D  0096               	movwf	(22)	;volatile
  7152                           	line	109
  7153                           	
  7154  059E                     l17027:	
  7155                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
  7156  059E  108C               	bcf	(97/8),(97)&7
  7157                           	line	110
  7158                           	
  7159  059F                     l17029:	
  7160                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
  7161  059F  1512               	bsf	(146/8),(146)&7
  7162                           	line	111
  7163                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
  7164  05A0  2DA1               	goto	l8833
  7165                           	
  7166  05A1                     l8834:	
  7167                           	
  7168  05A1                     l8833:	
  7169  05A1  1C8C               	btfss	(97/8),(97)&7
  7170  05A2  2DA4               	goto	u4131
  7171  05A3  2DA5               	goto	u4130
  7172  05A4                     u4131:
  7173  05A4  2DA1               	goto	l8833
  7174  05A5                     u4130:
  7175  05A5  2DA6               	goto	l17031
  7176                           	
  7177  05A6                     l8835:	
  7178                           	line	114
  7179                           	
  7180  05A6                     l17031:	
  7181                           ;ms83fxx02_motor.c: 114: TRISC &= ~(0x03 << 4);
  7182  05A6  30CF               	movlw	(0CFh)
  7183  05A7  00CB               	movwf	(??_Motor_Init+0)+0
  7184  05A8  084B               	movf	(??_Motor_Init+0)+0,w
  7185  05A9  1683               	bsf	status, 5	;RP0=1, select bank1
  7186  05AA  1303               	bcf	status, 6	;RP1=0, select bank1
  7187  05AB  0587               	andwf	(135)^080h,f	;volatile
  7188                           	line	115
  7189                           	
  7190  05AC                     l8827:	
  7191  05AC  0008               	return
  7192                           	opt stack 0
  7193                           GLOBAL	__end_of_Motor_Init
  7194  05AD                     	__end_of_Motor_Init:
  7195 ;; =============== function _Motor_Init ends ============
  7196                           
  7197                           	signat	_Motor_Init,4216
  7198                           	global	_LEDTimer_DispUnderVoltCmd
  7199                           psect	text1810,local,class=CODE,delta=2
  7200                           global __ptext1810
  7201  0A2D                     __ptext1810:
  7202                           
  7203 ;; *************** function _LEDTimer_DispUnderVoltCmd *****************
  7204 ;; Defined at:
  7205 ;;		line 141 in file "ms83fxx02_led_timer.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  NewState        1    wreg     enum E1482
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  NewState        1    4[BANK0 ] enum E1482
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg, status,2, status,0
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7219 ;;      Params:         0       0       0       0
  7220 ;;      Locals:         0       1       0       0
  7221 ;;      Temps:          0       0       0       0
  7222 ;;      Totals:         0       1       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    4
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_Battery_Detect
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           psect	text1810
  7233                           	file	"ms83fxx02_led_timer.c"
  7234                           	line	141
  7235                           	global	__size_of_LEDTimer_DispUnderVoltCmd
  7236  000E                     	__size_of_LEDTimer_DispUnderVoltCmd	equ	__end_of_LEDTimer_DispUnderVoltCmd-_LEDTimer_Di
                                 spUnderVoltCmd
  7237                           	
  7238  0A2D                     _LEDTimer_DispUnderVoltCmd:	
  7239                           	opt	stack 1
  7240                           ; Regs used in _LEDTimer_DispUnderVoltCmd: [wreg+status,2+status,0]
  7241                           ;LEDTimer_DispUnderVoltCmd@NewState stored from wreg
  7242  0A2D  1283               	bcf	status, 5	;RP0=0, select bank0
  7243  0A2E  1303               	bcf	status, 6	;RP1=0, select bank0
  7244  0A2F  00CB               	movwf	(LEDTimer_DispUnderVoltCmd@NewState)
  7245                           	line	142
  7246                           	
  7247  0A30                     l16989:	
  7248                           ;ms83fxx02_led_timer.c: 142: if(NewState != DISABLE)
  7249  0A30  084B               	movf	(LEDTimer_DispUnderVoltCmd@NewState),w
  7250  0A31  1D03               	skipz
  7251  0A32  2A34               	goto	u4080
  7252  0A33  2A38               	goto	l7716
  7253  0A34                     u4080:
  7254                           	line	144
  7255                           	
  7256  0A34                     l16991:	
  7257                           ;ms83fxx02_led_timer.c: 143: {
  7258                           ;ms83fxx02_led_timer.c: 144: under_volt_display_En = 1;
  7259  0A34  01C6               	clrf	(_under_volt_display_En)	;volatile
  7260  0A35  1403               	bsf	status,0
  7261  0A36  0DC6               	rlf	(_under_volt_display_En),f	;volatile
  7262                           	line	145
  7263                           ;ms83fxx02_led_timer.c: 145: }
  7264  0A37  2A3A               	goto	l7718
  7265                           	line	146
  7266                           	
  7267  0A38                     l7716:	
  7268                           	line	148
  7269                           ;ms83fxx02_led_timer.c: 146: else
  7270                           ;ms83fxx02_led_timer.c: 147: {
  7271                           ;ms83fxx02_led_timer.c: 148: under_volt_display_En = 0;
  7272  0A38  01C6               	clrf	(_under_volt_display_En)	;volatile
  7273  0A39  2A3A               	goto	l7718
  7274                           	line	149
  7275                           	
  7276  0A3A                     l7717:	
  7277                           	line	172
  7278                           	
  7279  0A3A                     l7718:	
  7280  0A3A  0008               	return
  7281                           	opt stack 0
  7282                           GLOBAL	__end_of_LEDTimer_DispUnderVoltCmd
  7283  0A3B                     	__end_of_LEDTimer_DispUnderVoltCmd:
  7284 ;; =============== function _LEDTimer_DispUnderVoltCmd ends ============
  7285                           
  7286                           	signat	_LEDTimer_DispUnderVoltCmd,4216
  7287                           	global	_KEY_GetPressStatus
  7288                           psect	text1811,local,class=CODE,delta=2
  7289                           global __ptext1811
  7290  0A04                     __ptext1811:
  7291                           
  7292 ;; *************** function _KEY_GetPressStatus *****************
  7293 ;; Defined at:
  7294 ;;		line 98 in file "MS83FXX02_KEY.C"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      enum E1477
  7301 ;; Registers used:
  7302 ;;		wreg
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7308 ;;      Params:         0       0       0       0
  7309 ;;      Locals:         0       0       0       0
  7310 ;;      Temps:          0       0       0       0
  7311 ;;      Totals:         0       0       0       0
  7312 ;;Total ram usage:        0 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_Motor_HandleStatusChangeEvt
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           psect	text1811
  7322                           	file	"MS83FXX02_KEY.C"
  7323                           	line	98
  7324                           	global	__size_of_KEY_GetPressStatus
  7325  000D                     	__size_of_KEY_GetPressStatus	equ	__end_of_KEY_GetPressStatus-_KEY_GetPressStatus
  7326                           	
  7327  0A04                     _KEY_GetPressStatus:	
  7328                           	opt	stack 2
  7329                           ; Regs used in _KEY_GetPressStatus: [wreg]
  7330                           	line	99
  7331                           	
  7332  0A04                     l16975:	
  7333                           ;MS83FXX02_KEY.C: 99: if(key_press)
  7334  0A04  1283               	bcf	status, 5	;RP0=0, select bank0
  7335  0A05  1303               	bcf	status, 6	;RP1=0, select bank0
  7336  0A06  083F               	movf	(_key_press),w	;volatile
  7337  0A07  1D03               	skipz
  7338  0A08  2A0A               	goto	u4070
  7339  0A09  2A0E               	goto	l16983
  7340  0A0A                     u4070:
  7341                           	line	101
  7342                           	
  7343  0A0A                     l16977:	
  7344                           ;MS83FXX02_KEY.C: 100: {
  7345                           ;MS83FXX02_KEY.C: 101: key_press = 0;
  7346  0A0A  01BF               	clrf	(_key_press)	;volatile
  7347                           	line	102
  7348                           	
  7349  0A0B                     l16979:	
  7350                           ;MS83FXX02_KEY.C: 102: return SET;
  7351  0A0B  3001               	movlw	(01h)
  7352  0A0C  2A10               	goto	l5531
  7353                           	
  7354  0A0D                     l16981:	
  7355  0A0D  2A10               	goto	l5531
  7356                           	line	103
  7357                           	
  7358  0A0E                     l5530:	
  7359                           	line	105
  7360                           	
  7361  0A0E                     l16983:	
  7362                           ;MS83FXX02_KEY.C: 103: }
  7363                           ;MS83FXX02_KEY.C: 105: return RESET;
  7364  0A0E  3000               	movlw	(0)
  7365  0A0F  2A10               	goto	l5531
  7366                           	
  7367  0A10                     l16985:	
  7368                           	line	106
  7369                           	
  7370  0A10                     l5531:	
  7371  0A10  0008               	return
  7372                           	opt stack 0
  7373                           GLOBAL	__end_of_KEY_GetPressStatus
  7374  0A11                     	__end_of_KEY_GetPressStatus:
  7375 ;; =============== function _KEY_GetPressStatus ends ============
  7376                           
  7377                           	signat	_KEY_GetPressStatus,89
  7378                           	global	_KEY_GetReleaseStatus
  7379                           psect	text1812,local,class=CODE,delta=2
  7380                           global __ptext1812
  7381  0A3B                     __ptext1812:
  7382                           
  7383 ;; *************** function _KEY_GetReleaseStatus *****************
  7384 ;; Defined at:
  7385 ;;		line 85 in file "MS83FXX02_KEY.C"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      enum E1477
  7392 ;; Registers used:
  7393 ;;		wreg
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7399 ;;      Params:         0       0       0       0
  7400 ;;      Locals:         0       0       0       0
  7401 ;;      Temps:          0       0       0       0
  7402 ;;      Totals:         0       0       0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    4
  7406 ;; This function calls:
  7407 ;;		Nothing
  7408 ;; This function is called by:
  7409 ;;		_Motor_HandleStatusChangeEvt
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           psect	text1812
  7413                           	file	"MS83FXX02_KEY.C"
  7414                           	line	85
  7415                           	global	__size_of_KEY_GetReleaseStatus
  7416  000F                     	__size_of_KEY_GetReleaseStatus	equ	__end_of_KEY_GetReleaseStatus-_KEY_GetReleaseStatus
  7417                           	
  7418  0A3B                     _KEY_GetReleaseStatus:	
  7419                           	opt	stack 2
  7420                           ; Regs used in _KEY_GetReleaseStatus: [wreg]
  7421                           	line	86
  7422                           	
  7423  0A3B                     l16963:	
  7424                           ;MS83FXX02_KEY.C: 86: if(key_release)
  7425  0A3B  1283               	bcf	status, 5	;RP0=0, select bank0
  7426  0A3C  1303               	bcf	status, 6	;RP1=0, select bank0
  7427  0A3D  0842               	movf	(_key_release),w	;volatile
  7428  0A3E  1D03               	skipz
  7429  0A3F  2A41               	goto	u4060
  7430  0A40  2A47               	goto	l16971
  7431  0A41                     u4060:
  7432                           	line	88
  7433                           	
  7434  0A41                     l16965:	
  7435                           ;MS83FXX02_KEY.C: 87: {
  7436                           ;MS83FXX02_KEY.C: 88: key_press = 0;
  7437  0A41  01BF               	clrf	(_key_press)	;volatile
  7438                           	line	89
  7439                           ;MS83FXX02_KEY.C: 89: key_release = 0;
  7440  0A42  01C2               	clrf	(_key_release)	;volatile
  7441                           	line	90
  7442                           ;MS83FXX02_KEY.C: 90: key_press_flag = 0;
  7443  0A43  01C0               	clrf	(_key_press_flag)	;volatile
  7444                           	line	91
  7445                           	
  7446  0A44                     l16967:	
  7447                           ;MS83FXX02_KEY.C: 91: return SET;
  7448  0A44  3001               	movlw	(01h)
  7449  0A45  2A49               	goto	l5527
  7450                           	
  7451  0A46                     l16969:	
  7452  0A46  2A49               	goto	l5527
  7453                           	line	92
  7454                           	
  7455  0A47                     l5526:	
  7456                           	line	94
  7457                           	
  7458  0A47                     l16971:	
  7459                           ;MS83FXX02_KEY.C: 92: }
  7460                           ;MS83FXX02_KEY.C: 94: return RESET;
  7461  0A47  3000               	movlw	(0)
  7462  0A48  2A49               	goto	l5527
  7463                           	
  7464  0A49                     l16973:	
  7465                           	line	95
  7466                           	
  7467  0A49                     l5527:	
  7468  0A49  0008               	return
  7469                           	opt stack 0
  7470                           GLOBAL	__end_of_KEY_GetReleaseStatus
  7471  0A4A                     	__end_of_KEY_GetReleaseStatus:
  7472 ;; =============== function _KEY_GetReleaseStatus ends ============
  7473                           
  7474                           	signat	_KEY_GetReleaseStatus,89
  7475                           	global	_EEPROM_Write
  7476                           psect	text1813,local,class=CODE,delta=2
  7477                           global __ptext1813
  7478  0CD1                     __ptext1813:
  7479                           
  7480 ;; *************** function _EEPROM_Write *****************
  7481 ;; Defined at:
  7482 ;;		line 39 in file "ms83fxx02_eeprom.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;  addr            1    wreg     unsigned char 
  7485 ;;  data            1    4[BANK0 ] unsigned char 
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;  addr            1    5[BANK0 ] unsigned char 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;		None               void
  7490 ;; Registers used:
  7491 ;;		wreg
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7497 ;;      Params:         0       1       0       0
  7498 ;;      Locals:         0       1       0       0
  7499 ;;      Temps:          0       0       0       0
  7500 ;;      Totals:         0       2       0       0
  7501 ;;Total ram usage:        2 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    4
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_EEPROM_Init
  7508 ;;		_EEPROM_StoreMotorData
  7509 ;;		_EEPROM_SetFlag
  7510 ;;		_EEPROM_StoreModeData
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           psect	text1813
  7514                           	file	"ms83fxx02_eeprom.c"
  7515                           	line	39
  7516                           	global	__size_of_EEPROM_Write
  7517  001F                     	__size_of_EEPROM_Write	equ	__end_of_EEPROM_Write-_EEPROM_Write
  7518                           	
  7519  0CD1                     _EEPROM_Write:	
  7520                           	opt	stack 0
  7521                           ; Regs used in _EEPROM_Write: [wreg]
  7522                           ;EEPROM_Write@addr stored from wreg
  7523  0CD1  1283               	bcf	status, 5	;RP0=0, select bank0
  7524  0CD2  1303               	bcf	status, 6	;RP1=0, select bank0
  7525  0CD3  00CC               	movwf	(EEPROM_Write@addr)
  7526                           	line	40
  7527                           	
  7528  0CD4                     l16925:	
  7529                           ;ms83fxx02_eeprom.c: 40: EEADR = addr;
  7530  0CD4  084C               	movf	(EEPROM_Write@addr),w
  7531  0CD5  1683               	bsf	status, 5	;RP0=1, select bank1
  7532  0CD6  1303               	bcf	status, 6	;RP1=0, select bank1
  7533  0CD7  009B               	movwf	(155)^080h	;volatile
  7534                           	line	41
  7535                           	
  7536  0CD8                     l16927:	
  7537                           # 41 "ms83fxx02_eeprom.c"
  7538  0CD8  0000               nop ;#
  7539                           psect	text1813
  7540                           	line	42
  7541                           ;ms83fxx02_eeprom.c: 42: EEDAT = data;
  7542  0CD9  1283               	bcf	status, 5	;RP0=0, select bank0
  7543  0CDA  1303               	bcf	status, 6	;RP1=0, select bank0
  7544  0CDB  084B               	movf	(EEPROM_Write@data),w
  7545  0CDC  1683               	bsf	status, 5	;RP0=1, select bank1
  7546  0CDD  1303               	bcf	status, 6	;RP1=0, select bank1
  7547  0CDE  009A               	movwf	(154)^080h	;volatile
  7548                           	line	43
  7549                           ;ms83fxx02_eeprom.c: 43: EECON1 = 0x34;
  7550  0CDF  3034               	movlw	(034h)
  7551  0CE0  009C               	movwf	(156)^080h	;volatile
  7552                           	line	44
  7553                           	
  7554  0CE1                     l16929:	
  7555                           ;ms83fxx02_eeprom.c: 44: WR = 1;
  7556  0CE1  141D               	bsf	(1256/8)^080h,(1256)&7
  7557                           	line	45
  7558                           	
  7559  0CE2                     l16931:	
  7560                           # 45 "ms83fxx02_eeprom.c"
  7561  0CE2  0000               nop ;#
  7562                           psect	text1813
  7563                           	line	46
  7564                           	
  7565  0CE3                     l16933:	
  7566                           # 46 "ms83fxx02_eeprom.c"
  7567  0CE3  0000               nop ;#
  7568                           psect	text1813
  7569                           	line	47
  7570                           	
  7571  0CE4                     l16935:	
  7572                           # 47 "ms83fxx02_eeprom.c"
  7573  0CE4  0000               nop ;#
  7574                           psect	text1813
  7575                           	line	49
  7576                           ;ms83fxx02_eeprom.c: 49: while(WR == 1);
  7577  0CE5  2CE6               	goto	l3338
  7578                           	
  7579  0CE6                     l3339:	
  7580                           	
  7581  0CE6                     l3338:	
  7582  0CE6  1683               	bsf	status, 5	;RP0=1, select bank1
  7583  0CE7  1303               	bcf	status, 6	;RP1=0, select bank1
  7584  0CE8  181D               	btfsc	(1256/8)^080h,(1256)&7
  7585  0CE9  2CEB               	goto	u4051
  7586  0CEA  2CEC               	goto	u4050
  7587  0CEB                     u4051:
  7588  0CEB  2CE6               	goto	l3338
  7589  0CEC                     u4050:
  7590                           	
  7591  0CEC                     l3340:	
  7592                           	line	50
  7593                           ;ms83fxx02_eeprom.c: 50: WREN1 = 0;
  7594  0CEC  111C               	bcf	(1250/8)^080h,(1250)&7
  7595                           	line	51
  7596                           ;ms83fxx02_eeprom.c: 51: WREN2 = 0;
  7597  0CED  121C               	bcf	(1252/8)^080h,(1252)&7
  7598                           	line	52
  7599                           ;ms83fxx02_eeprom.c: 52: WREN3 = 0;
  7600  0CEE  129C               	bcf	(1253/8)^080h,(1253)&7
  7601                           	line	53
  7602                           	
  7603  0CEF                     l3341:	
  7604  0CEF  0008               	return
  7605                           	opt stack 0
  7606                           GLOBAL	__end_of_EEPROM_Write
  7607  0CF0                     	__end_of_EEPROM_Write:
  7608 ;; =============== function _EEPROM_Write ends ============
  7609                           
  7610                           	signat	_EEPROM_Write,8312
  7611                           	global	_GPIO_INTConfig
  7612                           psect	text1814,local,class=CODE,delta=2
  7613                           global __ptext1814
  7614  06CD                     __ptext1814:
  7615                           
  7616 ;; *************** function _GPIO_INTConfig *****************
  7617 ;; Defined at:
  7618 ;;		line 134 in file "ms83fxx02_gpio.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  GPIOx           1    wreg     enum E1491
  7621 ;;  GPIO_Pin        1    4[BANK0 ] unsigned char 
  7622 ;;  NewState        1    5[BANK0 ] enum E1482
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  GPIOx           1    7[BANK0 ] enum E1491
  7625 ;; Return value:  Size  Location     Type
  7626 ;;		None               void
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7634 ;;      Params:         0       2       0       0
  7635 ;;      Locals:         0       1       0       0
  7636 ;;      Temps:          0       1       0       0
  7637 ;;      Totals:         0       4       0       0
  7638 ;;Total ram usage:        4 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    4
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_ChargeDetect_Init
  7645 ;;		_KEY_Init
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           psect	text1814
  7649                           	file	"ms83fxx02_gpio.c"
  7650                           	line	134
  7651                           	global	__size_of_GPIO_INTConfig
  7652  0040                     	__size_of_GPIO_INTConfig	equ	__end_of_GPIO_INTConfig-_GPIO_INTConfig
  7653                           	
  7654  06CD                     _GPIO_INTConfig:	
  7655                           	opt	stack 0
  7656                           ; Regs used in _GPIO_INTConfig: [wreg+status,2+status,0]
  7657                           ;GPIO_INTConfig@GPIOx stored from wreg
  7658  06CD  1283               	bcf	status, 5	;RP0=0, select bank0
  7659  06CE  1303               	bcf	status, 6	;RP1=0, select bank0
  7660  06CF  00CE               	movwf	(GPIO_INTConfig@GPIOx)
  7661                           	line	135
  7662                           	
  7663  06D0                     l16899:	
  7664                           ;ms83fxx02_gpio.c: 135: if(GPIOx == GPIOA)
  7665  06D0  08CE               	movf	(GPIO_INTConfig@GPIOx),f
  7666  06D1  1D03               	skipz
  7667  06D2  2ED4               	goto	u4001
  7668  06D3  2ED5               	goto	u4000
  7669  06D4                     u4001:
  7670  06D4  2EEB               	goto	l16909
  7671  06D5                     u4000:
  7672                           	line	137
  7673                           	
  7674  06D5                     l16901:	
  7675                           ;ms83fxx02_gpio.c: 136: {
  7676                           ;ms83fxx02_gpio.c: 137: if (NewState != DISABLE)
  7677  06D5  084C               	movf	(GPIO_INTConfig@NewState),w
  7678  06D6  1D03               	skipz
  7679  06D7  2ED9               	goto	u4010
  7680  06D8  2EE2               	goto	l16907
  7681  06D9                     u4010:
  7682                           	line	140
  7683                           	
  7684  06D9                     l16903:	
  7685                           ;ms83fxx02_gpio.c: 138: {
  7686                           ;ms83fxx02_gpio.c: 140: PAIE = 1;
  7687  06D9  158B               	bsf	(91/8),(91)&7
  7688                           	line	141
  7689                           ;ms83fxx02_gpio.c: 141: GIE = 1;
  7690  06DA  178B               	bsf	(95/8),(95)&7
  7691                           	line	142
  7692                           	
  7693  06DB                     l16905:	
  7694                           ;ms83fxx02_gpio.c: 142: IOCA |= GPIO_Pin;
  7695  06DB  084B               	movf	(GPIO_INTConfig@GPIO_Pin),w
  7696  06DC  00CD               	movwf	(??_GPIO_INTConfig+0)+0
  7697  06DD  084D               	movf	(??_GPIO_INTConfig+0)+0,w
  7698  06DE  1683               	bsf	status, 5	;RP0=1, select bank1
  7699  06DF  1303               	bcf	status, 6	;RP1=0, select bank1
  7700  06E0  0496               	iorwf	(150)^080h,f	;volatile
  7701                           	line	143
  7702                           ;ms83fxx02_gpio.c: 143: }
  7703  06E1  2EEB               	goto	l16909
  7704                           	line	144
  7705                           	
  7706  06E2                     l4433:	
  7707                           	line	147
  7708                           	
  7709  06E2                     l16907:	
  7710                           ;ms83fxx02_gpio.c: 144: else
  7711                           ;ms83fxx02_gpio.c: 145: {
  7712                           ;ms83fxx02_gpio.c: 147: IOCA &= ~GPIO_Pin;
  7713  06E2  1283               	bcf	status, 5	;RP0=0, select bank0
  7714  06E3  094B               	comf	(GPIO_INTConfig@GPIO_Pin),w
  7715  06E4  00CD               	movwf	(??_GPIO_INTConfig+0)+0
  7716  06E5  084D               	movf	(??_GPIO_INTConfig+0)+0,w
  7717  06E6  1683               	bsf	status, 5	;RP0=1, select bank1
  7718  06E7  1303               	bcf	status, 6	;RP1=0, select bank1
  7719  06E8  0596               	andwf	(150)^080h,f	;volatile
  7720  06E9  2EEB               	goto	l16909
  7721                           	line	148
  7722                           	
  7723  06EA                     l4434:	
  7724  06EA  2EEB               	goto	l16909
  7725                           	line	149
  7726                           	
  7727  06EB                     l4432:	
  7728                           	line	151
  7729                           	
  7730  06EB                     l16909:	
  7731                           ;ms83fxx02_gpio.c: 148: }
  7732                           ;ms83fxx02_gpio.c: 149: }
  7733                           ;ms83fxx02_gpio.c: 151: if((GPIOx == GPIOC) && (GPIO_Pin == ((uint8_t)0x00000002)))
  7734  06EB  1283               	bcf	status, 5	;RP0=0, select bank0
  7735  06EC  084E               	movf	(GPIO_INTConfig@GPIOx),w
  7736  06ED  3A01               	xorlw	01h
  7737  06EE  1D03               	skipz
  7738  06EF  2EF1               	goto	u4021
  7739  06F0  2EF2               	goto	u4020
  7740  06F1                     u4021:
  7741  06F1  2F0C               	goto	l4438
  7742  06F2                     u4020:
  7743                           	
  7744  06F2                     l16911:	
  7745  06F2  084B               	movf	(GPIO_INTConfig@GPIO_Pin),w
  7746  06F3  3A02               	xorlw	02h
  7747  06F4  1D03               	skipz
  7748  06F5  2EF7               	goto	u4031
  7749  06F6  2EF8               	goto	u4030
  7750  06F7                     u4031:
  7751  06F7  2F0C               	goto	l4438
  7752  06F8                     u4030:
  7753                           	line	154
  7754                           	
  7755  06F8                     l16913:	
  7756                           ;ms83fxx02_gpio.c: 152: {
  7757                           ;ms83fxx02_gpio.c: 154: if (NewState != DISABLE)
  7758  06F8  084C               	movf	(GPIO_INTConfig@NewState),w
  7759  06F9  1D03               	skipz
  7760  06FA  2EFC               	goto	u4040
  7761  06FB  2F09               	goto	l4436
  7762  06FC                     u4040:
  7763                           	line	157
  7764                           	
  7765  06FC                     l16915:	
  7766                           ;ms83fxx02_gpio.c: 155: {
  7767                           ;ms83fxx02_gpio.c: 157: ANSEL5 = 0;
  7768  06FC  1683               	bsf	status, 5	;RP0=1, select bank1
  7769  06FD  1303               	bcf	status, 6	;RP1=0, select bank1
  7770  06FE  1291               	bcf	(1165/8)^080h,(1165)&7
  7771                           	line	158
  7772                           	
  7773  06FF                     l16917:	
  7774                           ;ms83fxx02_gpio.c: 158: CMCON0 |= 0x07;
  7775  06FF  3007               	movlw	(07h)
  7776  0700  1283               	bcf	status, 5	;RP0=0, select bank0
  7777  0701  1303               	bcf	status, 6	;RP1=0, select bank0
  7778  0702  00CD               	movwf	(??_GPIO_INTConfig+0)+0
  7779  0703  084D               	movf	(??_GPIO_INTConfig+0)+0,w
  7780  0704  0499               	iorwf	(25),f	;volatile
  7781                           	line	160
  7782                           	
  7783  0705                     l16919:	
  7784                           ;ms83fxx02_gpio.c: 160: GIE = 1;
  7785  0705  178B               	bsf	(95/8),(95)&7
  7786                           	line	161
  7787                           	
  7788  0706                     l16921:	
  7789                           ;ms83fxx02_gpio.c: 161: INTF = 0;
  7790  0706  108B               	bcf	(89/8),(89)&7
  7791                           	line	162
  7792                           	
  7793  0707                     l16923:	
  7794                           ;ms83fxx02_gpio.c: 162: INTE = 1;
  7795  0707  160B               	bsf	(92/8),(92)&7
  7796                           	line	163
  7797                           ;ms83fxx02_gpio.c: 163: }
  7798  0708  2F0C               	goto	l4438
  7799                           	line	164
  7800                           	
  7801  0709                     l4436:	
  7802                           	line	167
  7803                           ;ms83fxx02_gpio.c: 164: else
  7804                           ;ms83fxx02_gpio.c: 165: {
  7805                           ;ms83fxx02_gpio.c: 167: INTE = 0;
  7806  0709  120B               	bcf	(92/8),(92)&7
  7807  070A  2F0C               	goto	l4438
  7808                           	line	168
  7809                           	
  7810  070B                     l4437:	
  7811  070B  2F0C               	goto	l4438
  7812                           	line	169
  7813                           	
  7814  070C                     l4435:	
  7815                           	line	170
  7816                           	
  7817  070C                     l4438:	
  7818  070C  0008               	return
  7819                           	opt stack 0
  7820                           GLOBAL	__end_of_GPIO_INTConfig
  7821  070D                     	__end_of_GPIO_INTConfig:
  7822 ;; =============== function _GPIO_INTConfig ends ============
  7823                           
  7824                           	signat	_GPIO_INTConfig,12408
  7825                           	global	_GPIO_ReadInputDataBit
  7826                           psect	text1815,local,class=CODE,delta=2
  7827                           global __ptext1815
  7828  0DCA                     __ptext1815:
  7829                           
  7830 ;; *************** function _GPIO_ReadInputDataBit *****************
  7831 ;; Defined at:
  7832 ;;		line 101 in file "ms83fxx02_gpio.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  GPIOx           1    wreg     enum E1491
  7835 ;;  GPIO_Pin        1    4[BANK0 ] unsigned char 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  GPIOx           1    6[BANK0 ] enum E1491
  7838 ;;  bitstatus       1    5[BANK0 ] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      unsigned char 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7848 ;;      Params:         0       1       0       0
  7849 ;;      Locals:         0       2       0       0
  7850 ;;      Temps:          0       0       0       0
  7851 ;;      Totals:         0       3       0       0
  7852 ;;Total ram usage:        3 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    4
  7855 ;; This function calls:
  7856 ;;		Nothing
  7857 ;; This function is called by:
  7858 ;;		_ChargeDetect_Init
  7859 ;;		_ChargeDetect_GetStatus
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           psect	text1815
  7863                           	file	"ms83fxx02_gpio.c"
  7864                           	line	101
  7865                           	global	__size_of_GPIO_ReadInputDataBit
  7866  0029                     	__size_of_GPIO_ReadInputDataBit	equ	__end_of_GPIO_ReadInputDataBit-_GPIO_ReadInputDataB
                                 it
  7867                           	
  7868  0DCA                     _GPIO_ReadInputDataBit:	
  7869                           	opt	stack 2
  7870                           ; Regs used in _GPIO_ReadInputDataBit: [wreg+status,2+status,0]
  7871                           ;GPIO_ReadInputDataBit@GPIOx stored from wreg
  7872  0DCA  1283               	bcf	status, 5	;RP0=0, select bank0
  7873  0DCB  1303               	bcf	status, 6	;RP1=0, select bank0
  7874  0DCC  00CD               	movwf	(GPIO_ReadInputDataBit@GPIOx)
  7875                           	line	102
  7876                           	
  7877  0DCD                     l16881:	
  7878                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
  7879  0DCD  01CC               	clrf	(GPIO_ReadInputDataBit@bitstatus)
  7880                           	line	104
  7881                           	
  7882  0DCE                     l16883:	
  7883                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
  7884  0DCE  08CD               	movf	(GPIO_ReadInputDataBit@GPIOx),f
  7885  0DCF  1D03               	skipz
  7886  0DD0  2DD2               	goto	u3961
  7887  0DD1  2DD3               	goto	u3960
  7888  0DD2                     u3961:
  7889  0DD2  2DDE               	goto	l16889
  7890  0DD3                     u3960:
  7891                           	line	106
  7892                           	
  7893  0DD3                     l16885:	
  7894                           ;ms83fxx02_gpio.c: 105: {
  7895                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
  7896  0DD3  0805               	movf	(5),w	;volatile
  7897  0DD4  054B               	andwf	(GPIO_ReadInputDataBit@GPIO_Pin),w
  7898  0DD5  1903               	btfsc	status,2
  7899  0DD6  2DD8               	goto	u3971
  7900  0DD7  2DD9               	goto	u3970
  7901  0DD8                     u3971:
  7902  0DD8  2DF0               	goto	l16895
  7903  0DD9                     u3970:
  7904                           	line	108
  7905                           	
  7906  0DD9                     l16887:	
  7907                           ;ms83fxx02_gpio.c: 107: {
  7908                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
  7909  0DD9  01CC               	clrf	(GPIO_ReadInputDataBit@bitstatus)
  7910  0DDA  1403               	bsf	status,0
  7911  0DDB  0DCC               	rlf	(GPIO_ReadInputDataBit@bitstatus),f
  7912  0DDC  2DF0               	goto	l16895
  7913                           	line	109
  7914                           	
  7915  0DDD                     l4425:	
  7916                           	line	110
  7917                           ;ms83fxx02_gpio.c: 109: }
  7918                           ;ms83fxx02_gpio.c: 110: }
  7919  0DDD  2DF0               	goto	l16895
  7920                           	line	111
  7921                           	
  7922  0DDE                     l4424:	
  7923                           	line	113
  7924                           	
  7925  0DDE                     l16889:	
  7926                           ;ms83fxx02_gpio.c: 111: else
  7927                           ;ms83fxx02_gpio.c: 112: {
  7928                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
  7929  0DDE  084D               	movf	(GPIO_ReadInputDataBit@GPIOx),w
  7930  0DDF  3A01               	xorlw	01h
  7931  0DE0  1D03               	skipz
  7932  0DE1  2DE3               	goto	u3981
  7933  0DE2  2DE4               	goto	u3980
  7934  0DE3                     u3981:
  7935  0DE3  2DF0               	goto	l16895
  7936  0DE4                     u3980:
  7937                           	line	115
  7938                           	
  7939  0DE4                     l16891:	
  7940                           ;ms83fxx02_gpio.c: 114: {
  7941                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
  7942  0DE4  0807               	movf	(7),w	;volatile
  7943  0DE5  054B               	andwf	(GPIO_ReadInputDataBit@GPIO_Pin),w
  7944  0DE6  1903               	btfsc	status,2
  7945  0DE7  2DE9               	goto	u3991
  7946  0DE8  2DEA               	goto	u3990
  7947  0DE9                     u3991:
  7948  0DE9  2DF0               	goto	l16895
  7949  0DEA                     u3990:
  7950                           	line	117
  7951                           	
  7952  0DEA                     l16893:	
  7953                           ;ms83fxx02_gpio.c: 116: {
  7954                           ;ms83fxx02_gpio.c: 117: bitstatus = (uint8_t)SET;
  7955  0DEA  01CC               	clrf	(GPIO_ReadInputDataBit@bitstatus)
  7956  0DEB  1403               	bsf	status,0
  7957  0DEC  0DCC               	rlf	(GPIO_ReadInputDataBit@bitstatus),f
  7958  0DED  2DF0               	goto	l16895
  7959                           	line	118
  7960                           	
  7961  0DEE                     l4428:	
  7962  0DEE  2DF0               	goto	l16895
  7963                           	line	119
  7964                           	
  7965  0DEF                     l4427:	
  7966  0DEF  2DF0               	goto	l16895
  7967                           	line	120
  7968                           	
  7969  0DF0                     l4426:	
  7970                           	line	122
  7971                           	
  7972  0DF0                     l16895:	
  7973                           ;ms83fxx02_gpio.c: 118: }
  7974                           ;ms83fxx02_gpio.c: 119: }
  7975                           ;ms83fxx02_gpio.c: 120: }
  7976                           ;ms83fxx02_gpio.c: 122: return bitstatus;
  7977  0DF0  084C               	movf	(GPIO_ReadInputDataBit@bitstatus),w
  7978  0DF1  2DF2               	goto	l4429
  7979                           	
  7980  0DF2                     l16897:	
  7981                           	line	123
  7982                           	
  7983  0DF2                     l4429:	
  7984  0DF2  0008               	return
  7985                           	opt stack 0
  7986                           GLOBAL	__end_of_GPIO_ReadInputDataBit
  7987  0DF3                     	__end_of_GPIO_ReadInputDataBit:
  7988 ;; =============== function _GPIO_ReadInputDataBit ends ============
  7989                           
  7990                           	signat	_GPIO_ReadInputDataBit,8313
  7991                           	global	_GPIO_Init
  7992                           psect	text1816,local,class=CODE,delta=2
  7993                           global __ptext1816
  7994  0606                     __ptext1816:
  7995                           
  7996 ;; *************** function _GPIO_Init *****************
  7997 ;; Defined at:
  7998 ;;		line 27 in file "ms83fxx02_gpio.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  GPIOx           1    wreg     enum E1491
  8001 ;;  GPIO_InitStr    1    4[BANK0 ] PTR struct .
  8002 ;;		 -> LED_Init@GPIO_InitStruct(2), KEY_Init@GPIO_InitStruct(2), KEY_DeInit@GPIO_InitStruct(2), ChargeCtrl_Init@GPIO_In
       itStruct(2), 
  8003 ;;		 -> ChargeDetect_Init@GPIO_InitStruct(2), 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  GPIOx           1    6[BANK0 ] enum E1491
  8006 ;; Return value:  Size  Location     Type
  8007 ;;		None               void
  8008 ;; Registers used:
  8009 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8015 ;;      Params:         0       1       0       0
  8016 ;;      Locals:         0       1       0       0
  8017 ;;      Temps:          0       1       0       0
  8018 ;;      Totals:         0       3       0       0
  8019 ;;Total ram usage:        3 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    4
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_ChargeDetect_Init
  8026 ;;		_ChargeCtrl_Init
  8027 ;;		_KEY_DeInit
  8028 ;;		_KEY_Init
  8029 ;;		_LED_Init
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           psect	text1816
  8033                           	file	"ms83fxx02_gpio.c"
  8034                           	line	27
  8035                           	global	__size_of_GPIO_Init
  8036  0046                     	__size_of_GPIO_Init	equ	__end_of_GPIO_Init-_GPIO_Init
  8037                           	
  8038  0606                     _GPIO_Init:	
  8039                           	opt	stack 0
  8040                           ; Regs used in _GPIO_Init: [wreg-fsr0h+status,2+status,0]
  8041                           ;GPIO_Init@GPIOx stored from wreg
  8042  0606  1283               	bcf	status, 5	;RP0=0, select bank0
  8043  0607  1303               	bcf	status, 6	;RP1=0, select bank0
  8044  0608  00CD               	movwf	(GPIO_Init@GPIOx)
  8045                           	line	28
  8046                           	
  8047  0609                     l16867:	
  8048                           ;ms83fxx02_gpio.c: 28: if(GPIOx == GPIOA)
  8049  0609  08CD               	movf	(GPIO_Init@GPIOx),f
  8050  060A  1D03               	skipz
  8051  060B  2E0D               	goto	u3931
  8052  060C  2E0E               	goto	u3930
  8053  060D                     u3931:
  8054  060D  2E2C               	goto	l16875
  8055  060E                     u3930:
  8056                           	line	30
  8057                           	
  8058  060E                     l16869:	
  8059                           ;ms83fxx02_gpio.c: 29: {
  8060                           ;ms83fxx02_gpio.c: 30: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  8061  060E  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8062  060F  3E01               	addlw	01h
  8063  0610  0084               	movwf	fsr0
  8064  0611  1383               	bcf	status, 7	;select IRP bank0
  8065  0612  0800               	movf	indf,w
  8066  0613  3A01               	xorlw	01h
  8067  0614  1D03               	skipz
  8068  0615  2E17               	goto	u3941
  8069  0616  2E18               	goto	u3940
  8070  0617                     u3941:
  8071  0617  2E21               	goto	l16873
  8072  0618                     u3940:
  8073                           	line	33
  8074                           	
  8075  0618                     l16871:	
  8076                           ;ms83fxx02_gpio.c: 31: {
  8077                           ;ms83fxx02_gpio.c: 33: TRISA &= ~(GPIO_InitStruct->GPIO_Pin);
  8078  0618  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8079  0619  0084               	movwf	fsr0
  8080  061A  0900               	comf	indf,w
  8081  061B  00CC               	movwf	(??_GPIO_Init+0)+0
  8082  061C  084C               	movf	(??_GPIO_Init+0)+0,w
  8083  061D  1683               	bsf	status, 5	;RP0=1, select bank1
  8084  061E  1303               	bcf	status, 6	;RP1=0, select bank1
  8085  061F  0585               	andwf	(133)^080h,f	;volatile
  8086                           	line	34
  8087                           ;ms83fxx02_gpio.c: 34: }
  8088  0620  2E4B               	goto	l4412
  8089                           	line	35
  8090                           	
  8091  0621                     l4407:	
  8092                           	line	38
  8093                           	
  8094  0621                     l16873:	
  8095                           ;ms83fxx02_gpio.c: 35: else
  8096                           ;ms83fxx02_gpio.c: 36: {
  8097                           ;ms83fxx02_gpio.c: 38: TRISA |= GPIO_InitStruct->GPIO_Pin;
  8098  0621  1283               	bcf	status, 5	;RP0=0, select bank0
  8099  0622  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8100  0623  0084               	movwf	fsr0
  8101  0624  0800               	movf	indf,w
  8102  0625  00CC               	movwf	(??_GPIO_Init+0)+0
  8103  0626  084C               	movf	(??_GPIO_Init+0)+0,w
  8104  0627  1683               	bsf	status, 5	;RP0=1, select bank1
  8105  0628  1303               	bcf	status, 6	;RP1=0, select bank1
  8106  0629  0485               	iorwf	(133)^080h,f	;volatile
  8107  062A  2E4B               	goto	l4412
  8108                           	line	39
  8109                           	
  8110  062B                     l4408:	
  8111                           	line	40
  8112                           ;ms83fxx02_gpio.c: 39: }
  8113                           ;ms83fxx02_gpio.c: 40: }
  8114  062B  2E4B               	goto	l4412
  8115                           	line	41
  8116                           	
  8117  062C                     l4406:	
  8118                           	line	43
  8119                           	
  8120  062C                     l16875:	
  8121                           ;ms83fxx02_gpio.c: 41: else
  8122                           ;ms83fxx02_gpio.c: 42: {
  8123                           ;ms83fxx02_gpio.c: 43: if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
  8124  062C  1283               	bcf	status, 5	;RP0=0, select bank0
  8125  062D  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8126  062E  3E01               	addlw	01h
  8127  062F  0084               	movwf	fsr0
  8128  0630  1383               	bcf	status, 7	;select IRP bank0
  8129  0631  0800               	movf	indf,w
  8130  0632  3A01               	xorlw	01h
  8131  0633  1D03               	skipz
  8132  0634  2E36               	goto	u3951
  8133  0635  2E37               	goto	u3950
  8134  0636                     u3951:
  8135  0636  2E40               	goto	l16879
  8136  0637                     u3950:
  8137                           	line	46
  8138                           	
  8139  0637                     l16877:	
  8140                           ;ms83fxx02_gpio.c: 44: {
  8141                           ;ms83fxx02_gpio.c: 46: TRISC &= ~(GPIO_InitStruct->GPIO_Pin);
  8142  0637  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8143  0638  0084               	movwf	fsr0
  8144  0639  0900               	comf	indf,w
  8145  063A  00CC               	movwf	(??_GPIO_Init+0)+0
  8146  063B  084C               	movf	(??_GPIO_Init+0)+0,w
  8147  063C  1683               	bsf	status, 5	;RP0=1, select bank1
  8148  063D  1303               	bcf	status, 6	;RP1=0, select bank1
  8149  063E  0587               	andwf	(135)^080h,f	;volatile
  8150                           	line	47
  8151                           ;ms83fxx02_gpio.c: 47: }
  8152  063F  2E4B               	goto	l4412
  8153                           	line	48
  8154                           	
  8155  0640                     l4410:	
  8156                           	line	51
  8157                           	
  8158  0640                     l16879:	
  8159                           ;ms83fxx02_gpio.c: 48: else
  8160                           ;ms83fxx02_gpio.c: 49: {
  8161                           ;ms83fxx02_gpio.c: 51: TRISC |= GPIO_InitStruct->GPIO_Pin;
  8162  0640  1283               	bcf	status, 5	;RP0=0, select bank0
  8163  0641  084B               	movf	(GPIO_Init@GPIO_InitStruct),w
  8164  0642  0084               	movwf	fsr0
  8165  0643  0800               	movf	indf,w
  8166  0644  00CC               	movwf	(??_GPIO_Init+0)+0
  8167  0645  084C               	movf	(??_GPIO_Init+0)+0,w
  8168  0646  1683               	bsf	status, 5	;RP0=1, select bank1
  8169  0647  1303               	bcf	status, 6	;RP1=0, select bank1
  8170  0648  0487               	iorwf	(135)^080h,f	;volatile
  8171  0649  2E4B               	goto	l4412
  8172                           	line	52
  8173                           	
  8174  064A                     l4411:	
  8175  064A  2E4B               	goto	l4412
  8176                           	line	53
  8177                           	
  8178  064B                     l4409:	
  8179                           	line	54
  8180                           	
  8181  064B                     l4412:	
  8182  064B  0008               	return
  8183                           	opt stack 0
  8184                           GLOBAL	__end_of_GPIO_Init
  8185  064C                     	__end_of_GPIO_Init:
  8186 ;; =============== function _GPIO_Init ends ============
  8187                           
  8188                           	signat	_GPIO_Init,8312
  8189                           	global	_GetDeviceMode
  8190                           psect	text1817,local,class=CODE,delta=2
  8191                           global __ptext1817
  8192  09BB                     __ptext1817:
  8193                           
  8194 ;; *************** function _GetDeviceMode *****************
  8195 ;; Defined at:
  8196 ;;		line 45 in file "ms83fxx02_pwr.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      enum E1584
  8203 ;; Registers used:
  8204 ;;		wreg
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8210 ;;      Params:         0       0       0       0
  8211 ;;      Locals:         0       0       0       0
  8212 ;;      Temps:          0       0       0       0
  8213 ;;      Totals:         0       0       0       0
  8214 ;;Total ram usage:        0 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    4
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_main
  8221 ;;		_Battery_Detect
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           psect	text1817
  8225                           	file	"ms83fxx02_pwr.c"
  8226                           	line	45
  8227                           	global	__size_of_GetDeviceMode
  8228  0005                     	__size_of_GetDeviceMode	equ	__end_of_GetDeviceMode-_GetDeviceMode
  8229                           	
  8230  09BB                     _GetDeviceMode:	
  8231                           	opt	stack 3
  8232                           ; Regs used in _GetDeviceMode: [wreg]
  8233                           	line	46
  8234                           	
  8235  09BB                     l16707:	
  8236                           ;ms83fxx02_pwr.c: 46: return device_mode;
  8237  09BB  1283               	bcf	status, 5	;RP0=0, select bank0
  8238  09BC  1303               	bcf	status, 6	;RP1=0, select bank0
  8239  09BD  083E               	movf	(_device_mode),w	;volatile
  8240  09BE  29BF               	goto	l10014
  8241                           	
  8242  09BF                     l16709:	
  8243                           	line	47
  8244                           	
  8245  09BF                     l10014:	
  8246  09BF  0008               	return
  8247                           	opt stack 0
  8248                           GLOBAL	__end_of_GetDeviceMode
  8249  09C0                     	__end_of_GetDeviceMode:
  8250 ;; =============== function _GetDeviceMode ends ============
  8251                           
  8252                           	signat	_GetDeviceMode,89
  8253                           	global	_SetDeviceMode
  8254                           psect	text1818,local,class=CODE,delta=2
  8255                           global __ptext1818
  8256  09D5                     __ptext1818:
  8257                           
  8258 ;; *************** function _SetDeviceMode *****************
  8259 ;; Defined at:
  8260 ;;		line 55 in file "ms83fxx02_pwr.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;  mode            1    wreg     enum E1521
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  mode            1    5[BANK0 ] enum E1521
  8265 ;; Return value:  Size  Location     Type
  8266 ;;		None               void
  8267 ;; Registers used:
  8268 ;;		wreg
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8274 ;;      Params:         0       0       0       0
  8275 ;;      Locals:         0       1       0       0
  8276 ;;      Temps:          0       1       0       0
  8277 ;;      Totals:         0       2       0       0
  8278 ;;Total ram usage:        2 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    4
  8281 ;; This function calls:
  8282 ;;		Nothing
  8283 ;; This function is called by:
  8284 ;;		_main
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           psect	text1818
  8288                           	file	"ms83fxx02_pwr.c"
  8289                           	line	55
  8290                           	global	__size_of_SetDeviceMode
  8291  0008                     	__size_of_SetDeviceMode	equ	__end_of_SetDeviceMode-_SetDeviceMode
  8292                           	
  8293  09D5                     _SetDeviceMode:	
  8294                           	opt	stack 3
  8295                           ; Regs used in _SetDeviceMode: [wreg]
  8296                           ;SetDeviceMode@mode stored from wreg
  8297  09D5  1283               	bcf	status, 5	;RP0=0, select bank0
  8298  09D6  1303               	bcf	status, 6	;RP1=0, select bank0
  8299  09D7  00CC               	movwf	(SetDeviceMode@mode)
  8300                           	line	56
  8301                           	
  8302  09D8                     l16705:	
  8303                           ;ms83fxx02_pwr.c: 56: device_mode = mode;
  8304  09D8  084C               	movf	(SetDeviceMode@mode),w
  8305  09D9  00CB               	movwf	(??_SetDeviceMode+0)+0
  8306  09DA  084B               	movf	(??_SetDeviceMode+0)+0,w
  8307  09DB  00BE               	movwf	(_device_mode)	;volatile
  8308                           	line	57
  8309                           	
  8310  09DC                     l10017:	
  8311  09DC  0008               	return
  8312                           	opt stack 0
  8313                           GLOBAL	__end_of_SetDeviceMode
  8314  09DD                     	__end_of_SetDeviceMode:
  8315 ;; =============== function _SetDeviceMode ends ============
  8316                           
  8317                           	signat	_SetDeviceMode,4216
  8318                           	global	_ChargeTimer_INTConfig
  8319                           psect	text1819,local,class=CODE,delta=2
  8320                           global __ptext1819
  8321  0ADF                     __ptext1819:
  8322                           
  8323 ;; *************** function _ChargeTimer_INTConfig *****************
  8324 ;; Defined at:
  8325 ;;		line 82 in file "ms83fxx02_charge_timer.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  NewState        1    wreg     enum E1482
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  NewState        1    4[BANK0 ] enum E1482
  8330 ;; Return value:  Size  Location     Type
  8331 ;;		None               void
  8332 ;; Registers used:
  8333 ;;		wreg
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8339 ;;      Params:         0       0       0       0
  8340 ;;      Locals:         0       1       0       0
  8341 ;;      Temps:          0       0       0       0
  8342 ;;      Totals:         0       1       0       0
  8343 ;;Total ram usage:        1 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    4
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           psect	text1819
  8353                           	file	"ms83fxx02_charge_timer.c"
  8354                           	line	82
  8355                           	global	__size_of_ChargeTimer_INTConfig
  8356  0012                     	__size_of_ChargeTimer_INTConfig	equ	__end_of_ChargeTimer_INTConfig-_ChargeTimer_INTConf
                                 ig
  8357                           	
  8358  0ADF                     _ChargeTimer_INTConfig:	
  8359                           	opt	stack 3
  8360                           ; Regs used in _ChargeTimer_INTConfig: [wreg]
  8361                           ;ChargeTimer_INTConfig@NewState stored from wreg
  8362  0ADF  1283               	bcf	status, 5	;RP0=0, select bank0
  8363  0AE0  1303               	bcf	status, 6	;RP1=0, select bank0
  8364  0AE1  00CB               	movwf	(ChargeTimer_INTConfig@NewState)
  8365                           	line	83
  8366                           	
  8367  0AE2                     l16701:	
  8368                           ;ms83fxx02_charge_timer.c: 83: if(NewState != DISABLE)
  8369  0AE2  084B               	movf	(ChargeTimer_INTConfig@NewState),w
  8370  0AE3  1D03               	skipz
  8371  0AE4  2AE6               	goto	u3650
  8372  0AE5  2AEC               	goto	l12225
  8373  0AE6                     u3650:
  8374                           	line	86
  8375                           	
  8376  0AE6                     l16703:	
  8377                           ;ms83fxx02_charge_timer.c: 84: {
  8378                           ;ms83fxx02_charge_timer.c: 86: TMR5IE = 1;
  8379  0AE6  1283               	bcf	status, 5	;RP0=0, select bank2
  8380  0AE7  1703               	bsf	status, 6	;RP1=1, select bank2
  8381  0AE8  149C               	bsf	(2273/8)^0100h,(2273)&7
  8382                           	line	87
  8383                           ;ms83fxx02_charge_timer.c: 87: PEIE = 1;
  8384  0AE9  170B               	bsf	(94/8),(94)&7
  8385                           	line	88
  8386                           ;ms83fxx02_charge_timer.c: 88: GIE = 1;
  8387  0AEA  178B               	bsf	(95/8),(95)&7
  8388                           	line	89
  8389                           ;ms83fxx02_charge_timer.c: 89: }
  8390  0AEB  2AF0               	goto	l12227
  8391                           	line	90
  8392                           	
  8393  0AEC                     l12225:	
  8394                           	line	93
  8395                           ;ms83fxx02_charge_timer.c: 90: else
  8396                           ;ms83fxx02_charge_timer.c: 91: {
  8397                           ;ms83fxx02_charge_timer.c: 93: TMR5IE = 0;
  8398  0AEC  1283               	bcf	status, 5	;RP0=0, select bank2
  8399  0AED  1703               	bsf	status, 6	;RP1=1, select bank2
  8400  0AEE  109C               	bcf	(2273/8)^0100h,(2273)&7
  8401  0AEF  2AF0               	goto	l12227
  8402                           	line	94
  8403                           	
  8404  0AF0                     l12226:	
  8405                           	line	95
  8406                           	
  8407  0AF0                     l12227:	
  8408  0AF0  0008               	return
  8409                           	opt stack 0
  8410                           GLOBAL	__end_of_ChargeTimer_INTConfig
  8411  0AF1                     	__end_of_ChargeTimer_INTConfig:
  8412 ;; =============== function _ChargeTimer_INTConfig ends ============
  8413                           
  8414                           	signat	_ChargeTimer_INTConfig,4216
  8415                           	global	_ChargeTimer_Cmd
  8416                           psect	text1820,local,class=CODE,delta=2
  8417                           global __ptext1820
  8418  0CB2                     __ptext1820:
  8419                           
  8420 ;; *************** function _ChargeTimer_Cmd *****************
  8421 ;; Defined at:
  8422 ;;		line 41 in file "ms83fxx02_charge_timer.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  NewState        1    wreg     enum E1482
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  NewState        1    4[BANK0 ] enum E1482
  8427 ;; Return value:  Size  Location     Type
  8428 ;;		None               void
  8429 ;; Registers used:
  8430 ;;		wreg, status,2
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8436 ;;      Params:         0       0       0       0
  8437 ;;      Locals:         0       1       0       0
  8438 ;;      Temps:          0       0       0       0
  8439 ;;      Totals:         0       1       0       0
  8440 ;;Total ram usage:        1 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    4
  8443 ;; This function calls:
  8444 ;;		Nothing
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           psect	text1820
  8450                           	file	"ms83fxx02_charge_timer.c"
  8451                           	line	41
  8452                           	global	__size_of_ChargeTimer_Cmd
  8453  001F                     	__size_of_ChargeTimer_Cmd	equ	__end_of_ChargeTimer_Cmd-_ChargeTimer_Cmd
  8454                           	
  8455  0CB2                     _ChargeTimer_Cmd:	
  8456                           	opt	stack 3
  8457                           ; Regs used in _ChargeTimer_Cmd: [wreg+status,2]
  8458                           ;ChargeTimer_Cmd@NewState stored from wreg
  8459  0CB2  1283               	bcf	status, 5	;RP0=0, select bank0
  8460  0CB3  1303               	bcf	status, 6	;RP1=0, select bank0
  8461  0CB4  00CB               	movwf	(ChargeTimer_Cmd@NewState)
  8462                           	line	42
  8463                           	
  8464  0CB5                     l16685:	
  8465                           ;ms83fxx02_charge_timer.c: 42: charge_time_out = 0;
  8466  0CB5  01B4               	clrf	(_charge_time_out)	;volatile
  8467  0CB6  01B5               	clrf	(_charge_time_out+1)	;volatile
  8468                           	line	44
  8469                           	
  8470  0CB7                     l16687:	
  8471                           ;ms83fxx02_charge_timer.c: 44: if(NewState != DISABLE)
  8472  0CB7  084B               	movf	(ChargeTimer_Cmd@NewState),w
  8473  0CB8  1D03               	skipz
  8474  0CB9  2CBB               	goto	u3640
  8475  0CBA  2CCC               	goto	l12220
  8476  0CBB                     u3640:
  8477                           	line	47
  8478                           	
  8479  0CBB                     l16689:	
  8480                           ;ms83fxx02_charge_timer.c: 45: {
  8481                           ;ms83fxx02_charge_timer.c: 47: TMR5ON = 0;
  8482  0CBB  1283               	bcf	status, 5	;RP0=0, select bank2
  8483  0CBC  1703               	bsf	status, 6	;RP1=1, select bank2
  8484  0CBD  111C               	bcf	(2274/8)^0100h,(2274)&7
  8485                           	line	49
  8486                           	
  8487  0CBE                     l16691:	
  8488                           ;ms83fxx02_charge_timer.c: 49: PWM5CR0 = 0b01110010;
  8489  0CBE  3072               	movlw	(072h)
  8490  0CBF  009B               	movwf	(283)^0100h	;volatile
  8491                           	line	52
  8492                           ;ms83fxx02_charge_timer.c: 52: PWM5CR1 = 0b00111000;
  8493  0CC0  3038               	movlw	(038h)
  8494  0CC1  009C               	movwf	(284)^0100h	;volatile
  8495                           	line	56
  8496                           ;ms83fxx02_charge_timer.c: 56: T5CKDIV = 151;
  8497  0CC2  3097               	movlw	(097h)
  8498  0CC3  009D               	movwf	(285)^0100h	;volatile
  8499                           	line	58
  8500                           ;ms83fxx02_charge_timer.c: 58: TMR5H = 0x0F;
  8501  0CC4  300F               	movlw	(0Fh)
  8502  0CC5  0099               	movwf	(281)^0100h	;volatile
  8503                           	line	59
  8504                           	
  8505  0CC6                     l16693:	
  8506                           ;ms83fxx02_charge_timer.c: 59: TMR5L = 0;
  8507  0CC6  0198               	clrf	(280)^0100h	;volatile
  8508                           	line	60
  8509                           	
  8510  0CC7                     l16695:	
  8511                           ;ms83fxx02_charge_timer.c: 60: PR5L = 0xFF;
  8512  0CC7  30FF               	movlw	(0FFh)
  8513  0CC8  009A               	movwf	(282)^0100h	;volatile
  8514                           	line	63
  8515                           	
  8516  0CC9                     l16697:	
  8517                           ;ms83fxx02_charge_timer.c: 63: TMR5IF = 0;
  8518  0CC9  101C               	bcf	(2272/8)^0100h,(2272)&7
  8519                           	line	66
  8520                           	
  8521  0CCA                     l16699:	
  8522                           ;ms83fxx02_charge_timer.c: 66: TMR5ON = 1;
  8523  0CCA  151C               	bsf	(2274/8)^0100h,(2274)&7
  8524                           	line	67
  8525                           ;ms83fxx02_charge_timer.c: 67: }
  8526  0CCB  2CD0               	goto	l12222
  8527                           	line	68
  8528                           	
  8529  0CCC                     l12220:	
  8530                           	line	71
  8531                           ;ms83fxx02_charge_timer.c: 68: else
  8532                           ;ms83fxx02_charge_timer.c: 69: {
  8533                           ;ms83fxx02_charge_timer.c: 71: TMR5ON = 0;
  8534  0CCC  1283               	bcf	status, 5	;RP0=0, select bank2
  8535  0CCD  1703               	bsf	status, 6	;RP1=1, select bank2
  8536  0CCE  111C               	bcf	(2274/8)^0100h,(2274)&7
  8537  0CCF  2CD0               	goto	l12222
  8538                           	line	72
  8539                           	
  8540  0CD0                     l12221:	
  8541                           	line	73
  8542                           	
  8543  0CD0                     l12222:	
  8544  0CD0  0008               	return
  8545                           	opt stack 0
  8546                           GLOBAL	__end_of_ChargeTimer_Cmd
  8547  0CD1                     	__end_of_ChargeTimer_Cmd:
  8548 ;; =============== function _ChargeTimer_Cmd ends ============
  8549                           
  8550                           	signat	_ChargeTimer_Cmd,4216
  8551                           	global	_LEDTimer_DispRunLimitCmd
  8552                           psect	text1821,local,class=CODE,delta=2
  8553                           global __ptext1821
  8554  0A1F                     __ptext1821:
  8555                           
  8556 ;; *************** function _LEDTimer_DispRunLimitCmd *****************
  8557 ;; Defined at:
  8558 ;;		line 181 in file "ms83fxx02_led_timer.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  NewState        1    wreg     enum E1482
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  NewState        1    4[BANK0 ] enum E1482
  8563 ;; Return value:  Size  Location     Type
  8564 ;;		None               void
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8572 ;;      Params:         0       0       0       0
  8573 ;;      Locals:         0       1       0       0
  8574 ;;      Temps:          0       0       0       0
  8575 ;;      Totals:         0       1       0       0
  8576 ;;Total ram usage:        1 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    4
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_main
  8583 ;;		_Motor_HandleStatusChangeEvt
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           psect	text1821
  8587                           	file	"ms83fxx02_led_timer.c"
  8588                           	line	181
  8589                           	global	__size_of_LEDTimer_DispRunLimitCmd
  8590  000E                     	__size_of_LEDTimer_DispRunLimitCmd	equ	__end_of_LEDTimer_DispRunLimitCmd-_LEDTimer_Disp
                                 RunLimitCmd
  8591                           	
  8592  0A1F                     _LEDTimer_DispRunLimitCmd:	
  8593                           	opt	stack 3
  8594                           ; Regs used in _LEDTimer_DispRunLimitCmd: [wreg+status,2+status,0]
  8595                           ;LEDTimer_DispRunLimitCmd@NewState stored from wreg
  8596  0A1F  1283               	bcf	status, 5	;RP0=0, select bank0
  8597  0A20  1303               	bcf	status, 6	;RP1=0, select bank0
  8598  0A21  00CB               	movwf	(LEDTimer_DispRunLimitCmd@NewState)
  8599                           	line	182
  8600                           	
  8601  0A22                     l16681:	
  8602                           ;ms83fxx02_led_timer.c: 182: if(NewState != DISABLE)
  8603  0A22  084B               	movf	(LEDTimer_DispRunLimitCmd@NewState),w
  8604  0A23  1D03               	skipz
  8605  0A24  2A26               	goto	u3630
  8606  0A25  2A2A               	goto	l7721
  8607  0A26                     u3630:
  8608                           	line	184
  8609                           	
  8610  0A26                     l16683:	
  8611                           ;ms83fxx02_led_timer.c: 183: {
  8612                           ;ms83fxx02_led_timer.c: 184: run_limit_display_en = 1;
  8613  0A26  01C3               	clrf	(_run_limit_display_en)	;volatile
  8614  0A27  1403               	bsf	status,0
  8615  0A28  0DC3               	rlf	(_run_limit_display_en),f	;volatile
  8616                           	line	185
  8617                           ;ms83fxx02_led_timer.c: 185: }
  8618  0A29  2A2C               	goto	l7723
  8619                           	line	186
  8620                           	
  8621  0A2A                     l7721:	
  8622                           	line	188
  8623                           ;ms83fxx02_led_timer.c: 186: else
  8624                           ;ms83fxx02_led_timer.c: 187: {
  8625                           ;ms83fxx02_led_timer.c: 188: run_limit_display_en = 0;
  8626  0A2A  01C3               	clrf	(_run_limit_display_en)	;volatile
  8627  0A2B  2A2C               	goto	l7723
  8628                           	line	189
  8629                           	
  8630  0A2C                     l7722:	
  8631                           	line	205
  8632                           	
  8633  0A2C                     l7723:	
  8634  0A2C  0008               	return
  8635                           	opt stack 0
  8636                           GLOBAL	__end_of_LEDTimer_DispRunLimitCmd
  8637  0A2D                     	__end_of_LEDTimer_DispRunLimitCmd:
  8638 ;; =============== function _LEDTimer_DispRunLimitCmd ends ============
  8639                           
  8640                           	signat	_LEDTimer_DispRunLimitCmd,4216
  8641                           	global	_Motor_SetStatus
  8642                           psect	text1822,local,class=CODE,delta=2
  8643                           global __ptext1822
  8644  09CD                     __ptext1822:
  8645                           
  8646 ;; *************** function _Motor_SetStatus *****************
  8647 ;; Defined at:
  8648 ;;		line 123 in file "ms83fxx02_motor.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  status          1    wreg     enum E1552
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  status          1    5[BANK0 ] enum E1552
  8653 ;; Return value:  Size  Location     Type
  8654 ;;		None               void
  8655 ;; Registers used:
  8656 ;;		wreg
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8662 ;;      Params:         0       0       0       0
  8663 ;;      Locals:         0       1       0       0
  8664 ;;      Temps:          0       1       0       0
  8665 ;;      Totals:         0       2       0       0
  8666 ;;Total ram usage:        2 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    4
  8669 ;; This function calls:
  8670 ;;		Nothing
  8671 ;; This function is called by:
  8672 ;;		_main
  8673 ;;		_Motor_HandleStatusChangeEvt
  8674 ;;		_Battery_Detect
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           psect	text1822
  8678                           	file	"ms83fxx02_motor.c"
  8679                           	line	123
  8680                           	global	__size_of_Motor_SetStatus
  8681  0008                     	__size_of_Motor_SetStatus	equ	__end_of_Motor_SetStatus-_Motor_SetStatus
  8682                           	
  8683  09CD                     _Motor_SetStatus:	
  8684                           	opt	stack 1
  8685                           ; Regs used in _Motor_SetStatus: [wreg]
  8686                           ;Motor_SetStatus@status stored from wreg
  8687  09CD  1283               	bcf	status, 5	;RP0=0, select bank0
  8688  09CE  1303               	bcf	status, 6	;RP1=0, select bank0
  8689  09CF  00CC               	movwf	(Motor_SetStatus@status)
  8690                           	line	124
  8691                           	
  8692  09D0                     l16679:	
  8693                           ;ms83fxx02_motor.c: 124: motor_status = status;
  8694  09D0  084C               	movf	(Motor_SetStatus@status),w
  8695  09D1  00CB               	movwf	(??_Motor_SetStatus+0)+0
  8696  09D2  084B               	movf	(??_Motor_SetStatus+0)+0,w
  8697  09D3  00FC               	movwf	(_motor_status)	;volatile
  8698                           	line	125
  8699                           	
  8700  09D4                     l8838:	
  8701  09D4  0008               	return
  8702                           	opt stack 0
  8703                           GLOBAL	__end_of_Motor_SetStatus
  8704  09D5                     	__end_of_Motor_SetStatus:
  8705 ;; =============== function _Motor_SetStatus ends ============
  8706                           
  8707                           	signat	_Motor_SetStatus,4216
  8708                           	global	_Motor_GetStatus
  8709                           psect	text1823,local,class=CODE,delta=2
  8710                           global __ptext1823
  8711  09B3                     __ptext1823:
  8712                           
  8713 ;; *************** function _Motor_GetStatus *****************
  8714 ;; Defined at:
  8715 ;;		line 133 in file "ms83fxx02_motor.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      enum E1552
  8722 ;; Registers used:
  8723 ;;		wreg
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8729 ;;      Params:         0       0       0       0
  8730 ;;      Locals:         0       0       0       0
  8731 ;;      Temps:          0       0       0       0
  8732 ;;      Totals:         0       0       0       0
  8733 ;;Total ram usage:        0 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    4
  8736 ;; This function calls:
  8737 ;;		Nothing
  8738 ;; This function is called by:
  8739 ;;		_main
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           psect	text1823
  8743                           	file	"ms83fxx02_motor.c"
  8744                           	line	133
  8745                           	global	__size_of_Motor_GetStatus
  8746  0003                     	__size_of_Motor_GetStatus	equ	__end_of_Motor_GetStatus-_Motor_GetStatus
  8747                           	
  8748  09B3                     _Motor_GetStatus:	
  8749                           	opt	stack 3
  8750                           ; Regs used in _Motor_GetStatus: [wreg]
  8751                           	line	134
  8752                           	
  8753  09B3                     l16675:	
  8754                           ;ms83fxx02_motor.c: 134: return motor_status;
  8755  09B3  087C               	movf	(_motor_status),w	;volatile
  8756  09B4  29B5               	goto	l8841
  8757                           	
  8758  09B5                     l16677:	
  8759                           	line	135
  8760                           	
  8761  09B5                     l8841:	
  8762  09B5  0008               	return
  8763                           	opt stack 0
  8764                           GLOBAL	__end_of_Motor_GetStatus
  8765  09B6                     	__end_of_Motor_GetStatus:
  8766 ;; =============== function _Motor_GetStatus ends ============
  8767                           
  8768                           	signat	_Motor_GetStatus,89
  8769                           	global	_GPIO_WriteBit
  8770                           psect	text1824,local,class=CODE,delta=2
  8771                           global __ptext1824
  8772  0D7C                     __ptext1824:
  8773                           
  8774 ;; *************** function _GPIO_WriteBit *****************
  8775 ;; Defined at:
  8776 ;;		line 68 in file "ms83fxx02_gpio.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  GPIOx           1    wreg     enum E1491
  8779 ;;  GPIO_Pin        1    4[BANK0 ] unsigned char 
  8780 ;;  BitVal          1    5[BANK0 ] enum E1499
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;  GPIOx           1    7[BANK0 ] enum E1491
  8783 ;; Return value:  Size  Location     Type
  8784 ;;		None               void
  8785 ;; Registers used:
  8786 ;;		wreg, status,2, status,0
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8792 ;;      Params:         0       2       0       0
  8793 ;;      Locals:         0       1       0       0
  8794 ;;      Temps:          0       1       0       0
  8795 ;;      Totals:         0       4       0       0
  8796 ;;Total ram usage:        4 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    4
  8799 ;; This function calls:
  8800 ;;		Nothing
  8801 ;; This function is called by:
  8802 ;;		_charge_control
  8803 ;;		_ChargeCtrl_Init
  8804 ;;		_ChargeCtrl_Output
  8805 ;;		_LED_Init
  8806 ;;		_LED_DisplayMotorStatus
  8807 ;;		_LED_VoltageChargeOutput
  8808 ;;		_LED_UnderVoltageOutput
  8809 ;;		_Motor_Stop
  8810 ;;		_Motor_HandleStatusChangeEvt
  8811 ;;		_Battery_Detect
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           psect	text1824
  8815                           	file	"ms83fxx02_gpio.c"
  8816                           	line	68
  8817                           	global	__size_of_GPIO_WriteBit
  8818  0027                     	__size_of_GPIO_WriteBit	equ	__end_of_GPIO_WriteBit-_GPIO_WriteBit
  8819                           	
  8820  0D7C                     _GPIO_WriteBit:	
  8821                           	opt	stack 2
  8822                           ; Regs used in _GPIO_WriteBit: [wreg+status,2+status,0]
  8823                           ;GPIO_WriteBit@GPIOx stored from wreg
  8824  0D7C  1283               	bcf	status, 5	;RP0=0, select bank0
  8825  0D7D  1303               	bcf	status, 6	;RP1=0, select bank0
  8826  0D7E  00CE               	movwf	(GPIO_WriteBit@GPIOx)
  8827                           	line	69
  8828                           	
  8829  0D7F                     l16661:	
  8830                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
  8831  0D7F  08CE               	movf	(GPIO_WriteBit@GPIOx),f
  8832  0D80  1D03               	skipz
  8833  0D81  2D83               	goto	u3601
  8834  0D82  2D84               	goto	u3600
  8835  0D83                     u3601:
  8836  0D83  2D93               	goto	l16669
  8837  0D84                     u3600:
  8838                           	line	71
  8839                           	
  8840  0D84                     l16663:	
  8841                           ;ms83fxx02_gpio.c: 70: {
  8842                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
  8843  0D84  084C               	movf	(GPIO_WriteBit@BitVal),w
  8844  0D85  1D03               	skipz
  8845  0D86  2D88               	goto	u3610
  8846  0D87  2D8D               	goto	l16667
  8847  0D88                     u3610:
  8848                           	line	73
  8849                           	
  8850  0D88                     l16665:	
  8851                           ;ms83fxx02_gpio.c: 72: {
  8852                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
  8853  0D88  084B               	movf	(GPIO_WriteBit@GPIO_Pin),w
  8854  0D89  00CD               	movwf	(??_GPIO_WriteBit+0)+0
  8855  0D8A  084D               	movf	(??_GPIO_WriteBit+0)+0,w
  8856  0D8B  0485               	iorwf	(5),f	;volatile
  8857                           	line	74
  8858                           ;ms83fxx02_gpio.c: 74: }
  8859  0D8C  2DA2               	goto	l4421
  8860                           	line	75
  8861                           	
  8862  0D8D                     l4416:	
  8863                           	line	77
  8864                           	
  8865  0D8D                     l16667:	
  8866                           ;ms83fxx02_gpio.c: 75: else
  8867                           ;ms83fxx02_gpio.c: 76: {
  8868                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
  8869  0D8D  094B               	comf	(GPIO_WriteBit@GPIO_Pin),w
  8870  0D8E  00CD               	movwf	(??_GPIO_WriteBit+0)+0
  8871  0D8F  084D               	movf	(??_GPIO_WriteBit+0)+0,w
  8872  0D90  0585               	andwf	(5),f	;volatile
  8873  0D91  2DA2               	goto	l4421
  8874                           	line	78
  8875                           	
  8876  0D92                     l4417:	
  8877                           	line	79
  8878                           ;ms83fxx02_gpio.c: 78: }
  8879                           ;ms83fxx02_gpio.c: 79: }
  8880  0D92  2DA2               	goto	l4421
  8881                           	line	80
  8882                           	
  8883  0D93                     l4415:	
  8884                           	line	82
  8885                           	
  8886  0D93                     l16669:	
  8887                           ;ms83fxx02_gpio.c: 80: else
  8888                           ;ms83fxx02_gpio.c: 81: {
  8889                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
  8890  0D93  084C               	movf	(GPIO_WriteBit@BitVal),w
  8891  0D94  1D03               	skipz
  8892  0D95  2D97               	goto	u3620
  8893  0D96  2D9C               	goto	l16673
  8894  0D97                     u3620:
  8895                           	line	84
  8896                           	
  8897  0D97                     l16671:	
  8898                           ;ms83fxx02_gpio.c: 83: {
  8899                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
  8900  0D97  084B               	movf	(GPIO_WriteBit@GPIO_Pin),w
  8901  0D98  00CD               	movwf	(??_GPIO_WriteBit+0)+0
  8902  0D99  084D               	movf	(??_GPIO_WriteBit+0)+0,w
  8903  0D9A  0487               	iorwf	(7),f	;volatile
  8904                           	line	85
  8905                           ;ms83fxx02_gpio.c: 85: }
  8906  0D9B  2DA2               	goto	l4421
  8907                           	line	86
  8908                           	
  8909  0D9C                     l4419:	
  8910                           	line	88
  8911                           	
  8912  0D9C                     l16673:	
  8913                           ;ms83fxx02_gpio.c: 86: else
  8914                           ;ms83fxx02_gpio.c: 87: {
  8915                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
  8916  0D9C  094B               	comf	(GPIO_WriteBit@GPIO_Pin),w
  8917  0D9D  00CD               	movwf	(??_GPIO_WriteBit+0)+0
  8918  0D9E  084D               	movf	(??_GPIO_WriteBit+0)+0,w
  8919  0D9F  0587               	andwf	(7),f	;volatile
  8920  0DA0  2DA2               	goto	l4421
  8921                           	line	89
  8922                           	
  8923  0DA1                     l4420:	
  8924  0DA1  2DA2               	goto	l4421
  8925                           	line	90
  8926                           	
  8927  0DA2                     l4418:	
  8928                           	line	91
  8929                           	
  8930  0DA2                     l4421:	
  8931  0DA2  0008               	return
  8932                           	opt stack 0
  8933                           GLOBAL	__end_of_GPIO_WriteBit
  8934  0DA3                     	__end_of_GPIO_WriteBit:
  8935 ;; =============== function _GPIO_WriteBit ends ============
  8936                           
  8937                           	signat	_GPIO_WriteBit,12408
  8938                           	global	_ChargeTimer_GetCount
  8939                           psect	text1825,local,class=CODE,delta=2
  8940                           global __ptext1825
  8941  09E5                     __ptext1825:
  8942                           
  8943 ;; *************** function _ChargeTimer_GetCount *****************
  8944 ;; Defined at:
  8945 ;;		line 113 in file "ms83fxx02_charge_timer.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  2    4[BANK0 ] unsigned int 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8959 ;;      Params:         0       2       0       0
  8960 ;;      Locals:         0       0       0       0
  8961 ;;      Temps:          0       0       0       0
  8962 ;;      Totals:         0       2       0       0
  8963 ;;Total ram usage:        2 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    4
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_charge_control
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           psect	text1825
  8973                           	file	"ms83fxx02_charge_timer.c"
  8974                           	line	113
  8975                           	global	__size_of_ChargeTimer_GetCount
  8976  000A                     	__size_of_ChargeTimer_GetCount	equ	__end_of_ChargeTimer_GetCount-_ChargeTimer_GetCount
  8977                           	
  8978  09E5                     _ChargeTimer_GetCount:	
  8979                           	opt	stack 2
  8980                           ; Regs used in _ChargeTimer_GetCount: [wreg+status,2+status,0]
  8981                           	line	114
  8982                           	
  8983  09E5                     l16657:	
  8984                           ;ms83fxx02_charge_timer.c: 114: return charge_time_out;
  8985  09E5  1283               	bcf	status, 5	;RP0=0, select bank0
  8986  09E6  1303               	bcf	status, 6	;RP1=0, select bank0
  8987  09E7  0835               	movf	(_charge_time_out+1),w	;volatile
  8988  09E8  01CC               	clrf	(?_ChargeTimer_GetCount+1)
  8989  09E9  07CC               	addwf	(?_ChargeTimer_GetCount+1)
  8990  09EA  0834               	movf	(_charge_time_out),w	;volatile
  8991  09EB  01CB               	clrf	(?_ChargeTimer_GetCount)
  8992  09EC  07CB               	addwf	(?_ChargeTimer_GetCount)
  8993                           
  8994  09ED  29EE               	goto	l12233
  8995                           	
  8996  09EE                     l16659:	
  8997                           	line	115
  8998                           	
  8999  09EE                     l12233:	
  9000  09EE  0008               	return
  9001                           	opt stack 0
  9002                           GLOBAL	__end_of_ChargeTimer_GetCount
  9003  09EF                     	__end_of_ChargeTimer_GetCount:
  9004 ;; =============== function _ChargeTimer_GetCount ends ============
  9005                           
  9006                           	signat	_ChargeTimer_GetCount,90
  9007                           	global	_LEDTimer_INTConfig
  9008                           psect	text1826,local,class=CODE,delta=2
  9009                           global __ptext1826
  9010  0ACD                     __ptext1826:
  9011                           
  9012 ;; *************** function _LEDTimer_INTConfig *****************
  9013 ;; Defined at:
  9014 ;;		line 119 in file "ms83fxx02_led_timer.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  NewState        1    wreg     enum E1482
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  NewState        1    4[BANK0 ] enum E1482
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9028 ;;      Params:         0       0       0       0
  9029 ;;      Locals:         0       1       0       0
  9030 ;;      Temps:          0       0       0       0
  9031 ;;      Totals:         0       1       0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    4
  9035 ;; This function calls:
  9036 ;;		Nothing
  9037 ;; This function is called by:
  9038 ;;		_Driver_Init
  9039 ;;		_main
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           psect	text1826
  9043                           	file	"ms83fxx02_led_timer.c"
  9044                           	line	119
  9045                           	global	__size_of_LEDTimer_INTConfig
  9046  0012                     	__size_of_LEDTimer_INTConfig	equ	__end_of_LEDTimer_INTConfig-_LEDTimer_INTConfig
  9047                           	
  9048  0ACD                     _LEDTimer_INTConfig:	
  9049                           	opt	stack 3
  9050                           ; Regs used in _LEDTimer_INTConfig: [wreg]
  9051                           ;LEDTimer_INTConfig@NewState stored from wreg
  9052  0ACD  1283               	bcf	status, 5	;RP0=0, select bank0
  9053  0ACE  1303               	bcf	status, 6	;RP1=0, select bank0
  9054  0ACF  00CB               	movwf	(LEDTimer_INTConfig@NewState)
  9055                           	line	120
  9056                           	
  9057  0AD0                     l16653:	
  9058                           ;ms83fxx02_led_timer.c: 120: if(NewState != DISABLE)
  9059  0AD0  084B               	movf	(LEDTimer_INTConfig@NewState),w
  9060  0AD1  1D03               	skipz
  9061  0AD2  2AD4               	goto	u3590
  9062  0AD3  2ADA               	goto	l7711
  9063  0AD4                     u3590:
  9064                           	line	123
  9065                           	
  9066  0AD4                     l16655:	
  9067                           ;ms83fxx02_led_timer.c: 121: {
  9068                           ;ms83fxx02_led_timer.c: 123: TMR3IE = 1;
  9069  0AD4  1283               	bcf	status, 5	;RP0=0, select bank2
  9070  0AD5  1703               	bsf	status, 6	;RP1=1, select bank2
  9071  0AD6  1490               	bsf	(2177/8)^0100h,(2177)&7
  9072                           	line	124
  9073                           ;ms83fxx02_led_timer.c: 124: PEIE = 1;
  9074  0AD7  170B               	bsf	(94/8),(94)&7
  9075                           	line	125
  9076                           ;ms83fxx02_led_timer.c: 125: GIE = 1;
  9077  0AD8  178B               	bsf	(95/8),(95)&7
  9078                           	line	126
  9079                           ;ms83fxx02_led_timer.c: 126: }
  9080  0AD9  2ADE               	goto	l7713
  9081                           	line	127
  9082                           	
  9083  0ADA                     l7711:	
  9084                           	line	130
  9085                           ;ms83fxx02_led_timer.c: 127: else
  9086                           ;ms83fxx02_led_timer.c: 128: {
  9087                           ;ms83fxx02_led_timer.c: 130: TMR3IE = 0;
  9088  0ADA  1283               	bcf	status, 5	;RP0=0, select bank2
  9089  0ADB  1703               	bsf	status, 6	;RP1=1, select bank2
  9090  0ADC  1090               	bcf	(2177/8)^0100h,(2177)&7
  9091  0ADD  2ADE               	goto	l7713
  9092                           	line	131
  9093                           	
  9094  0ADE                     l7712:	
  9095                           	line	132
  9096                           	
  9097  0ADE                     l7713:	
  9098  0ADE  0008               	return
  9099                           	opt stack 0
  9100                           GLOBAL	__end_of_LEDTimer_INTConfig
  9101  0ADF                     	__end_of_LEDTimer_INTConfig:
  9102 ;; =============== function _LEDTimer_INTConfig ends ============
  9103                           
  9104                           	signat	_LEDTimer_INTConfig,4216
  9105                           	global	_LEDTimer_Cmd
  9106                           psect	text1827,local,class=CODE,delta=2
  9107                           global __ptext1827
  9108  074B                     __ptext1827:
  9109                           
  9110 ;; *************** function _LEDTimer_Cmd *****************
  9111 ;; Defined at:
  9112 ;;		line 43 in file "ms83fxx02_led_timer.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  period_type     1    wreg     enum E1491
  9115 ;;  NewState        1    4[BANK0 ] enum E1482
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  period_type     1    6[BANK0 ] enum E1491
  9118 ;; Return value:  Size  Location     Type
  9119 ;;		None               void
  9120 ;; Registers used:
  9121 ;;		wreg, status,2, status,0
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9127 ;;      Params:         0       1       0       0
  9128 ;;      Locals:         0       1       0       0
  9129 ;;      Temps:          0       1       0       0
  9130 ;;      Totals:         0       3       0       0
  9131 ;;Total ram usage:        3 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    4
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_Driver_Init
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           psect	text1827
  9142                           	file	"ms83fxx02_led_timer.c"
  9143                           	line	43
  9144                           	global	__size_of_LEDTimer_Cmd
  9145  003D                     	__size_of_LEDTimer_Cmd	equ	__end_of_LEDTimer_Cmd-_LEDTimer_Cmd
  9146                           	
  9147  074B                     _LEDTimer_Cmd:	
  9148                           	opt	stack 3
  9149                           ; Regs used in _LEDTimer_Cmd: [wreg+status,2+status,0]
  9150                           ;LEDTimer_Cmd@period_type stored from wreg
  9151  074B  1283               	bcf	status, 5	;RP0=0, select bank0
  9152  074C  1303               	bcf	status, 6	;RP1=0, select bank0
  9153  074D  00CD               	movwf	(LEDTimer_Cmd@period_type)
  9154                           	line	44
  9155                           	
  9156  074E                     l16617:	
  9157                           ;ms83fxx02_led_timer.c: 44: if(NewState != DISABLE)
  9158  074E  084B               	movf	(LEDTimer_Cmd@NewState),w
  9159  074F  1D03               	skipz
  9160  0750  2F52               	goto	u3570
  9161  0751  2F83               	goto	l7704
  9162  0752                     u3570:
  9163                           	line	46
  9164                           	
  9165  0752                     l16619:	
  9166                           ;ms83fxx02_led_timer.c: 45: {
  9167                           ;ms83fxx02_led_timer.c: 46: if(period_type == TIM_PERIOD_0_33ms)
  9168  0752  084D               	movf	(LEDTimer_Cmd@period_type),w
  9169  0753  3A02               	xorlw	02h
  9170  0754  1D03               	skipz
  9171  0755  2F57               	goto	u3581
  9172  0756  2F58               	goto	u3580
  9173  0757                     u3581:
  9174  0757  2F6D               	goto	l16633
  9175  0758                     u3580:
  9176                           	line	48
  9177                           	
  9178  0758                     l16621:	
  9179                           ;ms83fxx02_led_timer.c: 47: {
  9180                           ;ms83fxx02_led_timer.c: 48: current_period_type = TIM_PERIOD_0_33ms;
  9181  0758  3002               	movlw	(02h)
  9182  0759  00CC               	movwf	(??_LEDTimer_Cmd+0)+0
  9183  075A  084C               	movf	(??_LEDTimer_Cmd+0)+0,w
  9184  075B  00E9               	movwf	(_current_period_type)	;volatile
  9185                           	line	54
  9186                           	
  9187  075C                     l16623:	
  9188                           ;ms83fxx02_led_timer.c: 54: TMR3ON = 0;
  9189  075C  1283               	bcf	status, 5	;RP0=0, select bank2
  9190  075D  1703               	bsf	status, 6	;RP1=1, select bank2
  9191  075E  1110               	bcf	(2178/8)^0100h,(2178)&7
  9192                           	line	57
  9193                           ;ms83fxx02_led_timer.c: 57: PWM3CR0 = 0b01100010;
  9194  075F  3062               	movlw	(062h)
  9195  0760  008F               	movwf	(271)^0100h	;volatile
  9196                           	line	60
  9197                           ;ms83fxx02_led_timer.c: 60: PWM3CR1 = 0b00111000;
  9198  0761  3038               	movlw	(038h)
  9199  0762  0090               	movwf	(272)^0100h	;volatile
  9200                           	line	63
  9201                           ;ms83fxx02_led_timer.c: 63: T3CKDIV = 19;
  9202  0763  3013               	movlw	(013h)
  9203  0764  0091               	movwf	(273)^0100h	;volatile
  9204                           	line	65
  9205                           ;ms83fxx02_led_timer.c: 65: TMR3H = 0x0F;
  9206  0765  300F               	movlw	(0Fh)
  9207  0766  008D               	movwf	(269)^0100h	;volatile
  9208                           	line	66
  9209                           	
  9210  0767                     l16625:	
  9211                           ;ms83fxx02_led_timer.c: 66: TMR3L = 0;
  9212  0767  018C               	clrf	(268)^0100h	;volatile
  9213                           	line	67
  9214                           	
  9215  0768                     l16627:	
  9216                           ;ms83fxx02_led_timer.c: 67: PR3L = 0xFF;
  9217  0768  30FF               	movlw	(0FFh)
  9218  0769  008E               	movwf	(270)^0100h	;volatile
  9219                           	line	70
  9220                           	
  9221  076A                     l16629:	
  9222                           ;ms83fxx02_led_timer.c: 70: TMR3IF = 0;
  9223  076A  1010               	bcf	(2176/8)^0100h,(2176)&7
  9224                           	line	73
  9225                           	
  9226  076B                     l16631:	
  9227                           ;ms83fxx02_led_timer.c: 73: TMR3ON = 1;
  9228  076B  1510               	bsf	(2178/8)^0100h,(2178)&7
  9229                           	line	74
  9230                           ;ms83fxx02_led_timer.c: 74: }
  9231  076C  2F87               	goto	l7708
  9232                           	line	75
  9233                           	
  9234  076D                     l7705:	
  9235                           	line	77
  9236                           	
  9237  076D                     l16633:	
  9238                           ;ms83fxx02_led_timer.c: 75: else
  9239                           ;ms83fxx02_led_timer.c: 76: {
  9240                           ;ms83fxx02_led_timer.c: 77: current_period_type = TIM_PERIOD_1s;
  9241  076D  1303               	bcf	status, 6	;RP1=0, select bank0
  9242  076E  01E9               	clrf	(_current_period_type)	;volatile
  9243  076F  1403               	bsf	status,0
  9244  0770  0DE9               	rlf	(_current_period_type),f	;volatile
  9245                           	line	83
  9246                           	
  9247  0771                     l16635:	
  9248                           ;ms83fxx02_led_timer.c: 83: TMR3ON = 0;
  9249  0771  1283               	bcf	status, 5	;RP0=0, select bank2
  9250  0772  1703               	bsf	status, 6	;RP1=1, select bank2
  9251  0773  1110               	bcf	(2178/8)^0100h,(2178)&7
  9252                           	line	86
  9253                           	
  9254  0774                     l16637:	
  9255                           ;ms83fxx02_led_timer.c: 86: PWM3CR0 = 0b01100010;
  9256  0774  3062               	movlw	(062h)
  9257  0775  008F               	movwf	(271)^0100h	;volatile
  9258                           	line	89
  9259                           	
  9260  0776                     l16639:	
  9261                           ;ms83fxx02_led_timer.c: 89: PWM3CR1 = 0b00111000;
  9262  0776  3038               	movlw	(038h)
  9263  0777  0090               	movwf	(272)^0100h	;volatile
  9264                           	line	92
  9265                           	
  9266  0778                     l16641:	
  9267                           ;ms83fxx02_led_timer.c: 92: T3CKDIV = 60;
  9268  0778  303C               	movlw	(03Ch)
  9269  0779  0091               	movwf	(273)^0100h	;volatile
  9270                           	line	94
  9271                           	
  9272  077A                     l16643:	
  9273                           ;ms83fxx02_led_timer.c: 94: TMR3H = 0x0F;
  9274  077A  300F               	movlw	(0Fh)
  9275  077B  008D               	movwf	(269)^0100h	;volatile
  9276                           	line	95
  9277                           	
  9278  077C                     l16645:	
  9279                           ;ms83fxx02_led_timer.c: 95: TMR3L = 0;
  9280  077C  018C               	clrf	(268)^0100h	;volatile
  9281                           	line	96
  9282                           	
  9283  077D                     l16647:	
  9284                           ;ms83fxx02_led_timer.c: 96: PR3L = 0xFF;
  9285  077D  30FF               	movlw	(0FFh)
  9286  077E  008E               	movwf	(270)^0100h	;volatile
  9287                           	line	99
  9288                           	
  9289  077F                     l16649:	
  9290                           ;ms83fxx02_led_timer.c: 99: TMR3IF = 0;
  9291  077F  1010               	bcf	(2176/8)^0100h,(2176)&7
  9292                           	line	102
  9293                           	
  9294  0780                     l16651:	
  9295                           ;ms83fxx02_led_timer.c: 102: TMR3ON = 1;
  9296  0780  1510               	bsf	(2178/8)^0100h,(2178)&7
  9297  0781  2F87               	goto	l7708
  9298                           	line	103
  9299                           	
  9300  0782                     l7706:	
  9301                           	line	104
  9302                           ;ms83fxx02_led_timer.c: 103: }
  9303                           ;ms83fxx02_led_timer.c: 104: }
  9304  0782  2F87               	goto	l7708
  9305                           	line	105
  9306                           	
  9307  0783                     l7704:	
  9308                           	line	108
  9309                           ;ms83fxx02_led_timer.c: 105: else
  9310                           ;ms83fxx02_led_timer.c: 106: {
  9311                           ;ms83fxx02_led_timer.c: 108: TMR3ON = 0;
  9312  0783  1283               	bcf	status, 5	;RP0=0, select bank2
  9313  0784  1703               	bsf	status, 6	;RP1=1, select bank2
  9314  0785  1110               	bcf	(2178/8)^0100h,(2178)&7
  9315  0786  2F87               	goto	l7708
  9316                           	line	109
  9317                           	
  9318  0787                     l7707:	
  9319                           	line	110
  9320                           	
  9321  0787                     l7708:	
  9322  0787  0008               	return
  9323                           	opt stack 0
  9324                           GLOBAL	__end_of_LEDTimer_Cmd
  9325  0788                     	__end_of_LEDTimer_Cmd:
  9326 ;; =============== function _LEDTimer_Cmd ends ============
  9327                           
  9328                           	signat	_LEDTimer_Cmd,8312
  9329                           	global	_ADC_Init
  9330                           psect	text1828,local,class=CODE,delta=2
  9331                           global __ptext1828
  9332  0C1F                     __ptext1828:
  9333                           
  9334 ;; *************** function _ADC_Init *****************
  9335 ;; Defined at:
  9336 ;;		line 77 in file "ms83fxx02_pwr.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  channel         1    wreg     unsigned char 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  channel         1    6[BANK0 ] unsigned char 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;		None               void
  9343 ;; Registers used:
  9344 ;;		wreg, status,2, status,0
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9350 ;;      Params:         0       0       0       0
  9351 ;;      Locals:         0       1       0       0
  9352 ;;      Temps:          0       2       0       0
  9353 ;;      Totals:         0       3       0       0
  9354 ;;Total ram usage:        3 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    4
  9357 ;; This function calls:
  9358 ;;		Nothing
  9359 ;; This function is called by:
  9360 ;;		_Driver_Init
  9361 ;;		_main
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           psect	text1828
  9365                           	file	"ms83fxx02_pwr.c"
  9366                           	line	77
  9367                           	global	__size_of_ADC_Init
  9368  001D                     	__size_of_ADC_Init	equ	__end_of_ADC_Init-_ADC_Init
  9369                           	
  9370  0C1F                     _ADC_Init:	
  9371                           	opt	stack 3
  9372                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  9373                           ;ADC_Init@channel stored from wreg
  9374                           	line	79
  9375  0C1F  1283               	bcf	status, 5	;RP0=0, select bank0
  9376  0C20  1303               	bcf	status, 6	;RP1=0, select bank0
  9377  0C21  00CD               	movwf	(ADC_Init@channel)
  9378                           	
  9379  0C22                     l16607:	
  9380                           ;ms83fxx02_pwr.c: 79: ANSEL |= (0x01 << channel);
  9381  0C22  3001               	movlw	(01h)
  9382  0C23  00CB               	movwf	(??_ADC_Init+0)+0
  9383  0C24  0A4D               	incf	(ADC_Init@channel),w
  9384  0C25  2C28               	goto	u3564
  9385  0C26                     u3565:
  9386  0C26  1003               	clrc
  9387  0C27  0DCB               	rlf	(??_ADC_Init+0)+0,f
  9388  0C28                     u3564:
  9389  0C28  3EFF               	addlw	-1
  9390  0C29  1D03               	skipz
  9391  0C2A  2C26               	goto	u3565
  9392  0C2B  084B               	movf	0+(??_ADC_Init+0)+0,w
  9393  0C2C  00CC               	movwf	(??_ADC_Init+1)+0
  9394  0C2D  084C               	movf	(??_ADC_Init+1)+0,w
  9395  0C2E  1683               	bsf	status, 5	;RP0=1, select bank1
  9396  0C2F  1303               	bcf	status, 6	;RP1=0, select bank1
  9397  0C30  0491               	iorwf	(145)^080h,f	;volatile
  9398                           	line	81
  9399                           	
  9400  0C31                     l16609:	
  9401                           ;ms83fxx02_pwr.c: 81: TRISC |= 0b00000100;
  9402  0C31  1507               	bsf	(135)^080h+(2/8),(2)&7	;volatile
  9403                           	line	84
  9404                           	
  9405  0C32                     l16611:	
  9406                           ;ms83fxx02_pwr.c: 84: ADCON1 = 0b01010000;
  9407  0C32  3050               	movlw	(050h)
  9408  0C33  009F               	movwf	(159)^080h	;volatile
  9409                           	line	87
  9410                           	
  9411  0C34                     l16613:	
  9412                           ;ms83fxx02_pwr.c: 87: ADCON0 = 0b10000000;
  9413  0C34  3080               	movlw	(080h)
  9414  0C35  1283               	bcf	status, 5	;RP0=0, select bank0
  9415  0C36  1303               	bcf	status, 6	;RP1=0, select bank0
  9416  0C37  009F               	movwf	(31)	;volatile
  9417                           	line	89
  9418                           	
  9419  0C38                     l16615:	
  9420                           ;ms83fxx02_pwr.c: 89: ADIE = 1;
  9421  0C38  1683               	bsf	status, 5	;RP0=1, select bank1
  9422  0C39  1303               	bcf	status, 6	;RP1=0, select bank1
  9423  0C3A  148D               	bsf	(1129/8)^080h,(1129)&7
  9424                           	line	90
  9425                           	
  9426  0C3B                     l10026:	
  9427  0C3B  0008               	return
  9428                           	opt stack 0
  9429                           GLOBAL	__end_of_ADC_Init
  9430  0C3C                     	__end_of_ADC_Init:
  9431 ;; =============== function _ADC_Init ends ============
  9432                           
  9433                           	signat	_ADC_Init,4216
  9434                           	global	_Board_Init
  9435                           psect	text1829,local,class=CODE,delta=2
  9436                           global __ptext1829
  9437  0C02                     __ptext1829:
  9438                           
  9439 ;; *************** function _Board_Init *****************
  9440 ;; Defined at:
  9441 ;;		line 34 in file "main.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;		None
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;		None               void
  9448 ;; Registers used:
  9449 ;;		wreg, status,2
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9455 ;;      Params:         0       0       0       0
  9456 ;;      Locals:         0       0       0       0
  9457 ;;      Temps:          0       0       0       0
  9458 ;;      Totals:         0       0       0       0
  9459 ;;Total ram usage:        0 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    4
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_main
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           psect	text1829
  9469                           	file	"main.c"
  9470                           	line	34
  9471                           	global	__size_of_Board_Init
  9472  001D                     	__size_of_Board_Init	equ	__end_of_Board_Init-_Board_Init
  9473                           	
  9474  0C02                     _Board_Init:	
  9475                           	opt	stack 3
  9476                           ; Regs used in _Board_Init: [wreg+status,2]
  9477                           	line	35
  9478                           	
  9479  0C02                     l16589:	
  9480                           ;main.c: 35: PCON = 0b00000011;
  9481  0C02  3003               	movlw	(03h)
  9482  0C03  1683               	bsf	status, 5	;RP0=1, select bank1
  9483  0C04  1303               	bcf	status, 6	;RP1=0, select bank1
  9484  0C05  008E               	movwf	(142)^080h	;volatile
  9485                           	line	36
  9486                           ;main.c: 36: MSCKCON = 0b00010000;
  9487  0C06  3010               	movlw	(010h)
  9488  0C07  1283               	bcf	status, 5	;RP0=0, select bank0
  9489  0C08  1303               	bcf	status, 6	;RP1=0, select bank0
  9490  0C09  009B               	movwf	(27)	;volatile
  9491                           	line	38
  9492                           ;main.c: 38: WDTCON = 0b00001110;
  9493  0C0A  300E               	movlw	(0Eh)
  9494  0C0B  0098               	movwf	(24)	;volatile
  9495                           	line	40
  9496                           ;main.c: 40: OSCCON = 0b01010000;
  9497  0C0C  3050               	movlw	(050h)
  9498  0C0D  1683               	bsf	status, 5	;RP0=1, select bank1
  9499  0C0E  1303               	bcf	status, 6	;RP1=0, select bank1
  9500  0C0F  008F               	movwf	(143)^080h	;volatile
  9501                           	line	41
  9502                           	
  9503  0C10                     l16591:	
  9504                           ;main.c: 41: INTCON = 0b00000000;
  9505  0C10  018B               	clrf	(11)	;volatile
  9506                           	line	42
  9507                           	
  9508  0C11                     l16593:	
  9509                           ;main.c: 42: PIE1 = 0b00000000;
  9510  0C11  018C               	clrf	(140)^080h	;volatile
  9511                           	line	43
  9512                           	
  9513  0C12                     l16595:	
  9514                           ;main.c: 43: PIE2 = 0b00000000;
  9515  0C12  018D               	clrf	(141)^080h	;volatile
  9516                           	line	44
  9517                           	
  9518  0C13                     l16597:	
  9519                           ;main.c: 44: PIR1 = 0b00000000;
  9520  0C13  1283               	bcf	status, 5	;RP0=0, select bank0
  9521  0C14  1303               	bcf	status, 6	;RP1=0, select bank0
  9522  0C15  018C               	clrf	(12)	;volatile
  9523                           	line	45
  9524                           	
  9525  0C16                     l16599:	
  9526                           ;main.c: 45: PIR2 = 0b00000000;
  9527  0C16  018D               	clrf	(13)	;volatile
  9528                           	line	46
  9529                           	
  9530  0C17                     l16601:	
  9531                           ;main.c: 46: WPD = 0b00000000;
  9532  0C17  1683               	bsf	status, 5	;RP0=1, select bank1
  9533  0C18  1303               	bcf	status, 6	;RP1=0, select bank1
  9534  0C19  0189               	clrf	(137)^080h	;volatile
  9535                           	line	47
  9536                           ;main.c: 47: ANSEL = 0b01000000;
  9537  0C1A  3040               	movlw	(040h)
  9538  0C1B  0091               	movwf	(145)^080h	;volatile
  9539                           	line	48
  9540                           	
  9541  0C1C                     l16603:	
  9542                           ;main.c: 48: TRISA = 0b00000000;
  9543  0C1C  0185               	clrf	(133)^080h	;volatile
  9544                           	line	49
  9545                           	
  9546  0C1D                     l16605:	
  9547                           ;main.c: 49: WPUA = 0b00000000;
  9548  0C1D  0195               	clrf	(149)^080h	;volatile
  9549                           	line	50
  9550                           	
  9551  0C1E                     l1133:	
  9552  0C1E  0008               	return
  9553                           	opt stack 0
  9554                           GLOBAL	__end_of_Board_Init
  9555  0C1F                     	__end_of_Board_Init:
  9556 ;; =============== function _Board_Init ends ============
  9557                           
  9558                           	signat	_Board_Init,88
  9559                           	global	_ISR
  9560                           psect	text1830,local,class=CODE,delta=2
  9561                           global __ptext1830
  9562  0F5C                     __ptext1830:
  9563                           
  9564 ;; *************** function _ISR *****************
  9565 ;; Defined at:
  9566 ;;		line 213 in file "main.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;		None
  9571 ;; Return value:  Size  Location     Type
  9572 ;;		None               void
  9573 ;; Registers used:
  9574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9580 ;;      Params:         0       0       0       0
  9581 ;;      Locals:         0       0       0       0
  9582 ;;      Temps:          0       4       0       0
  9583 ;;      Totals:         0       4       0       0
  9584 ;;Total ram usage:        4 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    3
  9587 ;; This function calls:
  9588 ;;		_KEY_IntrHandler
  9589 ;;		_DebounceTimer_IntrHandler
  9590 ;;		i1_GetDeviceMode
  9591 ;;		_SwitchModeTimer_IntrHandler
  9592 ;;		_LEDTimer_IntrHandler
  9593 ;;		_ChargeTimer_IntrHandler
  9594 ;;		_SleepLedTimer_IntrHandler
  9595 ;;		_MotorOperTimer_IntrHandler
  9596 ;;		_ChargeDetect_IntrHandler
  9597 ;;		_ADC_IntrHandler
  9598 ;; This function is called by:
  9599 ;;		Interrupt level 1
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           psect	text1830
  9603                           	file	"main.c"
  9604                           	line	213
  9605                           	global	__size_of_ISR
  9606  0032                     	__size_of_ISR	equ	__end_of_ISR-_ISR
  9607                           	
  9608  0F5C                     _ISR:	
  9609                           	opt	stack 0
  9610                           ; Regs used in _ISR: [allreg]
  9611                           psect	intentry,class=CODE,delta=2
  9612                           global __pintentry
  9613  0004                     __pintentry:
  9614                           global interrupt_function
  9615  0004                     interrupt_function:
  9616                           	global saved_w
  9617  007E                     	saved_w	set	btemp+0
  9618  0004  00FE               	movwf	saved_w
  9619  0005  0E03               	swapf	status,w
  9620  0006  1283               	bcf	status, 5	;RP0=0, select bank0
  9621  0007  1303               	bcf	status, 6	;RP1=0, select bank0
  9622  0008  00C7               	movwf	(??_ISR+0)
  9623  0009  0804               	movf	fsr0,w
  9624  000A  00C8               	movwf	(??_ISR+1)
  9625  000B  080A               	movf	pclath,w
  9626  000C  00C9               	movwf	(??_ISR+2)
  9627  000D  087F               	movf	btemp+1,w
  9628  000E  00CA               	movwf	(??_ISR+3)
  9629  000F  158A  2F5C         	ljmp	_ISR
  9630                           psect	text1830
  9631                           	line	214
  9632                           	
  9633  0F5C                     i1l16711:	
  9634                           ;main.c: 214: KEY_IntrHandler();
  9635  0F5C  158A  23E6  158A   	fcall	_KEY_IntrHandler
  9636                           	line	215
  9637                           	
  9638  0F5F                     i1l16713:	
  9639                           ;main.c: 215: DebounceTimer_IntrHandler();
  9640  0F5F  118A  270D  158A   	fcall	_DebounceTimer_IntrHandler
  9641                           	line	217
  9642                           	
  9643  0F62                     i1l16715:	
  9644                           ;main.c: 217: if(RUN_MODE == GetDeviceMode())
  9645  0F62  158A  21B6  158A   	fcall	i1_GetDeviceMode
  9646  0F65  3800               	iorlw	0
  9647  0F66  1D03               	skipz
  9648  0F67  2F69               	goto	u366_21
  9649  0F68  2F6A               	goto	u366_20
  9650  0F69                     u366_21:
  9651  0F69  2F71               	goto	i1l16721
  9652  0F6A                     u366_20:
  9653                           	line	219
  9654                           	
  9655  0F6A                     i1l16717:	
  9656                           ;main.c: 218: {
  9657                           ;main.c: 219: SwitchModeTimer_IntrHandler();
  9658  0F6A  158A  2355  158A   	fcall	_SwitchModeTimer_IntrHandler
  9659                           	line	220
  9660                           	
  9661  0F6D                     i1l16719:	
  9662                           ;main.c: 220: LEDTimer_IntrHandler();
  9663  0F6D  158A  272B  158A   	fcall	_LEDTimer_IntrHandler
  9664                           	line	221
  9665                           ;main.c: 221: }
  9666  0F70  2F78               	goto	i1l16725
  9667                           	line	222
  9668                           	
  9669  0F71                     i1l1167:	
  9670                           	line	224
  9671                           	
  9672  0F71                     i1l16721:	
  9673                           ;main.c: 222: else
  9674                           ;main.c: 223: {
  9675                           ;main.c: 224: ChargeTimer_IntrHandler();
  9676  0F71  158A  236B  158A   	fcall	_ChargeTimer_IntrHandler
  9677                           	line	225
  9678                           	
  9679  0F74                     i1l16723:	
  9680                           ;main.c: 225: SleepLedTimer_IntrHandler();
  9681  0F74  158A  22BB  158A   	fcall	_SleepLedTimer_IntrHandler
  9682  0F77  2F78               	goto	i1l16725
  9683                           	line	226
  9684                           	
  9685  0F78                     i1l1168:	
  9686                           	line	228
  9687                           	
  9688  0F78                     i1l16725:	
  9689                           ;main.c: 226: }
  9690                           ;main.c: 228: MotorOperTimer_IntrHandler();
  9691  0F78  118A  239E  158A   	fcall	_MotorOperTimer_IntrHandler
  9692                           	line	230
  9693                           ;main.c: 230: ChargeDetect_IntrHandler();
  9694  0F7B  158A  232B  158A   	fcall	_ChargeDetect_IntrHandler
  9695                           	line	232
  9696                           	
  9697  0F7E                     i1l16727:	
  9698                           ;main.c: 232: ADC_IntrHandler();
  9699  0F7E  158A  269E  158A   	fcall	_ADC_IntrHandler
  9700                           	line	233
  9701                           	
  9702  0F81                     i1l1169:	
  9703  0F81  1283               	bcf	status, 5	;RP0=0, select bank0
  9704  0F82  1303               	bcf	status, 6	;RP1=0, select bank0
  9705  0F83  084A               	movf	(??_ISR+3),w
  9706  0F84  00FF               	movwf	btemp+1
  9707  0F85  0849               	movf	(??_ISR+2),w
  9708  0F86  008A               	movwf	pclath
  9709  0F87  0848               	movf	(??_ISR+1),w
  9710  0F88  0084               	movwf	fsr0
  9711  0F89  0E47               	swapf	(??_ISR+0)^00h,w
  9712  0F8A  0083               	movwf	status
  9713  0F8B  0EFE               	swapf	saved_w,f
  9714  0F8C  0E7E               	swapf	saved_w,w
  9715  0F8D  0009               	retfie
  9716                           	opt stack 0
  9717                           GLOBAL	__end_of_ISR
  9718  0F8E                     	__end_of_ISR:
  9719 ;; =============== function _ISR ends ============
  9720                           
  9721                           	signat	_ISR,88
  9722                           	global	_MotorOperTimer_IntrHandler
  9723                           psect	text1831,local,class=CODE,delta=2
  9724                           global __ptext1831
  9725  039E                     __ptext1831:
  9726                           
  9727 ;; *************** function _MotorOperTimer_IntrHandler *****************
  9728 ;; Defined at:
  9729 ;;		line 325 in file "ms83fxx02_motor.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;		None
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0, pclath, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9743 ;;      Params:         0       0       0       0
  9744 ;;      Locals:         0       0       0       0
  9745 ;;      Temps:          2       0       0       0
  9746 ;;      Totals:         2       0       0       0
  9747 ;;Total ram usage:        2 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    2
  9750 ;; This function calls:
  9751 ;;		i1_Motor_CheckRunLimit
  9752 ;;		___awmod
  9753 ;;		i1_MotorOperationTimer_Init
  9754 ;;		i1_Motor_Stop
  9755 ;;		i1_MotorOperationTimer_Stop
  9756 ;;		i1_Motor_SetStatus
  9757 ;;		i1_Motor_Init
  9758 ;; This function is called by:
  9759 ;;		_ISR
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           psect	text1831
  9763                           	file	"ms83fxx02_motor.c"
  9764                           	line	325
  9765                           	global	__size_of_MotorOperTimer_IntrHandler
  9766  0071                     	__size_of_MotorOperTimer_IntrHandler	equ	__end_of_MotorOperTimer_IntrHandler-_MotorOper
                                 Timer_IntrHandler
  9767                           	
  9768  039E                     _MotorOperTimer_IntrHandler:	
  9769                           	opt	stack 0
  9770                           ; Regs used in _MotorOperTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
  9771                           	line	326
  9772                           	
  9773  039E                     i1l16807:	
  9774                           ;ms83fxx02_motor.c: 326: if(TMR4IE && TMR4IF)
  9775  039E  1283               	bcf	status, 5	;RP0=0, select bank2
  9776  039F  1703               	bsf	status, 6	;RP1=1, select bank2
  9777  03A0  1C96               	btfss	(2225/8)^0100h,(2225)&7
  9778  03A1  2BA3               	goto	u383_21
  9779  03A2  2BA4               	goto	u383_20
  9780  03A3                     u383_21:
  9781  03A3  2C0E               	goto	i1l8884
  9782  03A4                     u383_20:
  9783                           	
  9784  03A4                     i1l16809:	
  9785  03A4  1C16               	btfss	(2224/8)^0100h,(2224)&7
  9786  03A5  2BA7               	goto	u384_21
  9787  03A6  2BA8               	goto	u384_20
  9788  03A7                     u384_21:
  9789  03A7  2C0E               	goto	i1l8884
  9790  03A8                     u384_20:
  9791                           	line	328
  9792                           	
  9793  03A8                     i1l16811:	
  9794                           ;ms83fxx02_motor.c: 327: {
  9795                           ;ms83fxx02_motor.c: 328: if(!Motor_CheckRunLimit())
  9796  03A8  158A  2299  118A   	fcall	i1_Motor_CheckRunLimit
  9797  03AB  3800               	iorlw	0
  9798  03AC  1D03               	skipz
  9799  03AD  2BAF               	goto	u385_21
  9800  03AE  2BB0               	goto	u385_20
  9801  03AF                     u385_21:
  9802  03AF  2C01               	goto	i1l16839
  9803  03B0                     u385_20:
  9804                           	line	330
  9805                           	
  9806  03B0                     i1l16813:	
  9807                           ;ms83fxx02_motor.c: 329: {
  9808                           ;ms83fxx02_motor.c: 330: if(motor_timing_running_flag)
  9809  03B0  1283               	bcf	status, 5	;RP0=0, select bank0
  9810  03B1  1303               	bcf	status, 6	;RP1=0, select bank0
  9811  03B2  086A               	movf	(_motor_timing_running_flag),w
  9812  03B3  1D03               	skipz
  9813  03B4  2BB6               	goto	u386_20
  9814  03B5  2BD7               	goto	i1l16823
  9815  03B6                     u386_20:
  9816                           	line	332
  9817                           	
  9818  03B6                     i1l16815:	
  9819                           ;ms83fxx02_motor.c: 331: {
  9820                           ;ms83fxx02_motor.c: 332: motor_intr_count++;
  9821  03B6  3001               	movlw	(01h)
  9822  03B7  00F8               	movwf	(??_MotorOperTimer_IntrHandler+0)+0
  9823  03B8  0878               	movf	(??_MotorOperTimer_IntrHandler+0)+0,w
  9824  03B9  07FD               	addwf	(_motor_intr_count),f	;volatile
  9825                           	line	333
  9826                           	
  9827  03BA                     i1l16817:	
  9828                           ;ms83fxx02_motor.c: 333: if((motor_intr_count % 5) == 0)
  9829  03BA  3005               	movlw	low(05h)
  9830  03BB  00F0               	movwf	(?___awmod)
  9831  03BC  3000               	movlw	high(05h)
  9832  03BD  00F1               	movwf	((?___awmod))+1
  9833  03BE  087D               	movf	(_motor_intr_count),w	;volatile
  9834  03BF  00F8               	movwf	(??_MotorOperTimer_IntrHandler+0)+0
  9835  03C0  01F9               	clrf	(??_MotorOperTimer_IntrHandler+0)+0+1
  9836  03C1  0878               	movf	0+(??_MotorOperTimer_IntrHandler+0)+0,w
  9837  03C2  00F2               	movwf	0+(?___awmod)+02h
  9838  03C3  0879               	movf	1+(??_MotorOperTimer_IntrHandler+0)+0,w
  9839  03C4  00F3               	movwf	1+(?___awmod)+02h
  9840  03C5  118A  24EC  118A   	fcall	___awmod
  9841  03C8  0871               	movf	((1+(?___awmod))),w
  9842  03C9  0470               	iorwf	((0+(?___awmod))),w
  9843  03CA  1D03               	skipz
  9844  03CB  2BCD               	goto	u387_21
  9845  03CC  2BCE               	goto	u387_20
  9846  03CD                     u387_21:
  9847  03CD  2C0A               	goto	i1l16843
  9848  03CE                     u387_20:
  9849                           	line	335
  9850                           	
  9851  03CE                     i1l16819:	
  9852                           ;ms83fxx02_motor.c: 334: {
  9853                           ;ms83fxx02_motor.c: 335: motor_timing_running_flag = 0;
  9854  03CE  1283               	bcf	status, 5	;RP0=0, select bank0
  9855  03CF  1303               	bcf	status, 6	;RP1=0, select bank0
  9856  03D0  01EA               	clrf	(_motor_timing_running_flag)
  9857                           	line	336
  9858                           	
  9859  03D1                     i1l16821:	
  9860                           ;ms83fxx02_motor.c: 336: MotorOperationTimer_Init(MotorOperationTimer_0_3s);
  9861  03D1  3002               	movlw	(02h)
  9862  03D2  158A  26FB  118A   	fcall	i1_MotorOperationTimer_Init
  9863  03D5  2C0A               	goto	i1l16843
  9864                           	line	337
  9865                           	
  9866  03D6                     i1l8879:	
  9867                           	line	338
  9868                           ;ms83fxx02_motor.c: 337: }
  9869                           ;ms83fxx02_motor.c: 338: }
  9870  03D6  2C0A               	goto	i1l16843
  9871                           	line	339
  9872                           	
  9873  03D7                     i1l8878:	
  9874                           	line	341
  9875                           	
  9876  03D7                     i1l16823:	
  9877                           ;ms83fxx02_motor.c: 339: else
  9878                           ;ms83fxx02_motor.c: 340: {
  9879                           ;ms83fxx02_motor.c: 341: if(motor_intr_count >= 20)
  9880  03D7  3014               	movlw	(014h)
  9881  03D8  027D               	subwf	(_motor_intr_count),w	;volatile
  9882  03D9  1C03               	skipc
  9883  03DA  2BDC               	goto	u388_21
  9884  03DB  2BDD               	goto	u388_20
  9885  03DC                     u388_21:
  9886  03DC  2BF1               	goto	i1l16835
  9887  03DD                     u388_20:
  9888                           	line	343
  9889                           	
  9890  03DD                     i1l16825:	
  9891                           ;ms83fxx02_motor.c: 342: {
  9892                           ;ms83fxx02_motor.c: 343: motor_intr_count = 0;
  9893  03DD  01FD               	clrf	(_motor_intr_count)	;volatile
  9894                           	line	344
  9895                           	
  9896  03DE                     i1l16827:	
  9897                           ;ms83fxx02_motor.c: 344: motor_oper_record++;
  9898  03DE  3001               	movlw	low(01h)
  9899  03DF  1283               	bcf	status, 5	;RP0=0, select bank0
  9900  03E0  1303               	bcf	status, 6	;RP1=0, select bank0
  9901  03E1  07B6               	addwf	(_motor_oper_record),f	;volatile
  9902  03E2  1803               	skipnc
  9903  03E3  0AB7               	incf	(_motor_oper_record+1),f	;volatile
  9904  03E4  3000               	movlw	high(01h)
  9905  03E5  07B7               	addwf	(_motor_oper_record+1),f	;volatile
  9906                           	line	345
  9907                           	
  9908  03E6                     i1l16829:	
  9909                           ;ms83fxx02_motor.c: 345: Motor_Stop();
  9910  03E6  158A  2533  118A   	fcall	i1_Motor_Stop
  9911                           	line	346
  9912                           	
  9913  03E9                     i1l16831:	
  9914                           ;ms83fxx02_motor.c: 346: MotorOperationTimer_Stop();
  9915  03E9  158A  2303  118A   	fcall	i1_MotorOperationTimer_Stop
  9916                           	line	347
  9917                           	
  9918  03EC                     i1l16833:	
  9919                           ;ms83fxx02_motor.c: 347: Motor_SetStatus(MOTOR_MODE_STOP);
  9920  03EC  3001               	movlw	(01h)
  9921  03ED  158A  21C0  118A   	fcall	i1_Motor_SetStatus
  9922                           	line	348
  9923                           ;ms83fxx02_motor.c: 348: }
  9924  03F0  2BFA               	goto	i1l16837
  9925                           	line	349
  9926                           	
  9927  03F1                     i1l8881:	
  9928                           	line	351
  9929                           	
  9930  03F1                     i1l16835:	
  9931                           ;ms83fxx02_motor.c: 349: else
  9932                           ;ms83fxx02_motor.c: 350: {
  9933                           ;ms83fxx02_motor.c: 351: Motor_Init(motor_status);
  9934  03F1  087C               	movf	(_motor_status),w	;volatile
  9935  03F2  118A  25AD  118A   	fcall	i1_Motor_Init
  9936                           	line	352
  9937                           ;ms83fxx02_motor.c: 352: MotorOperationTimer_Init(MotorOperationTimer_30s);
  9938  03F5  3001               	movlw	(01h)
  9939  03F6  158A  26FB  118A   	fcall	i1_MotorOperationTimer_Init
  9940  03F9  2BFA               	goto	i1l16837
  9941                           	line	353
  9942                           	
  9943  03FA                     i1l8882:	
  9944                           	line	355
  9945                           	
  9946  03FA                     i1l16837:	
  9947                           ;ms83fxx02_motor.c: 353: }
  9948                           ;ms83fxx02_motor.c: 355: motor_timing_running_flag = 1;
  9949  03FA  1283               	bcf	status, 5	;RP0=0, select bank0
  9950  03FB  1303               	bcf	status, 6	;RP1=0, select bank0
  9951  03FC  01EA               	clrf	(_motor_timing_running_flag)
  9952  03FD  1403               	bsf	status,0
  9953  03FE  0DEA               	rlf	(_motor_timing_running_flag),f
  9954  03FF  2C0A               	goto	i1l16843
  9955                           	line	356
  9956                           	
  9957  0400                     i1l8880:	
  9958                           	line	357
  9959                           ;ms83fxx02_motor.c: 356: }
  9960                           ;ms83fxx02_motor.c: 357: }
  9961  0400  2C0A               	goto	i1l16843
  9962                           	line	358
  9963                           	
  9964  0401                     i1l8877:	
  9965                           	line	360
  9966                           	
  9967  0401                     i1l16839:	
  9968                           ;ms83fxx02_motor.c: 358: else
  9969                           ;ms83fxx02_motor.c: 359: {
  9970                           ;ms83fxx02_motor.c: 360: key_press_time_count = 1;
  9971  0401  1283               	bcf	status, 5	;RP0=0, select bank0
  9972  0402  1303               	bcf	status, 6	;RP1=0, select bank0
  9973  0403  01C1               	clrf	(_key_press_time_count)	;volatile
  9974  0404  1403               	bsf	status,0
  9975  0405  0DC1               	rlf	(_key_press_time_count),f	;volatile
  9976                           	line	361
  9977                           	
  9978  0406                     i1l16841:	
  9979                           ;ms83fxx02_motor.c: 361: MotorOperationTimer_Stop();
  9980  0406  158A  2303  118A   	fcall	i1_MotorOperationTimer_Stop
  9981  0409  2C0A               	goto	i1l16843
  9982                           	line	362
  9983                           	
  9984  040A                     i1l8883:	
  9985                           	line	363
  9986                           	
  9987  040A                     i1l16843:	
  9988                           ;ms83fxx02_motor.c: 362: }
  9989                           ;ms83fxx02_motor.c: 363: TMR4IF = 0;
  9990  040A  1283               	bcf	status, 5	;RP0=0, select bank2
  9991  040B  1703               	bsf	status, 6	;RP1=1, select bank2
  9992  040C  1016               	bcf	(2224/8)^0100h,(2224)&7
  9993  040D  2C0E               	goto	i1l8884
  9994                           	line	364
  9995                           	
  9996  040E                     i1l8876:	
  9997                           	line	365
  9998                           	
  9999  040E                     i1l8884:	
 10000  040E  0008               	return
 10001                           	opt stack 0
 10002                           GLOBAL	__end_of_MotorOperTimer_IntrHandler
 10003  040F                     	__end_of_MotorOperTimer_IntrHandler:
 10004 ;; =============== function _MotorOperTimer_IntrHandler ends ============
 10005                           
 10006                           	signat	_MotorOperTimer_IntrHandler,88
 10007                           	global	_LEDTimer_IntrHandler
 10008                           psect	text1832,local,class=CODE,delta=2
 10009                           global __ptext1832
 10010  0F2B                     __ptext1832:
 10011                           
 10012 ;; *************** function _LEDTimer_IntrHandler *****************
 10013 ;; Defined at:
 10014 ;;		line 233 in file "ms83fxx02_led_timer.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;		None
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;		None               void
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0, pclath, cstack
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10028 ;;      Params:         0       0       0       0
 10029 ;;      Locals:         0       0       0       0
 10030 ;;      Temps:          1       0       0       0
 10031 ;;      Totals:         1       0       0       0
 10032 ;;Total ram usage:        1 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:    2
 10035 ;; This function calls:
 10036 ;;		i1_GPIO_ReadInputDataBit
 10037 ;;		i1_LED_UnderVoltageOutput
 10038 ;;		_LED_DisplayRunLimit
 10039 ;;		_ADC_Enable
 10040 ;; This function is called by:
 10041 ;;		_ISR
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           psect	text1832
 10045                           	file	"ms83fxx02_led_timer.c"
 10046                           	line	233
 10047                           	global	__size_of_LEDTimer_IntrHandler
 10048  0031                     	__size_of_LEDTimer_IntrHandler	equ	__end_of_LEDTimer_IntrHandler-_LEDTimer_IntrHandler
 10049                           	
 10050  0F2B                     _LEDTimer_IntrHandler:	
 10051                           	opt	stack 0
 10052                           ; Regs used in _LEDTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
 10053                           	line	234
 10054                           	
 10055  0F2B                     i1l16777:	
 10056                           ;ms83fxx02_led_timer.c: 234: if(TMR3IE && TMR3IF)
 10057  0F2B  1283               	bcf	status, 5	;RP0=0, select bank2
 10058  0F2C  1703               	bsf	status, 6	;RP1=1, select bank2
 10059  0F2D  1C90               	btfss	(2177/8)^0100h,(2177)&7
 10060  0F2E  2F30               	goto	u375_21
 10061  0F2F  2F31               	goto	u375_20
 10062  0F30                     u375_21:
 10063  0F30  2F5B               	goto	i1l7729
 10064  0F31                     u375_20:
 10065                           	
 10066  0F31                     i1l16779:	
 10067  0F31  1C10               	btfss	(2176/8)^0100h,(2176)&7
 10068  0F32  2F34               	goto	u376_21
 10069  0F33  2F35               	goto	u376_20
 10070  0F34                     u376_21:
 10071  0F34  2F5B               	goto	i1l7729
 10072  0F35                     u376_20:
 10073                           	line	238
 10074                           	
 10075  0F35                     i1l16781:	
 10076                           ;ms83fxx02_led_timer.c: 235: {
 10077                           ;ms83fxx02_led_timer.c: 238: if(under_volt_display_En)
 10078  0F35  1283               	bcf	status, 5	;RP0=0, select bank0
 10079  0F36  1303               	bcf	status, 6	;RP1=0, select bank0
 10080  0F37  0846               	movf	(_under_volt_display_En),w	;volatile
 10081  0F38  1D03               	skipz
 10082  0F39  2F3B               	goto	u377_20
 10083  0F3A  2F4A               	goto	i1l16785
 10084  0F3B                     u377_20:
 10085                           	line	240
 10086                           	
 10087  0F3B                     i1l16783:	
 10088                           ;ms83fxx02_led_timer.c: 239: {
 10089                           ;ms83fxx02_led_timer.c: 240: LED_UnderVoltageOutput((BitAction)(1 - GPIO_ReadInputDataBi
                                 t(GPIOA, ((uint8_t)0x00000040))));
 10090  0F3B  3040               	movlw	(040h)
 10091  0F3C  00FA               	movwf	(??_LEDTimer_IntrHandler+0)+0
 10092  0F3D  087A               	movf	(??_LEDTimer_IntrHandler+0)+0,w
 10093  0F3E  00F0               	movwf	(?i1_GPIO_ReadInputDataBit)
 10094  0F3F  3000               	movlw	(0)
 10095  0F40  158A  2646  158A   	fcall	i1_GPIO_ReadInputDataBit
 10096  0F43  3AFF               	xorlw	0ffh
 10097  0F44  3E01               	addlw	1
 10098  0F45  3E01               	addlw	01h
 10099  0F46  158A  2211  158A   	fcall	i1_LED_UnderVoltageOutput
 10100  0F49  2F4A               	goto	i1l16785
 10101                           	line	241
 10102                           	
 10103  0F4A                     i1l7727:	
 10104                           	line	243
 10105                           	
 10106  0F4A                     i1l16785:	
 10107                           ;ms83fxx02_led_timer.c: 241: }
 10108                           ;ms83fxx02_led_timer.c: 243: if(run_limit_display_en)
 10109  0F4A  1283               	bcf	status, 5	;RP0=0, select bank0
 10110  0F4B  1303               	bcf	status, 6	;RP1=0, select bank0
 10111  0F4C  0843               	movf	(_run_limit_display_en),w	;volatile
 10112  0F4D  1D03               	skipz
 10113  0F4E  2F50               	goto	u378_20
 10114  0F4F  2F53               	goto	i1l7728
 10115  0F50                     u378_20:
 10116                           	line	245
 10117                           	
 10118  0F50                     i1l16787:	
 10119                           ;ms83fxx02_led_timer.c: 244: {
 10120                           ;ms83fxx02_led_timer.c: 245: LED_DisplayRunLimit();
 10121  0F50  118A  264C  158A   	fcall	_LED_DisplayRunLimit
 10122                           	line	246
 10123                           	
 10124  0F53                     i1l7728:	
 10125                           	line	248
 10126                           ;ms83fxx02_led_timer.c: 246: }
 10127                           ;ms83fxx02_led_timer.c: 248: ADC_Enable((0x06));
 10128  0F53  3006               	movlw	(06h)
 10129  0F54  158A  2382  158A   	fcall	_ADC_Enable
 10130                           	line	251
 10131                           	
 10132  0F57                     i1l16789:	
 10133                           ;ms83fxx02_led_timer.c: 251: TMR3IF = 0;
 10134  0F57  1283               	bcf	status, 5	;RP0=0, select bank2
 10135  0F58  1703               	bsf	status, 6	;RP1=1, select bank2
 10136  0F59  1010               	bcf	(2176/8)^0100h,(2176)&7
 10137  0F5A  2F5B               	goto	i1l7729
 10138                           	line	252
 10139                           	
 10140  0F5B                     i1l7726:	
 10141                           	line	253
 10142                           	
 10143  0F5B                     i1l7729:	
 10144  0F5B  0008               	return
 10145                           	opt stack 0
 10146                           GLOBAL	__end_of_LEDTimer_IntrHandler
 10147  0F5C                     	__end_of_LEDTimer_IntrHandler:
 10148 ;; =============== function _LEDTimer_IntrHandler ends ============
 10149                           
 10150                           	signat	_LEDTimer_IntrHandler,88
 10151                           	global	i1_MotorOperationTimer_Stop
 10152                           psect	text1833,local,class=CODE,delta=2
 10153                           global __ptext1833
 10154  0B03                     __ptext1833:
 10155                           
 10156 ;; *************** function i1_MotorOperationTimer_Stop *****************
 10157 ;; Defined at:
 10158 ;;		line 283 in file "ms83fxx02_motor.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;		None
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;		None
 10163 ;; Return value:  Size  Location     Type
 10164 ;;		None               void
 10165 ;; Registers used:
 10166 ;;		wreg, status,2, status,0, pclath, cstack
 10167 ;; Tracked objects:
 10168 ;;		On entry : 0/0
 10169 ;;		On exit  : 0/0
 10170 ;;		Unchanged: 0/0
 10171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10172 ;;      Params:         0       0       0       0
 10173 ;;      Locals:         0       0       0       0
 10174 ;;      Temps:          0       0       0       0
 10175 ;;      Totals:         0       0       0       0
 10176 ;;Total ram usage:        0 bytes
 10177 ;; Hardware stack levels used:    1
 10178 ;; Hardware stack levels required when called:    1
 10179 ;; This function calls:
 10180 ;;		i1_Motor_CheckRunLimit
 10181 ;; This function is called by:
 10182 ;;		_MotorOperTimer_IntrHandler
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           psect	text1833
 10186                           	file	"ms83fxx02_motor.c"
 10187                           	line	283
 10188                           	global	__size_ofi1_MotorOperationTimer_Stop
 10189  0014                     	__size_ofi1_MotorOperationTimer_Stop	equ	__end_ofi1_MotorOperationTimer_Stop-i1_MotorOp
                                 erationTimer_Stop
 10190                           	
 10191  0B03                     i1_MotorOperationTimer_Stop:	
 10192                           	opt	stack 0
 10193                           ; Regs used in i1_MotorOperationTimer_Stop: [wreg+status,2+status,0+pclath+cstack]
 10194                           	line	285
 10195                           	
 10196  0B03                     i1l17597:	
 10197                           ;ms83fxx02_motor.c: 285: TMR4ON = 0;
 10198  0B03  1283               	bcf	status, 5	;RP0=0, select bank2
 10199  0B04  1703               	bsf	status, 6	;RP1=1, select bank2
 10200  0B05  1116               	bcf	(2226/8)^0100h,(2226)&7
 10201                           	line	287
 10202                           ;ms83fxx02_motor.c: 287: TMR4IE = 0;
 10203  0B06  1096               	bcf	(2225/8)^0100h,(2225)&7
 10204                           	line	289
 10205                           	
 10206  0B07                     i1l17599:	
 10207                           ;ms83fxx02_motor.c: 289: if(!Motor_CheckRunLimit())
 10208  0B07  158A  2299  158A   	fcall	i1_Motor_CheckRunLimit
 10209  0B0A  3800               	iorlw	0
 10210  0B0B  1D03               	skipz
 10211  0B0C  2B0E               	goto	u521_21
 10212  0B0D  2B0F               	goto	u521_20
 10213  0B0E                     u521_21:
 10214  0B0E  2B16               	goto	i1l8868
 10215  0B0F                     u521_20:
 10216                           	line	292
 10217                           	
 10218  0B0F                     i1l17601:	
 10219                           ;ms83fxx02_motor.c: 290: {
 10220                           ;ms83fxx02_motor.c: 292: motor_timing_running_flag = 1;
 10221  0B0F  1283               	bcf	status, 5	;RP0=0, select bank0
 10222  0B10  1303               	bcf	status, 6	;RP1=0, select bank0
 10223  0B11  01EA               	clrf	(_motor_timing_running_flag)
 10224  0B12  1403               	bsf	status,0
 10225  0B13  0DEA               	rlf	(_motor_timing_running_flag),f
 10226                           	line	293
 10227                           	
 10228  0B14                     i1l17603:	
 10229                           ;ms83fxx02_motor.c: 293: motor_intr_count = 0;
 10230  0B14  01FD               	clrf	(_motor_intr_count)	;volatile
 10231  0B15  2B16               	goto	i1l8868
 10232                           	line	294
 10233                           	
 10234  0B16                     i1l8867:	
 10235                           	line	295
 10236                           	
 10237  0B16                     i1l8868:	
 10238  0B16  0008               	return
 10239                           	opt stack 0
 10240                           GLOBAL	__end_ofi1_MotorOperationTimer_Stop
 10241  0B17                     	__end_ofi1_MotorOperationTimer_Stop:
 10242 ;; =============== function i1_MotorOperationTimer_Stop ends ============
 10243                           
 10244                           	signat	i1_MotorOperationTimer_Stop,88
 10245                           	global	i1_Motor_Stop
 10246                           psect	text1834,local,class=CODE,delta=2
 10247                           global __ptext1834
 10248  0D33                     __ptext1834:
 10249                           
 10250 ;; *************** function i1_Motor_Stop *****************
 10251 ;; Defined at:
 10252 ;;		line 185 in file "ms83fxx02_motor.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, pclath, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10266 ;;      Params:         0       0       0       0
 10267 ;;      Locals:         0       0       0       0
 10268 ;;      Temps:          1       0       0       0
 10269 ;;      Totals:         1       0       0       0
 10270 ;;Total ram usage:        1 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    1
 10273 ;; This function calls:
 10274 ;;		i1_GPIO_WriteBit
 10275 ;; This function is called by:
 10276 ;;		_MotorOperTimer_IntrHandler
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           psect	text1834
 10280                           	file	"ms83fxx02_motor.c"
 10281                           	line	185
 10282                           	global	__size_ofi1_Motor_Stop
 10283  0024                     	__size_ofi1_Motor_Stop	equ	__end_ofi1_Motor_Stop-i1_Motor_Stop
 10284                           	
 10285  0D33                     i1_Motor_Stop:	
 10286                           	opt	stack 0
 10287                           ; Regs used in i1_Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
 10288                           	line	190
 10289                           	
 10290  0D33                     i1l17551:	
 10291                           ;ms83fxx02_motor.c: 190: TRISC |= (0x03 << 4);
 10292  0D33  3030               	movlw	(030h)
 10293  0D34  00F7               	movwf	(??i1_Motor_Stop+0)+0
 10294  0D35  0877               	movf	(??i1_Motor_Stop+0)+0,w
 10295  0D36  1683               	bsf	status, 5	;RP0=1, select bank1
 10296  0D37  1303               	bcf	status, 6	;RP1=0, select bank1
 10297  0D38  0487               	iorwf	(135)^080h,f	;volatile
 10298                           	line	192
 10299                           	
 10300  0D39                     i1l17553:	
 10301                           ;ms83fxx02_motor.c: 192: TMR2ON = 0;
 10302  0D39  1283               	bcf	status, 5	;RP0=0, select bank0
 10303  0D3A  1303               	bcf	status, 6	;RP1=0, select bank0
 10304  0D3B  1112               	bcf	(146/8),(146)&7
 10305                           	line	196
 10306                           	
 10307  0D3C                     i1l17555:	
 10308                           ;ms83fxx02_motor.c: 196: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), Bit_RESET);
 10309  0D3C  3004               	movlw	(04h)
 10310  0D3D  00F7               	movwf	(??i1_Motor_Stop+0)+0
 10311  0D3E  0877               	movf	(??i1_Motor_Stop+0)+0,w
 10312  0D3F  00F3               	movwf	(?i1_GPIO_WriteBit)
 10313  0D40  01F4               	clrf	0+(?i1_GPIO_WriteBit)+01h
 10314  0D41  3000               	movlw	(0)
 10315  0D42  158A  2671  158A   	fcall	i1_GPIO_WriteBit
 10316                           	line	197
 10317                           	
 10318  0D45                     i1l17557:	
 10319                           ;ms83fxx02_motor.c: 197: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), Bit_RESET);
 10320  0D45  3008               	movlw	(08h)
 10321  0D46  00F7               	movwf	(??i1_Motor_Stop+0)+0
 10322  0D47  0877               	movf	(??i1_Motor_Stop+0)+0,w
 10323  0D48  00F3               	movwf	(?i1_GPIO_WriteBit)
 10324  0D49  01F4               	clrf	0+(?i1_GPIO_WriteBit)+01h
 10325  0D4A  3000               	movlw	(0)
 10326  0D4B  158A  2671  158A   	fcall	i1_GPIO_WriteBit
 10327                           	line	198
 10328                           	
 10329  0D4E                     i1l17559:	
 10330                           ;ms83fxx02_motor.c: 198: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), Bit_RESET);
 10331  0D4E  01F3               	clrf	(?i1_GPIO_WriteBit)
 10332  0D4F  1403               	bsf	status,0
 10333  0D50  0DF3               	rlf	(?i1_GPIO_WriteBit),f
 10334  0D51  01F4               	clrf	0+(?i1_GPIO_WriteBit)+01h
 10335  0D52  3001               	movlw	(01h)
 10336  0D53  158A  2671  158A   	fcall	i1_GPIO_WriteBit
 10337                           	line	199
 10338                           	
 10339  0D56                     i1l8853:	
 10340  0D56  0008               	return
 10341                           	opt stack 0
 10342                           GLOBAL	__end_ofi1_Motor_Stop
 10343  0D57                     	__end_ofi1_Motor_Stop:
 10344 ;; =============== function i1_Motor_Stop ends ============
 10345                           
 10346                           	signat	i1_Motor_Stop,88
 10347                           	global	i1_LED_UnderVoltageOutput
 10348                           psect	text1835,local,class=CODE,delta=2
 10349                           global __ptext1835
 10350  0A11                     __ptext1835:
 10351                           
 10352 ;; *************** function i1_LED_UnderVoltageOutput *****************
 10353 ;; Defined at:
 10354 ;;		line 85 in file "ms83fxx02_led.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  LED_UnderVol    1    wreg     enum E1499
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  LED_UnderVol    1    9[COMMON] enum E1499
 10359 ;; Return value:  Size  Location     Type
 10360 ;;		None               void
 10361 ;; Registers used:
 10362 ;;		wreg, status,2, status,0, pclath, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10368 ;;      Params:         0       0       0       0
 10369 ;;      Locals:         1       0       0       0
 10370 ;;      Temps:          2       0       0       0
 10371 ;;      Totals:         3       0       0       0
 10372 ;;Total ram usage:        3 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    1
 10375 ;; This function calls:
 10376 ;;		i1_GPIO_WriteBit
 10377 ;; This function is called by:
 10378 ;;		_LEDTimer_IntrHandler
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           psect	text1835
 10382                           	file	"ms83fxx02_led.c"
 10383                           	line	85
 10384                           	global	__size_ofi1_LED_UnderVoltageOutput
 10385  000E                     	__size_ofi1_LED_UnderVoltageOutput	equ	__end_ofi1_LED_UnderVoltageOutput-i1_LED_UnderVo
                                 ltageOutput
 10386                           	
 10387  0A11                     i1_LED_UnderVoltageOutput:	
 10388                           	opt	stack 0
 10389                           ; Regs used in i1_LED_UnderVoltageOutput: [wreg+status,2+status,0+pclath+cstack]
 10390                           ;i1LED_UnderVoltageOutput@BitVal stored from wreg
 10391  0A11  00F9               	movwf	(i1LED_UnderVoltageOutput@BitVal)
 10392                           	line	86
 10393                           	
 10394  0A12                     i1l17517:	
 10395                           ;ms83fxx02_led.c: 86: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000040), BitVal);
 10396  0A12  3040               	movlw	(040h)
 10397  0A13  00F7               	movwf	(??i1_LED_UnderVoltageOutput+0)+0
 10398  0A14  0877               	movf	(??i1_LED_UnderVoltageOutput+0)+0,w
 10399  0A15  00F3               	movwf	(?i1_GPIO_WriteBit)
 10400  0A16  0879               	movf	(i1LED_UnderVoltageOutput@BitVal),w
 10401  0A17  00F8               	movwf	(??i1_LED_UnderVoltageOutput+1)+0
 10402  0A18  0878               	movf	(??i1_LED_UnderVoltageOutput+1)+0,w
 10403  0A19  00F4               	movwf	0+(?i1_GPIO_WriteBit)+01h
 10404  0A1A  3000               	movlw	(0)
 10405  0A1B  158A  2671  158A   	fcall	i1_GPIO_WriteBit
 10406                           	line	87
 10407                           	
 10408  0A1E                     i1l6625:	
 10409  0A1E  0008               	return
 10410                           	opt stack 0
 10411                           GLOBAL	__end_ofi1_LED_UnderVoltageOutput
 10412  0A1F                     	__end_ofi1_LED_UnderVoltageOutput:
 10413 ;; =============== function i1_LED_UnderVoltageOutput ends ============
 10414                           
 10415                           	signat	i1_LED_UnderVoltageOutput,88
 10416                           	global	_LED_DisplayRunLimit
 10417                           psect	text1836,local,class=CODE,delta=2
 10418                           global __ptext1836
 10419  064C                     __ptext1836:
 10420                           
 10421 ;; *************** function _LED_DisplayRunLimit *****************
 10422 ;; Defined at:
 10423 ;;		line 64 in file "ms83fxx02_led.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, status,2, status,0, pclath, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10437 ;;      Params:         0       0       0       0
 10438 ;;      Locals:         0       0       0       0
 10439 ;;      Temps:          3       0       0       0
 10440 ;;      Totals:         3       0       0       0
 10441 ;;Total ram usage:        3 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    1
 10444 ;; This function calls:
 10445 ;;		i1_GPIO_ReadInputDataBit
 10446 ;;		i1_GPIO_WriteBit
 10447 ;; This function is called by:
 10448 ;;		_LEDTimer_IntrHandler
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           psect	text1836
 10452                           	file	"ms83fxx02_led.c"
 10453                           	line	64
 10454                           	global	__size_of_LED_DisplayRunLimit
 10455  0041                     	__size_of_LED_DisplayRunLimit	equ	__end_of_LED_DisplayRunLimit-_LED_DisplayRunLimit
 10456                           	
 10457  064C                     _LED_DisplayRunLimit:	
 10458                           	opt	stack 0
 10459                           ; Regs used in _LED_DisplayRunLimit: [wreg+status,2+status,0+pclath+cstack]
 10460                           	line	65
 10461                           	
 10462  064C                     i1l16987:	
 10463                           ;ms83fxx02_led.c: 65: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000004), (BitAction)(1 - GPIO_R
                                 eadInputDataBit(GPIOA, ((uint8_t)0x00000004))));
 10464  064C  3004               	movlw	(04h)
 10465  064D  00F7               	movwf	(??_LED_DisplayRunLimit+0)+0
 10466  064E  0877               	movf	(??_LED_DisplayRunLimit+0)+0,w
 10467  064F  00F3               	movwf	(?i1_GPIO_WriteBit)
 10468  0650  3004               	movlw	(04h)
 10469  0651  00F8               	movwf	(??_LED_DisplayRunLimit+1)+0
 10470  0652  0878               	movf	(??_LED_DisplayRunLimit+1)+0,w
 10471  0653  00F0               	movwf	(?i1_GPIO_ReadInputDataBit)
 10472  0654  3000               	movlw	(0)
 10473  0655  158A  2646  118A   	fcall	i1_GPIO_ReadInputDataBit
 10474  0658  3AFF               	xorlw	0ffh
 10475  0659  3E01               	addlw	1
 10476  065A  3E01               	addlw	01h
 10477  065B  00F9               	movwf	(??_LED_DisplayRunLimit+2)+0
 10478  065C  0879               	movf	(??_LED_DisplayRunLimit+2)+0,w
 10479  065D  00F4               	movwf	0+(?i1_GPIO_WriteBit)+01h
 10480  065E  3000               	movlw	(0)
 10481  065F  158A  2671  118A   	fcall	i1_GPIO_WriteBit
 10482                           	line	66
 10483                           ;ms83fxx02_led.c: 66: GPIO_WriteBit(GPIOA, ((uint8_t)0x00000008), (BitAction)(1 - GPIO_R
                                 eadInputDataBit(GPIOA, ((uint8_t)0x00000008))));
 10484  0662  3008               	movlw	(08h)
 10485  0663  00F7               	movwf	(??_LED_DisplayRunLimit+0)+0
 10486  0664  0877               	movf	(??_LED_DisplayRunLimit+0)+0,w
 10487  0665  00F3               	movwf	(?i1_GPIO_WriteBit)
 10488  0666  3008               	movlw	(08h)
 10489  0667  00F8               	movwf	(??_LED_DisplayRunLimit+1)+0
 10490  0668  0878               	movf	(??_LED_DisplayRunLimit+1)+0,w
 10491  0669  00F0               	movwf	(?i1_GPIO_ReadInputDataBit)
 10492  066A  3000               	movlw	(0)
 10493  066B  158A  2646  118A   	fcall	i1_GPIO_ReadInputDataBit
 10494  066E  3AFF               	xorlw	0ffh
 10495  066F  3E01               	addlw	1
 10496  0670  3E01               	addlw	01h
 10497  0671  00F9               	movwf	(??_LED_DisplayRunLimit+2)+0
 10498  0672  0879               	movf	(??_LED_DisplayRunLimit+2)+0,w
 10499  0673  00F4               	movwf	0+(?i1_GPIO_WriteBit)+01h
 10500  0674  3000               	movlw	(0)
 10501  0675  158A  2671  118A   	fcall	i1_GPIO_WriteBit
 10502                           	line	67
 10503                           ;ms83fxx02_led.c: 67: GPIO_WriteBit(GPIOC, ((uint8_t)0x00000001), (BitAction)(1 - GPIO_R
                                 eadInputDataBit(GPIOC, ((uint8_t)0x00000001))));
 10504  0678  01F3               	clrf	(?i1_GPIO_WriteBit)
 10505  0679  1403               	bsf	status,0
 10506  067A  0DF3               	rlf	(?i1_GPIO_WriteBit),f
 10507  067B  01F0               	clrf	(?i1_GPIO_ReadInputDataBit)
 10508  067C  1403               	bsf	status,0
 10509  067D  0DF0               	rlf	(?i1_GPIO_ReadInputDataBit),f
 10510  067E  3001               	movlw	(01h)
 10511  067F  158A  2646  118A   	fcall	i1_GPIO_ReadInputDataBit
 10512  0682  3AFF               	xorlw	0ffh
 10513  0683  3E01               	addlw	1
 10514  0684  3E01               	addlw	01h
 10515  0685  00F7               	movwf	(??_LED_DisplayRunLimit+0)+0
 10516  0686  0877               	movf	(??_LED_DisplayRunLimit+0)+0,w
 10517  0687  00F4               	movwf	0+(?i1_GPIO_WriteBit)+01h
 10518  0688  3001               	movlw	(01h)
 10519  0689  158A  2671  118A   	fcall	i1_GPIO_WriteBit
 10520                           	line	68
 10521                           	
 10522  068C                     i1l6619:	
 10523  068C  0008               	return
 10524                           	opt stack 0
 10525                           GLOBAL	__end_of_LED_DisplayRunLimit
 10526  068D                     	__end_of_LED_DisplayRunLimit:
 10527 ;; =============== function _LED_DisplayRunLimit ends ============
 10528                           
 10529                           	signat	_LED_DisplayRunLimit,88
 10530                           	global	_ADC_IntrHandler
 10531                           psect	text1837,local,class=CODE,delta=2
 10532                           global __ptext1837
 10533  0E9E                     __ptext1837:
 10534                           
 10535 ;; *************** function _ADC_IntrHandler *****************
 10536 ;; Defined at:
 10537 ;;		line 159 in file "ms83fxx02_pwr.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;		None
 10542 ;; Return value:  Size  Location     Type
 10543 ;;		None               void
 10544 ;; Registers used:
 10545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10551 ;;      Params:         0       0       0       0
 10552 ;;      Locals:         0       0       0       0
 10553 ;;      Temps:          1       0       0       0
 10554 ;;      Totals:         1       0       0       0
 10555 ;;Total ram usage:        1 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    1
 10558 ;; This function calls:
 10559 ;;		_ADC_ReadData
 10560 ;; This function is called by:
 10561 ;;		_ISR
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           psect	text1837
 10565                           	file	"ms83fxx02_pwr.c"
 10566                           	line	159
 10567                           	global	__size_of_ADC_IntrHandler
 10568  002E                     	__size_of_ADC_IntrHandler	equ	__end_of_ADC_IntrHandler-_ADC_IntrHandler
 10569                           	
 10570  0E9E                     _ADC_IntrHandler:	
 10571                           	opt	stack 1
 10572                           ; Regs used in _ADC_IntrHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10573                           	line	160
 10574                           	
 10575  0E9E                     i1l16851:	
 10576                           ;ms83fxx02_pwr.c: 160: if(ADIE && ADIF)
 10577  0E9E  1683               	bsf	status, 5	;RP0=1, select bank1
 10578  0E9F  1303               	bcf	status, 6	;RP1=0, select bank1
 10579  0EA0  1C8D               	btfss	(1129/8)^080h,(1129)&7
 10580  0EA1  2EA3               	goto	u390_21
 10581  0EA2  2EA4               	goto	u390_20
 10582  0EA3                     u390_21:
 10583  0EA3  2ECB               	goto	i1l10037
 10584  0EA4                     u390_20:
 10585                           	
 10586  0EA4                     i1l16853:	
 10587  0EA4  1283               	bcf	status, 5	;RP0=0, select bank0
 10588  0EA5  1303               	bcf	status, 6	;RP1=0, select bank0
 10589  0EA6  1C8D               	btfss	(105/8),(105)&7
 10590  0EA7  2EA9               	goto	u391_21
 10591  0EA8  2EAA               	goto	u391_20
 10592  0EA9                     u391_21:
 10593  0EA9  2ECB               	goto	i1l10037
 10594  0EAA                     u391_20:
 10595                           	line	162
 10596                           	
 10597  0EAA                     i1l16855:	
 10598                           ;ms83fxx02_pwr.c: 161: {
 10599                           ;ms83fxx02_pwr.c: 162: battery_value[battery_sample_count++] = ADC_ReadData();
 10600  0EAA  158A  2557  158A   	fcall	_ADC_ReadData
 10601  0EAD  1283               	bcf	status, 5	;RP0=0, select bank0
 10602  0EAE  1303               	bcf	status, 6	;RP1=0, select bank0
 10603  0EAF  083B               	movf	(_battery_sample_count),w	;volatile
 10604  0EB0  00F8               	movwf	(??_ADC_IntrHandler+0)+0
 10605  0EB1  0778               	addwf	(??_ADC_IntrHandler+0)+0,w
 10606  0EB2  3E20               	addlw	_battery_value&0ffh
 10607  0EB3  0084               	movwf	fsr0
 10608  0EB4  0870               	movf	(0+(?_ADC_ReadData)),w
 10609  0EB5  1383               	bcf	status, 7	;select IRP bank0
 10610  0EB6  0080               	movwf	indf
 10611  0EB7  0A84               	incf	fsr0,f
 10612  0EB8  0871               	movf	(1+(?_ADC_ReadData)),w
 10613  0EB9  0080               	movwf	indf
 10614                           	
 10615  0EBA                     i1l16857:	
 10616  0EBA  3001               	movlw	(01h)
 10617  0EBB  00F8               	movwf	(??_ADC_IntrHandler+0)+0
 10618  0EBC  0878               	movf	(??_ADC_IntrHandler+0)+0,w
 10619  0EBD  07BB               	addwf	(_battery_sample_count),f	;volatile
 10620                           	line	164
 10621                           	
 10622  0EBE                     i1l16859:	
 10623                           ;ms83fxx02_pwr.c: 164: if(battery_sample_count >= 10)
 10624  0EBE  300A               	movlw	(0Ah)
 10625  0EBF  023B               	subwf	(_battery_sample_count),w	;volatile
 10626  0EC0  1C03               	skipc
 10627  0EC1  2EC3               	goto	u392_21
 10628  0EC2  2EC4               	goto	u392_20
 10629  0EC3                     u392_21:
 10630  0EC3  2EC9               	goto	i1l16865
 10631  0EC4                     u392_20:
 10632                           	line	166
 10633                           	
 10634  0EC4                     i1l16861:	
 10635                           ;ms83fxx02_pwr.c: 165: {
 10636                           ;ms83fxx02_pwr.c: 166: battery_sample_count = 0;
 10637  0EC4  01BB               	clrf	(_battery_sample_count)	;volatile
 10638                           	line	167
 10639                           	
 10640  0EC5                     i1l16863:	
 10641                           ;ms83fxx02_pwr.c: 167: battery_handle_flag = 1;
 10642  0EC5  01BA               	clrf	(_battery_handle_flag)	;volatile
 10643  0EC6  1403               	bsf	status,0
 10644  0EC7  0DBA               	rlf	(_battery_handle_flag),f	;volatile
 10645  0EC8  2EC9               	goto	i1l16865
 10646                           	line	168
 10647                           	
 10648  0EC9                     i1l10036:	
 10649                           	line	169
 10650                           	
 10651  0EC9                     i1l16865:	
 10652                           ;ms83fxx02_pwr.c: 168: }
 10653                           ;ms83fxx02_pwr.c: 169: ADIF = 0;
 10654  0EC9  108D               	bcf	(105/8),(105)&7
 10655  0ECA  2ECB               	goto	i1l10037
 10656                           	line	170
 10657                           	
 10658  0ECB                     i1l10035:	
 10659                           	line	171
 10660                           	
 10661  0ECB                     i1l10037:	
 10662  0ECB  0008               	return
 10663                           	opt stack 0
 10664                           GLOBAL	__end_of_ADC_IntrHandler
 10665  0ECC                     	__end_of_ADC_IntrHandler:
 10666 ;; =============== function _ADC_IntrHandler ends ============
 10667                           
 10668                           	signat	_ADC_IntrHandler,88
 10669                           	global	_ChargeDetect_IntrHandler
 10670                           psect	text1838,local,class=CODE,delta=2
 10671                           global __ptext1838
 10672  0B2B                     __ptext1838:
 10673                           
 10674 ;; *************** function _ChargeDetect_IntrHandler *****************
 10675 ;; Defined at:
 10676 ;;		line 80 in file "ms83fxx02_charge.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;		None
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;		None
 10681 ;; Return value:  Size  Location     Type
 10682 ;;		None               void
 10683 ;; Registers used:
 10684 ;;		wreg, status,2, status,0, pclath, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10690 ;;      Params:         0       0       0       0
 10691 ;;      Locals:         0       0       0       0
 10692 ;;      Temps:          1       0       0       0
 10693 ;;      Totals:         1       0       0       0
 10694 ;;Total ram usage:        1 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    1
 10697 ;; This function calls:
 10698 ;;		i1_GPIO_ReadInputDataBit
 10699 ;; This function is called by:
 10700 ;;		_ISR
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           psect	text1838
 10704                           	file	"ms83fxx02_charge.c"
 10705                           	line	80
 10706                           	global	__size_of_ChargeDetect_IntrHandler
 10707  0015                     	__size_of_ChargeDetect_IntrHandler	equ	__end_of_ChargeDetect_IntrHandler-_ChargeDetect_
                                 IntrHandler
 10708                           	
 10709  0B2B                     _ChargeDetect_IntrHandler:	
 10710                           	opt	stack 1
 10711                           ; Regs used in _ChargeDetect_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
 10712                           	line	81
 10713                           	
 10714  0B2B                     i1l16845:	
 10715                           ;ms83fxx02_charge.c: 81: if(PAIE & PAIF)
 10716  0B2B  3001               	movlw	1
 10717  0B2C  1D8B               	btfss	(91/8),(91)&7
 10718  0B2D  3900               	andlw	0
 10719  0B2E  1C0B               	btfss	(88/8),(88)&7
 10720  0B2F  3900               	andlw	0
 10721  0B30  3800               	iorlw	0
 10722  0B31  1903               	skipnz
 10723  0B32  2B34               	goto	u389_21
 10724  0B33  2B35               	goto	u389_20
 10725  0B34                     u389_21:
 10726  0B34  2B3F               	goto	i1l2265
 10727  0B35                     u389_20:
 10728                           	line	83
 10729                           	
 10730  0B35                     i1l16847:	
 10731                           ;ms83fxx02_charge.c: 82: {
 10732                           ;ms83fxx02_charge.c: 83: GPIO_ReadInputDataBit(GPIOA, ((uint8_t)0x00000010));
 10733  0B35  3010               	movlw	(010h)
 10734  0B36  00F3               	movwf	(??_ChargeDetect_IntrHandler+0)+0
 10735  0B37  0873               	movf	(??_ChargeDetect_IntrHandler+0)+0,w
 10736  0B38  00F0               	movwf	(?i1_GPIO_ReadInputDataBit)
 10737  0B39  3000               	movlw	(0)
 10738  0B3A  158A  2646  158A   	fcall	i1_GPIO_ReadInputDataBit
 10739                           	line	85
 10740                           	
 10741  0B3D                     i1l16849:	
 10742                           ;ms83fxx02_charge.c: 85: PAIF = 0;
 10743  0B3D  100B               	bcf	(88/8),(88)&7
 10744  0B3E  2B3F               	goto	i1l2265
 10745                           	line	86
 10746                           	
 10747  0B3F                     i1l2264:	
 10748                           	line	87
 10749                           	
 10750  0B3F                     i1l2265:	
 10751  0B3F  0008               	return
 10752                           	opt stack 0
 10753                           GLOBAL	__end_of_ChargeDetect_IntrHandler
 10754  0B40                     	__end_of_ChargeDetect_IntrHandler:
 10755 ;; =============== function _ChargeDetect_IntrHandler ends ============
 10756                           
 10757                           	signat	_ChargeDetect_IntrHandler,88
 10758                           	global	_SleepLedTimer_IntrHandler
 10759                           psect	text1839,local,class=CODE,delta=2
 10760                           global __ptext1839
 10761  0ABB                     __ptext1839:
 10762                           
 10763 ;; *************** function _SleepLedTimer_IntrHandler *****************
 10764 ;; Defined at:
 10765 ;;		line 213 in file "ms83fxx02_sleepled.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;		None
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;		None
 10770 ;; Return value:  Size  Location     Type
 10771 ;;		None               void
 10772 ;; Registers used:
 10773 ;;		wreg, status,2, status,0, pclath, cstack
 10774 ;; Tracked objects:
 10775 ;;		On entry : 0/0
 10776 ;;		On exit  : 0/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10779 ;;      Params:         0       0       0       0
 10780 ;;      Locals:         0       0       0       0
 10781 ;;      Temps:          0       0       0       0
 10782 ;;      Totals:         0       0       0       0
 10783 ;;Total ram usage:        0 bytes
 10784 ;; Hardware stack levels used:    1
 10785 ;; Hardware stack levels required when called:    1
 10786 ;; This function calls:
 10787 ;;		_SleepLed_ChangeDuty
 10788 ;; This function is called by:
 10789 ;;		_ISR
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           psect	text1839
 10793                           	file	"ms83fxx02_sleepled.c"
 10794                           	line	213
 10795                           	global	__size_of_SleepLedTimer_IntrHandler
 10796  0012                     	__size_of_SleepLedTimer_IntrHandler	equ	__end_of_SleepLedTimer_IntrHandler-_SleepLedTim
                                 er_IntrHandler
 10797                           	
 10798  0ABB                     _SleepLedTimer_IntrHandler:	
 10799                           	opt	stack 1
 10800                           ; Regs used in _SleepLedTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
 10801                           	line	214
 10802                           	
 10803  0ABB                     i1l16799:	
 10804                           ;ms83fxx02_sleepled.c: 214: if(TMR3IE && TMR3IF)
 10805  0ABB  1283               	bcf	status, 5	;RP0=0, select bank2
 10806  0ABC  1703               	bsf	status, 6	;RP1=1, select bank2
 10807  0ABD  1C90               	btfss	(2177/8)^0100h,(2177)&7
 10808  0ABE  2AC0               	goto	u381_21
 10809  0ABF  2AC1               	goto	u381_20
 10810  0AC0                     u381_21:
 10811  0AC0  2ACC               	goto	i1l13334
 10812  0AC1                     u381_20:
 10813                           	
 10814  0AC1                     i1l16801:	
 10815  0AC1  1C10               	btfss	(2176/8)^0100h,(2176)&7
 10816  0AC2  2AC4               	goto	u382_21
 10817  0AC3  2AC5               	goto	u382_20
 10818  0AC4                     u382_21:
 10819  0AC4  2ACC               	goto	i1l13334
 10820  0AC5                     u382_20:
 10821                           	line	216
 10822                           	
 10823  0AC5                     i1l16803:	
 10824                           ;ms83fxx02_sleepled.c: 215: {
 10825                           ;ms83fxx02_sleepled.c: 216: SleepLed_ChangeDuty();
 10826  0AC5  158A  278E  158A   	fcall	_SleepLed_ChangeDuty
 10827                           	line	217
 10828                           	
 10829  0AC8                     i1l16805:	
 10830                           ;ms83fxx02_sleepled.c: 217: TMR3IF = 0;
 10831  0AC8  1283               	bcf	status, 5	;RP0=0, select bank2
 10832  0AC9  1703               	bsf	status, 6	;RP1=1, select bank2
 10833  0ACA  1010               	bcf	(2176/8)^0100h,(2176)&7
 10834  0ACB  2ACC               	goto	i1l13334
 10835                           	line	218
 10836                           	
 10837  0ACC                     i1l13333:	
 10838                           	line	219
 10839                           	
 10840  0ACC                     i1l13334:	
 10841  0ACC  0008               	return
 10842                           	opt stack 0
 10843                           GLOBAL	__end_of_SleepLedTimer_IntrHandler
 10844  0ACD                     	__end_of_SleepLedTimer_IntrHandler:
 10845 ;; =============== function _SleepLedTimer_IntrHandler ends ============
 10846                           
 10847                           	signat	_SleepLedTimer_IntrHandler,88
 10848                           	global	_DebounceTimer_IntrHandler
 10849                           psect	text1840,local,class=CODE,delta=2
 10850                           global __ptext1840
 10851  070D                     __ptext1840:
 10852                           
 10853 ;; *************** function _DebounceTimer_IntrHandler *****************
 10854 ;; Defined at:
 10855 ;;		line 132 in file "MS83FXX02_KEY.C"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;		None
 10860 ;; Return value:  Size  Location     Type
 10861 ;;		None               void
 10862 ;; Registers used:
 10863 ;;		wreg, status,2, status,0, pclath, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10869 ;;      Params:         0       0       0       0
 10870 ;;      Locals:         0       0       0       0
 10871 ;;      Temps:          1       0       0       0
 10872 ;;      Totals:         1       0       0       0
 10873 ;;Total ram usage:        1 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    1
 10876 ;; This function calls:
 10877 ;;		i1_GPIO_ReadInputDataBit
 10878 ;; This function is called by:
 10879 ;;		_ISR
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           psect	text1840
 10883                           	file	"MS83FXX02_KEY.C"
 10884                           	line	132
 10885                           	global	__size_of_DebounceTimer_IntrHandler
 10886  003E                     	__size_of_DebounceTimer_IntrHandler	equ	__end_of_DebounceTimer_IntrHandler-_DebounceTim
                                 er_IntrHandler
 10887                           	
 10888  070D                     _DebounceTimer_IntrHandler:	
 10889                           	opt	stack 1
 10890                           ; Regs used in _DebounceTimer_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
 10891                           	line	133
 10892                           	
 10893  070D                     i1l16741:	
 10894                           ;MS83FXX02_KEY.C: 133: if(TMR1IE && TMR1IF)
 10895  070D  1683               	bsf	status, 5	;RP0=1, select bank1
 10896  070E  1303               	bcf	status, 6	;RP1=0, select bank1
 10897  070F  1C0C               	btfss	(1120/8)^080h,(1120)&7
 10898  0710  2F12               	goto	u369_21
 10899  0711  2F13               	goto	u369_20
 10900  0712                     u369_21:
 10901  0712  2F4A               	goto	i1l5540
 10902  0713                     u369_20:
 10903                           	
 10904  0713                     i1l16743:	
 10905  0713  1283               	bcf	status, 5	;RP0=0, select bank0
 10906  0714  1303               	bcf	status, 6	;RP1=0, select bank0
 10907  0715  1C0C               	btfss	(96/8),(96)&7
 10908  0716  2F18               	goto	u370_21
 10909  0717  2F19               	goto	u370_20
 10910  0718                     u370_21:
 10911  0718  2F4A               	goto	i1l5540
 10912  0719                     u370_20:
 10913                           	line	135
 10914                           	
 10915  0719                     i1l16745:	
 10916                           ;MS83FXX02_KEY.C: 134: {
 10917                           ;MS83FXX02_KEY.C: 135: TMR1IF = 0;
 10918  0719  100C               	bcf	(96/8),(96)&7
 10919                           	line	136
 10920                           ;MS83FXX02_KEY.C: 136: TMR1IE = 0;
 10921  071A  1683               	bsf	status, 5	;RP0=1, select bank1
 10922  071B  1303               	bcf	status, 6	;RP1=0, select bank1
 10923  071C  100C               	bcf	(1120/8)^080h,(1120)&7
 10924                           	line	137
 10925                           ;MS83FXX02_KEY.C: 137: TMR1ON = 0;
 10926  071D  1283               	bcf	status, 5	;RP0=0, select bank0
 10927  071E  1303               	bcf	status, 6	;RP1=0, select bank0
 10928  071F  1010               	bcf	(128/8),(128)&7
 10929                           	line	139
 10930                           	
 10931  0720                     i1l16747:	
 10932                           ;MS83FXX02_KEY.C: 139: if(key_status != GPIO_ReadInputDataBit(GPIOC, ((uint8_t)0x0000000
                                 2)))
 10933  0720  3002               	movlw	(02h)
 10934  0721  00F3               	movwf	(??_DebounceTimer_IntrHandler+0)+0
 10935  0722  0873               	movf	(??_DebounceTimer_IntrHandler+0)+0,w
 10936  0723  00F0               	movwf	(?i1_GPIO_ReadInputDataBit)
 10937  0724  3001               	movlw	(01h)
 10938  0725  158A  2646  118A   	fcall	i1_GPIO_ReadInputDataBit
 10939  0728  067B               	xorwf	(_key_status),w	;volatile
 10940  0729  1903               	skipnz
 10941  072A  2F2C               	goto	u371_21
 10942  072B  2F2D               	goto	u371_20
 10943  072C                     u371_21:
 10944  072C  2F30               	goto	i1l16751
 10945  072D                     u371_20:
 10946                           	line	142
 10947                           	
 10948  072D                     i1l16749:	
 10949                           ;MS83FXX02_KEY.C: 140: {
 10950                           ;MS83FXX02_KEY.C: 142: INTF = 0;
 10951  072D  108B               	bcf	(89/8),(89)&7
 10952                           	line	143
 10953                           ;MS83FXX02_KEY.C: 143: INTE = 1;
 10954  072E  160B               	bsf	(92/8),(92)&7
 10955                           	line	144
 10956                           ;MS83FXX02_KEY.C: 144: return ;
 10957  072F  2F4A               	goto	i1l5540
 10958                           	line	145
 10959                           	
 10960  0730                     i1l5539:	
 10961                           	line	147
 10962                           	
 10963  0730                     i1l16751:	
 10964                           ;MS83FXX02_KEY.C: 145: }
 10965                           ;MS83FXX02_KEY.C: 147: if(!key_status)
 10966  0730  08FB               	movf	(_key_status),f
 10967  0731  1D03               	skipz	;volatile
 10968  0732  2F34               	goto	u372_21
 10969  0733  2F35               	goto	u372_20
 10970  0734                     u372_21:
 10971  0734  2F3E               	goto	i1l16757
 10972  0735                     u372_20:
 10973                           	line	150
 10974                           	
 10975  0735                     i1l16753:	
 10976                           ;MS83FXX02_KEY.C: 148: {
 10977                           ;MS83FXX02_KEY.C: 150: key_press = 1;
 10978  0735  1283               	bcf	status, 5	;RP0=0, select bank0
 10979  0736  1303               	bcf	status, 6	;RP1=0, select bank0
 10980  0737  01BF               	clrf	(_key_press)	;volatile
 10981  0738  1403               	bsf	status,0
 10982  0739  0DBF               	rlf	(_key_press),f	;volatile
 10983                           	line	153
 10984                           	
 10985  073A                     i1l16755:	
 10986                           ;MS83FXX02_KEY.C: 153: INTEDG = 1;
 10987  073A  1683               	bsf	status, 5	;RP0=1, select bank1
 10988  073B  1303               	bcf	status, 6	;RP1=0, select bank1
 10989  073C  1701               	bsf	(1038/8)^080h,(1038)&7
 10990                           	line	154
 10991                           ;MS83FXX02_KEY.C: 154: }
 10992  073D  2F47               	goto	i1l16761
 10993                           	line	155
 10994                           	
 10995  073E                     i1l5541:	
 10996                           	line	158
 10997                           	
 10998  073E                     i1l16757:	
 10999                           ;MS83FXX02_KEY.C: 155: else
 11000                           ;MS83FXX02_KEY.C: 156: {
 11001                           ;MS83FXX02_KEY.C: 158: key_release = 1;
 11002  073E  1283               	bcf	status, 5	;RP0=0, select bank0
 11003  073F  1303               	bcf	status, 6	;RP1=0, select bank0
 11004  0740  01C2               	clrf	(_key_release)	;volatile
 11005  0741  1403               	bsf	status,0
 11006  0742  0DC2               	rlf	(_key_release),f	;volatile
 11007                           	line	161
 11008                           	
 11009  0743                     i1l16759:	
 11010                           ;MS83FXX02_KEY.C: 161: INTEDG = 0;
 11011  0743  1683               	bsf	status, 5	;RP0=1, select bank1
 11012  0744  1303               	bcf	status, 6	;RP1=0, select bank1
 11013  0745  1301               	bcf	(1038/8)^080h,(1038)&7
 11014  0746  2F47               	goto	i1l16761
 11015                           	line	162
 11016                           	
 11017  0747                     i1l5542:	
 11018                           	line	165
 11019                           	
 11020  0747                     i1l16761:	
 11021                           ;MS83FXX02_KEY.C: 162: }
 11022                           ;MS83FXX02_KEY.C: 165: INTF = 0;
 11023  0747  108B               	bcf	(89/8),(89)&7
 11024                           	line	166
 11025                           	
 11026  0748                     i1l16763:	
 11027                           ;MS83FXX02_KEY.C: 166: INTE = 1;
 11028  0748  160B               	bsf	(92/8),(92)&7
 11029  0749  2F4A               	goto	i1l5540
 11030                           	line	167
 11031                           	
 11032  074A                     i1l5538:	
 11033                           	line	168
 11034                           	
 11035  074A                     i1l5540:	
 11036  074A  0008               	return
 11037                           	opt stack 0
 11038                           GLOBAL	__end_of_DebounceTimer_IntrHandler
 11039  074B                     	__end_of_DebounceTimer_IntrHandler:
 11040 ;; =============== function _DebounceTimer_IntrHandler ends ============
 11041                           
 11042                           	signat	_DebounceTimer_IntrHandler,88
 11043                           	global	_KEY_IntrHandler
 11044                           psect	text1841,local,class=CODE,delta=2
 11045                           global __ptext1841
 11046  0BE6                     __ptext1841:
 11047                           
 11048 ;; *************** function _KEY_IntrHandler *****************
 11049 ;; Defined at:
 11050 ;;		line 114 in file "MS83FXX02_KEY.C"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;		None
 11055 ;; Return value:  Size  Location     Type
 11056 ;;		None               void
 11057 ;; Registers used:
 11058 ;;		wreg, status,2, status,0, pclath, cstack
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11064 ;;      Params:         0       0       0       0
 11065 ;;      Locals:         0       0       0       0
 11066 ;;      Temps:          1       0       0       0
 11067 ;;      Totals:         1       0       0       0
 11068 ;;Total ram usage:        1 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    1
 11071 ;; This function calls:
 11072 ;;		_TIM1_Init
 11073 ;; This function is called by:
 11074 ;;		_ISR
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           psect	text1841
 11078                           	file	"MS83FXX02_KEY.C"
 11079                           	line	114
 11080                           	global	__size_of_KEY_IntrHandler
 11081  001C                     	__size_of_KEY_IntrHandler	equ	__end_of_KEY_IntrHandler-_KEY_IntrHandler
 11082                           	
 11083  0BE6                     _KEY_IntrHandler:	
 11084                           	opt	stack 1
 11085                           ; Regs used in _KEY_IntrHandler: [wreg+status,2+status,0+pclath+cstack]
 11086                           	line	115
 11087                           	
 11088  0BE6                     i1l16729:	
 11089                           ;MS83FXX02_KEY.C: 115: if(INTE && INTF)
 11090  0BE6  1E0B               	btfss	(92/8),(92)&7
 11091  0BE7  2BE9               	goto	u367_21
 11092  0BE8  2BEA               	goto	u367_20
 11093  0BE9                     u367_21:
 11094  0BE9  2C01               	goto	i1l5535
 11095  0BEA                     u367_20:
 11096                           	
 11097  0BEA                     i1l16731:	
 11098  0BEA  1C8B               	btfss	(89/8),(89)&7
 11099  0BEB  2BED               	goto	u368_21
 11100  0BEC  2BEE               	goto	u368_20
 11101  0BED                     u368_21:
 11102  0BED  2C01               	goto	i1l5535
 11103  0BEE                     u368_20:
 11104                           	line	118
 11105                           	
 11106  0BEE                     i1l16733:	
 11107                           ;MS83FXX02_KEY.C: 116: {
 11108                           ;MS83FXX02_KEY.C: 118: INTF = 0;
 11109  0BEE  108B               	bcf	(89/8),(89)&7
 11110                           	line	119
 11111                           ;MS83FXX02_KEY.C: 119: INTE = 0;
 11112  0BEF  120B               	bcf	(92/8),(92)&7
 11113                           	line	120
 11114                           	
 11115  0BF0                     i1l16735:	
 11116                           ;MS83FXX02_KEY.C: 120: key_status = INTEDG;
 11117  0BF0  3000               	movlw	0
 11118  0BF1  1683               	bsf	status, 5	;RP0=1, select bank1
 11119  0BF2  1303               	bcf	status, 6	;RP1=0, select bank1
 11120  0BF3  1B01               	btfsc	(1038/8)^080h,(1038)&7
 11121  0BF4  3001               	movlw	1
 11122  0BF5  00F0               	movwf	(??_KEY_IntrHandler+0)+0
 11123  0BF6  0870               	movf	(??_KEY_IntrHandler+0)+0,w
 11124  0BF7  00FB               	movwf	(_key_status)	;volatile
 11125                           	line	121
 11126                           	
 11127  0BF8                     i1l16737:	
 11128                           ;MS83FXX02_KEY.C: 121: key_press_flag= 1;
 11129  0BF8  1283               	bcf	status, 5	;RP0=0, select bank0
 11130  0BF9  1303               	bcf	status, 6	;RP1=0, select bank0
 11131  0BFA  01C0               	clrf	(_key_press_flag)	;volatile
 11132  0BFB  1403               	bsf	status,0
 11133  0BFC  0DC0               	rlf	(_key_press_flag),f	;volatile
 11134                           	line	122
 11135                           	
 11136  0BFD                     i1l16739:	
 11137                           ;MS83FXX02_KEY.C: 122: TIM1_Init();
 11138  0BFD  158A  2259  158A   	fcall	_TIM1_Init
 11139  0C00  2C01               	goto	i1l5535
 11140                           	line	123
 11141                           	
 11142  0C01                     i1l5534:	
 11143                           	line	124
 11144                           	
 11145  0C01                     i1l5535:	
 11146  0C01  0008               	return
 11147                           	opt stack 0
 11148                           GLOBAL	__end_of_KEY_IntrHandler
 11149  0C02                     	__end_of_KEY_IntrHandler:
 11150 ;; =============== function _KEY_IntrHandler ends ============
 11151                           
 11152                           	signat	_KEY_IntrHandler,88
 11153                           	global	i1_GetDeviceMode
 11154                           psect	text1842,local,class=CODE,delta=2
 11155                           global __ptext1842
 11156  09B6                     __ptext1842:
 11157                           
 11158 ;; *************** function i1_GetDeviceMode *****************
 11159 ;; Defined at:
 11160 ;;		line 45 in file "ms83fxx02_pwr.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      enum E1584
 11167 ;; Registers used:
 11168 ;;		wreg
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11174 ;;      Params:         0       0       0       0
 11175 ;;      Locals:         0       0       0       0
 11176 ;;      Temps:          0       0       0       0
 11177 ;;      Totals:         0       0       0       0
 11178 ;;Total ram usage:        0 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; This function calls:
 11181 ;;		Nothing
 11182 ;; This function is called by:
 11183 ;;		_ISR
 11184 ;; This function uses a non-reentrant model
 11185 ;;
 11186                           psect	text1842
 11187                           	file	"ms83fxx02_pwr.c"
 11188                           	line	45
 11189                           	global	__size_ofi1_GetDeviceMode
 11190  0005                     	__size_ofi1_GetDeviceMode	equ	__end_ofi1_GetDeviceMode-i1_GetDeviceMode
 11191                           	
 11192  09B6                     i1_GetDeviceMode:	
 11193                           	opt	stack 2
 11194                           ; Regs used in i1_GetDeviceMode: [wreg]
 11195                           	line	46
 11196                           	
 11197  09B6                     i1l17605:	
 11198                           ;ms83fxx02_pwr.c: 46: return device_mode;
 11199  09B6  1283               	bcf	status, 5	;RP0=0, select bank0
 11200  09B7  1303               	bcf	status, 6	;RP1=0, select bank0
 11201  09B8  083E               	movf	(_device_mode),w	;volatile
 11202  09B9  29BA               	goto	i1l10014
 11203                           	
 11204  09BA                     i1l17607:	
 11205                           	line	47
 11206                           	
 11207  09BA                     i1l10014:	
 11208  09BA  0008               	return
 11209                           	opt stack 0
 11210                           GLOBAL	__end_ofi1_GetDeviceMode
 11211  09BB                     	__end_ofi1_GetDeviceMode:
 11212 ;; =============== function i1_GetDeviceMode ends ============
 11213                           
 11214                           	signat	i1_GetDeviceMode,89
 11215                           	global	i1_MotorOperationTimer_Init
 11216                           psect	text1843,local,class=CODE,delta=2
 11217                           global __ptext1843
 11218  0EFB                     __ptext1843:
 11219                           
 11220 ;; *************** function i1_MotorOperationTimer_Init *****************
 11221 ;; Defined at:
 11222 ;;		line 221 in file "ms83fxx02_motor.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  MotorOperati    1    wreg     enum E1558
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  MotorOperati    1    0[COMMON] enum E1558
 11227 ;; Return value:  Size  Location     Type
 11228 ;;		None               void
 11229 ;; Registers used:
 11230 ;;		wreg, status,2
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11236 ;;      Params:         0       0       0       0
 11237 ;;      Locals:         1       0       0       0
 11238 ;;      Temps:          0       0       0       0
 11239 ;;      Totals:         1       0       0       0
 11240 ;;Total ram usage:        1 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; This function calls:
 11243 ;;		Nothing
 11244 ;; This function is called by:
 11245 ;;		_MotorOperTimer_IntrHandler
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           psect	text1843
 11249                           	file	"ms83fxx02_motor.c"
 11250                           	line	221
 11251                           	global	__size_ofi1_MotorOperationTimer_Init
 11252  0030                     	__size_ofi1_MotorOperationTimer_Init	equ	__end_ofi1_MotorOperationTimer_Init-i1_MotorOp
                                 erationTimer_Init
 11253                           	
 11254  0EFB                     i1_MotorOperationTimer_Init:	
 11255                           	opt	stack 1
 11256                           ; Regs used in i1_MotorOperationTimer_Init: [wreg+status,2]
 11257                           ;i1MotorOperationTimer_Init@time stored from wreg
 11258                           	line	223
 11259  0EFB  00F0               	movwf	(i1MotorOperationTimer_Init@time)
 11260                           	
 11261  0EFC                     i1l17571:	
 11262                           ;ms83fxx02_motor.c: 223: TMR4ON = 0;
 11263  0EFC  1283               	bcf	status, 5	;RP0=0, select bank2
 11264  0EFD  1703               	bsf	status, 6	;RP1=1, select bank2
 11265  0EFE  1116               	bcf	(2226/8)^0100h,(2226)&7
 11266                           	line	225
 11267                           	
 11268  0EFF                     i1l17573:	
 11269                           ;ms83fxx02_motor.c: 225: if(time == MotorOperationTimer_30s)
 11270  0EFF  0870               	movf	(i1MotorOperationTimer_Init@time),w
 11271  0F00  3A01               	xorlw	01h
 11272  0F01  1D03               	skipz
 11273  0F02  2F04               	goto	u519_21
 11274  0F03  2F05               	goto	u519_20
 11275  0F04                     u519_21:
 11276  0F04  2F0C               	goto	i1l17577
 11277  0F05                     u519_20:
 11278                           	line	228
 11279                           	
 11280  0F05                     i1l17575:	
 11281                           ;ms83fxx02_motor.c: 226: {
 11282                           ;ms83fxx02_motor.c: 228: PWM4CR0 = 0b01110010;
 11283  0F05  3072               	movlw	(072h)
 11284  0F06  0095               	movwf	(277)^0100h	;volatile
 11285                           	line	231
 11286                           ;ms83fxx02_motor.c: 231: PWM4CR1 = 0b00111000;
 11287  0F07  3038               	movlw	(038h)
 11288  0F08  0096               	movwf	(278)^0100h	;volatile
 11289                           	line	236
 11290                           ;ms83fxx02_motor.c: 236: T4CKDIV = 182;
 11291  0F09  30B6               	movlw	(0B6h)
 11292  0F0A  0097               	movwf	(279)^0100h	;volatile
 11293                           	line	237
 11294                           ;ms83fxx02_motor.c: 237: }
 11295  0F0B  2F20               	goto	i1l8861
 11296                           	line	238
 11297                           	
 11298  0F0C                     i1l8860:	
 11299                           	
 11300  0F0C                     i1l17577:	
 11301                           ;ms83fxx02_motor.c: 238: else if(time == MotorOperationTimer_0_3s)
 11302  0F0C  0870               	movf	(i1MotorOperationTimer_Init@time),w
 11303  0F0D  3A02               	xorlw	02h
 11304  0F0E  1D03               	skipz
 11305  0F0F  2F11               	goto	u520_21
 11306  0F10  2F12               	goto	u520_20
 11307  0F11                     u520_21:
 11308  0F11  2F19               	goto	i1l17581
 11309  0F12                     u520_20:
 11310                           	line	241
 11311                           	
 11312  0F12                     i1l17579:	
 11313                           ;ms83fxx02_motor.c: 239: {
 11314                           ;ms83fxx02_motor.c: 241: PWM4CR0 = 0b01100010;
 11315  0F12  3062               	movlw	(062h)
 11316  0F13  0095               	movwf	(277)^0100h	;volatile
 11317                           	line	243
 11318                           ;ms83fxx02_motor.c: 243: PWM4CR1 = 0b00111000;
 11319  0F14  3038               	movlw	(038h)
 11320  0F15  0096               	movwf	(278)^0100h	;volatile
 11321                           	line	247
 11322                           ;ms83fxx02_motor.c: 247: T4CKDIV = 8;
 11323  0F16  3008               	movlw	(08h)
 11324  0F17  0097               	movwf	(279)^0100h	;volatile
 11325                           	line	248
 11326                           ;ms83fxx02_motor.c: 248: }
 11327  0F18  2F20               	goto	i1l8861
 11328                           	line	249
 11329                           	
 11330  0F19                     i1l8862:	
 11331                           	line	252
 11332                           	
 11333  0F19                     i1l17581:	
 11334                           ;ms83fxx02_motor.c: 249: else
 11335                           ;ms83fxx02_motor.c: 250: {
 11336                           ;ms83fxx02_motor.c: 252: PWM4CR0 = 0b01110010;
 11337  0F19  3072               	movlw	(072h)
 11338  0F1A  0095               	movwf	(277)^0100h	;volatile
 11339                           	line	255
 11340                           ;ms83fxx02_motor.c: 255: PWM4CR1 = 0b00111000;
 11341  0F1B  3038               	movlw	(038h)
 11342  0F1C  0096               	movwf	(278)^0100h	;volatile
 11343                           	line	258
 11344                           ;ms83fxx02_motor.c: 258: T4CKDIV = 243;
 11345  0F1D  30F3               	movlw	(0F3h)
 11346  0F1E  0097               	movwf	(279)^0100h	;volatile
 11347  0F1F  2F20               	goto	i1l8861
 11348                           	line	259
 11349                           	
 11350  0F20                     i1l8863:	
 11351                           	
 11352  0F20                     i1l8861:	
 11353                           	line	261
 11354                           ;ms83fxx02_motor.c: 259: }
 11355                           ;ms83fxx02_motor.c: 261: TMR4H = 0x0F;
 11356  0F20  300F               	movlw	(0Fh)
 11357  0F21  0093               	movwf	(275)^0100h	;volatile
 11358                           	line	262
 11359                           	
 11360  0F22                     i1l17583:	
 11361                           ;ms83fxx02_motor.c: 262: TMR4L = 0;
 11362  0F22  0192               	clrf	(274)^0100h	;volatile
 11363                           	line	263
 11364                           	
 11365  0F23                     i1l17585:	
 11366                           ;ms83fxx02_motor.c: 263: PR4L = 0xFF;
 11367  0F23  30FF               	movlw	(0FFh)
 11368  0F24  0094               	movwf	(276)^0100h	;volatile
 11369                           	line	266
 11370                           	
 11371  0F25                     i1l17587:	
 11372                           ;ms83fxx02_motor.c: 266: TMR4IF = 0;
 11373  0F25  1016               	bcf	(2224/8)^0100h,(2224)&7
 11374                           	line	269
 11375                           	
 11376  0F26                     i1l17589:	
 11377                           ;ms83fxx02_motor.c: 269: TMR4ON = 1;
 11378  0F26  1516               	bsf	(2226/8)^0100h,(2226)&7
 11379                           	line	272
 11380                           	
 11381  0F27                     i1l17591:	
 11382                           ;ms83fxx02_motor.c: 272: TMR4IE = 1;
 11383  0F27  1496               	bsf	(2225/8)^0100h,(2225)&7
 11384                           	line	273
 11385                           	
 11386  0F28                     i1l17593:	
 11387                           ;ms83fxx02_motor.c: 273: PEIE = 1;
 11388  0F28  170B               	bsf	(94/8),(94)&7
 11389                           	line	274
 11390                           	
 11391  0F29                     i1l17595:	
 11392                           ;ms83fxx02_motor.c: 274: GIE = 1;
 11393  0F29  178B               	bsf	(95/8),(95)&7
 11394                           	line	275
 11395                           	
 11396  0F2A                     i1l8864:	
 11397  0F2A  0008               	return
 11398                           	opt stack 0
 11399                           GLOBAL	__end_ofi1_MotorOperationTimer_Init
 11400  0F2B                     	__end_ofi1_MotorOperationTimer_Init:
 11401 ;; =============== function i1_MotorOperationTimer_Init ends ============
 11402                           
 11403                           	signat	i1_MotorOperationTimer_Init,88
 11404                           	global	i1_Motor_CheckRunLimit
 11405                           psect	text1844,local,class=CODE,delta=2
 11406                           global __ptext1844
 11407  0A99                     __ptext1844:
 11408                           
 11409 ;; *************** function i1_Motor_CheckRunLimit *****************
 11410 ;; Defined at:
 11411 ;;		line 202 in file "ms83fxx02_motor.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;		None
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;		None
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      unsigned char 
 11418 ;; Registers used:
 11419 ;;		wreg
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11425 ;;      Params:         0       0       0       0
 11426 ;;      Locals:         0       0       0       0
 11427 ;;      Temps:          0       0       0       0
 11428 ;;      Totals:         0       0       0       0
 11429 ;;Total ram usage:        0 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; This function calls:
 11432 ;;		Nothing
 11433 ;; This function is called by:
 11434 ;;		_MotorOperTimer_IntrHandler
 11435 ;;		i1_MotorOperationTimer_Stop
 11436 ;; This function uses a non-reentrant model
 11437 ;;
 11438                           psect	text1844
 11439                           	file	"ms83fxx02_motor.c"
 11440                           	line	202
 11441                           	global	__size_ofi1_Motor_CheckRunLimit
 11442  0011                     	__size_ofi1_Motor_CheckRunLimit	equ	__end_ofi1_Motor_CheckRunLimit-i1_Motor_CheckRunLim
                                 it
 11443                           	
 11444  0A99                     i1_Motor_CheckRunLimit:	
 11445                           	opt	stack 0
 11446                           ; Regs used in i1_Motor_CheckRunLimit: [wreg]
 11447                           	line	206
 11448                           	
 11449  0A99                     i1l17561:	
 11450                           ;ms83fxx02_motor.c: 206: if(motor_oper_record >= 120)
 11451  0A99  3000               	movlw	high(078h)
 11452  0A9A  1283               	bcf	status, 5	;RP0=0, select bank0
 11453  0A9B  1303               	bcf	status, 6	;RP1=0, select bank0
 11454  0A9C  0237               	subwf	(_motor_oper_record+1),w	;volatile
 11455  0A9D  3078               	movlw	low(078h)
 11456  0A9E  1903               	skipnz
 11457  0A9F  0236               	subwf	(_motor_oper_record),w	;volatile
 11458  0AA0  1C03               	skipc
 11459  0AA1  2AA3               	goto	u518_21
 11460  0AA2  2AA4               	goto	u518_20
 11461  0AA3                     u518_21:
 11462  0AA3  2AA7               	goto	i1l17567
 11463  0AA4                     u518_20:
 11464                           	line	208
 11465                           	
 11466  0AA4                     i1l17563:	
 11467                           ;ms83fxx02_motor.c: 207: {
 11468                           ;ms83fxx02_motor.c: 208: return 1;
 11469  0AA4  3001               	movlw	(01h)
 11470  0AA5  2AA9               	goto	i1l8857
 11471                           	
 11472  0AA6                     i1l17565:	
 11473  0AA6  2AA9               	goto	i1l8857
 11474                           	line	209
 11475                           	
 11476  0AA7                     i1l8856:	
 11477                           	line	210
 11478                           	
 11479  0AA7                     i1l17567:	
 11480                           ;ms83fxx02_motor.c: 209: }
 11481                           ;ms83fxx02_motor.c: 210: return 0;
 11482  0AA7  3000               	movlw	(0)
 11483  0AA8  2AA9               	goto	i1l8857
 11484                           	
 11485  0AA9                     i1l17569:	
 11486                           	line	211
 11487                           	
 11488  0AA9                     i1l8857:	
 11489  0AA9  0008               	return
 11490                           	opt stack 0
 11491                           GLOBAL	__end_ofi1_Motor_CheckRunLimit
 11492  0AAA                     	__end_ofi1_Motor_CheckRunLimit:
 11493 ;; =============== function i1_Motor_CheckRunLimit ends ============
 11494                           
 11495                           	signat	i1_Motor_CheckRunLimit,89
 11496                           	global	i1_Motor_SetStatus
 11497                           psect	text1845,local,class=CODE,delta=2
 11498                           global __ptext1845
 11499  09C0                     __ptext1845:
 11500                           
 11501 ;; *************** function i1_Motor_SetStatus *****************
 11502 ;; Defined at:
 11503 ;;		line 123 in file "ms83fxx02_motor.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;  Motor_SetSta    1    wreg     enum E1552
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;  Motor_SetSta    1    1[COMMON] enum E1552
 11508 ;; Return value:  Size  Location     Type
 11509 ;;		None               void
 11510 ;; Registers used:
 11511 ;;		wreg
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11517 ;;      Params:         0       0       0       0
 11518 ;;      Locals:         1       0       0       0
 11519 ;;      Temps:          1       0       0       0
 11520 ;;      Totals:         2       0       0       0
 11521 ;;Total ram usage:        2 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; This function calls:
 11524 ;;		Nothing
 11525 ;; This function is called by:
 11526 ;;		_MotorOperTimer_IntrHandler
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           psect	text1845
 11530                           	file	"ms83fxx02_motor.c"
 11531                           	line	123
 11532                           	global	__size_ofi1_Motor_SetStatus
 11533  0006                     	__size_ofi1_Motor_SetStatus	equ	__end_ofi1_Motor_SetStatus-i1_Motor_SetStatus
 11534                           	
 11535  09C0                     i1_Motor_SetStatus:	
 11536                           	opt	stack 1
 11537                           ; Regs used in i1_Motor_SetStatus: [wreg]
 11538                           ;i1Motor_SetStatus@status stored from wreg
 11539  09C0  00F1               	movwf	(i1Motor_SetStatus@status)
 11540                           	line	124
 11541                           	
 11542  09C1                     i1l17549:	
 11543                           ;ms83fxx02_motor.c: 124: motor_status = status;
 11544  09C1  0871               	movf	(i1Motor_SetStatus@status),w
 11545  09C2  00F0               	movwf	(??i1_Motor_SetStatus+0)+0
 11546  09C3  0870               	movf	(??i1_Motor_SetStatus+0)+0,w
 11547  09C4  00FC               	movwf	(_motor_status)	;volatile
 11548                           	line	125
 11549                           	
 11550  09C5                     i1l8838:	
 11551  09C5  0008               	return
 11552                           	opt stack 0
 11553                           GLOBAL	__end_ofi1_Motor_SetStatus
 11554  09C6                     	__end_ofi1_Motor_SetStatus:
 11555 ;; =============== function i1_Motor_SetStatus ends ============
 11556                           
 11557                           	signat	i1_Motor_SetStatus,88
 11558                           	global	i1_Motor_Init
 11559                           psect	text1846,local,class=CODE,delta=2
 11560                           global __ptext1846
 11561  05AD                     __ptext1846:
 11562                           
 11563 ;; *************** function i1_Motor_Init *****************
 11564 ;; Defined at:
 11565 ;;		line 67 in file "ms83fxx02_motor.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  Motor_Init      1    wreg     enum E1552
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;  Motor_Init      1    1[COMMON] enum E1552
 11570 ;; Return value:  Size  Location     Type
 11571 ;;		None               void
 11572 ;; Registers used:
 11573 ;;		wreg, status,2, status,0
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11579 ;;      Params:         0       0       0       0
 11580 ;;      Locals:         1       0       0       0
 11581 ;;      Temps:          1       0       0       0
 11582 ;;      Totals:         2       0       0       0
 11583 ;;Total ram usage:        2 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; This function calls:
 11586 ;;		Nothing
 11587 ;; This function is called by:
 11588 ;;		_MotorOperTimer_IntrHandler
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           psect	text1846
 11592                           	file	"ms83fxx02_motor.c"
 11593                           	line	67
 11594                           	global	__size_ofi1_Motor_Init
 11595  0059                     	__size_ofi1_Motor_Init	equ	__end_ofi1_Motor_Init-i1_Motor_Init
 11596                           	
 11597  05AD                     i1_Motor_Init:	
 11598                           	opt	stack 1
 11599                           ; Regs used in i1_Motor_Init: [wreg+status,2+status,0]
 11600                           ;i1Motor_Init@status stored from wreg
 11601                           	line	70
 11602  05AD  00F1               	movwf	(i1Motor_Init@status)
 11603                           	
 11604  05AE                     i1l17519:	
 11605                           ;ms83fxx02_motor.c: 70: TRISC |= 0x03 << 4;
 11606  05AE  3030               	movlw	(030h)
 11607  05AF  00F0               	movwf	(??i1_Motor_Init+0)+0
 11608  05B0  0870               	movf	(??i1_Motor_Init+0)+0,w
 11609  05B1  1683               	bsf	status, 5	;RP0=1, select bank1
 11610  05B2  1303               	bcf	status, 6	;RP1=0, select bank1
 11611  05B3  0487               	iorwf	(135)^080h,f	;volatile
 11612                           	line	73
 11613                           ;ms83fxx02_motor.c: 73: CMCON0 |= 0x07;
 11614  05B4  3007               	movlw	(07h)
 11615  05B5  00F0               	movwf	(??i1_Motor_Init+0)+0
 11616  05B6  0870               	movf	(??i1_Motor_Init+0)+0,w
 11617  05B7  1283               	bcf	status, 5	;RP0=0, select bank0
 11618  05B8  1303               	bcf	status, 6	;RP1=0, select bank0
 11619  05B9  0499               	iorwf	(25),f	;volatile
 11620                           	line	74
 11621                           	
 11622  05BA                     i1l17521:	
 11623                           ;ms83fxx02_motor.c: 74: T2CKSRC = 0;
 11624  05BA  129B               	bcf	(221/8),(221)&7
 11625                           	line	77
 11626                           	
 11627  05BB                     i1l17523:	
 11628                           ;ms83fxx02_motor.c: 77: TMR2 = 0;
 11629  05BB  0191               	clrf	(17)	;volatile
 11630                           	line	80
 11631                           	
 11632  05BC                     i1l17525:	
 11633                           ;ms83fxx02_motor.c: 80: T2CON = 0x03;
 11634  05BC  3003               	movlw	(03h)
 11635  05BD  0092               	movwf	(18)	;volatile
 11636                           	line	82
 11637                           	
 11638  05BE                     i1l17527:	
 11639                           ;ms83fxx02_motor.c: 82: if(status == MOTOR_MODE_STOP)
 11640  05BE  0871               	movf	(i1Motor_Init@status),w
 11641  05BF  3A01               	xorlw	01h
 11642  05C0  1D03               	skipz
 11643  05C1  2DC3               	goto	u514_21
 11644  05C2  2DC4               	goto	u514_20
 11645  05C3                     u514_21:
 11646  05C3  2DC7               	goto	i1l17533
 11647  05C4                     u514_20:
 11648  05C4  2E05               	goto	i1l8827
 11649                           	line	84
 11650                           	
 11651  05C5                     i1l17529:	
 11652                           ;ms83fxx02_motor.c: 83: {
 11653                           ;ms83fxx02_motor.c: 84: return ;
 11654  05C5  2E05               	goto	i1l8827
 11655                           	line	85
 11656                           	
 11657  05C6                     i1l17531:	
 11658                           ;ms83fxx02_motor.c: 85: }
 11659  05C6  2DF5               	goto	i1l8828
 11660                           	line	86
 11661                           	
 11662  05C7                     i1l8826:	
 11663                           	
 11664  05C7                     i1l17533:	
 11665                           ;ms83fxx02_motor.c: 86: else if(status == MOTOR_MODE_3)
 11666  05C7  0871               	movf	(i1Motor_Init@status),w
 11667  05C8  3A04               	xorlw	04h
 11668  05C9  1D03               	skipz
 11669  05CA  2DCC               	goto	u515_21
 11670  05CB  2DCD               	goto	u515_20
 11671  05CC                     u515_21:
 11672  05CC  2DD8               	goto	i1l17537
 11673  05CD                     u515_20:
 11674                           	line	88
 11675                           	
 11676  05CD                     i1l17535:	
 11677                           ;ms83fxx02_motor.c: 87: {
 11678                           ;ms83fxx02_motor.c: 88: PR2 = 125;
 11679  05CD  307D               	movlw	(07Dh)
 11680  05CE  1683               	bsf	status, 5	;RP0=1, select bank1
 11681  05CF  1303               	bcf	status, 6	;RP1=0, select bank1
 11682  05D0  0092               	movwf	(146)^080h	;volatile
 11683                           	line	89
 11684                           ;ms83fxx02_motor.c: 89: CCPR1L = 47;
 11685  05D1  302F               	movlw	(02Fh)
 11686  05D2  1283               	bcf	status, 5	;RP0=0, select bank0
 11687  05D3  1303               	bcf	status, 6	;RP1=0, select bank0
 11688  05D4  0093               	movwf	(19)	;volatile
 11689                           	line	90
 11690                           ;ms83fxx02_motor.c: 90: CCP1CON = 0x8C | (0x00 << 4);
 11691  05D5  308C               	movlw	(08Ch)
 11692  05D6  0095               	movwf	(21)	;volatile
 11693                           	line	91
 11694                           ;ms83fxx02_motor.c: 91: }
 11695  05D7  2DF5               	goto	i1l8828
 11696                           	line	92
 11697                           	
 11698  05D8                     i1l8829:	
 11699                           	
 11700  05D8                     i1l17537:	
 11701                           ;ms83fxx02_motor.c: 92: else if(status == MOTOR_MODE_2)
 11702  05D8  0871               	movf	(i1Motor_Init@status),w
 11703  05D9  3A03               	xorlw	03h
 11704  05DA  1D03               	skipz
 11705  05DB  2DDD               	goto	u516_21
 11706  05DC  2DDE               	goto	u516_20
 11707  05DD                     u516_21:
 11708  05DD  2DE9               	goto	i1l17541
 11709  05DE                     u516_20:
 11710                           	line	94
 11711                           	
 11712  05DE                     i1l17539:	
 11713                           ;ms83fxx02_motor.c: 93: {
 11714                           ;ms83fxx02_motor.c: 94: PR2 = 125;
 11715  05DE  307D               	movlw	(07Dh)
 11716  05DF  1683               	bsf	status, 5	;RP0=1, select bank1
 11717  05E0  1303               	bcf	status, 6	;RP1=0, select bank1
 11718  05E1  0092               	movwf	(146)^080h	;volatile
 11719                           	line	95
 11720                           ;ms83fxx02_motor.c: 95: CCPR1L = 31;
 11721  05E2  301F               	movlw	(01Fh)
 11722  05E3  1283               	bcf	status, 5	;RP0=0, select bank0
 11723  05E4  1303               	bcf	status, 6	;RP1=0, select bank0
 11724  05E5  0093               	movwf	(19)	;volatile
 11725                           	line	96
 11726                           ;ms83fxx02_motor.c: 96: CCP1CON = 0x8C | (0x00 << 4);
 11727  05E6  308C               	movlw	(08Ch)
 11728  05E7  0095               	movwf	(21)	;volatile
 11729                           	line	97
 11730                           ;ms83fxx02_motor.c: 97: }
 11731  05E8  2DF5               	goto	i1l8828
 11732                           	line	98
 11733                           	
 11734  05E9                     i1l8831:	
 11735                           	line	100
 11736                           	
 11737  05E9                     i1l17541:	
 11738                           ;ms83fxx02_motor.c: 98: else
 11739                           ;ms83fxx02_motor.c: 99: {
 11740                           ;ms83fxx02_motor.c: 100: PR2 = 116;
 11741  05E9  3074               	movlw	(074h)
 11742  05EA  1683               	bsf	status, 5	;RP0=1, select bank1
 11743  05EB  1303               	bcf	status, 6	;RP1=0, select bank1
 11744  05EC  0092               	movwf	(146)^080h	;volatile
 11745                           	line	101
 11746                           ;ms83fxx02_motor.c: 101: CCPR1L = 47;
 11747  05ED  302F               	movlw	(02Fh)
 11748  05EE  1283               	bcf	status, 5	;RP0=0, select bank0
 11749  05EF  1303               	bcf	status, 6	;RP1=0, select bank0
 11750  05F0  0093               	movwf	(19)	;volatile
 11751                           	line	102
 11752                           ;ms83fxx02_motor.c: 102: CCP1CON = 0x8C | (0x00 << 4);
 11753  05F1  308C               	movlw	(08Ch)
 11754  05F2  0095               	movwf	(21)	;volatile
 11755  05F3  2DF5               	goto	i1l8828
 11756                           	line	103
 11757                           	
 11758  05F4                     i1l8832:	
 11759  05F4  2DF5               	goto	i1l8828
 11760                           	
 11761  05F5                     i1l8830:	
 11762                           	
 11763  05F5                     i1l8828:	
 11764                           	line	105
 11765                           ;ms83fxx02_motor.c: 103: }
 11766                           ;ms83fxx02_motor.c: 105: PWM1CON = 0x3F;
 11767  05F5  303F               	movlw	(03Fh)
 11768  05F6  0096               	movwf	(22)	;volatile
 11769                           	line	109
 11770                           	
 11771  05F7                     i1l17543:	
 11772                           ;ms83fxx02_motor.c: 109: TMR2IF = 0;
 11773  05F7  108C               	bcf	(97/8),(97)&7
 11774                           	line	110
 11775                           	
 11776  05F8                     i1l17545:	
 11777                           ;ms83fxx02_motor.c: 110: TMR2ON = 1;
 11778  05F8  1512               	bsf	(146/8),(146)&7
 11779                           	line	111
 11780                           ;ms83fxx02_motor.c: 111: while(TMR2IF == 0){;}
 11781  05F9  2DFA               	goto	i1l8833
 11782                           	
 11783  05FA                     i1l8834:	
 11784                           	
 11785  05FA                     i1l8833:	
 11786  05FA  1C8C               	btfss	(97/8),(97)&7
 11787  05FB  2DFD               	goto	u517_21
 11788  05FC  2DFE               	goto	u517_20
 11789  05FD                     u517_21:
 11790  05FD  2DFA               	goto	i1l8833
 11791  05FE                     u517_20:
 11792  05FE  2DFF               	goto	i1l17547
 11793                           	
 11794  05FF                     i1l8835:	
 11795                           	line	114
 11796                           	
 11797  05FF                     i1l17547:	
 11798                           ;ms83fxx02_motor.c: 114: TRISC &= ~(0x03 << 4);
 11799  05FF  30CF               	movlw	(0CFh)
 11800  0600  00F0               	movwf	(??i1_Motor_Init+0)+0
 11801  0601  0870               	movf	(??i1_Motor_Init+0)+0,w
 11802  0602  1683               	bsf	status, 5	;RP0=1, select bank1
 11803  0603  1303               	bcf	status, 6	;RP1=0, select bank1
 11804  0604  0587               	andwf	(135)^080h,f	;volatile
 11805                           	line	115
 11806                           	
 11807  0605                     i1l8827:	
 11808  0605  0008               	return
 11809                           	opt stack 0
 11810                           GLOBAL	__end_ofi1_Motor_Init
 11811  0606                     	__end_ofi1_Motor_Init:
 11812 ;; =============== function i1_Motor_Init ends ============
 11813                           
 11814                           	signat	i1_Motor_Init,88
 11815                           	global	i1_GPIO_ReadInputDataBit
 11816                           psect	text1847,local,class=CODE,delta=2
 11817                           global __ptext1847
 11818  0E46                     __ptext1847:
 11819                           
 11820 ;; *************** function i1_GPIO_ReadInputDataBit *****************
 11821 ;; Defined at:
 11822 ;;		line 101 in file "ms83fxx02_gpio.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  GPIO_ReadInp    1    wreg     enum E1491
 11825 ;;  GPIO_ReadInp    1    0[COMMON] unsigned char 
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;  GPIO_ReadInp    1    2[COMMON] enum E1491
 11828 ;;  GPIO_ReadInp    1    1[COMMON] unsigned char 
 11829 ;; Return value:  Size  Location     Type
 11830 ;;                  1    wreg      unsigned char 
 11831 ;; Registers used:
 11832 ;;		wreg, status,2, status,0
 11833 ;; Tracked objects:
 11834 ;;		On entry : 0/0
 11835 ;;		On exit  : 0/0
 11836 ;;		Unchanged: 0/0
 11837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11838 ;;      Params:         1       0       0       0
 11839 ;;      Locals:         2       0       0       0
 11840 ;;      Temps:          0       0       0       0
 11841 ;;      Totals:         3       0       0       0
 11842 ;;Total ram usage:        3 bytes
 11843 ;; Hardware stack levels used:    1
 11844 ;; This function calls:
 11845 ;;		Nothing
 11846 ;; This function is called by:
 11847 ;;		_ChargeDetect_IntrHandler
 11848 ;;		_DebounceTimer_IntrHandler
 11849 ;;		_LED_DisplayRunLimit
 11850 ;;		_LEDTimer_IntrHandler
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           psect	text1847
 11854                           	file	"ms83fxx02_gpio.c"
 11855                           	line	101
 11856                           	global	__size_ofi1_GPIO_ReadInputDataBit
 11857  002B                     	__size_ofi1_GPIO_ReadInputDataBit	equ	__end_ofi1_GPIO_ReadInputDataBit-i1_GPIO_ReadInpu
                                 tDataBit
 11858                           	
 11859  0E46                     i1_GPIO_ReadInputDataBit:	
 11860                           	opt	stack 1
 11861                           ; Regs used in i1_GPIO_ReadInputDataBit: [wreg+status,2+status,0]
 11862                           ;i1GPIO_ReadInputDataBit@GPIOx stored from wreg
 11863  0E46  00F2               	movwf	(i1GPIO_ReadInputDataBit@GPIOx)
 11864                           	line	102
 11865                           	
 11866  0E47                     i1l17499:	
 11867                           ;ms83fxx02_gpio.c: 102: uint8_t bitstatus = RESET;
 11868  0E47  01F1               	clrf	(i1GPIO_ReadInputDataBit@bitstatus)
 11869                           	line	104
 11870                           	
 11871  0E48                     i1l17501:	
 11872                           ;ms83fxx02_gpio.c: 104: if(GPIOx == GPIOA)
 11873  0E48  08F2               	movf	(i1GPIO_ReadInputDataBit@GPIOx),f
 11874  0E49  1D03               	skipz
 11875  0E4A  2E4C               	goto	u510_21
 11876  0E4B  2E4D               	goto	u510_20
 11877  0E4C                     u510_21:
 11878  0E4C  2E5A               	goto	i1l17507
 11879  0E4D                     u510_20:
 11880                           	line	106
 11881                           	
 11882  0E4D                     i1l17503:	
 11883                           ;ms83fxx02_gpio.c: 105: {
 11884                           ;ms83fxx02_gpio.c: 106: if (PORTA & GPIO_Pin)
 11885  0E4D  1283               	bcf	status, 5	;RP0=0, select bank0
 11886  0E4E  1303               	bcf	status, 6	;RP1=0, select bank0
 11887  0E4F  0805               	movf	(5),w	;volatile
 11888  0E50  0570               	andwf	(i1GPIO_ReadInputDataBit@GPIO_Pin),w
 11889  0E51  1903               	btfsc	status,2
 11890  0E52  2E54               	goto	u511_21
 11891  0E53  2E55               	goto	u511_20
 11892  0E54                     u511_21:
 11893  0E54  2E6E               	goto	i1l17513
 11894  0E55                     u511_20:
 11895                           	line	108
 11896                           	
 11897  0E55                     i1l17505:	
 11898                           ;ms83fxx02_gpio.c: 107: {
 11899                           ;ms83fxx02_gpio.c: 108: bitstatus = (uint8_t)SET;
 11900  0E55  01F1               	clrf	(i1GPIO_ReadInputDataBit@bitstatus)
 11901  0E56  1403               	bsf	status,0
 11902  0E57  0DF1               	rlf	(i1GPIO_ReadInputDataBit@bitstatus),f
 11903  0E58  2E6E               	goto	i1l17513
 11904                           	line	109
 11905                           	
 11906  0E59                     i1l4425:	
 11907                           	line	110
 11908                           ;ms83fxx02_gpio.c: 109: }
 11909                           ;ms83fxx02_gpio.c: 110: }
 11910  0E59  2E6E               	goto	i1l17513
 11911                           	line	111
 11912                           	
 11913  0E5A                     i1l4424:	
 11914                           	line	113
 11915                           	
 11916  0E5A                     i1l17507:	
 11917                           ;ms83fxx02_gpio.c: 111: else
 11918                           ;ms83fxx02_gpio.c: 112: {
 11919                           ;ms83fxx02_gpio.c: 113: if(GPIOx == GPIOC)
 11920  0E5A  0872               	movf	(i1GPIO_ReadInputDataBit@GPIOx),w
 11921  0E5B  3A01               	xorlw	01h
 11922  0E5C  1D03               	skipz
 11923  0E5D  2E5F               	goto	u512_21
 11924  0E5E  2E60               	goto	u512_20
 11925  0E5F                     u512_21:
 11926  0E5F  2E6E               	goto	i1l17513
 11927  0E60                     u512_20:
 11928                           	line	115
 11929                           	
 11930  0E60                     i1l17509:	
 11931                           ;ms83fxx02_gpio.c: 114: {
 11932                           ;ms83fxx02_gpio.c: 115: if (PORTC & GPIO_Pin)
 11933  0E60  1283               	bcf	status, 5	;RP0=0, select bank0
 11934  0E61  1303               	bcf	status, 6	;RP1=0, select bank0
 11935  0E62  0807               	movf	(7),w	;volatile
 11936  0E63  0570               	andwf	(i1GPIO_ReadInputDataBit@GPIO_Pin),w
 11937  0E64  1903               	btfsc	status,2
 11938  0E65  2E67               	goto	u513_21
 11939  0E66  2E68               	goto	u513_20
 11940  0E67                     u513_21:
 11941  0E67  2E6E               	goto	i1l17513
 11942  0E68                     u513_20:
 11943                           	line	117
 11944                           	
 11945  0E68                     i1l17511:	
 11946                           ;ms83fxx02_gpio.c: 116: {
 11947                           ;ms83fxx02_gpio.c: 117: bitstatus = (uint8_t)SET;
 11948  0E68  01F1               	clrf	(i1GPIO_ReadInputDataBit@bitstatus)
 11949  0E69  1403               	bsf	status,0
 11950  0E6A  0DF1               	rlf	(i1GPIO_ReadInputDataBit@bitstatus),f
 11951  0E6B  2E6E               	goto	i1l17513
 11952                           	line	118
 11953                           	
 11954  0E6C                     i1l4428:	
 11955  0E6C  2E6E               	goto	i1l17513
 11956                           	line	119
 11957                           	
 11958  0E6D                     i1l4427:	
 11959  0E6D  2E6E               	goto	i1l17513
 11960                           	line	120
 11961                           	
 11962  0E6E                     i1l4426:	
 11963                           	line	122
 11964                           	
 11965  0E6E                     i1l17513:	
 11966                           ;ms83fxx02_gpio.c: 118: }
 11967                           ;ms83fxx02_gpio.c: 119: }
 11968                           ;ms83fxx02_gpio.c: 120: }
 11969                           ;ms83fxx02_gpio.c: 122: return bitstatus;
 11970  0E6E  0871               	movf	(i1GPIO_ReadInputDataBit@bitstatus),w
 11971  0E6F  2E70               	goto	i1l4429
 11972                           	
 11973  0E70                     i1l17515:	
 11974                           	line	123
 11975                           	
 11976  0E70                     i1l4429:	
 11977  0E70  0008               	return
 11978                           	opt stack 0
 11979                           GLOBAL	__end_ofi1_GPIO_ReadInputDataBit
 11980  0E71                     	__end_ofi1_GPIO_ReadInputDataBit:
 11981 ;; =============== function i1_GPIO_ReadInputDataBit ends ============
 11982                           
 11983                           	signat	i1_GPIO_ReadInputDataBit,89
 11984                           	global	i1_GPIO_WriteBit
 11985                           psect	text1848,local,class=CODE,delta=2
 11986                           global __ptext1848
 11987  0E71                     __ptext1848:
 11988                           
 11989 ;; *************** function i1_GPIO_WriteBit *****************
 11990 ;; Defined at:
 11991 ;;		line 68 in file "ms83fxx02_gpio.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;  GPIO_WriteBi    1    wreg     enum E1491
 11994 ;;  GPIO_WriteBi    1    3[COMMON] unsigned char 
 11995 ;;  GPIO_WriteBi    1    4[COMMON] enum E1499
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  GPIO_WriteBi    1    6[COMMON] enum E1491
 11998 ;; Return value:  Size  Location     Type
 11999 ;;		None               void
 12000 ;; Registers used:
 12001 ;;		wreg, status,2, status,0
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12007 ;;      Params:         2       0       0       0
 12008 ;;      Locals:         1       0       0       0
 12009 ;;      Temps:          1       0       0       0
 12010 ;;      Totals:         4       0       0       0
 12011 ;;Total ram usage:        4 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; This function calls:
 12014 ;;		Nothing
 12015 ;; This function is called by:
 12016 ;;		_LED_DisplayRunLimit
 12017 ;;		i1_LED_UnderVoltageOutput
 12018 ;;		i1_Motor_Stop
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           psect	text1848
 12022                           	file	"ms83fxx02_gpio.c"
 12023                           	line	68
 12024                           	global	__size_ofi1_GPIO_WriteBit
 12025  002D                     	__size_ofi1_GPIO_WriteBit	equ	__end_ofi1_GPIO_WriteBit-i1_GPIO_WriteBit
 12026                           	
 12027  0E71                     i1_GPIO_WriteBit:	
 12028                           	opt	stack 0
 12029                           ; Regs used in i1_GPIO_WriteBit: [wreg+status,2+status,0]
 12030                           ;i1GPIO_WriteBit@GPIOx stored from wreg
 12031  0E71  00F6               	movwf	(i1GPIO_WriteBit@GPIOx)
 12032                           	line	69
 12033                           	
 12034  0E72                     i1l17485:	
 12035                           ;ms83fxx02_gpio.c: 69: if(GPIOx == GPIOA)
 12036  0E72  08F6               	movf	(i1GPIO_WriteBit@GPIOx),f
 12037  0E73  1D03               	skipz
 12038  0E74  2E76               	goto	u507_21
 12039  0E75  2E77               	goto	u507_20
 12040  0E76                     u507_21:
 12041  0E76  2E8A               	goto	i1l17493
 12042  0E77                     u507_20:
 12043                           	line	71
 12044                           	
 12045  0E77                     i1l17487:	
 12046                           ;ms83fxx02_gpio.c: 70: {
 12047                           ;ms83fxx02_gpio.c: 71: if (BitVal != Bit_RESET)
 12048  0E77  0874               	movf	(i1GPIO_WriteBit@BitVal),w
 12049  0E78  1D03               	skipz
 12050  0E79  2E7B               	goto	u508_20
 12051  0E7A  2E82               	goto	i1l17491
 12052  0E7B                     u508_20:
 12053                           	line	73
 12054                           	
 12055  0E7B                     i1l17489:	
 12056                           ;ms83fxx02_gpio.c: 72: {
 12057                           ;ms83fxx02_gpio.c: 73: PORTA |= GPIO_Pin;
 12058  0E7B  0873               	movf	(i1GPIO_WriteBit@GPIO_Pin),w
 12059  0E7C  00F5               	movwf	(??i1_GPIO_WriteBit+0)+0
 12060  0E7D  0875               	movf	(??i1_GPIO_WriteBit+0)+0,w
 12061  0E7E  1283               	bcf	status, 5	;RP0=0, select bank0
 12062  0E7F  1303               	bcf	status, 6	;RP1=0, select bank0
 12063  0E80  0485               	iorwf	(5),f	;volatile
 12064                           	line	74
 12065                           ;ms83fxx02_gpio.c: 74: }
 12066  0E81  2E9D               	goto	i1l4421
 12067                           	line	75
 12068                           	
 12069  0E82                     i1l4416:	
 12070                           	line	77
 12071                           	
 12072  0E82                     i1l17491:	
 12073                           ;ms83fxx02_gpio.c: 75: else
 12074                           ;ms83fxx02_gpio.c: 76: {
 12075                           ;ms83fxx02_gpio.c: 77: PORTA &= ~(GPIO_Pin);
 12076  0E82  0973               	comf	(i1GPIO_WriteBit@GPIO_Pin),w
 12077  0E83  00F5               	movwf	(??i1_GPIO_WriteBit+0)+0
 12078  0E84  0875               	movf	(??i1_GPIO_WriteBit+0)+0,w
 12079  0E85  1283               	bcf	status, 5	;RP0=0, select bank0
 12080  0E86  1303               	bcf	status, 6	;RP1=0, select bank0
 12081  0E87  0585               	andwf	(5),f	;volatile
 12082  0E88  2E9D               	goto	i1l4421
 12083                           	line	78
 12084                           	
 12085  0E89                     i1l4417:	
 12086                           	line	79
 12087                           ;ms83fxx02_gpio.c: 78: }
 12088                           ;ms83fxx02_gpio.c: 79: }
 12089  0E89  2E9D               	goto	i1l4421
 12090                           	line	80
 12091                           	
 12092  0E8A                     i1l4415:	
 12093                           	line	82
 12094                           	
 12095  0E8A                     i1l17493:	
 12096                           ;ms83fxx02_gpio.c: 80: else
 12097                           ;ms83fxx02_gpio.c: 81: {
 12098                           ;ms83fxx02_gpio.c: 82: if (BitVal != Bit_RESET)
 12099  0E8A  0874               	movf	(i1GPIO_WriteBit@BitVal),w
 12100  0E8B  1D03               	skipz
 12101  0E8C  2E8E               	goto	u509_20
 12102  0E8D  2E95               	goto	i1l17497
 12103  0E8E                     u509_20:
 12104                           	line	84
 12105                           	
 12106  0E8E                     i1l17495:	
 12107                           ;ms83fxx02_gpio.c: 83: {
 12108                           ;ms83fxx02_gpio.c: 84: PORTC |= GPIO_Pin;
 12109  0E8E  0873               	movf	(i1GPIO_WriteBit@GPIO_Pin),w
 12110  0E8F  00F5               	movwf	(??i1_GPIO_WriteBit+0)+0
 12111  0E90  0875               	movf	(??i1_GPIO_WriteBit+0)+0,w
 12112  0E91  1283               	bcf	status, 5	;RP0=0, select bank0
 12113  0E92  1303               	bcf	status, 6	;RP1=0, select bank0
 12114  0E93  0487               	iorwf	(7),f	;volatile
 12115                           	line	85
 12116                           ;ms83fxx02_gpio.c: 85: }
 12117  0E94  2E9D               	goto	i1l4421
 12118                           	line	86
 12119                           	
 12120  0E95                     i1l4419:	
 12121                           	line	88
 12122                           	
 12123  0E95                     i1l17497:	
 12124                           ;ms83fxx02_gpio.c: 86: else
 12125                           ;ms83fxx02_gpio.c: 87: {
 12126                           ;ms83fxx02_gpio.c: 88: PORTC &= ~(GPIO_Pin);
 12127  0E95  0973               	comf	(i1GPIO_WriteBit@GPIO_Pin),w
 12128  0E96  00F5               	movwf	(??i1_GPIO_WriteBit+0)+0
 12129  0E97  0875               	movf	(??i1_GPIO_WriteBit+0)+0,w
 12130  0E98  1283               	bcf	status, 5	;RP0=0, select bank0
 12131  0E99  1303               	bcf	status, 6	;RP1=0, select bank0
 12132  0E9A  0587               	andwf	(7),f	;volatile
 12133  0E9B  2E9D               	goto	i1l4421
 12134                           	line	89
 12135                           	
 12136  0E9C                     i1l4420:	
 12137  0E9C  2E9D               	goto	i1l4421
 12138                           	line	90
 12139                           	
 12140  0E9D                     i1l4418:	
 12141                           	line	91
 12142                           	
 12143  0E9D                     i1l4421:	
 12144  0E9D  0008               	return
 12145                           	opt stack 0
 12146                           GLOBAL	__end_ofi1_GPIO_WriteBit
 12147  0E9E                     	__end_ofi1_GPIO_WriteBit:
 12148 ;; =============== function i1_GPIO_WriteBit ends ============
 12149                           
 12150                           	signat	i1_GPIO_WriteBit,88
 12151                           	global	___awmod
 12152                           psect	text1849,local,class=CODE,delta=2
 12153                           global __ptext1849
 12154  04EC                     __ptext1849:
 12155                           
 12156 ;; *************** function ___awmod *****************
 12157 ;; Defined at:
 12158 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\awmod.c"
 12159 ;; Parameters:    Size  Location     Type
 12160 ;;  divisor         2    0[COMMON] int 
 12161 ;;  dividend        2    2[COMMON] int 
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  sign            1    6[COMMON] unsigned char 
 12164 ;;  counter         1    5[COMMON] unsigned char 
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  2    0[COMMON] int 
 12167 ;; Registers used:
 12168 ;;		wreg, status,2, status,0
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12174 ;;      Params:         4       0       0       0
 12175 ;;      Locals:         2       0       0       0
 12176 ;;      Temps:          1       0       0       0
 12177 ;;      Totals:         7       0       0       0
 12178 ;;Total ram usage:        7 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; This function calls:
 12181 ;;		Nothing
 12182 ;; This function is called by:
 12183 ;;		_MotorOperTimer_IntrHandler
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           psect	text1849
 12187                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\awmod.c"
 12188                           	line	5
 12189                           	global	__size_of___awmod
 12190  0066                     	__size_of___awmod	equ	__end_of___awmod-___awmod
 12191                           	
 12192  04EC                     ___awmod:	
 12193                           	opt	stack 1
 12194                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12195                           	line	8
 12196                           	
 12197  04EC                     i1l17409:	
 12198  04EC  01F6               	clrf	(___awmod@sign)
 12199                           	line	9
 12200  04ED  1FF3               	btfss	(___awmod@dividend+1),7
 12201  04EE  2CF0               	goto	u492_21
 12202  04EF  2CF1               	goto	u492_20
 12203  04F0                     u492_21:
 12204  04F0  2CFA               	goto	i1l17413
 12205  04F1                     u492_20:
 12206                           	line	10
 12207                           	
 12208  04F1                     i1l17411:	
 12209  04F1  09F2               	comf	(___awmod@dividend),f
 12210  04F2  09F3               	comf	(___awmod@dividend+1),f
 12211  04F3  0AF2               	incf	(___awmod@dividend),f
 12212  04F4  1903               	skipnz
 12213  04F5  0AF3               	incf	(___awmod@dividend+1),f
 12214                           	line	11
 12215  04F6  01F6               	clrf	(___awmod@sign)
 12216  04F7  1403               	bsf	status,0
 12217  04F8  0DF6               	rlf	(___awmod@sign),f
 12218  04F9  2CFA               	goto	i1l17413
 12219                           	line	12
 12220                           	
 12221  04FA                     i1l14211:	
 12222                           	line	13
 12223                           	
 12224  04FA                     i1l17413:	
 12225  04FA  1FF1               	btfss	(___awmod@divisor+1),7
 12226  04FB  2CFD               	goto	u493_21
 12227  04FC  2CFE               	goto	u493_20
 12228  04FD                     u493_21:
 12229  04FD  2D04               	goto	i1l17417
 12230  04FE                     u493_20:
 12231                           	line	14
 12232                           	
 12233  04FE                     i1l17415:	
 12234  04FE  09F0               	comf	(___awmod@divisor),f
 12235  04FF  09F1               	comf	(___awmod@divisor+1),f
 12236  0500  0AF0               	incf	(___awmod@divisor),f
 12237  0501  1903               	skipnz
 12238  0502  0AF1               	incf	(___awmod@divisor+1),f
 12239  0503  2D04               	goto	i1l17417
 12240                           	
 12241  0504                     i1l14212:	
 12242                           	line	15
 12243                           	
 12244  0504                     i1l17417:	
 12245  0504  0871               	movf	(___awmod@divisor+1),w
 12246  0505  0470               	iorwf	(___awmod@divisor),w
 12247  0506  1903               	skipnz
 12248  0507  2D09               	goto	u494_21
 12249  0508  2D0A               	goto	u494_20
 12250  0509                     u494_21:
 12251  0509  2D40               	goto	i1l17435
 12252  050A                     u494_20:
 12253                           	line	16
 12254                           	
 12255  050A                     i1l17419:	
 12256  050A  01F5               	clrf	(___awmod@counter)
 12257  050B  1403               	bsf	status,0
 12258  050C  0DF5               	rlf	(___awmod@counter),f
 12259                           	line	17
 12260  050D  2D1A               	goto	i1l17425
 12261                           	
 12262  050E                     i1l14215:	
 12263                           	line	18
 12264                           	
 12265  050E                     i1l17421:	
 12266  050E  3001               	movlw	01h
 12267                           	
 12268  050F                     u495_25:
 12269  050F  1003               	clrc
 12270  0510  0DF0               	rlf	(___awmod@divisor),f
 12271  0511  0DF1               	rlf	(___awmod@divisor+1),f
 12272  0512  3EFF               	addlw	-1
 12273  0513  1D03               	skipz
 12274  0514  2D0F               	goto	u495_25
 12275                           	line	19
 12276                           	
 12277  0515                     i1l17423:	
 12278  0515  3001               	movlw	(01h)
 12279  0516  00F4               	movwf	(??___awmod+0)+0
 12280  0517  0874               	movf	(??___awmod+0)+0,w
 12281  0518  07F5               	addwf	(___awmod@counter),f
 12282  0519  2D1A               	goto	i1l17425
 12283                           	line	20
 12284                           	
 12285  051A                     i1l14214:	
 12286                           	line	17
 12287                           	
 12288  051A                     i1l17425:	
 12289  051A  1FF1               	btfss	(___awmod@divisor+1),(15)&7
 12290  051B  2D1D               	goto	u496_21
 12291  051C  2D1E               	goto	u496_20
 12292  051D                     u496_21:
 12293  051D  2D0E               	goto	i1l17421
 12294  051E                     u496_20:
 12295  051E  2D20               	goto	i1l17427
 12296                           	
 12297  051F                     i1l14216:	
 12298  051F  2D20               	goto	i1l17427
 12299                           	line	21
 12300                           	
 12301  0520                     i1l14217:	
 12302                           	line	22
 12303                           	
 12304  0520                     i1l17427:	
 12305  0520  0871               	movf	(___awmod@divisor+1),w
 12306  0521  0273               	subwf	(___awmod@dividend+1),w
 12307  0522  1D03               	skipz
 12308  0523  2D26               	goto	u497_25
 12309  0524  0870               	movf	(___awmod@divisor),w
 12310  0525  0272               	subwf	(___awmod@dividend),w
 12311  0526                     u497_25:
 12312  0526  1C03               	skipc
 12313  0527  2D29               	goto	u497_21
 12314  0528  2D2A               	goto	u497_20
 12315  0529                     u497_21:
 12316  0529  2D31               	goto	i1l17431
 12317  052A                     u497_20:
 12318                           	line	23
 12319                           	
 12320  052A                     i1l17429:	
 12321  052A  0870               	movf	(___awmod@divisor),w
 12322  052B  02F2               	subwf	(___awmod@dividend),f
 12323  052C  0871               	movf	(___awmod@divisor+1),w
 12324  052D  1C03               	skipc
 12325  052E  03F3               	decf	(___awmod@dividend+1),f
 12326  052F  02F3               	subwf	(___awmod@dividend+1),f
 12327  0530  2D31               	goto	i1l17431
 12328                           	
 12329  0531                     i1l14218:	
 12330                           	line	24
 12331                           	
 12332  0531                     i1l17431:	
 12333  0531  3001               	movlw	01h
 12334                           	
 12335  0532                     u498_25:
 12336  0532  1003               	clrc
 12337  0533  0CF1               	rrf	(___awmod@divisor+1),f
 12338  0534  0CF0               	rrf	(___awmod@divisor),f
 12339  0535  3EFF               	addlw	-1
 12340  0536  1D03               	skipz
 12341  0537  2D32               	goto	u498_25
 12342                           	line	25
 12343                           	
 12344  0538                     i1l17433:	
 12345  0538  3001               	movlw	low(01h)
 12346  0539  02F5               	subwf	(___awmod@counter),f
 12347  053A  1D03               	btfss	status,2
 12348  053B  2D3D               	goto	u499_21
 12349  053C  2D3E               	goto	u499_20
 12350  053D                     u499_21:
 12351  053D  2D20               	goto	i1l17427
 12352  053E                     u499_20:
 12353  053E  2D40               	goto	i1l17435
 12354                           	
 12355  053F                     i1l14219:	
 12356  053F  2D40               	goto	i1l17435
 12357                           	line	26
 12358                           	
 12359  0540                     i1l14213:	
 12360                           	line	27
 12361                           	
 12362  0540                     i1l17435:	
 12363  0540  0876               	movf	(___awmod@sign),w
 12364  0541  1D03               	skipz
 12365  0542  2D44               	goto	u500_20
 12366  0543  2D4A               	goto	i1l17439
 12367  0544                     u500_20:
 12368                           	line	28
 12369                           	
 12370  0544                     i1l17437:	
 12371  0544  09F2               	comf	(___awmod@dividend),f
 12372  0545  09F3               	comf	(___awmod@dividend+1),f
 12373  0546  0AF2               	incf	(___awmod@dividend),f
 12374  0547  1903               	skipnz
 12375  0548  0AF3               	incf	(___awmod@dividend+1),f
 12376  0549  2D4A               	goto	i1l17439
 12377                           	
 12378  054A                     i1l14220:	
 12379                           	line	29
 12380                           	
 12381  054A                     i1l17439:	
 12382  054A  0873               	movf	(___awmod@dividend+1),w
 12383  054B  01F1               	clrf	(?___awmod+1)
 12384  054C  07F1               	addwf	(?___awmod+1)
 12385  054D  0872               	movf	(___awmod@dividend),w
 12386  054E  01F0               	clrf	(?___awmod)
 12387  054F  07F0               	addwf	(?___awmod)
 12388                           
 12389  0550  2D51               	goto	i1l14221
 12390                           	
 12391  0551                     i1l17441:	
 12392                           	line	30
 12393                           	
 12394  0551                     i1l14221:	
 12395  0551  0008               	return
 12396                           	opt stack 0
 12397                           GLOBAL	__end_of___awmod
 12398  0552                     	__end_of___awmod:
 12399 ;; =============== function ___awmod ends ============
 12400                           
 12401                           	signat	___awmod,8314
 12402                           	global	_SleepLed_ChangeDuty
 12403                           psect	text1850,local,class=CODE,delta=2
 12404                           global __ptext1850
 12405  0F8E                     __ptext1850:
 12406                           
 12407 ;; *************** function _SleepLed_ChangeDuty *****************
 12408 ;; Defined at:
 12409 ;;		line 108 in file "ms83fxx02_sleepled.c"
 12410 ;; Parameters:    Size  Location     Type
 12411 ;;		None
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;		None
 12414 ;; Return value:  Size  Location     Type
 12415 ;;		None               void
 12416 ;; Registers used:
 12417 ;;		wreg, status,2, status,0
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12423 ;;      Params:         0       0       0       0
 12424 ;;      Locals:         0       0       0       0
 12425 ;;      Temps:          0       0       0       0
 12426 ;;      Totals:         0       0       0       0
 12427 ;;Total ram usage:        0 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_SleepLedTimer_IntrHandler
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           psect	text1850
 12436                           	file	"ms83fxx02_sleepled.c"
 12437                           	line	108
 12438                           	global	__size_of_SleepLed_ChangeDuty
 12439  0037                     	__size_of_SleepLed_ChangeDuty	equ	__end_of_SleepLed_ChangeDuty-_SleepLed_ChangeDuty
 12440                           	
 12441  0F8E                     _SleepLed_ChangeDuty:	
 12442                           	opt	stack 1
 12443                           ; Regs used in _SleepLed_ChangeDuty: [wreg+status,2+status,0]
 12444                           	line	109
 12445                           	
 12446  0F8E                     i1l17163:	
 12447                           ;ms83fxx02_sleepled.c: 109: if(sleep_led_dir)
 12448  0F8E  1283               	bcf	status, 5	;RP0=0, select bank0
 12449  0F8F  1303               	bcf	status, 6	;RP1=0, select bank0
 12450  0F90  0844               	movf	(_sleep_led_dir),w	;volatile
 12451  0F91  1D03               	skipz
 12452  0F92  2F94               	goto	u425_20
 12453  0F93  2F9B               	goto	i1l17167
 12454  0F94                     u425_20:
 12455                           	line	111
 12456                           	
 12457  0F94                     i1l17165:	
 12458                           ;ms83fxx02_sleepled.c: 110: {
 12459                           ;ms83fxx02_sleepled.c: 111: sleep_led_duty -= (0xFFF/100);
 12460  0F94  3028               	movlw	low(028h)
 12461  0F95  02B8               	subwf	(_sleep_led_duty),f	;volatile
 12462  0F96  3000               	movlw	high(028h)
 12463  0F97  1C03               	skipc
 12464  0F98  03B9               	decf	(_sleep_led_duty+1),f	;volatile
 12465  0F99  02B9               	subwf	(_sleep_led_duty+1),f	;volatile
 12466                           	line	112
 12467                           ;ms83fxx02_sleepled.c: 112: }
 12468  0F9A  2FA1               	goto	i1l13316
 12469                           	line	113
 12470                           	
 12471  0F9B                     i1l13315:	
 12472                           	line	115
 12473                           	
 12474  0F9B                     i1l17167:	
 12475                           ;ms83fxx02_sleepled.c: 113: else
 12476                           ;ms83fxx02_sleepled.c: 114: {
 12477                           ;ms83fxx02_sleepled.c: 115: sleep_led_duty += (0xFFF/100);
 12478  0F9B  3028               	movlw	low(028h)
 12479  0F9C  07B8               	addwf	(_sleep_led_duty),f	;volatile
 12480  0F9D  1803               	skipnc
 12481  0F9E  0AB9               	incf	(_sleep_led_duty+1),f	;volatile
 12482  0F9F  3000               	movlw	high(028h)
 12483  0FA0  07B9               	addwf	(_sleep_led_duty+1),f	;volatile
 12484                           	line	116
 12485                           	
 12486  0FA1                     i1l13316:	
 12487                           	line	118
 12488                           ;ms83fxx02_sleepled.c: 116: }
 12489                           ;ms83fxx02_sleepled.c: 118: if(sleep_led_duty >= (0xFFF - (0xFFF/100)))
 12490  0FA1  300F               	movlw	high(0FD7h)
 12491  0FA2  0239               	subwf	(_sleep_led_duty+1),w	;volatile
 12492  0FA3  30D7               	movlw	low(0FD7h)
 12493  0FA4  1903               	skipnz
 12494  0FA5  0238               	subwf	(_sleep_led_duty),w	;volatile
 12495  0FA6  1C03               	skipc
 12496  0FA7  2FA9               	goto	u426_21
 12497  0FA8  2FAA               	goto	u426_20
 12498  0FA9                     u426_21:
 12499  0FA9  2FAE               	goto	i1l17171
 12500  0FAA                     u426_20:
 12501                           	line	120
 12502                           	
 12503  0FAA                     i1l17169:	
 12504                           ;ms83fxx02_sleepled.c: 119: {
 12505                           ;ms83fxx02_sleepled.c: 120: sleep_led_dir = 1;
 12506  0FAA  01C4               	clrf	(_sleep_led_dir)	;volatile
 12507  0FAB  1403               	bsf	status,0
 12508  0FAC  0DC4               	rlf	(_sleep_led_dir),f	;volatile
 12509  0FAD  2FAE               	goto	i1l17171
 12510                           	line	121
 12511                           	
 12512  0FAE                     i1l13317:	
 12513                           	line	123
 12514                           	
 12515  0FAE                     i1l17171:	
 12516                           ;ms83fxx02_sleepled.c: 121: }
 12517                           ;ms83fxx02_sleepled.c: 123: if(sleep_led_duty <= (0xFFF/100))
 12518  0FAE  3000               	movlw	high(029h)
 12519  0FAF  0239               	subwf	(_sleep_led_duty+1),w	;volatile
 12520  0FB0  3029               	movlw	low(029h)
 12521  0FB1  1903               	skipnz
 12522  0FB2  0238               	subwf	(_sleep_led_duty),w	;volatile
 12523  0FB3  1803               	skipnc
 12524  0FB4  2FB6               	goto	u427_21
 12525  0FB5  2FB7               	goto	u427_20
 12526  0FB6                     u427_21:
 12527  0FB6  2FB9               	goto	i1l17175
 12528  0FB7                     u427_20:
 12529                           	line	125
 12530                           	
 12531  0FB7                     i1l17173:	
 12532                           ;ms83fxx02_sleepled.c: 124: {
 12533                           ;ms83fxx02_sleepled.c: 125: sleep_led_dir = 0;
 12534  0FB7  01C4               	clrf	(_sleep_led_dir)	;volatile
 12535  0FB8  2FB9               	goto	i1l17175
 12536                           	line	126
 12537                           	
 12538  0FB9                     i1l13318:	
 12539                           	line	130
 12540                           	
 12541  0FB9                     i1l17175:	
 12542                           ;ms83fxx02_sleepled.c: 126: }
 12543                           ;ms83fxx02_sleepled.c: 130: TMR4H = (sleep_led_duty >> 8) & 0xFF;
 12544  0FB9  0839               	movf	(_sleep_led_duty+1),w	;volatile
 12545  0FBA  1283               	bcf	status, 5	;RP0=0, select bank2
 12546  0FBB  1703               	bsf	status, 6	;RP1=1, select bank2
 12547  0FBC  0093               	movwf	(275)^0100h	;volatile
 12548                           	line	131
 12549                           	
 12550  0FBD                     i1l17177:	
 12551                           ;ms83fxx02_sleepled.c: 131: TMR4L = 0;
 12552  0FBD  0192               	clrf	(274)^0100h	;volatile
 12553                           	line	132
 12554                           ;ms83fxx02_sleepled.c: 132: PR4L = sleep_led_duty & 0xFF;
 12555  0FBE  1283               	bcf	status, 5	;RP0=0, select bank0
 12556  0FBF  1303               	bcf	status, 6	;RP1=0, select bank0
 12557  0FC0  0838               	movf	(_sleep_led_duty),w	;volatile
 12558  0FC1  1283               	bcf	status, 5	;RP0=0, select bank2
 12559  0FC2  1703               	bsf	status, 6	;RP1=1, select bank2
 12560  0FC3  0094               	movwf	(276)^0100h	;volatile
 12561                           	line	133
 12562                           	
 12563  0FC4                     i1l13319:	
 12564  0FC4  0008               	return
 12565                           	opt stack 0
 12566                           GLOBAL	__end_of_SleepLed_ChangeDuty
 12567  0FC5                     	__end_of_SleepLed_ChangeDuty:
 12568 ;; =============== function _SleepLed_ChangeDuty ends ============
 12569                           
 12570                           	signat	_SleepLed_ChangeDuty,88
 12571                           	global	_ADC_ReadData
 12572                           psect	text1851,local,class=CODE,delta=2
 12573                           global __ptext1851
 12574  0D57                     __ptext1851:
 12575                           
 12576 ;; *************** function _ADC_ReadData *****************
 12577 ;; Defined at:
 12578 ;;		line 141 in file "ms83fxx02_pwr.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;		None
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;  battery_valu    2    6[COMMON] unsigned short 
 12583 ;; Return value:  Size  Location     Type
 12584 ;;                  2    0[COMMON] unsigned short 
 12585 ;; Registers used:
 12586 ;;		wreg, status,2, status,0
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12592 ;;      Params:         2       0       0       0
 12593 ;;      Locals:         2       0       0       0
 12594 ;;      Temps:          4       0       0       0
 12595 ;;      Totals:         8       0       0       0
 12596 ;;Total ram usage:        8 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; This function calls:
 12599 ;;		Nothing
 12600 ;; This function is called by:
 12601 ;;		_ADC_IntrHandler
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           psect	text1851
 12605                           	file	"ms83fxx02_pwr.c"
 12606                           	line	141
 12607                           	global	__size_of_ADC_ReadData
 12608  0025                     	__size_of_ADC_ReadData	equ	__end_of_ADC_ReadData-_ADC_ReadData
 12609                           	
 12610  0D57                     _ADC_ReadData:	
 12611                           	opt	stack 1
 12612                           ; Regs used in _ADC_ReadData: [wreg+status,2+status,0]
 12613                           	line	142
 12614                           	
 12615  0D57                     i1l17105:	
 12616                           ;ms83fxx02_pwr.c: 142: uint16_t battery_value = 0;
 12617  0D57  01F6               	clrf	(ADC_ReadData@battery_value)
 12618  0D58  01F7               	clrf	(ADC_ReadData@battery_value+1)
 12619                           	line	144
 12620                           	
 12621  0D59                     i1l17107:	
 12622                           ;ms83fxx02_pwr.c: 144: battery_value = ADRESH & 0x03;
 12623  0D59  1283               	bcf	status, 5	;RP0=0, select bank0
 12624  0D5A  1303               	bcf	status, 6	;RP1=0, select bank0
 12625  0D5B  081E               	movf	(30),w
 12626  0D5C  3903               	andlw	03h
 12627  0D5D  00F2               	movwf	(??_ADC_ReadData+0)+0
 12628  0D5E  01F3               	clrf	(??_ADC_ReadData+0)+0+1
 12629  0D5F  0872               	movf	0+(??_ADC_ReadData+0)+0,w
 12630  0D60  00F6               	movwf	(ADC_ReadData@battery_value)
 12631  0D61  0873               	movf	1+(??_ADC_ReadData+0)+0,w
 12632  0D62  00F7               	movwf	(ADC_ReadData@battery_value+1)
 12633                           	line	145
 12634                           ;ms83fxx02_pwr.c: 145: battery_value = (battery_value << 8) | ADRESL;
 12635  0D63  1683               	bsf	status, 5	;RP0=1, select bank1
 12636  0D64  1303               	bcf	status, 6	;RP1=0, select bank1
 12637  0D65  081E               	movf	(158)^080h,w	;volatile
 12638  0D66  00F2               	movwf	(??_ADC_ReadData+0)+0
 12639  0D67  01F3               	clrf	(??_ADC_ReadData+0)+0+1
 12640  0D68  0876               	movf	(ADC_ReadData@battery_value),w
 12641  0D69  00F5               	movwf	(??_ADC_ReadData+2)+0+1
 12642  0D6A  01F4               	clrf	(??_ADC_ReadData+2)+0
 12643  0D6B  0872               	movf	0+(??_ADC_ReadData+0)+0,w
 12644  0D6C  0474               	iorwf	0+(??_ADC_ReadData+2)+0,w
 12645  0D6D  00F6               	movwf	(ADC_ReadData@battery_value)
 12646  0D6E  0873               	movf	1+(??_ADC_ReadData+0)+0,w
 12647  0D6F  0475               	iorwf	1+(??_ADC_ReadData+2)+0,w
 12648  0D70  00F7               	movwf	1+(ADC_ReadData@battery_value)
 12649                           	line	148
 12650                           	
 12651  0D71                     i1l17109:	
 12652                           ;ms83fxx02_pwr.c: 148: ADON = 0;
 12653  0D71  1283               	bcf	status, 5	;RP0=0, select bank0
 12654  0D72  1303               	bcf	status, 6	;RP1=0, select bank0
 12655  0D73  101F               	bcf	(248/8),(248)&7
 12656                           	line	149
 12657                           	
 12658  0D74                     i1l17111:	
 12659                           ;ms83fxx02_pwr.c: 149: return battery_value;
 12660  0D74  0877               	movf	(ADC_ReadData@battery_value+1),w
 12661  0D75  01F1               	clrf	(?_ADC_ReadData+1)
 12662  0D76  07F1               	addwf	(?_ADC_ReadData+1)
 12663  0D77  0876               	movf	(ADC_ReadData@battery_value),w
 12664  0D78  01F0               	clrf	(?_ADC_ReadData)
 12665  0D79  07F0               	addwf	(?_ADC_ReadData)
 12666                           
 12667  0D7A  2D7B               	goto	i1l10032
 12668                           	
 12669  0D7B                     i1l17113:	
 12670                           	line	150
 12671                           	
 12672  0D7B                     i1l10032:	
 12673  0D7B  0008               	return
 12674                           	opt stack 0
 12675                           GLOBAL	__end_of_ADC_ReadData
 12676  0D7C                     	__end_of_ADC_ReadData:
 12677 ;; =============== function _ADC_ReadData ends ============
 12678                           
 12679                           	signat	_ADC_ReadData,90
 12680                           	global	_ADC_Enable
 12681                           psect	text1852,local,class=CODE,delta=2
 12682                           global __ptext1852
 12683  0B82                     __ptext1852:
 12684                           
 12685 ;; *************** function _ADC_Enable *****************
 12686 ;; Defined at:
 12687 ;;		line 124 in file "ms83fxx02_pwr.c"
 12688 ;; Parameters:    Size  Location     Type
 12689 ;;  channel         1    wreg     unsigned char 
 12690 ;; Auto vars:     Size  Location     Type
 12691 ;;  channel         1    2[COMMON] unsigned char 
 12692 ;; Return value:  Size  Location     Type
 12693 ;;		None               void
 12694 ;; Registers used:
 12695 ;;		wreg, status,2, status,0
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12701 ;;      Params:         0       0       0       0
 12702 ;;      Locals:         1       0       0       0
 12703 ;;      Temps:          2       0       0       0
 12704 ;;      Totals:         3       0       0       0
 12705 ;;Total ram usage:        3 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; This function calls:
 12708 ;;		Nothing
 12709 ;; This function is called by:
 12710 ;;		_LEDTimer_IntrHandler
 12711 ;; This function uses a non-reentrant model
 12712 ;;
 12713                           psect	text1852
 12714                           	file	"ms83fxx02_pwr.c"
 12715                           	line	124
 12716                           	global	__size_of_ADC_Enable
 12717  0017                     	__size_of_ADC_Enable	equ	__end_of_ADC_Enable-_ADC_Enable
 12718                           	
 12719  0B82                     _ADC_Enable:	
 12720                           	opt	stack 1
 12721                           ; Regs used in _ADC_Enable: [wreg+status,2+status,0]
 12722                           ;ADC_Enable@channel stored from wreg
 12723  0B82  00F2               	movwf	(ADC_Enable@channel)
 12724                           	line	125
 12725                           	
 12726  0B83                     i1l16993:	
 12727                           ;ms83fxx02_pwr.c: 125: ADCON0 |= (channel << 2);
 12728  0B83  0872               	movf	(ADC_Enable@channel),w
 12729  0B84  00F0               	movwf	(??_ADC_Enable+0)+0
 12730  0B85  3001               	movlw	(02h)-1
 12731  0B86                     u409_25:
 12732  0B86  1003               	clrc
 12733  0B87  0DF0               	rlf	(??_ADC_Enable+0)+0,f
 12734  0B88  3EFF               	addlw	-1
 12735  0B89  1D03               	skipz
 12736  0B8A  2B86               	goto	u409_25
 12737  0B8B  1003               	clrc
 12738  0B8C  0D70               	rlf	(??_ADC_Enable+0)+0,w
 12739  0B8D  00F1               	movwf	(??_ADC_Enable+1)+0
 12740  0B8E  0871               	movf	(??_ADC_Enable+1)+0,w
 12741  0B8F  1283               	bcf	status, 5	;RP0=0, select bank0
 12742  0B90  1303               	bcf	status, 6	;RP1=0, select bank0
 12743  0B91  049F               	iorwf	(31),f	;volatile
 12744                           	line	127
 12745                           	
 12746  0B92                     i1l16995:	
 12747                           ;ms83fxx02_pwr.c: 127: ADON = 1;
 12748  0B92  141F               	bsf	(248/8),(248)&7
 12749                           	line	128
 12750                           	
 12751  0B93                     i1l16997:	
 12752                           # 128 "ms83fxx02_pwr.c"
 12753  0B93  0000               nop ;#
 12754                           psect	text1852
 12755                           	line	129
 12756                           	
 12757  0B94                     i1l16999:	
 12758                           # 129 "ms83fxx02_pwr.c"
 12759  0B94  0000               nop ;#
 12760                           psect	text1852
 12761                           	line	132
 12762                           	
 12763  0B95                     i1l17001:	
 12764                           ;ms83fxx02_pwr.c: 132: GO_DONE = 1;
 12765  0B95  1283               	bcf	status, 5	;RP0=0, select bank0
 12766  0B96  1303               	bcf	status, 6	;RP1=0, select bank0
 12767  0B97  149F               	bsf	(249/8),(249)&7
 12768                           	line	133
 12769                           	
 12770  0B98                     i1l10029:	
 12771  0B98  0008               	return
 12772                           	opt stack 0
 12773                           GLOBAL	__end_of_ADC_Enable
 12774  0B99                     	__end_of_ADC_Enable:
 12775 ;; =============== function _ADC_Enable ends ============
 12776                           
 12777                           	signat	_ADC_Enable,4216
 12778                           	global	_TIM1_Init
 12779                           psect	text1853,local,class=CODE,delta=2
 12780                           global __ptext1853
 12781  0A59                     __ptext1853:
 12782                           
 12783 ;; *************** function _TIM1_Init *****************
 12784 ;; Defined at:
 12785 ;;		line 38 in file "MS83FXX02_KEY.C"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;		None
 12790 ;; Return value:  Size  Location     Type
 12791 ;;		None               void
 12792 ;; Registers used:
 12793 ;;		wreg, status,2
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12799 ;;      Params:         0       0       0       0
 12800 ;;      Locals:         0       0       0       0
 12801 ;;      Temps:          0       0       0       0
 12802 ;;      Totals:         0       0       0       0
 12803 ;;Total ram usage:        0 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; This function calls:
 12806 ;;		Nothing
 12807 ;; This function is called by:
 12808 ;;		_KEY_IntrHandler
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           psect	text1853
 12812                           	file	"MS83FXX02_KEY.C"
 12813                           	line	38
 12814                           	global	__size_of_TIM1_Init
 12815  0010                     	__size_of_TIM1_Init	equ	__end_of_TIM1_Init-_TIM1_Init
 12816                           	
 12817  0A59                     _TIM1_Init:	
 12818                           	opt	stack 1
 12819                           ; Regs used in _TIM1_Init: [wreg+status,2]
 12820                           	line	39
 12821                           	
 12822  0A59                     i1l16947:	
 12823                           ;MS83FXX02_KEY.C: 39: TMR1ON = 0;
 12824  0A59  1283               	bcf	status, 5	;RP0=0, select bank0
 12825  0A5A  1303               	bcf	status, 6	;RP1=0, select bank0
 12826  0A5B  1010               	bcf	(128/8),(128)&7
 12827                           	line	44
 12828                           	
 12829  0A5C                     i1l16949:	
 12830                           ;MS83FXX02_KEY.C: 44: TMR1L = 0xF0;
 12831  0A5C  30F0               	movlw	(0F0h)
 12832  0A5D  008E               	movwf	(14)	;volatile
 12833                           	line	45
 12834                           ;MS83FXX02_KEY.C: 45: TMR1H = 0xD8;
 12835  0A5E  30D8               	movlw	(0D8h)
 12836  0A5F  008F               	movwf	(15)	;volatile
 12837                           	line	48
 12838                           	
 12839  0A60                     i1l16951:	
 12840                           ;MS83FXX02_KEY.C: 48: T1CON = 0b00000000;
 12841  0A60  0190               	clrf	(16)	;volatile
 12842                           	line	49
 12843                           	
 12844  0A61                     i1l16953:	
 12845                           ;MS83FXX02_KEY.C: 49: TMR1IF = 0;
 12846  0A61  100C               	bcf	(96/8),(96)&7
 12847                           	line	51
 12848                           	
 12849  0A62                     i1l16955:	
 12850                           ;MS83FXX02_KEY.C: 51: TMR1ON = 1;
 12851  0A62  1410               	bsf	(128/8),(128)&7
 12852                           	line	53
 12853                           	
 12854  0A63                     i1l16957:	
 12855                           ;MS83FXX02_KEY.C: 53: TMR1IE = 1;
 12856  0A63  1683               	bsf	status, 5	;RP0=1, select bank1
 12857  0A64  1303               	bcf	status, 6	;RP1=0, select bank1
 12858  0A65  140C               	bsf	(1120/8)^080h,(1120)&7
 12859                           	line	54
 12860                           	
 12861  0A66                     i1l16959:	
 12862                           ;MS83FXX02_KEY.C: 54: PEIE = 1;
 12863  0A66  170B               	bsf	(94/8),(94)&7
 12864                           	line	55
 12865                           	
 12866  0A67                     i1l16961:	
 12867                           ;MS83FXX02_KEY.C: 55: GIE = 1;
 12868  0A67  178B               	bsf	(95/8),(95)&7
 12869                           	line	56
 12870                           	
 12871  0A68                     i1l5517:	
 12872  0A68  0008               	return
 12873                           	opt stack 0
 12874                           GLOBAL	__end_of_TIM1_Init
 12875  0A69                     	__end_of_TIM1_Init:
 12876 ;; =============== function _TIM1_Init ends ============
 12877                           
 12878                           	signat	_TIM1_Init,88
 12879                           	global	_ChargeTimer_IntrHandler
 12880                           psect	text1854,local,class=CODE,delta=2
 12881                           global __ptext1854
 12882  0B6B                     __ptext1854:
 12883                           
 12884 ;; *************** function _ChargeTimer_IntrHandler *****************
 12885 ;; Defined at:
 12886 ;;		line 123 in file "ms83fxx02_charge_timer.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;		None
 12889 ;; Auto vars:     Size  Location     Type
 12890 ;;		None
 12891 ;; Return value:  Size  Location     Type
 12892 ;;		None               void
 12893 ;; Registers used:
 12894 ;;		wreg
 12895 ;; Tracked objects:
 12896 ;;		On entry : 0/0
 12897 ;;		On exit  : 0/0
 12898 ;;		Unchanged: 0/0
 12899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12900 ;;      Params:         0       0       0       0
 12901 ;;      Locals:         0       0       0       0
 12902 ;;      Temps:          0       0       0       0
 12903 ;;      Totals:         0       0       0       0
 12904 ;;Total ram usage:        0 bytes
 12905 ;; Hardware stack levels used:    1
 12906 ;; This function calls:
 12907 ;;		Nothing
 12908 ;; This function is called by:
 12909 ;;		_ISR
 12910 ;; This function uses a non-reentrant model
 12911 ;;
 12912                           psect	text1854
 12913                           	file	"ms83fxx02_charge_timer.c"
 12914                           	line	123
 12915                           	global	__size_of_ChargeTimer_IntrHandler
 12916  0017                     	__size_of_ChargeTimer_IntrHandler	equ	__end_of_ChargeTimer_IntrHandler-_ChargeTimer_Int
                                 rHandler
 12917                           	
 12918  0B6B                     _ChargeTimer_IntrHandler:	
 12919                           	opt	stack 2
 12920                           ; Regs used in _ChargeTimer_IntrHandler: [wreg]
 12921                           	line	124
 12922                           	
 12923  0B6B                     i1l16791:	
 12924                           ;ms83fxx02_charge_timer.c: 124: if(TMR5IE && TMR5IF)
 12925  0B6B  1283               	bcf	status, 5	;RP0=0, select bank2
 12926  0B6C  1703               	bsf	status, 6	;RP1=1, select bank2
 12927  0B6D  1C9C               	btfss	(2273/8)^0100h,(2273)&7
 12928  0B6E  2B70               	goto	u379_21
 12929  0B6F  2B71               	goto	u379_20
 12930  0B70                     u379_21:
 12931  0B70  2B81               	goto	i1l12237
 12932  0B71                     u379_20:
 12933                           	
 12934  0B71                     i1l16793:	
 12935  0B71  1C1C               	btfss	(2272/8)^0100h,(2272)&7
 12936  0B72  2B74               	goto	u380_21
 12937  0B73  2B75               	goto	u380_20
 12938  0B74                     u380_21:
 12939  0B74  2B81               	goto	i1l12237
 12940  0B75                     u380_20:
 12941                           	line	127
 12942                           	
 12943  0B75                     i1l16795:	
 12944                           ;ms83fxx02_charge_timer.c: 125: {
 12945                           ;ms83fxx02_charge_timer.c: 127: charge_time_out++;
 12946  0B75  3001               	movlw	low(01h)
 12947  0B76  1283               	bcf	status, 5	;RP0=0, select bank0
 12948  0B77  1303               	bcf	status, 6	;RP1=0, select bank0
 12949  0B78  07B4               	addwf	(_charge_time_out),f	;volatile
 12950  0B79  1803               	skipnc
 12951  0B7A  0AB5               	incf	(_charge_time_out+1),f	;volatile
 12952  0B7B  3000               	movlw	high(01h)
 12953  0B7C  07B5               	addwf	(_charge_time_out+1),f	;volatile
 12954                           	line	128
 12955                           	
 12956  0B7D                     i1l16797:	
 12957                           ;ms83fxx02_charge_timer.c: 128: TMR5IF = 0;
 12958  0B7D  1283               	bcf	status, 5	;RP0=0, select bank2
 12959  0B7E  1703               	bsf	status, 6	;RP1=1, select bank2
 12960  0B7F  101C               	bcf	(2272/8)^0100h,(2272)&7
 12961  0B80  2B81               	goto	i1l12237
 12962                           	line	134
 12963                           	
 12964  0B81                     i1l12236:	
 12965                           	line	135
 12966                           	
 12967  0B81                     i1l12237:	
 12968  0B81  0008               	return
 12969                           	opt stack 0
 12970                           GLOBAL	__end_of_ChargeTimer_IntrHandler
 12971  0B82                     	__end_of_ChargeTimer_IntrHandler:
 12972 ;; =============== function _ChargeTimer_IntrHandler ends ============
 12973                           
 12974                           	signat	_ChargeTimer_IntrHandler,88
 12975                           	global	_SwitchModeTimer_IntrHandler
 12976                           psect	text1855,local,class=CODE,delta=2
 12977                           global __ptext1855
 12978  0B55                     __ptext1855:
 12979                           
 12980 ;; *************** function _SwitchModeTimer_IntrHandler *****************
 12981 ;; Defined at:
 12982 ;;		line 119 in file "ms83fxx02_tim.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;		None
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;		None
 12987 ;; Return value:  Size  Location     Type
 12988 ;;		None               void
 12989 ;; Registers used:
 12990 ;;		status,2, status,0
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 12996 ;;      Params:         0       0       0       0
 12997 ;;      Locals:         0       0       0       0
 12998 ;;      Temps:          0       0       0       0
 12999 ;;      Totals:         0       0       0       0
 13000 ;;Total ram usage:        0 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; This function calls:
 13003 ;;		Nothing
 13004 ;; This function is called by:
 13005 ;;		_ISR
 13006 ;; This function uses a non-reentrant model
 13007 ;;
 13008                           psect	text1855
 13009                           	file	"ms83fxx02_tim.c"
 13010                           	line	119
 13011                           	global	__size_of_SwitchModeTimer_IntrHandler
 13012  0016                     	__size_of_SwitchModeTimer_IntrHandler	equ	__end_of_SwitchModeTimer_IntrHandler-_SwitchM
                                 odeTimer_IntrHandler
 13013                           	
 13014  0B55                     _SwitchModeTimer_IntrHandler:	
 13015                           	opt	stack 2
 13016                           ; Regs used in _SwitchModeTimer_IntrHandler: [status]
 13017                           	line	120
 13018                           	
 13019  0B55                     i1l16765:	
 13020                           ;ms83fxx02_tim.c: 120: if(TMR5IE && TMR5IF)
 13021  0B55  1283               	bcf	status, 5	;RP0=0, select bank2
 13022  0B56  1703               	bsf	status, 6	;RP1=1, select bank2
 13023  0B57  1C9C               	btfss	(2273/8)^0100h,(2273)&7
 13024  0B58  2B5A               	goto	u373_21
 13025  0B59  2B5B               	goto	u373_20
 13026  0B5A                     u373_21:
 13027  0B5A  2B6A               	goto	i1l11153
 13028  0B5B                     u373_20:
 13029                           	
 13030  0B5B                     i1l16767:	
 13031  0B5B  1C1C               	btfss	(2272/8)^0100h,(2272)&7
 13032  0B5C  2B5E               	goto	u374_21
 13033  0B5D  2B5F               	goto	u374_20
 13034  0B5E                     u374_21:
 13035  0B5E  2B6A               	goto	i1l11153
 13036  0B5F                     u374_20:
 13037                           	line	123
 13038                           	
 13039  0B5F                     i1l16769:	
 13040                           ;ms83fxx02_tim.c: 121: {
 13041                           ;ms83fxx02_tim.c: 123: switch_mode_time_out = 1;
 13042  0B5F  1283               	bcf	status, 5	;RP0=0, select bank0
 13043  0B60  1303               	bcf	status, 6	;RP1=0, select bank0
 13044  0B61  01C5               	clrf	(_switch_mode_time_out)	;volatile
 13045  0B62  1403               	bsf	status,0
 13046  0B63  0DC5               	rlf	(_switch_mode_time_out),f	;volatile
 13047                           	line	124
 13048                           	
 13049  0B64                     i1l16771:	
 13050                           ;ms83fxx02_tim.c: 124: TMR5IF = 0;
 13051  0B64  1283               	bcf	status, 5	;RP0=0, select bank2
 13052  0B65  1703               	bsf	status, 6	;RP1=1, select bank2
 13053  0B66  101C               	bcf	(2272/8)^0100h,(2272)&7
 13054                           	line	127
 13055                           	
 13056  0B67                     i1l16773:	
 13057                           ;ms83fxx02_tim.c: 127: TMR5ON = 0;
 13058  0B67  111C               	bcf	(2274/8)^0100h,(2274)&7
 13059                           	line	129
 13060                           	
 13061  0B68                     i1l16775:	
 13062                           ;ms83fxx02_tim.c: 129: TMR5IE = 0;
 13063  0B68  109C               	bcf	(2273/8)^0100h,(2273)&7
 13064  0B69  2B6A               	goto	i1l11153
 13065                           	line	130
 13066                           	
 13067  0B6A                     i1l11152:	
 13068                           	line	131
 13069                           	
 13070  0B6A                     i1l11153:	
 13071  0B6A  0008               	return
 13072                           	opt stack 0
 13073                           GLOBAL	__end_of_SwitchModeTimer_IntrHandler
 13074  0B6B                     	__end_of_SwitchModeTimer_IntrHandler:
 13075 ;; =============== function _SwitchModeTimer_IntrHandler ends ============
 13076                           
 13077                           	signat	_SwitchModeTimer_IntrHandler,88
 13078                           psect	text1856,local,class=CODE,delta=2
 13079                           global __ptext1856
 13080  0000                     __ptext1856:
 13081                           	global	btemp
 13082  007E                     	btemp set 07Eh
 13083                           
 13084                           	DABS	1,126,2	;btemp
 13085                           	global	wtemp0
 13086  007E                     	wtemp0 set btemp


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Nov 12 11:01:15 2017

               __size_of_GPIO_WriteBit 0027                  i1_Motor_CheckRunLimit 0A99  
                    ??i1_GPIO_WriteBit 0075                                     _RD 04E0  
                                   _WR 04E8                                     fsr 0004  
                  __size_of_ADC_Enable 0017        i1GPIO_ReadInputDataBit@GPIO_Pin 0070  
                                  _GIE 005F                                    _PR2 0092  
                                  _ISR 0F5C                                    _WPD 0089  
        ?_SwitchModeTimer_GetINTStatus 0070                                    fsr0 0004  
                                  indf 0000                           ___awmod@sign 0076  
                    SetDeviceMode@mode 004C                         _GPIO_INTConfig 06CD  
         i1GPIO_ReadInputDataBit@GPIOx 0072                 ??_LEDTimer_IntrHandler 007A  
              __size_of_EEPROM_SetFlag 000A               __size_of_Motor_GetStatus 0003  
                      ?_Battery_Detect 0070                          ??_Driver_Init 0052  
                                 ?_ISR 0070                                   l1140 07C3  
                                 l1133 0C1E                                   l1141 07C2  
                                 l1142 07C3                                   l1150 02B4  
                                 l1151 031D                                   l1136 0CB1  
                                 l1160 0309                                   l1152 02B5  
                                 l1161 030E                                   l1153 02EC  
                                 l1145 02A4                                   l1162 031E  
                                 l1146 0310                                   l1154 02EC  
                                 l1139 07A6                                   l1163 031F  
                                 l1155 02ED                                   l1147 02A5  
                                 l1164 031F                                   l1156 02EE  
                                 l1148 02AC                                   l1157 0306  
                                 l1149 02B3                                   l1158 0308  
                                 l1159 0307                                   l2250 09CC  
                                 l2260 07FF                                   l2244 0DC9  
                                 l2253 0A88                                   l2261 07FD  
                                 l2247 0C75                                   l2256 07EA  
                                 l2257 07CB                                   l2258 07E9  
                                 l2259 07E8                                   l3340 0CEC  
                                 l3332 0B54                                   l3341 0CEF  
                                 l4410 0640                                   l3338 0CE6  
                                 l4411 064A                                   l3339 0CE6  
                                 l4420 0DA1                                   l4412 064B  
                                 l4421 0DA2                                   l4406 062C  
                                 l4415 0D93                                   l4407 0621  
                                 l4416 0D8D                                   l4408 062B  
                                 l4424 0DDE                                   l4432 06EB  
                                 l4417 0D92                                   l4409 064B  
                                 l4425 0DDD                                   l4433 06E2  
                                 l4418 0DA2                                   l4426 0DF0  
                                 l4434 06EA                                   l4419 0D9C  
                                 l4427 0DEF                                   l4435 070C  
                                 l4428 0DEE                                   l4436 0709  
                                 l4429 0DF2                                   l4437 070B  
                                 l4438 070C                                   l5520 0BB1  
                                 l5530 0A0E                                   l5531 0A10  
                                 l5523 0D0F                            ?_KEY_DeInit 0070  
                                 l5526 0A47                                   l5527 0A49  
                                 l6613 047D                                   l6622 0A78  
                                 _ADIE 0469                                   l6616 0EFA  
                                 _ADIF 0069                                   l6625 0A98  
                                 l7711 0ADA                                   l7704 0783  
                                 l7712 0ADE                                   l7705 076D  
                                 l7713 0ADE                                   l7721 0A2A  
                                 l7706 0782                                   l7722 0A2C  
                                 l7707 0787                                   l7723 0A2C  
                                 l7708 0787                                   l7716 0A38  
                                 l7717 0A3A                                   l7718 0A3A  
                                 l8900 0093                                   _ADON 00F8  
                                 l8901 00AB                                   l8830 059C  
                                 l8910 0127                                   l8902 00AD  
                                 l8831 0590                                   l8903 00C0  
                                 l8911 0129                                   l8832 059B  
                                 l8904 00C1                                   l8841 09B5  
                                 l8833 05A1                                   l8905 0129  
                                 l8834 05A1                                   l8826 056E  
                                 l8914 0E1B                                   l8850 06CC  
                                 l8906 00E8                                   l8835 05A6  
                                 l8827 05AC                                   l8907 0111  
                                 l8828 059C                                   l8860 0FDC  
                                 l8844 06B1                                   l8908 0128  
                                 l8829 057F                                   l8861 0FF5  
                                 l8853 0E45                                   l8845 0691  
                                 l8909 0123                                   l8838 09D4  
                                 l8862 0FEC                                   l8846 06BE  
                                 l8863 0FF5                                   l8847 069A  
                                 l8856 0AB8                                   l8864 0FFF  
                                 l8848 06A5                                   l8857 0ABA  
                                 l8849 06AF                                   l8890 0038  
                                 l8867 0B2A                                   l8891 0042  
                                 l8868 0B2A                                   l8892 0041  
                                 l8893 00D3                                   l8894 0043  
                                 l8887 00D4                                   l8895 0077  
                                 l8888 00C3                                   l8896 005E  
                                 l8897 0076                                   l8889 0020  
                                 l8898 0078                                   l8899 00AC  
                                 _IOCA 0096                                   u4000 06D5  
                                 u4001 06D4                                   u4010 06D9  
                                 u4020 06F2                                   u4100 056B  
                                 u4021 06F1                                   u4101 056A  
                                 u4030 06F8                                   u4110 0574  
                                 u4031 06F7                                   u4111 0573  
                                 u4040 06FC                                   u4120 0585  
                                 u4200 0239                                   u4121 0584  
                                 u4201 0238                                   u4050 0CEC  
                                 u4130 05A5                                   u4210 0250  
                                 u4051 0CEB                                   u4131 05A4  
                                 u4211 024F                                   _PAIE 005B  
                                 u4060 0A41                                   u4140 0C7E  
                                 u4220 027B                                   _PAIF 0058  
                                 u4221 027A                                   u4070 0A0A  
                                 u4150 0AF8                                   u4215 024C  
                                 _PIE1 008C                                   u3600 0D84  
                                 u4080 0A34                                   u4160 0AB5  
                                 u4240 0D2F                                   _PIE2 008D  
                                 u3601 0D83                                   u4161 0AB4  
                                 u4241 0D2E                                   u3610 0D88  
                                 u4170 0FD3                                   u4171 0FD2  
                                 u4235 0292                                   u3620 0D97  
                                 u4180 0FE3                                   u5220 0B23  
                                 u5300 01BD                                   u4181 0FE2  
                                 u5221 0B22                                   u3630 0A26  
                                 u4190 0A50                                   u5230 07D8  
                                 u5310 01DB                                   u5231 07D7  
                                 u5311 01DA                                   u3640 0CBB  
                                 u4600 037E                                   u4520 0327  
                                 u5240 07E4                                   u5320 01F3  
                                 u5400 004B                                   u4601 037D  
                                 u5241 07E3                                   u5321 01F2  
                                 u5401 004A                                   u3570 0752  
                                 u3650 0AE6                                   u4610 038F  
                                 u4530 032E                                   u5250 07FC  
                                 u5330 0211                                   u5410 0053  
                                 u4531 032D                                   u5251 07FB  
                                 u5331 0210                                   u5411 0052  
                                 _PEIE 005E                                   u3564 0C28  
                                 u3580 0758                                   u4620 039C  
                                 u5260 0134                                   u5340 0799  
                                 u5420 0080                                   u3565 0C26  
                                 u3581 0757                                   u5261 0133  
                                 u5341 0798                                   u5421 007F  
                                 _INTE 005C                                   u3590 0AD4  
                                 u4550 034B                                   u5270 0150  
                                 u5350 07A2                                   u5430 0088  
                                 _INTF 0059                                   u4615 038B  
                                 u4551 034A                                   u5255 07F8  
                                 u5271 014F                                   u5351 07A1  
                                 u5431 0087                                   u5280 016E  
                                 u5360 07B1                                   u5440 00B5  
                                 u4545 033D                                   u5281 016D  
                                 u5361 07B0                                   u5441 00B4  
                                 u3930 060E                                   u4570 0369  
                                 u5290 01AD                                   u5450 00E0  
                                 u5370 001E                                   u3931 060D  
                                 u4571 0368                                   u5291 01AC  
                                 u5451 00DF                                   u5371 001D  
                                 u3940 0618                                   u5460 00EE  
                                 u5380 0028                                   u3941 0617  
                                 u4565 035C                                   u4901 04C6  
                                 u5381 0027                                   u3950 0637  
                                 u4590 037A                                   u4910 04E6  
                                 u4902 04C7                                   u5470 0119  
                                 u5390 003F                                   u3951 0636  
                                 u4591 0379                                   u4911 04E5  
                                 u4903 04CC                                   u5471 0118  
                                 u5391 003E                                   u3960 0DD3  
                                 u4904 04CD                                   u5480 011F  
                                 _PCON 008E                                   u3961 0DD2  
                                 u4585 036E                                   _PIR1 000C  
                                 u3970 0DD9                                   u5490 02F9  
                                 _PR3L 010E                                   _PIR2 000D  
                                 u3971 0DD8                                   u4915 04E2  
                                 u5491 02F8                                   u3980 0DE4  
                                 _PR4L 0114                                   u3981 0DE3  
                                 u3990 0DEA                                   u4870 0484  
                                 _PR5L 011A                                   u3991 0DE9  
                                 u4871 0483                                   u4881 049C  
                                 u4890 04AE                                   u4882 049D  
                                 u4891 04AD                                   u4883 04A2  
                                 u4884 04A3                                   _TMR2 0011  
                                 _WREN 0C62               __size_of_KEY_IntrHandler 001C  
                                 _WPUA 0095                  __end_of_GetDeviceMode 09C0  
                                 _main 02A4                           ___ftpack@arg 004B  
        __size_of_ChargeTimer_GetCount 000A                           ___ftpack@exp 004E  
                                 btemp 007E                       __end_of_ADC_Init 0C3C  
                                 start 0011                     __size_of_GPIO_Init 0046  
                  _SleepLed_ChangeDuty 0F8E                             _Board_Init 0C02  
            KEY_DeInit@GPIO_InitStruct 004F                                  ??_ISR 0047  
                    i1_Motor_SetStatus 09C0              _SleepLedTimer_IntrHandler 0ABB  
        __size_of_KEY_GetReleaseStatus 000F                   __end_of_EEPROM_Write 0CF0  
             __size_of_ChargeCtrl_Init 001D                  __end_of_SleepLed_Init 0D33  
                        ?_LEDTimer_Cmd 004B                       __end_of_LED_Init 047E  
                   ?i1_Motor_SetStatus 0070              _SwitchModeTimer_INTConfig 0AF1  
                                l10014 09BF                                  l10040 09F8  
                                l10017 09DC                                  l10026 0C3B  
                                l10052 023B                                  l10060 0143  
                                l10053 027C                                  l10061 01EB  
                                l10054 0261                                  l10046 0A03  
                                l10070 021E                                  l10062 018D  
                                l10055 02A3                                  l10063 01EA  
                                l10064 01B7                                  l10065 01E9  
                                l10066 01E8                                  l10058 0137  
                                l10067 01E7                                  l10059 0220  
                                l10068 0220                                  l10069 021F  
                                l11142 0AFE                                  l11143 0B02  
                                l11144 0B02                                  l11137 0C8F  
                                l11138 0C93                                  l11139 0C93  
                                l11147 0A55                                  l12220 0CCC  
                                l11148 0A58                                  l12221 0CD0  
                                l11149 0A58                                  l12222 0CD0  
                                l12233 09EE                                  l12225 0AEC  
                                l12226 0AF0                                  l12227 0AF0  
                                l13306 0D2B                                  l13322 0C58  
                                l13307 0D2B                                  l13308 0D2F  
                                l13309 0D32                                  l14170 04AA  
                                l14226 0BCA                                  l14171 04D4  
                                l14340 0338                                  l14172 04EB  
                __size_of_ADC_ReadData 0025                                  l14341 034C  
                                l14342 0363                                  l14343 034D  
                                l14335 0337                                  l14344 036A  
                                l14345 0376                                  l14337 032F  
                                l14346 036B                                  l14338 039D  
                                l17011 0565                                  l17003 0555  
                                l14347 037A                                  l14339 0345  
                                l14348 0384                                  l17021 057F  
                                l17013 056C                                  l17005 0561  
                                l17101 0A57                                  l14349 039D  
                                l17031 05A6                                  l17023 0585  
                                l17015 056D                                  l17007 0562  
                                l17025 0590                                  l17017 056E  
                                l17009 0563                                  l17041 0C89  
                                l17033 0C79                                  l17121 0221  
                                l17027 059E                                  l17019 0574  
                                l17043 0C8A                                  l17035 0C7A  
                                l17051 0AF8                                  l17131 0233  
                                l17123 0224                                  l17029 059F  
                                l17045 0C8C                                  l17037 0C7E  
                                l17061 0ABA                                  l17053 0AAA  
                                l17141 0261                                  l17133 023A  
                                l17125 0226                                  l17047 0C8D  
                                l17039 0C81                                  l17055 0AB5  
                                l17071 0FE3                                  l17063 0FC8  
                                l17143 0275                                  l17135 023B  
                                l17127 022C                                  l17151 0D10  
           __size_of_ChargeCtrl_Output 0010                                  l16601 0C17  
                                l17049 0AF4                                  l17057 0AB7  
                                l17081 0FFB                                  l17073 0FEC  
                                l17065 0FCB                                  l17137 0250  
                                l17145 027C                                  l17129 0232  
                                l17161 0D29                                  l17153 0D13  
                                l17401 04D8                                  l16603 0C1C  
                                l16611 0C32                                  l17059 0AB8  
                                l17083 0FFC                                  l17075 0FF7  
                                l17067 0FD3                                  l17091 0A50  
                                l17147 02A3                                  l17139 0256  
                                l17155 0D1B                                  l17251 0327  
                                l17403 04E6                                  l16605 0C1D  
                                l16613 0C34                                  l16621 0758  
                                l16701 0AE2                                  l17085 0FFD  
                                l17077 0FF8                                  l17069 0FDC  
                                l17093 0A51                                  l17157 0D22  
                                l17261 034D                                  l17253 032F  
                                l17405 04E8                                  l16615 0C38  
                                l16607 0C22                                  l16631 076B  
                                l16623 075C                                  l16703 0AE6  
                                l17087 0FFE                                  l17079 0FFA  
                                l17095 0A53                                  l17159 0D28  
                                l17271 037E                                  l17263 0351  
                                l17255 0336                                  l17407 04EB  
                                l16609 0C31                                  l16641 0778  
                                l16625 0767                                  l16633 076D  
                                l16617 074E                                  l16705 09D8  
                                l17097 0A54                                  l17089 0A4A  
                                l17273 0386                                  l17265 035B  
                                l17257 0338                                  l17249 0321  
                                l16651 0780                                  l16643 077A  
                                l16635 0771                                  l16627 0768  
                                l16619 0752                                  l16707 09BB  
                                l17099 0A55                                  l17275 0398  
                                l17267 036B                                  l17259 0345  
                                l17611 0414                                  l16645 077C  
                                l16637 0774                                  l16629 076A  
                                l16653 0AD0                                  l16661 0D7F  
                                l16709 09BF                                  l16901 06D5  
                                l17277 039C                                  l17269 0376  
                                l17621 0436                                  l17613 0418  
                                l17701 0C4D                                  l16591 0C10  
                                l16647 077D                                  l16639 0776  
                                l16655 0AD4                                  l16671 0D97  
                                l16663 0D84                                  l16911 06F2  
                                l16903 06D9                                  l17391 0484  
                                l17631 045D                                  l17623 0441  
                                l17615 0420                                  l17703 0C4E  
                                l17711 07D8                                  l16593 0C11  
                                l16649 077F                                  l16657 09E5  
                                l16673 0D9C                                  l16665 0D88  
                                l16681 0A22                                  l16921 0706  
                                l16913 06F8                                  l16905 06DB  
                                l16585 04E8                                  l17393 04AA  
                                l17633 0468                                  l17625 0446  
                                l17617 0425                                  l17609 040F  
                                l17641 0CF7                                  l17705 0C4F  
                                l17713 07DE                                  l17721 07EA  
                                l17801 01EB                                  l16595 0C12  
                                l16659 09EE                                  l16667 0D8D  
                                l16675 09B3                                  l16683 0A26  
                                l16691 0CBE                                  l16923 0707  
                                l16915 06FC                                  l16907 06E2  
                                l16931 0CE2                                  l16587 04EA  
                                l17395 04AE                                  l17635 0472  
                                l17627 044A                                  l17619 0431  
                                l17643 0CFF                                  l17651 0B99  
                                l17723 07FD                                  l17715 07E4  
                                l17707 07C4                                  l17731 0DAA  
                                l17803 01F3                                  l17811 069A  
                                l16597 0C13                                  l16589 0C02  
                                l16669 0D93                                  l16677 09B5  
                                l16693 0CC6                                  l16685 0CB5  
                                l16917 06FF                                  l16909 06EB  
                                l16933 0CE3                                  l16925 0CD4  
                                l17397 04D4                                  l17389 047E  
                                l17629 0452                                  l17645 0D02  
                                l17637 0CF0                                  l17661 0BAC  
                                l17653 0B9C                                  l17725 07FF  
                                l17717 07E5                                  l17709 07CB  
                                l17733 0DB2                                  l17741 0C62  
                                l17805 0211                                  l17813 06A5  
                                l17821 0C94                                  l17901 00E0  
                                l16599 0C16                                  l16679 09D0  
                                l16695 0CC7                                  l16687 0CB7  
                                l16871 0618                                  l16919 0705  
                                l16935 0CE4                                  l16927 0CD8  
                                l17399 04D6                                  l17639 0CF3  
                                l17647 0B40                                  l17663 0BAF  
                                l17655 0BA0                                  l17671 0E27  
                                l17719 07E7                                  l17735 0DBC  
                                l17727 0DA3                                  l17743 0C6A  
                                l17751 09EF                                  l17815 06B0  
                                l17807 0690                                  l17823 0C9D  
                                l17831 0788                                  l17911 0119  
                                l17903 00E3                                  l16697 0CC9  
                                l16689 0CBB                                  l16873 0621  
                                l16881 0DCD                                  l16929 0CE1  
                                l17649 0A6C                                  l17665 0BB0  
                                l17657 0BA8                                  l17673 0E30  
                                l17681 0B23                                  l17729 0DA6  
                                l17737 0C59                                  l17745 0ECF  
                                l17753 09F9                                  l17761 012A  
                                l17809 0691                                  l17817 06B1  
                                l17825 0CA1                                  l17841 07B1  
                                l17833 0793                                  l17913 011F  
                                l17905 00E8                                  l17921 02A8  
                                l16699 0CCA                                  l16875 062C  
                                l16867 0609                                  l16891 0DE4  
                                l16883 0DCE                                  l16971 0A47  
                                l16963 0A3B                                  l17659 0BA9  
                                l17675 0E3B                                  l17667 0E1C  
                                l17683 0B28                                  l17691 0C47  
                                l17739 0C5E                                  l17747 0A8C  
                                l17755 0BB2                                  l17771 0137  
                                l17763 012E                                  l17819 06BE  
                                l17827 0CAA                                  l17835 0799  
                                l17915 0121                                  l17907 00EE  
                                l17851 002C                                  l17843 0016  
                                l17931 02C2                                  l17923 02AC  
                                l16877 0637                                  l16869 060E  
                                l16893 0DEA                                  l16885 0DD3  
                                l16973 0A49                                  l16965 0A41  
                                l16981 0A0D                                  l17669 0E24  
                                l17677 0B17                                  l17685 0A7C  
                                l17693 0C48                                  l17749 0DF3  
                                l17757 0BCA                                  l17781 017B  
                                l17773 0143                                  l17765 012F  
                                l17829 0CAE                                  l17837 07A2  
                                l17917 0123                                  l17909 0111  
                                l17861 0043                                  l17853 0030  
                                l17845 001F                                  l17941 02D8  
                                l17933 02C5                                  l17925 02B5  
                                l16879 0640                                  l16887 0DD9  
                                l16895 0DF0                                  l16967 0A44  
                                l16983 0A0E                                  l16975 0A04  
                                l16991 0A34                                  l17679 0B1B  
                                l17695 0C4A                                  l17687 0C3C  
                                l17759 09C6                                  l17791 01B1  
                                l17783 017E                                  l17775 014B  
                                l17767 0135                                  l17839 07A6  
                                l17871 006E                                  l17863 004B  
                                l17855 0033                                  l17847 0020  
                                l17951 02EE                                  l17943 02DC  
                                l17935 02C9                                  l17927 02BB  
                                l17919 02A5                                  l16897 0DF2  
                                l16889 0DDE                                  l16969 0A46  
                                l16985 0A10                                  l16977 0A0A  
                                l17697 0C4B                                  l17689 0C3F  
                                l17793 01B7                                  l17785 018B  
                                l17777 0150                                  l17769 0136  
                                l17881 0093                                  l17873 0071  
                                l17865 0053                                  l17849 0028  
                                l17857 0038                                  l17961 030F  
                                l17953 02F1                                  l17945 02E0  
                                l17937 02D0                                  l17929 02BE  
                                l16899 06D0                                  l16979 0A0B  
                                l17699 0C4C                                  l17795 01BD  
                                l17779 016E                                  l17787 018D  
                                l17891 00B5                                  l17883 009F  
                                l17875 0078                                  l17867 005E  
                                l17859 003F                                  l17955 02F9  
                                l17947 02E4                                  l17939 02D4  
                                l17963 0310                                  l16989 0A30  
                                l17797 01DB                                  l17789 01AD  
                                l17893 00C2                                  l17885 00A3  
                                l17877 0080                                  l17869 006A  
                                l17957 0309                                  l17949 02E8  
                                l17799 01DE                                  l17887 00A6  
                                l17879 0088                                  l17895 00C3  
                                l17959 030C                                  l17889 00AD  
                                l17897 00D4                                  l17899 00D8  
                                ?_main 0070                                  _EEADR 009B  
                                _EEDAT 009A                        __end_of___awmod 0552  
                                _CARRY 0018               __size_of_Motor_SetStatus 0008  
                                _ANSEL 0091                 __end_of_GPIO_INTConfig 070D  
                                _T1CON 0010                                  _T2CON 0012  
                   __size_of_TIM1_Init 0010                       __end_of_KEY_Init 0D10  
                                _TMR1H 000F                                  _TMR3H 010D  
                                _TMR1L 000E                                  _TMR4H 0113  
                                _TMR5H 0119                                  _TMR3L 010C  
                                _TMR4L 0112                                  _TMR5L 0118  
                                _PORTA 0005                                  _PORTC 0007  
               ?_ChargeTimer_INTConfig 0070                                  _TRISA 0085  
                                _TRISC 0087                                  _WREN1 04E2  
                                _WREN2 04E4                                  _WREN3 04E5  
                          _Charge_Init 09C6            __end_of_SwitchModeTimer_Cmd 0C94  
                 ?_SleepLed_ChangeDuty 0070                     _LEDTimer_INTConfig 0ACD  
                  ??i1_Motor_SetStatus 0070        __size_of_LED_UnderVoltageOutput 0010  
                        _GPIO_WriteBit 0D7C                          ___ftpack@sign 004F  
                      _ADC_IntrHandler 0E9E        __size_of_ChargeDetect_GetStatus 003C  
                  ?_LEDTimer_INTConfig 0070                    _LED_DisplayRunLimit 064C  
                                pclath 000A                         _charge_control 0788  
                                status 0003                                  wtemp0 007E  
             __size_of_ChargeTimer_Cmd 001F                ?_LED_DisplayMotorStatus 004F  
                     EEPROM_Write@addr 004C                    __end_of_Driver_Init 0CB2  
                     EEPROM_Write@data 004B       __size_of_ChargeTimer_IntrHandler 0017  
                 _run_limit_display_en 0043                   __size_of_EEPROM_Init 0015  
            __end_ofi1_Motor_SetStatus 09C6                 ?i1_Motor_CheckRunLimit 0070  
                         _ADC_ReadData 0D57                    _current_period_type 0069  
                         __end_of_main 0321                   ??_LEDTimer_INTConfig 004B  
                       ??_LEDTimer_Cmd 004C                   ?_LED_DisplayRunLimit 0070  
                    _motor_oper_record 0036                    __size_of_KEY_DeInit 0019  
                               ??_main 0069                        ?_GPIO_INTConfig 004B  
                   i1Motor_Init@status 0071          LED_VoltageChargeOutput@BitVal 0051  
                ??_SleepLed_ChangeDuty 0070          __size_of_EEPROM_StoreModeData 000B  
                    __end_of_GPIO_Init 064C             ??i1_LED_UnderVoltageOutput 0077  
                       ?_GPIO_WriteBit 004B               ?i1_GPIO_ReadInputDataBit 0070  
                               _ADCON0 001F                                 _ADCON1 009F  
              Battery_HandleData@temp1 0055                Battery_HandleData@temp2 0051  
       ??_SwitchModeTimer_GetINTStatus 004B                 __end_of_charge_control 07C4  
                               _ADRESH 001E                                 _ADRESL 009E  
                               _EEDATA 009A                                 _CCPR1L 0013  
                               _EECON1 009C                                 _EECON2 009D  
                               _CMCON0 0019                                 _ANSEL5 048D  
              _LED_VoltageChargeOutput 0A69                       __end_of___ftpack 039E  
           __end_of_KEY_GetPressStatus 0A11                           ??_ADC_Enable 0070  
                               i1l1167 0F71                                 i1l1168 0F78  
                               i1l1169 0F81                                 i1l2264 0B3F  
                               i1l2265 0B3F                                 i1l4420 0E9C  
                               i1l4421 0E9D                                 i1l4415 0E8A  
                               i1l4416 0E82                                 i1l4424 0E5A  
                               i1l4417 0E89                                 i1l4425 0E59  
                               i1l4418 0E9D                                 i1l4426 0E6E  
                               i1l4419 0E95                                 i1l4427 0E6D  
                               i1l4428 0E6C                                 i1l4429 0E70  
                               i1l5540 074A                                 i1l5517 0A68  
                               i1l5541 073E                                 i1l5534 0C01  
                               i1l5542 0747                                 i1l5535 0C01  
                               i1l5538 074A                                 i1l5539 0730  
                               i1l6625 0A1E                                 i1l6619 068C  
                               _INTEDG 040E                                 i1l7726 0F5B  
                               i1l7727 0F4A                                 i1l7728 0F53  
                               i1l7729 0F5B                                 i1l8830 05F5  
                               i1l8831 05E9                                 i1l8832 05F4  
                               _INTCON 000B                                 i1l8833 05FA  
                               i1l8834 05FA                                 i1l8826 05C7  
                               i1l8835 05FF                                 i1l8827 0605  
                               i1l8828 05F5                                 i1l8860 0F0C  
                               i1l8829 05D8                                 i1l8861 0F20  
                               i1l8853 0D56                                 i1l8838 09C5  
                               i1l8862 0F19                                 i1l8863 0F20  
                               i1l8856 0AA7                                 i1l8864 0F2A  
                               i1l8880 0400                                 i1l8857 0AA9  
                               i1l8881 03F1                                 i1l8882 03FA  
                               i1l8867 0B16                                 i1l8883 040A  
                               i1l8868 0B16                                 i1l8876 040E  
                               i1l8884 040E                                 i1l8877 0401  
                               i1l8878 03D7                                 i1l8879 03D6  
                               u500_20 0544                                 u510_20 0E4D  
                               u510_21 0E4C                                 u511_20 0E55  
                               u511_21 0E54                                 u512_20 0E60  
                               u520_20 0F12                                 u512_21 0E5F  
                               u520_21 0F11                                 u425_20 0F94  
                               u513_20 0E68                                 u521_20 0B0F  
                               u513_21 0E67                                 u521_21 0B0E  
                               u409_25 0B86                                 u426_20 0FAA  
                               u514_20 05C4                                 u370_20 0719  
                               u426_21 0FA9                                 u514_21 05C3  
                               u370_21 0718                       __end_of___lwtoft 0BCB  
                               u427_20 0FB7                                 u507_20 0E77  
                               u515_20 05CD                                 u371_20 072D  
                               u427_21 0FB6                                 u507_21 0E76  
                               u515_21 05CC                                 u371_21 072C  
                               u380_20 0B75                                 u508_20 0E7B  
                               u516_20 05DE                                 u372_20 0735  
                               u380_21 0B74                                 u516_21 05DD  
                               u372_21 0734                    GPIO_INTConfig@GPIOx 004E  
                               u373_20 0B5B                                 u509_20 0E8E  
                               u517_20 05FE                                 u381_20 0AC1  
                               u373_21 0B5A                                 u517_21 05FD  
                               u381_21 0AC0                                 u374_20 0B5F  
                               u518_20 0AA4                                 u382_20 0AC5  
                               u390_20 0EA4                                 u366_20 0F6A  
                               u374_21 0B5E                                 u518_21 0AA3  
                               u382_21 0AC4                                 u390_21 0EA3  
                               u366_21 0F69                                 u519_20 0F05  
                               u367_20 0BEA                                 u391_20 0EAA  
                               u375_20 0F31                                 u383_20 03A4  
                               u519_21 0F04                                 u367_21 0BE9  
                               u391_21 0EA9                                 u375_21 0F30  
                               u383_21 03A3                                 u368_20 0BEE  
                               u392_20 0EC4                                 u376_20 0F35  
                               u384_20 03A8                                 u368_21 0BED  
                               u392_21 0EC3                                 u376_21 0F34  
                               u384_21 03A7                                 u369_20 0713  
                               u377_20 0F3B                                 u385_20 03B0  
                               u369_21 0712                                 u385_21 03AF  
              ??_GPIO_ReadInputDataBit 004C                                 u378_20 0F50  
                               u386_20 03B6                                 _OSCCON 008F  
       __end_of_LED_DisplayMotorStatus 0EFB                                 u379_20 0B71  
                               u387_20 03CE                                 u379_21 0B70  
                               u387_21 03CD                                 u492_20 04F1  
                               u388_20 03DD                                 u492_21 04F0  
                               u388_21 03DC                                 u493_20 04FE  
                               u389_20 0B35                                 u493_21 04FD  
                               u389_21 0B34                                 u494_20 050A  
                               u494_21 0509                                 u495_25 050F  
                               u496_20 051E                                 u496_21 051D  
                               u497_20 052A                                 u497_21 0529  
                               u497_25 0526                                 u498_25 0532  
                               u499_20 053E                                 u499_21 053D  
                               _TMR1IE 0460                                 _TMR1IF 0060  
                               _TMR2IF 0061                                 _TMR3IE 0881  
                               _TMR3IF 0880                                 _TMR4IE 08B1  
                               _TMR4IF 08B0                                 _TMR5IE 08E1  
                               _TMR5IF 08E0                                 _TMR1ON 0080  
                               _TMR2ON 0092                                 _TMR3ON 0882  
                               _TMR4ON 08B2                                 _TMR5ON 08E2  
                               _WDTCON 0018                                 _TRISC3 043B  
                    ??_Motor_GetStatus 004B                      __end_of_TIM1_Init 0A69  
                      ADC_Init@channel 004D                     GPIO_WriteBit@GPIOx 004E  
                          ?_Board_Init 0070       __end_of_MotorOperationTimer_Init 1000  
                    ??_KEY_IntrHandler 0070           ??i1_MotorOperationTimer_Init 0070  
     __end_of_MotorOperationTimer_Stop 0B2B                 _LED_UnderVoltageOutput 0A89  
         ??i1_MotorOperationTimer_Stop 0070                             _Motor_Init 0552  
           ??_ChargeDetect_IntrHandler 0073                             _Motor_Stop 0E1C  
                               ___ftge 047E                          ??_Motor_Start 0052  
                 _battery_sample_count 003B                              ??___awmod 0074  
               _ChargeDetect_GetStatus 07C4                  ??_LED_DisplayRunLimit 0077  
         ??_MotorOperTimer_IntrHandler 0078                        ___awmod@divisor 0070  
                      ___awmod@counter 0075                                 clrloop 09DE  
                   __end_of_ADC_Enable 0B99                __end_of_ADC_IntrHandler 0ECC  
                         __pdataCOMMON 007B      __size_of_LEDTimer_DispRunLimitCmd 000E  
                    ??_ChargeCtrl_Init 004F                   _key_press_time_count 0041  
            ?_LEDTimer_DispRunLimitCmd 0070                              ?_ADC_Init 0070  
                               saved_w 007E                         _EEPROM_SetFlag 09EF  
               __size_of_SetDeviceMode 0008                      ??_Motor_SetStatus 004B  
                      ?_charge_control 0070                            _Driver_Init 0C94  
                      i1_GPIO_WriteBit 0E71                        _charge_time_out 0034  
                            ?_LED_Init 0070                             ___ftge@ff1 0053  
                           ___ftge@ff2 0056                  __size_of_EEPROM_Write 001F  
              LEDTimer_Cmd@period_type 004D                              ?_KEY_Init 0070  
              LED_Init@GPIO_InitStruct 0050             __size_ofi1_Motor_SetStatus 0006  
                       __pcstackCOMMON 0070                           __pidataBANK0 0002  
                    ??_ChargeTimer_Cmd 004B               __size_ofi1_GetDeviceMode 0005  
  __end_of_Motor_HandleStatusChangeEvt 012A            _Motor_HandleStatusChangeEvt 0013  
                           ___lwtoft@c 005F                  _EEPROM_StoreMotorData 0DF3  
                  __end_of_Motor_Start 06CD        __end_ofi1_GPIO_ReadInputDataBit 0E71  
                     ??_Battery_Detect 0063                 __end_of_EEPROM_SetFlag 09F9  
                      ??_GPIO_WriteBit 004D             __end_of_Battery_HandleData 02A4  
                           ??_ADC_Init 004B     __size_of_SleepLedTimer_IntrHandler 0012  
            ??_LED_VoltageChargeOutput 004F                    __size_of_Board_Init 001D  
   __size_of_SwitchModeTimer_INTConfig 0012           __size_of_Motor_CheckRunLimit 0011  
                         ??_KEY_DeInit 004E                           _EEPROM_Write 0CD1  
                           __pbssBANK0 0020                   __end_of_LEDTimer_Cmd 0788  
           __end_of_SleepLedTimer_Init 0C59                _ChargeTimer_IntrHandler 0B6B  
                           ??_LED_Init 004F                             ??_KEY_Init 004F  
                           __pmaintext 02A4                            ?_Motor_Init 0070  
                        _SetDeviceMode 09D5                            ?_Motor_Stop 0070  
                              ?___ftge 0053      SwitchModeTimer_INTConfig@NewState 004B  
                           __pintentry 0004               _MotorOperationTimer_Init 0FC5  
                              _CCP1CON 0015               _MotorOperationTimer_Stop 0B17  
                           __ptext1800 047E                             __ptext1801 0321  
                           __ptext1810 0A2D                             __ptext1802 0D10  
                           __ptext1811 0A04                             __ptext1803 0221  
                           __ptext1820 0CB2                             __ptext1812 0A3B  
                           __ptext1804 0A4A                             __ptext1821 0A1F  
                           __ptext1813 0CD1                             __ptext1805 0FC5  
                           __ptext1830 0F5C                             __ptext1822 09CD  
                           __ptext1814 06CD                             __ptext1806 0AAA  
                           __ptext1831 039E                             __ptext1823 09B3  
                           __ptext1815 0DCA                             __ptext1807 0AF1  
                           __ptext1840 070D                             __ptext1832 0F2B  
                           __ptext1824 0D7C                             __ptext1816 0606  
                           __ptext1808 0C76                             __ptext1841 0BE6  
                           __ptext1833 0B03                             __ptext1825 09E5  
                           __ptext1817 09BB                             __ptext1809 0552  
                           __ptext1850 0F8E                             __ptext1842 09B6  
                           __ptext1834 0D33                             __ptext1826 0ACD  
                           __ptext1818 09D5                             __ptext1851 0D57  
                           __ptext1843 0EFB                             __ptext1835 0A11  
                           __ptext1827 074B                             __ptext1819 0ADF  
                           __ptext1852 0B82                             __ptext1844 0A99  
                           __ptext1836 064C                             __ptext1828 0C1F  
                           __ptext1780 012A                             __ptext1853 0A59  
                           __ptext1845 09C0                             __ptext1837 0E9E  
                           __ptext1829 0C02                             __ptext1781 09C6  
                           __ptext1854 0B6B                             __ptext1846 05AD  
                           __ptext1838 0B2B                             __ptext1790 07C4  
                           __ptext1782 0BB2                             __ptext1855 0B55  
                           __ptext1847 0E46                             __ptext1839 0ABB  
                           __ptext1791 0C3C                             __ptext1783 09F9  
                           __ptext1856 0000                             __ptext1848 0E71  
                           __ptext1792 0A79                             __ptext1784 09EF  
                           __ptext1776 0013                             __ptext1849 04EC  
                           __ptext1793 0B17                             __ptext1785 0DF3  
                           __ptext1777 0788                             __ptext1794 0E1C  
                           __ptext1786 0A89                             __ptext1778 0C94  
                           __ptext1795 0B99                             __ptext1787 0ECC  
                           __ptext1779 068D                             __ptext1796 0A69  
                           __ptext1788 0C59                             __ptext1797 0B40  
                           __ptext1789 0DA3                             __ptext1798 0CF0  
                           __ptext1799 040F                ??_ChargeTimer_INTConfig 004B  
                            ?___ftpack 004B           __end_of_ChargeTimer_GetCount 09EF  
                   __end_of_KEY_DeInit 0BB2                                _T3CKDIV 0111  
                              _T2CKSRC 00DD                              ?___lwtoft 005F  
                              _T4CKDIV 0117                                _T5CKDIV 011D  
                              i1l10014 09BA                                i1l10032 0D7B  
                              i1l10035 0ECB                                i1l10036 0EC9  
                              i1l10029 0B98                                i1l10037 0ECB  
                              i1l11152 0B6A                                i1l11153 0B6A  
                              i1l12236 0B81                                i1l12237 0B81  
                              i1l13315 0F9B                                i1l14211 04FA  
                              i1l13316 0FA1                                i1l14220 054A  
                              i1l14212 0504                                i1l13317 0FAE  
                              i1l14221 0551                                i1l14213 0540  
                              i1l13333 0ACC                                i1l13318 0FB9  
                              i1l14214 051A                                i1l13334 0ACC  
                              i1l13319 0FC4                                i1l14215 050E  
                              i1l14216 051F                                i1l14217 0520  
                              i1l14218 0531                                i1l14219 053F  
                              i1l17001 0B95                                i1l17111 0D74  
                              i1l17113 0D7B                                i1l17105 0D57  
                              i1l17107 0D59                                i1l17109 0D71  
                      ?_EEPROM_SetFlag 0070                                i1l17171 0FAE  
                              i1l17163 0F8E                                i1l17411 04F1  
                              i1l17173 0FB7                                i1l17165 0F94  
                              i1l17421 050E                                i1l17413 04FA  
                              i1l17501 0E48                                i1l17175 0FB9  
                              i1l17167 0F9B                                i1l17431 0531  
                              i1l17423 0515                                i1l17415 04FE  
                              i1l17511 0E68                                i1l17503 0E4D  
                              i1l16711 0F5C                                i1l17177 0FBD  
                              i1l17169 0FAA                                i1l17441 0551  
                              i1l17433 0538                                i1l17425 051A  
                              i1l17417 0504                                i1l17409 04EC  
                              i1l17505 0E55                                i1l17513 0E6E  
                              i1l17521 05BA                                i1l16801 0AC1  
                              i1l17601 0B0F                                i1l16721 0F71  
                              i1l16713 0F5F                                i1l17427 0520  
                              i1l17419 050A                                i1l17435 0540  
                              i1l17515 0E70                                i1l17507 0E5A  
                              i1l17531 05C6                                i1l17523 05BB  
                              i1l16731 0BEA                                i1l16803 0AC5  
                              i1l17603 0B14                                i1l16811 03A8  
                              i1l16723 0F74                                i1l16715 0F62  
                              i1l17437 0544                                i1l17429 052A  
                              i1l17509 0E60                                i1l17541 05E9  
                              i1l17533 05C7                                i1l17525 05BC  
                              i1l17605 09B6                                i1l16733 0BEE  
                              i1l16741 070D                                i1l16805 0AC8  
                              i1l17517 0A12                                i1l16821 03D1  
                              i1l16813 03B0                                i1l16725 0F78  
                              i1l16717 0F6A                                i1l17439 054A  
                              i1l17543 05F7                                i1l17535 05CD  
                              i1l17527 05BE                                i1l17519 05AE  
                              i1l17607 09BA                                i1l16735 0BF0  
                              i1l16751 0730                                i1l16743 0713  
                              i1l17551 0D33                                i1l16831 03E9  
                              i1l16815 03B6                                i1l16823 03D7  
                              i1l16807 039E                                i1l16727 0F7E  
                              i1l16719 0F6D                                i1l17545 05F8  
                              i1l17537 05D8                                i1l17529 05C5  
                              i1l17561 0A99                                i1l16737 0BF8  
                              i1l16729 0BE6                                i1l16761 0747  
                              i1l16753 0735                                i1l16745 0719  
                              i1l17553 0D39                                i1l16841 0406  
                              i1l16833 03EC                                i1l16825 03DD  
                              i1l16817 03BA                                i1l16809 03A4  
                              i1l16771 0B64                                i1l17491 0E82  
                              i1l17547 05FF                                i1l17539 05DE  
                              i1l17563 0AA4                                i1l17571 0EFC  
                              i1l16739 0BFD                                i1l16763 0748  
                              i1l16755 073A                                i1l16747 0720  
                              i1l16851 0E9E                                i1l17555 0D3C  
                              i1l16827 03DE                                i1l16835 03F1  
                              i1l16819 03CE                                i1l16843 040A  
                              i1l16773 0B67                                i1l16765 0B55  
                              i1l17493 0E8A                                i1l17485 0E72  
                              i1l17549 09C1                                i1l17565 0AA6  
                              i1l17581 0F19                                i1l17573 0EFF  
                              i1l16757 073E                                i1l16749 072D  
                              i1l16845 0B2B                                i1l16861 0EC4  
                              i1l16853 0EA4                                i1l17557 0D45  
                              i1l16781 0F35                                i1l16837 03FA  
                              i1l16829 03E6                                i1l16775 0B68  
                              i1l16767 0B5B                                i1l16791 0B6B  
                              i1l16951 0A60                                i1l17495 0E8E  
                              i1l17487 0E77                                i1l17567 0AA7  
                              i1l17591 0F27                                i1l17583 0F22  
                              i1l17575 0F05                                i1l16759 0743  
                              i1l16847 0B35                                i1l16863 0EC5  
                              i1l16855 0EAA                                i1l17559 0D4E  
                              i1l16783 0F3B                                i1l16839 0401  
                              i1l16769 0B5F                                i1l16793 0B71  
                              i1l16961 0A67                                i1l16953 0A61  
                              i1l17497 0E95                                i1l17489 0E7B  
                              i1l17569 0AA9                                i1l17593 0F28  
                              i1l17585 0F23                                i1l17577 0F0C  
                              i1l16849 0B3D                                i1l16865 0EC9  
                              i1l16857 0EBA                                i1l16785 0F4A  
                              i1l16777 0F2B                                i1l16795 0B75  
                              i1l16955 0A62                                i1l16947 0A59  
                              i1l17499 0E47                                i1l17595 0F29  
                              i1l17587 0F25                                i1l17579 0F12  
                              i1l16859 0EBE                                i1l16787 0F50  
                              i1l16779 0F31                                i1l16797 0B7D  
                              i1l16957 0A63                                i1l16949 0A5C  
                              i1l17589 0F26                                i1l17597 0B03  
                              i1l16789 0F57                                i1l16959 0A66  
                              i1l16799 0ABB                                i1l17599 0B07  
                              i1l16993 0B83                                i1l16995 0B92  
                              i1l16987 064C                                i1l16997 0B93  
                              i1l16999 0B94                           ?_Charge_Init 0070  
                     ?_ADC_IntrHandler 0070                                _GO_DONE 00F9  
                              _MSCKCON 001B                __end_ofi1_GPIO_WriteBit 0E9E  
                              _PWM3CR0 010F                                _PWM3CR1 0110  
                              _PWM4CR0 0115                                _PWM1CON 0016  
                              _PWM4CR1 0116                                _PWM5CR0 011B  
                              _PWM5CR1 011C                      Motor_Start@status 0053  
         __end_of_KEY_GetReleaseStatus 0A4A          __size_of_LEDTimer_IntrHandler 0031  
    __end_of_SwitchModeTimer_INTConfig 0B03                ??i1_Motor_CheckRunLimit 0070  
              ChargeDetect_GetStatus@i 004F     __end_ofi1_MotorOperationTimer_Init 0F2B  
           i1_MotorOperationTimer_Init 0EFB     __end_ofi1_MotorOperationTimer_Stop 0B17  
           i1_MotorOperationTimer_Stop 0B03                    _battery_handle_flag 003A  
                       ?_SetDeviceMode 0070                    GPIO_WriteBit@BitVal 004C  
                      __size_of___ftge 006E                            _Motor_Start 068D  
           ?_DebounceTimer_IntrHandler 0070                                ___awmod 04EC  
   __end_of_MotorOperTimer_IntrHandler 040F             _MotorOperTimer_IntrHandler 039E  
                     ??_GPIO_INTConfig 004D                i1GPIO_WriteBit@GPIO_Pin 0073  
        ChargeTimer_INTConfig@NewState 004B                 ?_EEPROM_StoreMotorData 0070  
                           ??___ftpack 0050                             _key_status 007B  
                           ??___lwtoft 0062                           __size_of_ISR 0032  
               __size_of_GetDeviceMode 0005                      ??i1_GetDeviceMode 0070  
                     ___awmod@dividend 0072                        _Motor_GetStatus 09B3  
                  __size_of_Motor_Init 005B                    __size_of_Motor_Stop 002A  
                            _GPIO_Init 0606                        _KEY_IntrHandler 0BE6  
                 end_of_initialization 0BE3              ??_ChargeTimer_IntrHandler 0070  
         __size_of_SwitchModeTimer_Cmd 001E                 __size_of_SleepLed_Init 0023  
                        ??_EEPROM_Init 004D                 GPIO_INTConfig@GPIO_Pin 004B  
              ?_LED_UnderVoltageOutput 0070         __size_of_GPIO_ReadInputDataBit 0029  
        __end_of_GPIO_ReadInputDataBit 0DF3           __end_of_EEPROM_StoreModeData 0A04  
   __size_of_LEDTimer_DispUnderVoltCmd 000E             ?_LEDTimer_DispUnderVoltCmd 0070  
                         ??_Board_Init 004B                ?_ChargeDetect_GetStatus 0070  
     __size_ofi1_GPIO_ReadInputDataBit 002B              ADC_ReadData@battery_value 0076  
     __end_of_LEDTimer_DispRunLimitCmd 0A2D                     _KEY_GetPressStatus 0A04  
                            _TIM1_Init 0A59                        _ChargeCtrl_Init 0C59  
    __end_of_DebounceTimer_IntrHandler 074B            __end_of_SleepLed_ChangeDuty 0FC5  
          __size_of_LEDTimer_INTConfig 0012                        _Motor_SetStatus 09CD  
                 _switch_mode_time_out 0045                    ?_KEY_GetPressStatus 0070  
                     ??_charge_control 0067                    _charge_detect_count 003C  
                __size_of_LEDTimer_Cmd 003D                          ?i1_Motor_Init 0070  
                     ?i1_GPIO_WriteBit 0073                          ?i1_Motor_Stop 0070  
                    __size_of_ADC_Init 001D                     __end_of_Board_Init 0C1F  
                         ?_Driver_Init 0070                             ?_GPIO_Init 004B  
       __end_of_LED_UnderVoltageOutput 0A99                        _ChargeTimer_Cmd 0CB2  
                 ??_KEY_GetPressStatus 004B                   _ChargeTimer_GetCount 09E5  
               GPIO_INTConfig@NewState 004C                          _GetDeviceMode 09BB  
       __end_of_ChargeDetect_GetStatus 0800                        ??_SetDeviceMode 004B  
    __size_ofi1_LED_UnderVoltageOutput 000E            __end_of_LED_DisplayRunLimit 068D  
            ?i1_LED_UnderVoltageOutput 0070                      __size_of_LED_Init 006F  
    __end_of_LEDTimer_DispUnderVoltCmd 0A3B           MotorOperationTimer_Init@time 004B  
                  __end_of_EEPROM_Init 0B55                         _sleep_led_duty 0038  
                           ?_TIM1_Init 0070                      __size_of_KEY_Init 0020  
                  _Motor_CheckRunLimit 0AAA   __end_of_SwitchModeTimer_GetINTStatus 0A59  
__size_of_SwitchModeTimer_GetINTStatus 000F           _SwitchModeTimer_GetINTStatus 0A4A  
                 _KEY_GetReleaseStatus 0A3B                         __end_of___ftge 04EC  
                     _motor_intr_count 007D                          __pidataCOMMON 09B1  
              __end_of_Motor_GetStatus 09B6                          _SleepLed_Init 0D10  
                         _LEDTimer_Cmd 074B                  GPIO_WriteBit@GPIO_Pin 004B  
              __end_of_KEY_IntrHandler 0C02                    start_initialization 0BCB  
                       ??i1_Motor_Init 0070                            __end_of_ISR 0F8E  
    __size_of_ChargeDetect_IntrHandler 0015                         ??i1_Motor_Stop 0077  
            ?_ChargeDetect_IntrHandler 0070              _motor_timing_running_flag 006A  
                 __size_of_Charge_Init 0007                   ?_Motor_CheckRunLimit 0070  
       GPIO_ReadInputDataBit@bitstatus 004C   __size_of_Motor_HandleStatusChangeEvt 0117  
    Motor_HandleStatusChangeEvt@status 0055                  ?_ChargeTimer_GetCount 004B  
                       ?_GetDeviceMode 0070                     _Battery_HandleData 0221  
              __end_of_ChargeCtrl_Init 0C76             ??_MotorOperationTimer_Init 004B  
           ??_MotorOperationTimer_Stop 004B                __end_of_Motor_SetStatus 09D5  
                         ??_Motor_Init 004B                  _under_volt_display_En 0046  
                         ??_Motor_Stop 004F                               ??___ftge 0059  
                  ?_Battery_HandleData 004B                  ?_KEY_GetReleaseStatus 0070  
                     ??_EEPROM_SetFlag 004D                            __pdataBANK0 0069  
                       ?_SleepLed_Init 004B                     _SleepLedTimer_Init 0C3C  
              KEY_Init@GPIO_InitStruct 0050               _LEDTimer_DispRunLimitCmd 0A1F  
       Battery_HandleData@average_data 0053         __size_of_ChargeTimer_INTConfig 0012  
        __end_of_ChargeTimer_INTConfig 0AF1                      __size_of___ftpack 007D  
       i1LED_UnderVoltageOutput@BitVal 0079                   _EEPROM_StoreModeData 09F9  
                  ?_SleepLedTimer_Init 0070                            __pbssCOMMON 007D  
                    __size_of___lwtoft 0019                          __pcstackBANK0 0047  
                __end_of_GPIO_WriteBit 0DA3                __end_of_ChargeTimer_Cmd 0CD1  
           LEDTimer_INTConfig@NewState 004B               ??_LED_DisplayMotorStatus 0050  
                        _battery_value 0020                    Battery_HandleData@i 0057  
                 ??_Battery_HandleData 004D                  ??_Motor_CheckRunLimit 004B  
                          ??_GPIO_Init 004C                         _key_press_flag 0040  
                   __end_of_Motor_Init 05AD                     __end_of_Motor_Stop 0E46  
                          _EEPROM_Init 0B40                ChargeTimer_Cmd@NewState 004B  
              i1_GPIO_ReadInputDataBit 0E46                   ??_SleepLedTimer_Init 004D  
       __size_ofi1_Motor_CheckRunLimit 0011            ?i1_MotorOperationTimer_Init 0070  
        __end_ofi1_Motor_CheckRunLimit 0AAA            ?i1_MotorOperationTimer_Stop 0070  
                        ?_ADC_ReadData 0070                            ??_TIM1_Init 0070  
                      i1_GetDeviceMode 09B6                ??_EEPROM_StoreMotorData 004D  
         __end_of_LEDTimer_IntrHandler 0F5C                           ?_Motor_Start 0070  
                             ?___awmod 0070            ??_DebounceTimer_IntrHandler 0073  
          ?_MotorOperTimer_IntrHandler 0070   __size_of_SwitchModeTimer_IntrHandler 0016  
                  _SwitchModeTimer_Cmd 0C76                       ?_Motor_GetStatus 0070  
             ?_LED_VoltageChargeOutput 0070                  ?_EEPROM_StoreModeData 0070  
                     ?_KEY_IntrHandler 0070                               _ADC_Init 0C1F  
                          _device_mode 003E      LEDTimer_DispUnderVoltCmd@NewState 004B  
                            _key_press 003F                   LEDTimer_Cmd@NewState 004B  
           ?_SleepLedTimer_IntrHandler 0070                        ??_GetDeviceMode 004B  
               ??_ChargeTimer_GetCount 004D                   ?_SwitchModeTimer_Cmd 0070  
             __size_of_ADC_IntrHandler 002E                __size_of_Battery_Detect 00F7  
           ?_SwitchModeTimer_INTConfig 0070                   __size_of_Driver_Init 001E  
                    interrupt_function 0004                               _LED_Init 040F  
                     ?_ChargeCtrl_Init 0070                         ??_ADC_ReadData 0072  
                             _KEY_Init 0CF0            ??_LEDTimer_DispUnderVoltCmd 004B  
     LEDTimer_DispRunLimitCmd@NewState 004B                 ??_KEY_GetReleaseStatus 004B  
                     ?_Motor_SetStatus 0070                   __end_ofi1_Motor_Init 0606  
                 __end_ofi1_Motor_Stop 0D57                        ??_SleepLed_Init 004D  
              i1Motor_SetStatus@status 0071                          _sleep_led_dir 0044  
                     ?_ChargeTimer_Cmd 0070       __end_ofi1_LED_UnderVoltageOutput 0A1F  
      __size_of_LED_DisplayMotorStatus 002F              _DebounceTimer_IntrHandler 070D  
                ??_SwitchModeTimer_Cmd 004B      __end_of_SleepLedTimer_IntrHandler 0ACD  
                           _ADC_Enable 0B82              ??i1_GPIO_ReadInputDataBit 0071  
              __end_ofi1_GetDeviceMode 09BB                      _ChargeDetect_Init 0DA3  
                       GPIO_Init@GPIOx 004D                     ?_ChargeDetect_Init 0070  
                _GPIO_ReadInputDataBit 0DCA             __end_of_LEDTimer_INTConfig 0ADF  
       LED_DisplayMotorStatus@GPIO_Pin 004F        __end_of_LED_VoltageChargeOutput 0A79  
     __end_of_ChargeDetect_IntrHandler 0B40                     Battery_Detect@mode 0064  
                     __size_of___awmod 0066                    ??_ChargeDetect_Init 004F  
                             ___ftpack 0321           ?_Motor_HandleStatusChangeEvt 0070  
               ??_EEPROM_StoreModeData 004D                               ___lwtoft 0BB2  
                          _key_release 0042              _LEDTimer_DispUnderVoltCmd 0A2D  
         __size_of_SleepLed_ChangeDuty 0037               ?_ChargeTimer_IntrHandler 0070  
              __size_of_GPIO_INTConfig 0040    __size_ofi1_MotorOperationTimer_Init 0030  
           GPIO_ReadInputDataBit@GPIOx 004D    __size_ofi1_MotorOperationTimer_Stop 0014  
              ChargeCtrl_Output@BitVal 0051                          ?_EEPROM_Write 004B  
                 _LEDTimer_IntrHandler 0F2B              __end_of_ChargeDetect_Init 0DCA  
         LED_UnderVoltageOutput@BitVal 0051    __size_of_MotorOperTimer_IntrHandler 0071  
          __size_of_KEY_GetPressStatus 000D                          __size_of_main 007D  
             __size_ofi1_GPIO_WriteBit 002D            LED_DisplayMotorStatus@GPIOx 0051  
          SwitchModeTimer_Cmd@NewState 004B                               clear_ram 09DD  
           ??_LEDTimer_DispRunLimitCmd 004B                  i1GPIO_WriteBit@BitVal 0074  
                __end_of_SetDeviceMode 09DD                      ??_ADC_IntrHandler 0078  
               _LED_DisplayMotorStatus 0ECC       i1GPIO_ReadInputDataBit@bitstatus 0071  
        GPIO_ReadInputDataBit@GPIO_Pin 004B                   _detect_under_voltage 003D  
             GPIO_Init@GPIO_InitStruct 004B           __size_of_LED_DisplayRunLimit 0041  
                 __size_of_Motor_Start 0040                          ??_Charge_Init 0052  
                Motor_SetStatus@status 004C          ??_Motor_HandleStatusChangeEvt 0054  
                    _ChargeCtrl_Output 0A79                      SleepLed_Init@duty 004B  
                 __end_of_ADC_ReadData 0D7C                     ?_ChargeCtrl_Output 0070  
       i1MotorOperationTimer_Init@time 0070                         ??_EEPROM_Write 004C  
                ?_LEDTimer_IntrHandler 0070                             _KEY_DeInit 0B99  
                       _Battery_Detect 012A                               intlevel1 0000  
                          ?_ADC_Enable 0070                           _motor_status 007C  
             i1_LED_UnderVoltageOutput 0A11                    ??_ChargeCtrl_Output 004F  
              __size_of_charge_control 003C                           ?_EEPROM_Init 0070  
         ?_SwitchModeTimer_IntrHandler 0070                  __size_ofi1_Motor_Init 0059  
                     ?i1_GetDeviceMode 0070                  __size_ofi1_Motor_Stop 0024  
                 i1GPIO_WriteBit@GPIOx 0076                 ?_GPIO_ReadInputDataBit 004B  
               Battery_Detect@adc_data 0065         __size_of_EEPROM_StoreMotorData 0029  
        __end_of_EEPROM_StoreMotorData 0E1C             charge_control@charge_count 0067  
      __end_of_ChargeTimer_IntrHandler 0B82              __end_of_ChargeCtrl_Output 0A89  
                    ADC_Enable@channel 0072            __end_of_Motor_CheckRunLimit 0ABB  
    __size_of_MotorOperationTimer_Init 003B               _ChargeDetect_IntrHandler 0B2B  
            ?_MotorOperationTimer_Init 0070      __size_of_MotorOperationTimer_Stop 0014  
            ?_MotorOperationTimer_Stop 0070         ChargeCtrl_Init@GPIO_InitStruct 0050  
                _ChargeTimer_INTConfig 0ADF               ??_LED_UnderVoltageOutput 004F  
     ChargeDetect_Init@GPIO_InitStruct 0050                 __end_of_Battery_Detect 0221  
                         i1_Motor_Init 05AD            __size_of_Battery_HandleData 0083  
                         i1_Motor_Stop 0D33    __end_of_SwitchModeTimer_IntrHandler 0B6B  
          _SwitchModeTimer_IntrHandler 0B55                       Motor_Init@status 004C  
             ??_ChargeDetect_GetStatus 004E                    __end_of_Charge_Init 09CD  
          ??_SleepLedTimer_IntrHandler 0070             __size_of_ChargeDetect_Init 0027  
     __size_of_LED_VoltageChargeOutput 0010            ??_SwitchModeTimer_INTConfig 004B  
        ??_SwitchModeTimer_IntrHandler 0070     __size_of_DebounceTimer_IntrHandler 003E  
          __size_of_SleepLedTimer_Init 001D  
